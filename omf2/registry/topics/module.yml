metadata:
  version: 2.1.0
  last_updated: '2025-10-09'
  author: OMF Development Team
  description: Module Topics mit QoS/Retain und Publisher/Subscriber-Mapping (erweitert mit Session-Analyse)
  note: "Serial numbers mapped in docs/06-integrations/00-REFERENCE/module-serial-mapping.md"
category: module
module_topics:
- topic: module/v1/ff/SVR3QA0022/connection
  qos: 1
  retain: 1
  schema: module_v1_ff_serial_connection.schema.json
  description: "HBW Connection-Status (Will Message)"
  assumption: "HBW serialNumber: SVR3QA0022 connectionState: CONNECTIONBROKEN"
  # APS as-IS Observation:
  observed_publisher_aps: "NodeRed (OPC-UA Bridge for HBW)"
  observed_subscriber_aps: "CCU-Backend (Pairing Module), Dashboards"
  # OMF2 Guidance (manual configuration):
  semantic_role: connection_status
  triggers: null
  omf2_usage: "ModuleManager → subscribe for HBW connection state (LWT detection)"
  # Verification:
  verified: false
  data_source: "Not found in orderBlueLocal (HBW already connected)"
- topic: module/v1/ff/SVR3QA0022/state
  qos: 2
  retain: 1
  schema: module_v1_ff_serial_state.schema.json
  description: "HBW State - loads inventory, actionState, orderId"
  assumption: "HBW loads: WHITE,NFC,Position, loadTimestamp, actionState FINISHED, opcuaState: connected"
  # APS as-IS Observation:
  observed_publisher_aps: "NodeRed (OPC-UA → MQTT Bridge)"
  observed_subscriber_aps: "CCU-Backend (Stock Management), Dashboards"
  # OMF2 Guidance (manual configuration):
  semantic_role: warehouse_state
  triggers: null
  omf2_usage: "StockManager → subscribe for HBW inventory state (includes orderId when processing)"
  # Verification:
  verified: true
  data_source: "Session orderBlueLocal - 6 messages (most frequent module state)"
- topic: module/v1/ff/SVR3QA0022/order
  qos: 2
  retain: 0
  schema: module_v1_ff_serial_order.schema.json
  description: "HBW Production Order - PICK/DROP commands with orderId"
  assumption: "TODO"
  # APS as-IS Observation:
  observed_publisher_aps: "CCU-Backend (Production Module - sendProductionCommand)"
  observed_subscriber_aps: "NodeRed (forwards to HBW via OPC-UA)"
  # OMF2 Guidance (manual configuration):
  semantic_role: production_command
  triggers: module_production
  omf2_usage: "OrderManager → publish production orders to HBW (via NodeRed bridge)"
  # Verification:
  verified: true
  data_source: "Session orderBlueLocal - 2 messages, Code: modules/production/production.js"
- topic: module/v1/ff/SVR3QA0022/factsheet
  qos: 2
  retain: 1
  schema: module_v1_ff_serial_factsheet.schema.json
  description: "HBW Factsheet - capabilities, moduleActions (PICK, DROP), loadPositions"
  assumption: "HBW moduleActions actionType PICK DROP, loadPositions"
  # APS as-IS Observation:
  observed_publisher_aps: "NodeRed (OPC-UA → MQTT Bridge)"
  observed_subscriber_aps: "CCU-Backend, Dashboards"
  # OMF2 Guidance (manual configuration):
  semantic_role: capability_announcement
  triggers: null
  omf2_usage: "ModuleManager → subscribe for HBW capabilities (startup discovery)"
  # Verification:
  verified: true
  data_source: "Session orderBlueLocal - 2 messages (startup + update)"
- topic: module/v1/ff/SVR3QA0022/instantAction
  qos: 2
  retain: 0
  schema: module_v1_ff_serial_instantAction.schema.json
  description: "TODO"
- topic: module/v1/ff/SVR4H76449/connection
  qos: 1
  retain: 1
  schema: module_v1_ff_serial_connection.schema.json
  description: "DRILL serialNumber: SVR4H76449 connectionState: ONLINE"
- topic: module/v1/ff/SVR4H76449/state
  qos: 2
  retain: 1
  schema: module_v1_ff_serial_state.schema.json
  description: "DRILL actionState command factsheetRequest state: FINISHED, opcuaState: connected"
- topic: module/v1/ff/SVR4H76449/order
  qos: 2
  retain: 0
  schema: module_v1_ff_serial_order.schema.json
  description: "DRILL Production Order - PICK/DRILL/DROP commands with orderId"
  assumption: "TODO"
  # APS as-IS Observation:
  observed_publisher_aps: "CCU-Backend (Production Module - sendProductionCommand)"
  observed_subscriber_aps: "NodeRed (OPC-UA Bridge for DRILL - no TXT)"
  # OMF2 Guidance (manual configuration):
  semantic_role: production_command
  triggers: module_production
  omf2_usage: "OrderManager → publish production orders to DRILL (via NodeRed)"
  omf2_note: "DRILL has NO TXT-Controller - requires NodeRed OPC-UA bridge"
  # Verification:
  verified: false
  data_source: "Not found in orderBlueLocal (DRILL not used in this workflow)"
- topic: module/v1/ff/SVR4H76449/factsheet
  qos: 2
  retain: 1
  schema: module_v1_ff_serial_factsheet.schema.json
  description: "DRILL Factsheet - capabilities, moduleActions (PICK, DRILL, DROP)"
  assumption: "DRILL moduleActions actionType PICK DRILL DROP"
  # APS as-IS Observation:
  observed_publisher_aps: "NodeRed (OPC-UA → MQTT Bridge)"
  observed_subscriber_aps: "CCU-Backend, Dashboards"
  # OMF2 Guidance (manual configuration):
  semantic_role: capability_announcement
  triggers: null
  omf2_usage: "ModuleManager → subscribe for DRILL capabilities"
  # Verification:
  verified: true
  data_source: "Session orderBlueLocal - 2 messages"
- topic: module/v1/ff/SVR4H76449/instantAction
  qos: 2
  retain: 0
  schema: module_v1_ff_serial_instantAction.schema.json
  description: "TODO"
- topic: module/v1/ff/SVR3QA2098/connection
  qos: 1
  retain: 1
  schema: module_v1_ff_serial_connection.schema.json
  description: "MILL serialNumber: SVR3QA2098 connectionState: CONNECTIONBROKEN"
- topic: module/v1/ff/SVR3QA2098/state
  qos: 2
  retain: 1
  schema: module_v1_ff_serial_state.schema.json
  description: "MILL actionState command factsheetRequest state: FINISHED, opcuaState: connected"
- topic: module/v1/ff/SVR3QA2098/order
  qos: 2
  retain: 0
  schema: module_v1_ff_serial_order.schema.json
  description: "MILL Production Order - PICK/MILL/DROP commands with orderId"
  assumption: "MILL"
  # APS as-IS Observation:
  observed_publisher_aps: "CCU-Backend (Production Module - sendProductionCommand)"
  observed_subscriber_aps: "NodeRed (OPC-UA Bridge for MILL - no TXT)"
  # OMF2 Guidance (manual configuration):
  semantic_role: production_command
  triggers: module_production
  omf2_usage: "OrderManager → publish production orders to MILL (via NodeRed)"
  omf2_note: "MILL has NO TXT-Controller - requires NodeRed OPC-UA bridge"
  # Verification:
  verified: false
  data_source: "Not found in orderBlueLocal (MILL not used in this workflow)"
- topic: module/v1/ff/SVR3QA2098/factsheet
  qos: 2
  retain: 1
  schema: module_v1_ff_serial_factsheet.schema.json
  description: "MILL Factsheet - capabilities, moduleActions (PICK, MILL, DROP)"
  assumption: "MILL moduleActions actionType PICK MILL DROP"
  # APS as-IS Observation:
  observed_publisher_aps: "NodeRed (OPC-UA → MQTT Bridge)"
  observed_subscriber_aps: "CCU-Backend, Dashboards"
  # OMF2 Guidance (manual configuration):
  semantic_role: capability_announcement
  triggers: null
  omf2_usage: "ModuleManager → subscribe for MILL capabilities"
  # Verification:
  verified: true
  data_source: "Session orderBlueLocal - 2 messages"
- topic: module/v1/ff/SVR3QA2098/instantAction
  qos: 2
  retain: 0
  schema: module_v1_ff_serial_instantAction.schema.json
  description: "TODO"
- topic: module/v1/ff/SVR4H76530/connection
  qos: 1
  retain: 1
  schema: module_v1_ff_serial_connection.schema.json
  description: "AIQS Connection-Status (direkt vom TXT-Controller via MQTT)"
  assumption: "AIQS serialNumber: SVR4H76530 connectionState: ONLINE"
  # APS as-IS Observation:
  observed_publisher_aps: "AIQS TXT-Controller (MQTT direkt, Will Message)"
  observed_subscriber_aps: "CCU-Backend (Pairing), Dashboards"
  # OMF2 Guidance (manual configuration):
  semantic_role: connection_status_direct
  triggers: null
  omf2_usage: "ModuleManager → subscribe for AIQS connection (RELIABLE - direct MQTT LWT)"
  omf2_note: "AIQS has TXT - connection status via MQTT direkt (independent of NodeRed)"
  # Verification:
  verified: true
  data_source: "Live System: AIQS shows connected even when NodeRed offline"
- topic: module/v1/ff/SVR4H76530/state
  qos: 2
  retain: 1
  schema: module_v1_ff_serial_state.schema.json
  description: "AIQS State - actionState, orderId (direkt vom TXT-Controller)"
  assumption: "AIQS actionState state FINISHED, opcuaState: connected"
  # APS as-IS Observation:
  observed_publisher_aps: "AIQS TXT-Controller (via MQTT direkt)"
  observed_subscriber_aps: "CCU-Backend, Dashboards"
  # OMF2 Guidance (manual configuration):
  semantic_role: module_state_direct
  triggers: null
  omf2_usage: "OrderManager → subscribe for AIQS state (FAST - direct from TXT, no NodeRed)"
  omf2_note: "AIQS has TXT - sends state DIRECTLY via MQTT (faster than NodeRed/OPC-UA path)"
  # Verification:
  verified: true
  data_source: "Session orderBlueLocal - 2 messages, Live System: AIQS online when NodeRed offline"
- topic: module/v1/ff/SVR4H76530/order
  qos: 2
  retain: 0
  schema: module_v1_ff_serial_order.schema.json
  description: "AIQS Production Order - PICK/CHECK_QUALITY/DROP commands with orderId"
  assumption: "TODO"
  # APS as-IS Observation:
  observed_publisher_aps: "CCU-Backend (Production Module - sendProductionCommand)"
  observed_subscriber_aps: "AIQS TXT-Controller or NodeRed (OPC-UA Bridge)"
  # OMF2 Guidance (manual configuration):
  semantic_role: production_command
  triggers: module_production
  omf2_usage: "OrderManager → publish production orders to AIQS"
  omf2_note: "AIQS has TXT-Controller AND OPC-UA - can receive via both paths"
  # Verification:
  verified: false
  data_source: "Not found in orderBlueLocal (AIQS not used in this workflow)"
- topic: module/v1/ff/SVR4H76530/factsheet
  qos: 2
  retain: 1
  schema: module_v1_ff_serial_factsheet.schema.json
  description: "AIQS Factsheet - capabilities, moduleActions (direkt vom TXT-Controller)"
  assumption: "AIQS moduleActions actionType PICK CHECK_QUALITY DROP"
  # APS as-IS Observation:
  observed_publisher_aps: "AIQS TXT-Controller (via MQTT direkt)"
  observed_subscriber_aps: "CCU-Backend, Dashboards"
  # OMF2 Guidance (manual configuration):
  semantic_role: capability_announcement_direct
  triggers: null
  omf2_usage: "ModuleManager → subscribe for AIQS capabilities (FAST - direct from TXT)"
  omf2_note: "AIQS has TXT - sends factsheet DIRECTLY via MQTT at startup"
  # Verification:
  verified: true
  data_source: "Session orderBlueLocal - 2 messages, Live System confirmed"
- topic: module/v1/ff/SVR4H76530/instantAction
  qos: 2
  retain: 0
  schema: module_v1_ff_serial_instantAction.schema.json
  description: "TODO"
- topic: module/v1/ff/SVR4H73275/connection
  qos: 1
  retain: 1
  schema: module_v1_ff_serial_connection.schema.json
  description: "DPS Connection-Status (direkt vom TXT-Controller via MQTT)"
  assumption: "DPS serialNumber: SVR4H73275 connectionState: ONLINE"
  # APS as-IS Observation:
  observed_publisher_aps: "DPS TXT-Controller (MQTT direkt, Will Message)"
  observed_subscriber_aps: "CCU-Backend (Pairing), Dashboards"
  # OMF2 Guidance (manual configuration):
  semantic_role: connection_status_direct
  triggers: null
  omf2_usage: "ModuleManager → subscribe for DPS connection (RELIABLE - direct MQTT LWT)"
  omf2_note: "DPS has TXT - connection status via MQTT direkt (independent of NodeRed)"
  # Verification:
  verified: true
  data_source: "Live System: DPS shows connected even when NodeRed offline"
- topic: module/v1/ff/SVR4H73275/state
  qos: 2
  retain: 1
  schema: module_v1_ff_serial_state.schema.json
  description: "DPS State - actionState, orderId (direkt vom TXT-Controller)"
  assumption: "DPS actionState command factsheetRequest state: FINISHED, opcuaState: connected"
  # APS as-IS Observation:
  observed_publisher_aps: "DPS TXT-Controller (via MQTT direkt)"
  observed_subscriber_aps: "CCU-Backend, Dashboards"
  # OMF2 Guidance (manual configuration):
  semantic_role: module_state_direct
  triggers: null
  omf2_usage: "OrderManager → subscribe for DPS state (FAST - direct from TXT, no NodeRed)"
  omf2_note: "DPS has TXT - sends state DIRECTLY via MQTT (faster than NodeRed/OPC-UA path)"
  # Verification:
  verified: true
  data_source: "Session orderBlueLocal - 2 messages, Live System: DPS online when NodeRed offline"
- topic: module/v1/ff/SVR4H73275/order
  qos: 2
  retain: 0
  schema: module_v1_ff_serial_order.schema.json
  description: "DPS Production Order - PICK/DROP commands with orderId"
  assumption: "TODO"
  # APS as-IS Observation:
  observed_publisher_aps: "CCU-Backend (Production Module - sendProductionCommand)"
  observed_subscriber_aps: "DPS TXT-Controller or NodeRed (OPC-UA Bridge)"
  # OMF2 Guidance (manual configuration):
  semantic_role: production_command
  triggers: module_production
  omf2_usage: "OrderManager → publish production orders to DPS"
  omf2_note: "DPS has TXT-Controller AND OPC-UA - can receive via both paths"
  # Verification:
  verified: false
  data_source: "Not found in orderBlueLocal (DPS not used in this workflow)"
- topic: module/v1/ff/SVR4H73275/factsheet
  qos: 2
  retain: 1
  schema: module_v1_ff_serial_factsheet.schema.json
  description: "DPS Factsheet - capabilities, moduleActions (direkt vom TXT-Controller)"
  assumption: "DPS moduleActions actionType PICK actionScope ORDER, actionType DROP actionScope ORDER"
  # APS as-IS Observation:
  observed_publisher_aps: "DPS TXT-Controller (via MQTT direkt)"
  observed_subscriber_aps: "CCU-Backend, Dashboards"
  # OMF2 Guidance (manual configuration):
  semantic_role: capability_announcement_direct
  triggers: null
  omf2_usage: "ModuleManager → subscribe for DPS capabilities (FAST - direct from TXT)"
  omf2_note: "DPS has TXT - sends factsheet DIRECTLY via MQTT at startup"
  # Verification:
  verified: true
  data_source: "Session orderBlueLocal - 2 messages, Live System confirmed"
- topic: module/v1/ff/SVR4H73275/instantAction
  qos: 2
  retain: 0
  schema: module_v1_ff_serial_instantAction.schema.json
  description: "DPS instantAction actionType setStatusLED metadata yellow true"
- topic: module/v1/ff/CHRG0/connection
  qos: 1
  retain: 1
  schema: wildcard.schema.json
  description: "TODO"
- topic: module/v1/ff/CHRG0/state
  qos: 2
  retain: 1
  schema: wildcard.schema.json
  description: "TODO"
- topic: module/v1/ff/CHRG0/order
  qos: 1
  retain: 0
  schema: wildcard.schema.json
  description: "TODO"
- topic: module/v1/ff/CHRG0/factsheet
  qos: 2
  retain: 1
  schema: wildcard.schema.json
  description: "TODO"

# ==============================================================================
# MODULE ARCHITECTURE - VERIFIED
# ==============================================================================
#
# Kritische Erkenntnis aus Live-System und Session-Analyse:
#
# ASYMMETRISCHE ARCHITEKTUR (Commands vs. Telemetrie):
#
# 1. COMMANDS (CCU → Module):
#    CCU-Backend → MQTT (module/.../order) → NodeRed subscribed → OPC-UA → SPS
#    
#    - ✅ Gilt für ALLE Module (HBW, MILL, DRILL, DPS, AIQS)
#    - ✅ NodeRed ist ZWINGEND für Production Commands
#    - ✅ Verified: NodeRed Function "sub order" subscribes zu module/.../order
#
# 2. TELEMETRIE (Module → CCU):
#
#    A) Module MIT TXT-Controller (DPS, AIQS):
#       TXT-Controller → MQTT DIREKT → module/v1/ff/<serial>/state
#       TXT-Controller → MQTT DIREKT → module/v1/ff/<serial>/connection
#       TXT-Controller → MQTT DIREKT → module/v1/ff/<serial>/factsheet
#       
#       - ✅ DIREKT ohne NodeRed
#       - ✅ Schnell, zuverlässig
#       - ✅ Funktioniert auch wenn NodeRed offline!
#       - ✅ Verified: Live-System zeigt DPS/AIQS online trotz NodeRed-Problem
#
#    B) Module OHNE TXT-Controller (HBW, MILL, DRILL):
#       SPS → OPC-UA → NodeRed → MQTT → module/v1/ff/NodeRed/<serial>/state
#       
#       - ✅ NUR über NodeRed möglich
#       - ❌ Wenn NodeRed offline → Module offline!
#       - ✅ Verified: Live-System zeigt HBW/MILL/DRILL offline bei NodeRed-Problem
#
# 3. NodeRed State-Enrichment (PARALLEL für DPS/AIQS):
#    SPS → OPC-UA → NodeRed → enriches mit orderId → MQTT
#    
#    - ✅ Parallel zu TXT-MQTT
#    - ✅ Fügt orderId aus Workflow-Context hinzu
#    - ✅ module/v1/ff/NodeRed/<serial>/state (enriched version)
#
# ZUSAMMENFASSUNG:
#
# DPS/AIQS haben ZWEI State-Quellen:
#   - module/v1/ff/SVR4H73275/state         ← TXT direkt (schnell, zuverlässig)
#   - module/v1/ff/NodeRed/SVR4H73275/state ← NodeRed enriched (mit orderId)
#
# HBW/MILL/DRILL haben EINE State-Quelle:
#   - module/v1/ff/NodeRed/SVR3QA0022/state ← NUR NodeRed (REQUIRED)
#
# TXT-Controller Rolle:
#   - ❌ NICHT für Production Commands (gehen über NodeRed/OPC-UA)
#   - ✅ NUR für: State/Connection/Factsheet (Telemetrie)
#   - ✅ NUR für: Sensoren/Kamera (/j1/txt/1/i/*)
#
# Data Sources:
# - Session: orderBlueLocal_orderRedCloud_20251009_103935
# - Live System: NodeRed-Offline-Test (2025-10-09)
# - Code: modules/production/production.js, NodeRed flows.json
# - Verified: 2025-10-09