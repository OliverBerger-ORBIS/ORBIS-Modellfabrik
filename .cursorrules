# OMF Modellfabrik - Cursor AI Regeln

## üö® KRITISCHE VERBOTE (POSITION 1 - H√ñCHSTE PRIORIT√ÑT)

### Streamlit-App-Verbot (ABSOLUT KRITISCH)
- **NIEMALS Streamlit-Apps starten:** `streamlit run` ‚ùå
- **Grund:** Verursacht Race-Conditions, Connection-Probleme, MQTT-Konflikte
- **Verboten:** `streamlit run omf2/omf.py`, `streamlit run omf/helper_apps/...`
- **Erlaubt:** Nur User startet Streamlit-Apps
- **Konsequenz:** Mehrere Instanzen f√ºhren zu MQTT-Connection-Chaos
- **Regel:** Agent startet KEINE Streamlit-Apps - NUR User!

## üéØ ZENTRALE ENTWICKLUNGSREGELN

### Import-Standards (KRITISCH)
- **Absolute Imports f√ºr externe Module:** `from omf.dashboard.tools.logging_config import get_logger` ‚úÖ
- **Relative Imports f√ºr Paket-interne Module:** `from .graph_analyzer import GraphAnalyzer` ‚úÖ
- **Standard Library Imports:** `import json, from pathlib import Path` ‚úÖ
- **KEINE sys.path.append Hacks:** `sys.path.append(...)` ‚ùå
- **Import-Reihenfolge:** Standard Library ‚Üí Third Party ‚Üí Local (absolute) ‚Üí Local (relative)

### Pfad-Standards (KRITISCH)
- **Source-Pfade (Paket-relativ):** `Path(__file__).parent` f√ºr Paket-interne Pfade ‚úÖ
- **Data-Pfade (Projekt-root-relativ):** `project_root / "data/omf-data/sessions"` f√ºr Nutzdaten ‚úÖ
- **KEINE absoluten Pfade:** `/Users/oliver/Projects/ORBIS-Modellfabrik/path/to/file` ‚ùå
- **KEINE relativen Pfade:** `../path/to/file` ‚ùå
- **Unterscheidung:** Source-Pfade vs. Data-Pfade je nach Verwendungszweck

### Projekt-Struktur
- **Aktive Sourcen:** `omf/dashboard/` (Produktiv-Dashboard)
- **Helper-Apps:** `omf/helper_apps/`, `omf/analysis_tools/` (Separate Anwendungen)
- **Dokumentation:** `docs/` (Alle Projekt-Dokumente)
- **Session-Daten:** `data/omf-data/sessions/` (SQLite + Log-Dateien)
- **Log-Dateien:** `data/logs/` (nicht mehr ins Projekt-Root)

### Code-Qualit√§t
- **Black:** Line-length 120, Ruff ignoriert E501
- **Pre-commit Hooks:** Immer befolgen, nie mit --no-verify √ºberspringen
- **Tests:** Nach jeder √Ñnderung ausf√ºhren
- **Commits:** H√§ufig und mit funktionierendem Stand

### Test-Standards
- **Test-Verzeichnis:** `tests/` (Alle Tests hier)
- **Test-Struktur:** `tests/test_omf/`, `tests/test_helper_apps/`
- **Test-Imports:** Absolute Imports auch in Tests verwenden
- **Test-Namen:** `test_*.py` oder `*_test.py`
- **Test-Ausf√ºhrung:** `python -m pytest tests/`
- **Virtual Environment:** Immer `.venv` aktivieren: `source .venv/bin/activate`
- **Test-Environment:** Alle Tests mit aktiviertem .venv ausf√ºhren
- **Terminal Commands:** Immer `.venv` aktivieren vor pip install, git commit, etc.

### Branch-spezifische Test-Regeln
- **Helper-Branches:** Nur `tests/test_helper_apps/` ausf√ºhren
- **Main-Branch:** Alle Tests in `tests/` ausf√ºhren
- **Helper-Test-Befehl:** `python -m pytest tests/test_helper_apps/`
- **Automatische Ausf√ºhrung:** `python run_tests_by_branch.py`

### Entwicklungsprozess-Regeln
- **Neue Anforderungen:** Erst Analyse, dann Zusammenfassung, dann Implementierung
- **Analyse-Phase:** Codebase durchsuchen, bestehende Komponenten verstehen
- **Zusammenfassung:** Kurze √úbersicht der geplanten √Ñnderungen
- **Freigabe:** Warten auf explizite Best√§tigung vor Implementierung
- **Keine direkte Implementierung** ohne vorherige Analyse und Freigabe
- **Virtual Environment:** Immer `.venv` aktivieren vor Tests und Entwicklung
- **Dependencies:** Alle Tests mit aktiviertem .venv ausf√ºhren

### Git-Workflow-Regeln
- **Commits:** NUR nach expliziter Best√§tigung des Users
- **Keine automatischen Commits:** Niemals `git commit` ohne User-Freigabe
- **Staging:** `git add` ist erlaubt, aber nicht `git commit`
- **Push:** Nur nach User-Best√§tigung
- **Workflow:** √Ñnderungen ‚Üí User-Freigabe ‚Üí Commit ‚Üí Push

### Dashboard-Komponenten-Regeln (KRITISCH)
- **Wrapper-Komponenten:** `show_<component_name>()` mit Tabs
- **Unterkomponenten:** `show_<specific_function>()` mit expandable sections
- **Private Funktionen:** `_show_<function>_section()` mit `_` Prefix
- **MQTT-Singleton:** `st.session_state.get("mqtt_client")` verwenden
- **Per-topic subscription:** `subscribe_many()` und `get_buffer()` verwenden
- **Error-Handling:** Try-catch f√ºr alle Gateway-Calls
- **UI-Standards:** Icons, expandable sections, Spalten-Layout
- **UI-Refresh:** Verwende `request_refresh()` statt `st.rerun()` in Komponenten
- **Logging-System:** Verwende `_init_logging_once()` f√ºr Logging-Initialisierung

### Vollst√§ndige Regeln
- **Allgemein:** `docs/03-decision-records/07-development-rules-compliance.md`
- **Dashboard-Komponenten:** `docs/03-decision-records/07-development-rules-compliance.md`

## üö® AUTOMATISCHE REGEL-BEFOLGUNG (KRITISCH)

### MANDATORY COMPLIANCE
- **JEDE Code-√Ñnderung** MUSS diese Regeln automatisch befolgen
- **KEINE Ausnahmen** ohne explizite User-Freigabe
- **Immer pr√ºfen** vor jeder Implementierung:
  - ‚úÖ Absolute Imports verwendet?
  - ‚úÖ Absolute Pfade verwendet?
  - ‚úÖ OMF-Logging-System verwendet?
  - ‚úÖ UI-Refresh Pattern verwendet?
  - ‚úÖ Pre-commit Hooks kompatibel?
  - ‚úÖ Tests erstellt/aktualisiert?

### AUTOMATISCHE VALIDIERUNG
- **Vor jeder Implementierung:** Regeln pr√ºfen
- **Nach jeder √Ñnderung:** Linting/Formatting pr√ºfen
- **Bei Fehlern:** Sofort korrigieren, nicht ignorieren
- **Bei Unsicherheit:** User fragen, nicht raten

### ENTWICKLUNGSPROZESS (MANDATORY)
1. **Analyse:** Bestehende Komponenten verstehen
2. **Regel-Check:** Alle relevanten Regeln pr√ºfen
3. **Implementierung:** Regeln automatisch befolgen
4. **Validierung:** Pre-commit Hooks, Tests, Linting
5. **Freigabe:** User-Best√§tigung vor Commit

### AUTOMATISCHE REGEL-ANWENDUNG
- **VOR jeder Code-√Ñnderung:** Development Rules pr√ºfen
- **W√ÑHREND der Implementierung:** Regeln automatisch befolgen
- **NACH jeder √Ñnderung:** `python omf/scripts/validate_development_rules.py` ausf√ºhren
- **Bei Regel-Verletzungen:** Sofort korrigieren, nicht ignorieren
- **Bei Unsicherheit:** User fragen, nicht raten

### ZWINGENDE REGELN (NIEMALS IGNORIEREN)
- **Import-Struktur:** Korrekte Reihenfolge und Paket-relative Imports
- **Pfad-Handling:** Source-Pfade (paket-relativ) vs. Data-Pfade (projekt-root-relativ)
- **OMF-Logging:** `get_logger("module.component")` statt `logging.getLogger()`
- **UI-Refresh:** `request_refresh()` statt `st.rerun()`
- **Pre-commit:** Black (120 Zeichen), Ruff, Tests

## üö® WICHTIG
Bei jeder Code-√Ñnderung diese Regeln befolgen!