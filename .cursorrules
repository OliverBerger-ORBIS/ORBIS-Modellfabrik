# OMF Modellfabrik - Cursor AI Regeln

## üéØ ZENTRALE ENTWICKLUNGSREGELN

### Import-Standards (KRITISCH)
- **NUR absolute Imports:** `from src_orbis.omf.module import Class`
- **KEINE relativen Imports:** `from ..module import Class` ‚ùå
- **KEINE sys.path.append Hacks:** `sys.path.append(...)` ‚ùå
- **KEINE lokalen Imports:** `from module import Class` ‚ùå

### Pfad-Standards (KRITISCH)
- **NUR absolute Pfade:** `/Users/oliver/Projects/ORBIS-Modellfabrik/path/to/file`
- **KEINE relativen Pfade:** `../path/to/file` ‚ùå
- **KEINE Path(__file__).parent Hacks:** `Path(__file__).parent.parent` ‚ùå
- **KEINE os.path.join Hacks:** `os.path.join(os.path.dirname(__file__), ...)` ‚ùå

### Projekt-Struktur
- **Aktive Sourcen:** `src_orbis/omf/dashboard/` (Produktiv-Dashboard)
- **Helper-Apps:** `src_orbis/helper_apps/`, `src_orbis/analysis_tools/` (Separate Anwendungen)
- **Dokumentation:** `docs_orbis/` (Alle Projekt-Dokumente)
- **Session-Daten:** `data/omf-data/sessions/` (SQLite + Log-Dateien)
- **Log-Dateien:** `data/logs/` (nicht mehr ins Projekt-Root)

### Code-Qualit√§t
- **Black:** Line-length 120, Ruff ignoriert E501
- **Pre-commit Hooks:** Immer befolgen, nie mit --no-verify √ºberspringen
- **Tests:** Nach jeder √Ñnderung ausf√ºhren
- **Commits:** H√§ufig und mit funktionierendem Stand

### Test-Standards
- **Test-Verzeichnis:** `tests_orbis/` (Alle Tests hier)
- **Test-Struktur:** `tests_orbis/test_omf/`, `tests_orbis/test_helper_apps/`
- **Test-Imports:** Absolute Imports auch in Tests verwenden
- **Test-Namen:** `test_*.py` oder `*_test.py`
- **Test-Ausf√ºhrung:** `python -m pytest tests_orbis/`

### Branch-spezifische Test-Regeln
- **Helper-Branches:** Nur `tests_orbis/test_helper_apps/` ausf√ºhren
- **Main-Branch:** Alle Tests in `tests_orbis/` ausf√ºhren
- **Helper-Test-Befehl:** `python -m pytest tests_orbis/test_helper_apps/`
- **Automatische Ausf√ºhrung:** `python run_tests_by_branch.py`

### Entwicklungsprozess-Regeln
- **Neue Anforderungen:** Erst Analyse, dann Zusammenfassung, dann Implementierung
- **Analyse-Phase:** Codebase durchsuchen, bestehende Komponenten verstehen
- **Zusammenfassung:** Kurze √úbersicht der geplanten √Ñnderungen
- **Freigabe:** Warten auf explizite Best√§tigung vor Implementierung
- **Keine direkte Implementierung** ohne vorherige Analyse und Freigabe

### Dashboard-Komponenten-Regeln (KRITISCH)
- **Wrapper-Komponenten:** `show_<component_name>()` mit Tabs
- **Unterkomponenten:** `show_<specific_function>()` mit expandable sections
- **Private Funktionen:** `_show_<function>_section()` mit `_` Prefix
- **MQTT-Singleton:** `st.session_state.get("mqtt_client")` verwenden
- **Per-topic subscription:** `subscribe_many()` und `get_buffer()` verwenden
- **Error-Handling:** Try-catch f√ºr alle Gateway-Calls
- **UI-Standards:** Icons, expandable sections, Spalten-Layout
- **UI-Refresh:** Verwende `request_refresh()` statt `st.rerun()` in Komponenten
- **Logging-System:** Verwende `_init_logging_once()` f√ºr Logging-Initialisierung

### Vollst√§ndige Regeln
- **Allgemein:** `docs_orbis/DEVELOPMENT_RULES.md`
- **Dashboard-Komponenten:** `docs_orbis/development/dashboard-component-rules.md`

## üö® WICHTIG
Bei jeder Code-√Ñnderung diese Regeln befolgen!