{"version":3,"file":"main.3c3283515fab30fd.js","mappings":"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","sources":["de.js","./projects/futurefactory/src/lib/futurefactory.external.service.ts","./projects/futurefactory/src/lib/futurefactory.dashboard.config.ts","./projects/futurefactory/src/lib/pipes/pipes.module.ts","./projects/futurefactory/src/lib/used-material.module.ts","./projects/futurefactory/src/lib/components/components.module.ts","./projects/futurefactory/src/common/protocol/ccu.ts","./projects/futurefactory/src/common/protocol/index.ts","./projects/futurefactory/src/common/protocol/vda.ts","./projects/futurefactory/src/lib/futurefactory.routes.ts","./projects/futurefactory/src/lib/utils/rx.utils.ts","./projects/futurefactory/src/lib/components/collision-warning-popup/collision-warning-popup.component.html","./projects/futurefactory/src/lib/components/collision-warning-popup/collision-warning-popup.component.ts","./projects/futurefactory/src/common/protocol/fts.ts","./projects/futurefactory/src/common/util/json.revivers.ts","./projects/futurefactory/src/lib/services/selected-controller.service.ts","./projects/futurefactory/src/lib/services/typed-mqtt.service.ts","./projects/futurefactory/src/lib/futurefactory.service.ts","./projects/futurefactory/src/lib/services/states.service.ts","./projects/futurefactory/src/lib/services/collision-warning-detector.service.ts","./projects/futurefactory/src/lib/components/language-selector/language-selector.component.html","./projects/futurefactory/src/lib/components/language-selector/language-selector.component.ts","./projects/futurefactory/src/lib/components/version-mismatch-popup/version-mismatch-popup.component.html","./projects/futurefactory/src/lib/components/version-mismatch-popup/version-mismatch-popup.component.ts","./projects/futurefactory/src/lib/services/version-mismatch-popup.service.ts","./projects/futurefactory/src/lib/components/version-info/version-info.component.ts","./projects/futurefactory/src/lib/components/version-info/version-info.component.html","./projects/futurefactory/src/lib/components/factory-reset/factory-reset.component.html","./projects/futurefactory/src/lib/components/factory-reset/factory-reset.component.ts","./projects/futurefactory/src/lib/futurefactory.component.ts","./projects/futurefactory/src/lib/futurefactory.component.html","./projects/futurefactory/src/common/protocol/module.ts","./projects/futurefactory/src/lib/services/production-flow.service.ts","./projects/futurefactory/src/lib/services/factory-layout.service.ts","./projects/futurefactory/src/lib/services/order-states.service.ts","./projects/futurefactory/src/lib/components/missing-controller-banner/missing-controller-banner.state.ts","./projects/futurefactory/src/lib/components/missing-controller-banner/missing-controller-banner.component.html","./projects/futurefactory/src/lib/components/missing-controller-banner/missing-controller-banner.component.ts","./projects/futurefactory/src/lib/pages/flow-editor/flow-editor.component.html","./projects/futurefactory/src/lib/pages/flow-editor/flow-editor.component.ts","./projects/futurefactory/src/lib/utils/routes.utils.ts","./projects/futurefactory/src/lib/services/layout-editor.service.ts","./projects/futurefactory/src/lib/components/factory-layout/factory-layout.component.html","./projects/futurefactory/src/lib/components/factory-layout/factory-layout.component.ts","./projects/futurefactory/src/lib/utils/workpiece.utils.ts","./projects/futurefactory/src/lib/services/general-config.service.ts","./projects/futurefactory/src/lib/components/factory-config/factory-config.component.html","./projects/futurefactory/src/lib/components/factory-config/factory-config.component.ts","./projects/futurefactory/src/lib/pages/layout-editor/layout-editor.component.ts","./projects/futurefactory/src/lib/pages/layout-editor/layout-editor.component.html","./projects/futurefactory/src/lib/components/calibration-info/calibration-info.component.html","./projects/futurefactory/src/lib/components/calibration-info/calibration-info.component.ts","./projects/futurefactory/src/lib/components/calibration-caption/calibration-caption.component.html","./projects/futurefactory/src/lib/components/calibration-caption/calibration-caption.component.ts","./projects/futurefactory/src/common/data/calibration.ts","./projects/futurefactory/src/lib/pipes/filter-ref/filter-ref.pipe.ts","./projects/futurefactory/src/lib/pages/module-calibration/module-calibration.component.html","./projects/futurefactory/src/lib/pages/module-calibration/module-calibration.component.ts","./projects/futurefactory/src/lib/pages/module-details/module-details.component.html","./projects/futurefactory/src/lib/pages/module-details/module-details.component.ts","./projects/futurefactory/src/lib/pages/module-list/module-list.data-source.ts","./projects/futurefactory/src/lib/components/factory-park/factory-park.component.html","./projects/futurefactory/src/lib/components/factory-park/factory-park.component.ts","./projects/futurefactory/src/lib/pipes/to-icon/to-icon.pipe.ts","./projects/futurefactory/src/lib/pages/module-list/module-list.component.html","./projects/futurefactory/src/lib/pages/module-list/module-list.component.ts","./projects/futurefactory/src/lib/components/order-list/order-list.state.ts","./projects/futurefactory/src/lib/components/order-list/order-list.component.html","./projects/futurefactory/src/lib/components/order-list/order-list.component.ts","./projects/futurefactory/src/lib/components/production-steps/production-steps.component.html","./projects/futurefactory/src/lib/components/production-steps/production-steps.component.ts","./projects/futurefactory/src/lib/pages/order-list/order-list.component.html","./projects/futurefactory/src/lib/pages/order-list/order-list.component.ts","./projects/futurefactory/src/lib/utils/oee-calculation.utils.ts","./projects/futurefactory/src/lib/pages/simulation-layout/simulation-layout.state.ts","./projects/futurefactory/src/lib/services/stock-states.service.ts","./projects/futurefactory/src/lib/components/banner/banner.component.ts","./projects/futurefactory/src/lib/components/banner/banner.component.html","./projects/futurefactory/src/lib/components/production-time-calculator/production-time-calculator.state.ts","./projects/futurefactory/src/lib/pipes/fallback-value/fallback-value.pipe.ts","./projects/futurefactory/src/lib/pipes/to-seconds/to-seconds.pipe.ts","./projects/futurefactory/src/lib/components/production-time-calculator/production-time-calculator.component.ts","./projects/futurefactory/src/lib/components/production-time-calculator/production-time-calculator.component.html","./projects/futurefactory/src/lib/pages/simulation-layout/simulation-layout.component.html","./projects/futurefactory/src/lib/pages/simulation-layout/simulation-layout.component.ts","./projects/futurefactory/src/lib/pages/status-log/state-log.data-source.ts","./projects/futurefactory/src/lib/components/module-info/module-info.component.html","./projects/futurefactory/src/lib/components/module-info/module-info.component.ts","./projects/futurefactory/src/lib/components/state-log-details/state-log-details.component.html","./projects/futurefactory/src/lib/components/state-log-details/state-log-details.component.ts","./projects/futurefactory/src/lib/pipes/is-errorlevel/is-errorlevel.pipe.ts","./projects/futurefactory/src/lib/pages/status-log/status-log.component.html","./projects/futurefactory/src/lib/futurefactory.routing.module.ts","./projects/futurefactory/src/lib/pages/status-log/status-log.component.ts","./projects/futurefactory/src/lib/pages/pages.module.ts","./projects/futurefactory/src/lib/translate/xlf-http-loader.ts","./projects/futurefactory/src/lib/futurefactory.module.ts","./src/app/app.routes.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/constants.ts","./src/app/app.routing.ts","./src/app/services/controller.service.ts","./src/app/services/mqtt.service.ts","./src/app/used-cloud.module.ts","./src/app/used-material.module.ts","./src/app/app.module.ts","./src/main.ts"],"sourcesContent":["\"use strict\";(function(global){global.ng=global.ng||{};global.ng.common=global.ng.common||{};global.ng.common.locales=global.ng.common.locales||{};const u=undefined;function plural(val){const n=val,i=Math.floor(Math.abs(val)),v=val.toString().replace(/^[^.]*\\.?/,\"\").length;if(i===1&&v===0)return 1;return 5}global.ng.common.locales[\"de\"]=[\"de\",[[\"AM\",\"PM\"],u,u],u,[[\"S\",\"M\",\"D\",\"M\",\"D\",\"F\",\"S\"],[\"So.\",\"Mo.\",\"Di.\",\"Mi.\",\"Do.\",\"Fr.\",\"Sa.\"],[\"Sonntag\",\"Montag\",\"Dienstag\",\"Mittwoch\",\"Donnerstag\",\"Freitag\",\"Samstag\"],[\"So.\",\"Mo.\",\"Di.\",\"Mi.\",\"Do.\",\"Fr.\",\"Sa.\"]],[[\"S\",\"M\",\"D\",\"M\",\"D\",\"F\",\"S\"],[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],[\"Sonntag\",\"Montag\",\"Dienstag\",\"Mittwoch\",\"Donnerstag\",\"Freitag\",\"Samstag\"],[\"So.\",\"Mo.\",\"Di.\",\"Mi.\",\"Do.\",\"Fr.\",\"Sa.\"]],[[\"J\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],[\"Jan.\",\"Feb.\",\"M\\xE4rz\",\"Apr.\",\"Mai\",\"Juni\",\"Juli\",\"Aug.\",\"Sept.\",\"Okt.\",\"Nov.\",\"Dez.\"],[\"Januar\",\"Februar\",\"M\\xE4rz\",\"April\",\"Mai\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"Dezember\"]],[[\"J\",\"F\",\"M\",\"A\",\"M\",\"J\",\"J\",\"A\",\"S\",\"O\",\"N\",\"D\"],[\"Jan\",\"Feb\",\"M\\xE4r\",\"Apr\",\"Mai\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dez\"],[\"Januar\",\"Februar\",\"M\\xE4rz\",\"April\",\"Mai\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"Dezember\"]],[[\"v. Chr.\",\"n. Chr.\"],u,u],1,[6,0],[\"dd.MM.yy\",\"dd.MM.y\",\"d. MMMM y\",\"EEEE, d. MMMM y\"],[\"HH:mm\",\"HH:mm:ss\",\"HH:mm:ss z\",\"HH:mm:ss zzzz\"],[\"{1}, {0}\",u,\"{1} 'um' {0}\",u],[\",\",\".\",\";\",\"%\",\"+\",\"-\",\"E\",\"\\xB7\",\"\\u2030\",\"\\u221E\",\"NaN\",\":\"],[\"#,##0.###\",\"#,##0\\xA0%\",\"#,##0.00\\xA0\\xA4\",\"#E0\"],\"EUR\",\"\\u20AC\",\"Euro\",{\"ATS\":[\"\\xF6S\"],\"AUD\":[\"AU$\",\"$\"],\"BGM\":[\"BGK\"],\"BGO\":[\"BGJ\"],\"CUC\":[u,\"Cub$\"],\"DEM\":[\"DM\"],\"FKP\":[u,\"Fl\\xA3\"],\"GHS\":[u,\"\\u20B5\"],\"GNF\":[u,\"F.G.\"],\"KMF\":[u,\"FC\"],\"PHP\":[u,\"\\u20B1\"],\"RON\":[u,\"L\"],\"RWF\":[u,\"F.Rw\"],\"SYP\":[],\"THB\":[\"\\u0E3F\"],\"TWD\":[\"NT$\"],\"XXX\":[],\"ZMW\":[u,\"K\"]},\"ltr\",plural,[[[\"Mitternacht\",\"morgens\",\"vorm.\",\"mittags\",\"nachm.\",\"abends\",\"nachts\"],u,[\"Mitternacht\",\"morgens\",\"vormittags\",\"mittags\",\"nachmittags\",\"abends\",\"nachts\"]],[[\"Mitternacht\",\"Morgen\",\"Vorm.\",\"Mittag\",\"Nachm.\",\"Abend\",\"Nacht\"],u,[\"Mitternacht\",\"Morgen\",\"Vormittag\",\"Mittag\",\"Nachmittag\",\"Abend\",\"Nacht\"]],[\"00:00\",[\"05:00\",\"10:00\"],[\"10:00\",\"12:00\"],[\"12:00\",\"13:00\"],[\"13:00\",\"18:00\"],[\"18:00\",\"24:00\"],[\"00:00\",\"05:00\"]]]]})(typeof globalThis!==\"undefined\"&&globalThis||typeof global!==\"undefined\"&&global||typeof window!==\"undefined\"&&window);","import { InjectionToken } from '@angular/core';\nimport { ControllerResponse } from '@fischertechnik/ft-api';\nimport { IMqttMessage, IPublishOptions } from 'ngx-mqtt';\nimport { Observable } from 'rxjs';\n\nexport { IMqttMessage, IPublishOptions } from 'ngx-mqtt';\n\n/**\n * This interface is used to define the methods of the MqttClientService\n * for the fischertechnik Cloud and the local running application, that\n * is hosted on the raspberry pi.\n */\nexport interface IMqttService {\n  /**\n   * This method handles the subscription to a topic for both,\n   * the fischertechnik Cloud and the local running application.\n   *\n   * @param controllerId the id of the controller, that should receive the message\n   * @param topic the topic, where the message should be published\n   * @returns an observable, that emits the message, when it is received\n   */\n  subscribe(controllerId: number, topic: string): Observable<IMqttMessage>;\n\n  /**\n   * This method handles the publishing of a message to a topic for both,\n   * the fischertechnik Cloud and the local running application.\n   *\n   * @param controllerId the id of the controller, that should receive the message\n   * @param topic the topic, where the message should be published\n   * @param message the message, that should be published\n   * @param options the options for publishing the message\n   */\n  publish(\n    controllerId: number,\n    topic: string,\n    message: string,\n    options?: IPublishOptions\n  ): void;\n}\n\n/**\n * The injection token for the MqttClientService.\n * It is required, if you want to use Interfaces instead of abstract classes to define necessary methods.\n */\nexport const MqttClientService = new InjectionToken<IMqttService>(\n  'MqttClientService'\n);\n/**\n * The injection token for the mqtt topic prefix requirement.\n * It is required if you want to prevent the creation of topics with the controller prefix\n * If set to true, the controller prefix will be added, false will not add the prefix\n */\nexport const MqttPrefixRequired = new InjectionToken<boolean>(\n  'MqttPrefixRequired'\n);\n/**\n * The injection token is used to control the visibility of the language selector in the navigation bar.\n * If set to true, the language selector will be visible, false will hide it.\n */\nexport const ShowLanguageSelector = new InjectionToken<boolean>(\n  'ShowLanguageSelector'\n);\n\nexport interface IControllerService {\n  /**\n   * This method returns the latest controller information as an observable for both,\n   * the fischertechnik Cloud and the local running application.\n   *\n   * The observable will emil `null`, if the controller information is not loaded yet.\n   * Loading the controller information can be done via `loadControllers()`.\n   *\n   * @returns an observable, that emits the latest controller information\n   */\n  onChange(): Observable<ControllerResponse[]>;\n\n  /**\n   * This method loads the controller information for both,\n   * the fischertechnik Cloud and the local running application.\n   *\n   * The information is available via `onChange()` as an observable.\n   */\n  loadControllers(): void;\n}\n\n/**\n * The injection token for the ControllerClientService.\n * It is required, if you want to use Interfaces instead of abstract classes to define necessary methods.\n */\nexport const ControllerClientService = new InjectionToken<IControllerService>(\n  'ControllerClientService'\n);\n","import { DashboardConfig, WindowType } from '@fischertechnik/ft-window';\n\nexport const FUTURE_FACTORY_DASHBOARD: DashboardConfig = {\n  history: true,\n  identifier: 'ff',\n  dialog: {\n    treeNodes: [\n      {\n        title: 'Customer view',\n        i18n: 'dashboardCustomerView',\n        type: WindowType.TypeEnum.Customer,\n      },\n      {\n        title: 'Supplier view',\n        i18n: 'dashboardSupplierView',\n        type: WindowType.TypeEnum.OrderRawMaterial,\n      },\n      {\n        title: 'Production view',\n        i18n: 'dashboardProductionvView',\n        children: [\n          {\n            title: 'Stock',\n            i18n: 'dashboardStock',\n            type: WindowType.TypeEnum.Stock,\n          },\n          {\n            title: 'NFC Reader',\n            i18n: 'dashboardNfcReader',\n            type: WindowType.TypeEnum.Nfc,\n          },\n        ],\n      },\n      {\n        title: 'Monitoring',\n        i18n: 'dashboardMonitoring',\n        children: [\n          {\n            title: 'Temperature',\n            i18n: 'dashboardChartTemperature',\n            type: WindowType.TypeEnum.TemperatureValue,\n          },\n          {\n            title: 'Air humidity',\n            i18n: 'dashboardChartAirHumidity',\n            type: WindowType.TypeEnum.AirHumidityValue,\n          },\n          {\n            title: 'Air pressure',\n            i18n: 'dashboardChartAirPressure',\n            type: WindowType.TypeEnum.AirPressureValue,\n          },\n          {\n            title: 'Air quality',\n            i18n: 'dashboardChartAirQuality',\n            type: WindowType.TypeEnum.AirQualityValue,\n          },\n          {\n            title: 'Brightnes',\n            i18n: 'dashboardChartBrightness',\n            type: WindowType.TypeEnum.BrightnesValue,\n          },\n          {\n            title: 'Camera',\n            i18n: 'dashboardCamera',\n            type: WindowType.TypeEnum.Camera,\n          },\n          {\n            title: 'Camera control',\n            i18n: 'dashboardCameraControl',\n            type: WindowType.TypeEnum.Ptu,\n          },\n        ],\n      },\n    ],\n  },\n};\n\nexport const FUTURE_FACTORY_DASHBOARD_NO_HISTORY_CONFIG: DashboardConfig = {\n  ...FUTURE_FACTORY_DASHBOARD,\n  history: false,\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FallbackValuePipe } from './fallback-value/fallback-value.pipe';\nimport { FilterRefPipe } from './filter-ref/filter-ref.pipe';\nimport { ToIconPipe } from './to-icon/to-icon.pipe';\nimport { ToLabelPipe } from './to-label/to-label.pipe';\nimport { ToSecondsPipe } from './to-seconds/to-seconds.pipe';\nimport { IsErrorLevelPipe } from './is-errorlevel/is-errorlevel.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [\n    FallbackValuePipe,\n    ToIconPipe,\n    ToLabelPipe,\n    ToSecondsPipe,\n    IsErrorLevelPipe,\n    FilterRefPipe,\n  ],\n  exports: [\n    FallbackValuePipe,\n    ToIconPipe,\n    ToLabelPipe,\n    ToSecondsPipe,\n    IsErrorLevelPipe,\n    FilterRefPipe,\n  ],\n})\nexport class FutureFactoryPipesModule {}\n","import { DragDropModule } from '@angular/cdk/drag-drop';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n@NgModule({\n  imports: [\n    MatTabsModule,\n    MatButtonModule,\n    MatDividerModule,\n    MatListModule,\n    MatIconModule,\n    MatMenuModule,\n    MatSidenavModule,\n    MatTableModule,\n    MatTooltipModule,\n    MatCardModule,\n    DragDropModule,\n    MatButtonToggleModule,\n    MatExpansionModule,\n    MatSortModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatPaginatorModule,\n    MatProgressSpinnerModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n  ],\n  exports: [\n    MatTabsModule,\n    MatButtonModule,\n    MatDividerModule,\n    MatListModule,\n    MatIconModule,\n    MatMenuModule,\n    MatSidenavModule,\n    MatTableModule,\n    MatTooltipModule,\n    MatCardModule,\n    DragDropModule,\n    MatButtonToggleModule,\n    MatExpansionModule,\n    MatSortModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatPaginatorModule,\n    MatProgressSpinnerModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n  ],\n})\nexport class UsedMaterialModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { GridsterModule } from 'angular-gridster2';\nimport { FutureFactoryPipesModule } from '../pipes/pipes.module';\nimport { UsedMaterialModule } from '../used-material.module';\nimport { BannerComponent } from './banner/banner.component';\nimport { CalibrationCaptionComponent } from './calibration-caption/calibration-caption.component';\nimport { CalibrationInfoComponent } from './calibration-info/calibration-info.component';\nimport { DebugOutputComponent } from './debug-output/debug-output.component';\nimport { FactoryConfigComponent } from './factory-config/factory-config.component';\nimport { FactoryLayoutComponent } from './factory-layout/factory-layout.component';\nimport { FactoryResetComponent } from './factory-reset/factory-reset.component';\nimport { LanguageSelectorComponent } from './language-selector/language-selector.component';\nimport { MissingControllerBannerComponent } from './missing-controller-banner/missing-controller-banner.component';\nimport { ModuleInfoComponent } from './module-info/module-info.component';\nimport { OrderListComponent } from './order-list/order-list.component';\nimport { ProductionStepsComponent } from './production-steps/production-steps.component';\nimport { ProductionTimeCalculatorComponent } from './production-time-calculator/production-time-calculator.component';\nimport { StateLogDetailsComponent } from './state-log-details/state-log-details.component';\nimport { VersionInfoComponent } from './version-info/version-info.component';\nimport { FactoryParkComponent } from './factory-park/factory-park.component';\nimport { VersionMismatchPopupComponent } from './version-mismatch-popup/version-mismatch-popup.component';\nimport { CollisionWarningPopupComponent } from './collision-warning-popup/collision-warning-popup.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UsedMaterialModule,\n    GridsterModule,\n    RouterModule,\n    TranslateModule,\n    FutureFactoryPipesModule,\n    FormsModule,\n  ],\n  declarations: [\n    FactoryResetComponent,\n    FactoryParkComponent,\n    MissingControllerBannerComponent,\n    OrderListComponent,\n    FactoryLayoutComponent,\n    BannerComponent,\n    ProductionTimeCalculatorComponent,\n    ProductionStepsComponent,\n    LanguageSelectorComponent,\n    DebugOutputComponent,\n    StateLogDetailsComponent,\n    ModuleInfoComponent,\n    CalibrationInfoComponent,\n    CalibrationCaptionComponent,\n    FactoryConfigComponent,\n    VersionInfoComponent,\n    VersionMismatchPopupComponent,\n    CollisionWarningPopupComponent,\n  ],\n  exports: [\n    FactoryResetComponent,\n    FactoryParkComponent,\n    MissingControllerBannerComponent,\n    OrderListComponent,\n    FactoryLayoutComponent,\n    BannerComponent,\n    ProductionTimeCalculatorComponent,\n    ProductionStepsComponent,\n    LanguageSelectorComponent,\n    DebugOutputComponent,\n    StateLogDetailsComponent,\n    ModuleInfoComponent,\n    CalibrationInfoComponent,\n    CalibrationCaptionComponent,\n    FactoryConfigComponent,\n    VersionInfoComponent,\n    VersionMismatchPopupComponent,\n    CollisionWarningPopupComponent,\n  ],\n})\nexport class FutureFactoryComponentsModule {}\n","import { LoadingBay, LoadingBayId } from './fts';\nimport { Module, ModuleCommandType, ModuleType } from './module';\nimport { ReferenceValue } from './vda';\n\nexport enum AvailableState {\n  BLOCKED = 'BLOCKED',\n  READY = 'READY',\n  BUSY = 'BUSY',\n}\n\nexport type Workpiece = 'BLUE' | 'RED' | 'WHITE';\nexport const Workpiece = {\n  BLUE: 'BLUE' as Workpiece,\n  RED: 'RED' as Workpiece,\n  WHITE: 'WHITE' as Workpiece,\n};\n\nexport type OrderType = 'PRODUCTION' | 'STORAGE';\nexport const OrderType = {\n  PRODUCTION: 'PRODUCTION' as OrderType,\n  STORAGE: 'STORAGE' as OrderType,\n};\n\n/**\n * Device type:\n * MODULE: Production module\n * FTS:    Driverless transport vehicle\n */\nexport type DeviceType = 'MODULE' | 'FTS';\nexport const DeviceType = {\n  MODULE: 'MODULE' as DeviceType,\n  FTS: 'FTS' as DeviceType,\n};\n\n/**\n * Type for the stock state that is sent to the cloud.\n */\nexport type CloudStockItem = {\n  workpiece?: CloudWorkpiece;\n  location: string;\n  hbw?: string;\n};\n\nexport type CloudWorkpiece = {\n  id: string;\n  type: Workpiece;\n  state: 'RAW' | 'RESERVED';\n};\n\nexport type CloudStock = {\n  ts: Date;\n  stockItems: CloudStockItem[];\n};\n\n/** Base order production step */\nexport type OrderResponseStep = {\n  id: string;\n  type: string;\n  dependentActionId?: string;\n  state: OrderState;\n  /** the start time of this step */\n  startedAt?: Date;\n  /** the end time of this step */\n  stoppedAt?: Date;\n};\n\n/**\n * A navigation step is used to drive the FTS from one \"source\" module to a \"target\" module\n * Navigation steps can have dependencies to production steps that need to be executed before\n * the navigation, i.e. the module must place the workpiece on the FTS before the FTS drives\n * away to another module.\n */\nexport type OrderNavigationStep = OrderResponseStep & {\n  type: 'NAVIGATION';\n  source: ModuleType;\n  target: ModuleType;\n};\n\n/**\n * Defines a specific production step that can be converted to a {@link ProductionCommand} and\n * executed by a module.\n */\nexport type OrderManufactureStep = OrderResponseStep & {\n  type: 'MANUFACTURE';\n  moduleType: ModuleType;\n  command: ModuleCommandType;\n  /** The serial number of the module chosen for this step */\n  serialNumber?: string;\n};\n\n/** The states an order can be in */\nexport enum OrderState {\n  ENQUEUED = 'ENQUEUED',\n  IN_PROGRESS = 'IN_PROGRESS',\n  FINISHED = 'FINISHED',\n  CANCELLED = 'CANCELLED',\n  ERROR = 'ERROR',\n}\n\n/**\n * The order request that is sent from the user via the frontend to the central control unit or\n * published by the factory itself.\n * Based on the orderType, the order is either a production or a storage order\n * - \"Produce one piece of the given type\"\n * - \"Store the given workpiece of the given type\"\n */\nexport type OrderRequest = {\n  /** The actual color of the workpiece */\n  type: Workpiece;\n  /** The timestamp when the order was created */\n  timestamp: Date;\n  /** The type of the order, for production orders, this has to be PRODUCTION */\n  orderType: OrderType;\n  /** The id of the workpiece that should be stored */\n  workpieceId?: string;\n  /** Optional: The id of the simulation/planspiel, that this order is a part of. */\n  simulationId?: string;\n};\n\nexport type OrderResponse = {\n  /** The type of the order */\n  orderType: OrderType;\n  /** The actual color of the workpiece */\n  type: Workpiece;\n  /** The timestamp when the order was created */\n  timestamp: Date;\n  /** The generated unique order id */\n  orderId: string;\n  /** The steps an order has to succeed until the order if fulfilled */\n  productionSteps: Array<OrderNavigationStep | OrderManufactureStep>;\n  state: OrderState;\n  /** The timestamp when the order was started */\n  startedAt?: Date;\n  /** The timestamp when the order was stopped */\n  stoppedAt?: Date;\n  /** The timestamp when the order was received */\n  receivedAt?: Date;\n  /** the workpiece id that is produced by this order */\n  workpieceId?: string;\n  /** Optional: The id of the simulation/planspiel, that this order is a part of. */\n  simulationId?: string;\n};\n\n/**\n * Creates a new production order request for a given workpiece type.\n * @param type The type of the workpiece to produce.\n * @param simulationId The id of the simulation/planspiel, that this order is a part of.\n * @param timestamp The timestamp when the order was created. If not given, the current time is used.\n */\nexport function generateOrderRequestForProduction(\n  type: Workpiece,\n  simulationId?: string,\n  timestamp?: Date,\n): OrderRequest {\n  return {\n    type,\n    timestamp: timestamp ?? new Date(),\n    orderType: 'PRODUCTION',\n    simulationId,\n  };\n}\n\n/**\n * Information about known modules\n */\nexport type PairedModule = {\n  /** The duration in seconds of the production if it can be configured */\n  productionDuration?: number;\n  /** The serial number of the module (FTS or manufacturing module) */\n  serialNumber: string;\n  /** The type of the module */\n  type: DeviceType;\n  /** The subtype of the module, the manufacutirn type in case of a manufacturing module */\n  subType?: ModuleType;\n  /** The timestamp of the initial pairing setup */\n  pairedSince?: Date;\n  /** The timestamp of the last received online message */\n  lastSeen?: Date;\n  /** Is the module currently connected */\n  connected?: boolean;\n  /** General busy state of the module */\n  available?: AvailableState;\n  /** Assignment of the module to a specific order */\n  assigned?: boolean;\n  /** The version of the software of the module */\n  version?: string;\n  /** The ip address of the controller of the module */\n  ip?: string;\n  /** Marks the module as having calibration options */\n  hasCalibration?: boolean;\n  /** Is the module in calibration mode? */\n  calibrating?: boolean;\n};\n\nexport type FtsPairedModule = PairedModule & {\n  /** The node id the FTS is currently at or has just left. */\n  lastNodeId?: string;\n  /** The module the FTS is currently at or has just left. */\n  lastModuleSerialNumber?: string;\n  /** The load position the FTS will be using during the next docking action. */\n  lastLoadPosition?: LoadingBayId | LoadingBay;\n  /** FTS currently charging? */\n  charging?: boolean;\n  /** Current battery voltage in V */\n  batteryVoltage?: number;\n  /** Current battery charge in percent */\n  batteryPercentage?: number;\n};\n\nexport type FtsPairingRequest = {\n  /** The serial number of the FTS to pair */\n  serialNumber: string;\n};\n\n/** The list of all detected or paired modules */\nexport type PairingState = {\n  modules: Array<PairedModule>;\n  transports: Array<FtsPairedModule>;\n};\n\n/**\n * This interface assumes that all roads are strictly orthogonal to each other.\n * We need to refactor this if we want to support non-orthogonal roads.\n */\nexport enum RoadDirection {\n  NORTH = 'NORTH',\n  EAST = 'EAST',\n  SOUTH = 'SOUTH',\n  WEST = 'WEST',\n}\n\n/** A production flow containing all the modules required to produce a workpiece in order, not including HBW and DPS */\nexport type ProductionFlow = {\n  steps: Array<ModuleType>;\n};\n/** The production flows for all workpiece types */\nexport type ProductionFlows = {\n  [wp in Workpiece]?: ProductionFlow;\n};\n\nexport type FactoryLayoutResponse = {\n  timestamp: Date;\n  success: boolean;\n  message?: string;\n};\n\n/**\n * A IntersectionNode represents a point in the factory where multiple roads meet.\n * At each intersection, the FTS can take multiple roads to reach a different module.\n */\nexport interface FactoryNode {\n  /**\n   * A factory-unique ID which is used to identify a specific node in the factory.\n   * If it is a module, the serialNumber of the module is used.\n   * If it is a intersection, the unique ID of the intersection is used.\n   */\n  id: string;\n}\n\n/** The flattened data structure to store a factory road */\nexport interface FactoryRoadFlat {\n  /**\n   * The length of the road in millimeters. This needs to represent the actual length of the road,\n   * otherwise navigation won't work.\n   */\n  length: number;\n  /**\n   * The direction in which the road is pointing.\n   */\n  direction: RoadDirection;\n  /** The id of the starting point of the road */\n  from: string;\n  /** The id of the end point of the road */\n  to: string;\n}\n\n/**\n * Format of the JSON data the factory data is loaded from\n */\nexport interface FactoryLayout {\n  modules: Module[];\n  intersections: FactoryNode[];\n  roads: FactoryRoadFlat[];\n}\n\nexport interface ModuleSettings {\n  serialNumber: string;\n  duration: number;\n}\n\n/**\n * module calibration\n */\nexport enum ModuleCalibrationCommand {\n  SET_VALUES = 'setCalibrationValues',\n  RESET = 'resetCalibration',\n  STORE = 'storeCalibrationValues',\n  SELECT = 'selectCalibrationPosition',\n  TEST = 'testCalibrationPosition',\n  START = 'startCalibration',\n  STOP = 'stopCalibration',\n}\n\nexport interface ModuleCalibration {\n  timestamp: Date;\n  serialNumber: string;\n  command: ModuleCalibrationCommand;\n  factory?: boolean;\n  position?: string;\n  references?: Array<ReferenceValue>;\n}\nexport interface ModuleCalibrationState {\n  timestamp: Date;\n  serialNumber: string;\n  calibrating: boolean;\n  references?: Array<ReferenceValue>;\n  status_references?: Array<ReferenceValue>;\n}\n\n/**\n * Payload for a request to reset the factory to an initial state.\n */\nexport interface ResetRequest {\n  timestamp: Date;\n  withStorage?: boolean;\n}\n/**\n * Payload for a request to reset the factory layout to the default layout.\n */\nexport interface DefaultLayoutRequest {\n  timestamp: Date;\n}\n\n/**\n * Payload for a request to initiate a charge navigation order or stop it for the specified FTS.\n */\nexport interface FtsChargeRequest {\n  /** The FTS serialNumber for which the request should be executed */\n  serialNumber: string;\n  /** true = start charge, false = stop charge */\n  charge: boolean;\n}\n\n/**\n * Payload for a request to remove a module, that is not configured in the layout\n */\nexport interface DeleteModuleRequest {\n  serialNumber: string;\n}\n\n/**\n * Everything regarding the general configuration of the factory.\n */\nexport interface GeneralConfig {\n  /** The planned production duration of a workpiece in seconds */\n  productionDurations: {\n      [wp in Workpiece]?: number;\n  };\n  productionSettings: {\n    maxParallelOrders: number;\n  };\n  ftsSettings: {\n    chargeThresholdPercent: number,\n  };\n}\n\n\n/**\n * Payload for a request to park the factory.\n */\nexport interface ParkRequest {\n  timestamp: Date;\n}\n\n/**\n * Data about a module with a mismatched version.\n */\nexport interface MismatchedModule {\n  serialNumber: string;\n  deviceType: DeviceType;\n  moduleType: ModuleType | undefined;\n  seriesName: string;\n  seriesUnknown: boolean;\n  version: string;\n  requiredVersion: string | undefined;\n  is24V: boolean;\n  isTXT: boolean;\n}\n\n/**\n * The payload for a message that contains all modules with a mismatched version.\n */\nexport interface MismatchedVersionMessage {\n  timestamp: Date;\n  ccuVersion: string;\n  mismatchedModules: MismatchedModule[];\n}\n","export const ANY_SERIAL = '+';\n\nexport enum CcuTopic {\n  /** Generic Topic for global messages like a reset-command. */\n  GLOBAL = 'ccu/global',\n  ORDER_REQUEST = 'ccu/order/request',\n  ORDER_RESPONSE = 'ccu/order/response',\n  ACTIVE_ORDERS = 'ccu/order/active',\n  /** topic for the completed (both finished and failed) orders */\n  COMPLETED_ORDERS = 'ccu/order/completed',\n  CANCEL_ORDERS = 'ccu/order/cancel',\n  PAIRING_STATE = 'ccu/pairing/state',\n  /** topic to publish additional debug information about the currently known modules */\n  KNOWN_MODULES_STATE = 'ccu/pairing/known_modules',\n  PAIRING_PAIR_FTS = 'ccu/pairing/pair_fts',\n  /** The topic root to publish calibration data during calibrations */\n  CALIBRATION_BASE = 'ccu/state/calibration',\n  LOG = 'ccu/state/log',\n  /** publishes the current stock in the storage module */\n  STOCK = 'ccu/state/stock',\n  /** publishes the current production flows for all workpiece types */\n  FLOWS = 'ccu/state/flows',\n  /** publishes the current  layout of the factory with modules and intersections */\n  LAYOUT = 'ccu/state/layout',\n  /** publishes the versions of modules that are currently out of sync with the CCU in use */\n  VERSION_MISMATCH = 'ccu/state/version-mismatch',\n  /** ccu subscribes to this topic to receive changes to the factory layout configuration */\n  SET_LAYOUT = 'ccu/set/layout',\n  /** ccu subscribes to this topic to receive the signal to reset to the default layout */\n  SET_DEFAULT_LAYOUT = 'ccu/set/default_layout',\n  /** ccu subscribes to this topic to receives changes to the production flows for workpiece types **/\n  SET_FLOWS = 'ccu/set/flows',\n  /** ccu subscribes to this and receives the production duration for a module */\n  SET_MODULE_DURATION = 'ccu/set/module-duration',\n  /** ccu subscribes to this and sends the calibration parameters to the target module */\n  SET_MODULE_CALIBRATION = 'ccu/set/calibration',\n  /** Initiate a reset of the CCU */\n  SET_RESET = 'ccu/set/reset',\n  /** Initiate a charge navigation order or stop it for the specified FTS */\n  SET_CHARGE = 'ccu/set/charge',\n  /** publishes the current configuration-map */\n  CONFIG = 'ccu/state/config',\n  /** ccu subscribes to this topic to receive changes to the configuration */\n  SET_CONFIG = 'ccu/set/config',\n  /** ccu subscribes to this topic to receive the park command */\n  SET_PARK = 'ccu/set/park',\n  /** Remove a module, that is not configured in the layout */\n  DELETE_MODULE = 'ccu/set/delete-module',\n}\n\nexport function getCcuCalibrationTopic(serial: string) {\n  return CcuTopic.CALIBRATION_BASE + '/' + serial;\n}\n\nexport enum FtsTopic {\n  ROOT = 'fts/v1/ff',\n  ORDER = 'order',\n  STATE = 'state',\n  CONNECTION = 'connection',\n  FACTSHEET = 'factsheet',\n  INSTANT_ACTION = 'instantAction',\n}\n\nexport function getFtsTopic(serial: string, topic: FtsTopic) {\n  if (!topic || topic === FtsTopic.ROOT) {\n    throw new Error('Invalid argument for topic: ' + topic);\n  }\n  return `${FtsTopic.ROOT}/${serial}/${topic}`;\n}\n\nexport enum ModuleTopic {\n  ROOT = 'module/v1/ff',\n  STATE = 'state',\n  ORDER = 'order',\n  CONNECTION = 'connection',\n  FACTSHEET = 'factsheet',\n  INSTANT_ACTION = 'instantAction',\n}\n\nexport function getModuleTopic(serial: string, topic: ModuleTopic) {\n  if (!topic || topic === ModuleTopic.ROOT) {\n    throw new Error('Invalid argument for topic: ' + topic);\n  }\n  return `${ModuleTopic.ROOT}/${serial}/${topic}`;\n}\n\nexport { OrderRequest, OrderResponse, OrderType, Workpiece } from './ccu';\n","import { Workpiece } from './ccu';\nimport { FtsCommandType, LoadingBayId } from './fts';\nimport { ModuleCommandType, ModuleType } from './module';\n\nexport type ReferenceValue = {\n  referenceKey: string;\n  referenceValue: string | number | boolean;\n};\n\n/**\n * The VDA 5050 protocol is used to communicate between the factory and the\n * modules and FTSs. It is based on the VDA 5050 standard.\n * @see https://www.vda.de/de/services/Publikationen/vda-5050-2019-04.html\n *\n * The protocol is based on the following principles:\n * - The factory is the master and the modules and FTSs are the slaves.\n * - The factory sends commands to the modules and FTSs.\n * - The modules and FTSs send status updates to the factory.\n */\n\n/**\n * @typedef {Object} VdaError\n * @property {string} errorType - The type of error that occured.\n * @property {Date} timestamp - The timestamp of the error.\n * @property {string} errorLevel - The level of the error.\n * @property {Array<{referenceKey: string, referenceValue: string}>} errorReferences - (Optional) The references that resulted in the error.\n */\nexport type VdaError = {\n  errorType: string; // --> PICK_error, DROP_error, DRILL_error, FIRE_error, ...\n  timestamp: Date;\n  errorLevel: 'WARNING' | 'FATAL';\n  errorReferences?: Array<ReferenceValue>;\n};\n\nexport type VdaInformation = {\n  infoType: string;\n  infoLevel: 'DEBUG' | 'INFO';\n  infoReferences?: Array<ReferenceValue>;\n};\n\nexport enum LoadType {\n  BLUE = 'BLUE',\n  WHITE = 'WHITE',\n  RED = 'RED',\n}\n\nexport type Load = {\n  loadId?: string | null;\n  loadType: LoadType | null;\n  loadPosition?: string;\n  loadTimestamp?: number;\n};\n\nexport type CarryLoad = Load & {\n  loadPosition: LoadingBayId;\n};\n\nexport enum State {\n  WAITING = 'WAITING',\n  INITIALIZING = 'INITIALIZING',\n  RUNNING = 'RUNNING',\n  PAUSED = 'PAUSED',\n  FINISHED = 'FINISHED',\n  FAILED = 'FAILED',\n}\n\n/**\n * The state of an action reported by a production module or FTS.\n */\nexport type ActionState<\n  T extends InstantActions | ModuleCommandType | FtsCommandType\n> = {\n  /** The uniqe id of the action, generally a UUID */\n  id: string;\n  /** The timestamp of the status change */\n  timestamp: Date;\n  /** The state of the action, failure means the action could not be finished.\n   *  A finihsed with an unsatisfactory result should be reported through `result` */\n  state: State;\n  /** The action command or action type */\n  command?: T;\n  /** (Optional) The result of a finished action with multiple result options */\n  result?: string;\n  /** (Optional) additional metadata for this action state */\n  metadata?: unknown;\n};\n\nexport type NodeState = {};\nexport type EdgeState = {};\n\nexport type BatteryState = {\n  /** The current charge state */\n  charging?: boolean\n  /** The current battery level in percent */\n  percentage?: number;\n  /** The max battery level in volts */\n  maxVolt?: number;\n  /** The min battery level in volts */\n  minVolt?: number;\n  /** The current battery level in volts */\n  currentVoltage?: number;\n};\n\nexport enum ConnectionState {\n  ONLINE = 'ONLINE',\n  OFFLINE = 'OFFLINE',\n  CONNECTIONBROKEN = 'CONNECTIONBROKEN',\n}\n\nexport type Connection = {\n  headerId: number;\n  timestamp: Date;\n  version: string;\n  ip: string;\n  manufacturer: string;\n  serialNumber: string;\n  connectionState: ConnectionState;\n};\n\nexport type LoadSet = {\n  setName: string;\n  loadType: LoadType;\n  maxAmount?: number;\n};\n\nexport type Factsheet = {\n  headerId: number;\n  /* Timestamp in ISO8601 format (YYYY-MM-DDTHH:mm:ss.ssZ). */\n  timestamp: Date;\n  version: string;\n  manufacturer: string;\n  serialNumber: string;\n  typeSpecification: {\n    seriesName: string;\n    agvClass?: string;\n    moduleClass?: ModuleType;\n    navigationTypes?: Array<string>;\n  };\n  physicalParameters?: any;\n  protocolLimits?: any;\n  protocolFeatures: {\n    agvActions?: Array<{\n      actionType: string;\n      actionScopes?: 'NODE' | 'EDGE';\n      actionParameters?: {\n        parameterName: string;\n        parameterType: string;\n        parameterDescription: string;\n      };\n    }>;\n    moduleActions?: Array<{\n      actionType: string;\n      actionParameters?: {\n        parameterName: string;\n        parameterType: string;\n        parameterDescription: string;\n      };\n    }>;\n    moduleParameters?: {\n      clearModuleOnPick?: boolean;\n    };\n  };\n  agvGeometry?: any;\n  loadSpecification?: {\n    loadPositions?: LoadingBayId;\n    loadSets?: Array<LoadSet>;\n  };\n  localizationParameters?: any;\n};\n\nexport enum InstantActions {\n  FACTSHEET_REQUEST = 'factsheetRequest',\n  /** Request the current state `waitingForLoadHandler` of the FTS so that it can receive new commands */\n  CLEAR_LOAD_HANDLER = 'clearLoadHandler',\n  /** Initialize the FTS, have it perform a docking action and then assume it to be docked at the given module serial number */\n  FIND_INITIAL_DOCK_POSITION = 'findInitialDockPosition',\n  /** Request to set the storage of the HBW to the desired load */\n  SET_STORAGE = 'SET_STORAGE',\n  /** Request to reset the  */\n  RESET = 'reset',\n  SET_STATUS_LED = 'setStatusLED',\n  CALIBRATION_SET_VALUES = 'setCalibrationValues',\n  CALIBRATION_RESET = 'resetCalibration',\n  CALIBRATION_STORE = 'storeCalibrationValues',\n  CALIBRATION_SELECT = 'selectCalibrationPosition',\n  CALIBRATION_TEST = 'testCalibrationPosition',\n  CALIBRATION_START = 'startCalibration',\n  CALIBRATION_STOP = 'stopCalibration',\n  ANNOUNCE_OUTPUT = 'announceOutput',\n  CANCEL_STORAGE_ORDER = 'cancelStorageOrder',\n  STOP_CHARGING = 'stopCharging',\n}\n\n/** These instantActions do not matter for the availability state of a module */\nexport const passiveInstantActions = [\n  InstantActions.FACTSHEET_REQUEST,\n  InstantActions.SET_STATUS_LED,\n];\n\n/** The parameters to send when pairing an FTS to the factory */\nexport type FindInitialDockPositionMetadata = {\n  /** The nodeId / serial number the FTS will be docked at */\n  nodeId: string;\n};\n\n/** The parameters to send when clearing the load handler status */\nexport type ClearLoadHandlerMetadata = {\n  /** True if the module removed the load from the FTS, otherwise false */\n  loadDropped: boolean;\n  /** The id of the workpiece in the active loading bay */\n  loadId?: string;\n  /** The type of the workpiece in the active loading bay */\n  loadType?: Workpiece;\n  /** The loading bay used */\n  loadPosition?: string;\n};\n\n/** The parameters to send when clearing the load handler status */\nexport type SetStorageMetadata = {\n  /** The contents of the storage bays */\n  contents: {\n    [storageBayId: string]: {\n      type?: Workpiece;\n      workpieceId?: string;\n    };\n  };\n};\n/** The parameters to send when calibrating */\nexport type CalibrationMetadata = {\n  /** The position to use if the calibration action requires it */\n  position?: string;\n  /** Reset to default factory values */\n  factory?: boolean;\n  /** The new reference values when setting them */\n  references?: Array<ReferenceValue>;\n};\n\n/** The parameters to send when announcing an output PICK command */\nexport type AnnounceOutputMetadata = {\n  /** The orderid that will be used for the PICK command */\n  orderId: string;\n  /** The workpiece type to expect, optional */\n  type?: Workpiece;\n};\n\n/** True turns on the colored LED on the DPS, false turns it off */\nexport type StatusLEDMetadata = {\n  red: boolean,\n  yellow: boolean,\n  green: boolean\n}\n\nexport type InstantAction = {\n  serialNumber: string;\n  timestamp: Date;\n  actions: Array<{\n    actionType: InstantActions;\n    actionId: string;\n    metadata?:\n      | ClearLoadHandlerMetadata\n      | FindInitialDockPositionMetadata\n      | SetStorageMetadata\n      | CalibrationMetadata\n      | StatusLEDMetadata\n      | AnnounceOutputMetadata;\n  }>;\n};\n","export enum CloudRoutes {\n  DASHBOARD = 'dashboard',\n}\n\nexport enum FutureFactoryRoutes {\n  ROOT = '',\n  MODULE = 'module',\n  CALIBRATION = 'calibration',\n  ORDERS = 'orders',\n  PRODUCTION_FLOWS = 'flows',\n  LAYOUT = 'layout',\n  SIMULATION = 'simulation',\n  LOGS = 'logs',\n  DASHBOARD = 'dashboard',\n}\n\nexport const ROUTE_TO_MODULE_ROOT = 'moduleRoot';\n","import { OperatorFunction } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MqttMessage } from '../services/typed-mqtt.service';\n\n/**\n * This method creates an operator function that extracts the payload from a message.\n */\nexport function getPayload<T>(): OperatorFunction<MqttMessage<T>, T> {\n  return map((mqttMessage) => mqttMessage.payload);\n}\n","<h2 mat-dialog-title>\n  <mat-icon style=\"vertical-align: baseline\">report_problem</mat-icon>\n  {{ 'Kollisionswarnung' | translate }}\n</h2>\n<div mat-dialog-content *ngIf=\"data.collisions\">\n  <p>{{ 'Ein oder mehrere Fahrerlose Transportsysteme (FTS) sind durch Gegenstände auf der Fahrbahn am Weiterfahren blockiert.' | translate }}</p>\n  <p>{{ 'Bitte entfernen Sie die Hindernisse um den Betrieb fortzusetzen.' | translate }}</p>\n  <h3>{{ 'FTS mit gemeldeten Hindernissen:' | translate }}</h3>\n  <ul>\n    <li *ngFor=\"let collision of data.collisions\">\n      <strong>{{ collision.serialNumber }} ({{\"Letzte Position:\" | translate}} {{collision.lastNodeId}})</strong>\n    </li>\n  </ul>\n</div>\n<div mat-dialog-actions>\n  <button mat-flat-button mat-dialog-close cdkFocusInitial color=\"warn\">{{ 'OK' | translate }}</button>\n</div>\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FtsState } from '../../../common/protocol/fts';\n\n\n@Component({\n  selector: 'ff-collision-warning-popup',\n  templateUrl: './collision-warning-popup.component.html',\n  styleUrls: ['./colission-warning-popup.component.scss']\n})\nexport class CollisionWarningPopupComponent {\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: { collisions: Array<FtsState> },\n  ) {}\n\n}\n","import { ActionState, BatteryState, CarryLoad, EdgeState, InstantActions, NodeState, VdaError, } from './vda';\n\nexport const NODE_ID_UNKNOWN = 'UNKNOWN';\n\nexport enum FtsErrors {\n  RESET = 'RESET',\n  ACTION_DISMISSED = 'ACTION_DISMISSED',\n  COLLISION = 'COLLISION',\n}\n\nexport type FtsState = {\n  headerId?: number;\n  timestamp: Date;\n  serialNumber: string;\n  orderId: string;\n  orderUpdateId: number;\n  lastNodeId: string;\n  lastNodeSequenceId: number;\n  nodeStates: Array<NodeState>;\n  edgeStates: Array<EdgeState>;\n  driving: boolean;\n  waitingForLoadHandling?: boolean;\n  paused: boolean;\n  batteryState?: BatteryState;\n  errors: Array<VdaError>;\n  load: Array<CarryLoad>;\n  actionState?: ActionState<FtsCommandType | InstantActions> | null;\n  actionStates?: Array<ActionState<FtsCommandType | InstantActions>> | null;\n  lastCode?: unknown;\n};\n\n/**\n * Actions that can be performed on a node by a FTS.\n */\nexport enum FtsCommandType {\n  /** Start docking which uses the FTS sensors to try to dock to anything that is straight ahead */\n  DOCK = 'DOCK',\n  /** Drive by the node with no additional action */\n  PASS = 'PASS',\n  /** Turn the FTS by a specified degree and direction. Used to navigate intersections */\n  TURN = 'TURN',\n}\n\n/* The loading bay position of an FTS */\nexport type LoadingBayId = '1' | '2' | '3';\nexport enum LoadingBay {\n  LEFT = '1',\n  MIDDLE = '2',\n  RIGHT = '3',\n}\n\n/** The number of bays of an fts */\nexport const LOADING_BAY_COUNT = 3;\n","export const SIMPLE_ISO_DATE_REGEX = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?Z$/;\n\n/**\n * Checks if a json value should be parsed as a Date.\n *\n * Valid dates are a subset of ISO 8601 dates of the format\n * \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\" (seconds and millseconds are optional)\n *\n * @param {string} _ is unused, but required for JSON reviver function signatures\n * @param {T} value the json value to convert if required\n * @returns the parsed date as a Date object or the unchanged value\n */\nexport function jsonIsoDateReviver<T>(_: string, value: T): T | Date {\n  if (typeof value === \"string\" && SIMPLE_ISO_DATE_REGEX.test(value)) {\n    return new Date(value);\n  }\n  return value;\n}\n","import { Inject, Injectable, OnDestroy } from '@angular/core';\nimport { ControllerResponse } from '@fischertechnik/ft-api';\nimport { BehaviorSubject, Observable, ReplaySubject, from, of, scheduled } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  switchMap,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport {\n  ControllerClientService,\n  IControllerService,\n} from '../futurefactory.external.service';\n\n/**\n * This service provides the currently selected controller\n * and a list of available controllers.\n *\n * The after loading the available controllers, the first controller\n * is selected from the list of available controllers.\n */\n@Injectable()\nexport class SelectedControllerService implements OnDestroy {\n  private readonly destroy$ = new ReplaySubject<boolean>(1);\n  readonly selectedController$ = new BehaviorSubject<\n    ControllerResponse | undefined\n  >(undefined);\n  readonly availableControllers$: Observable<ControllerResponse[]>;\n  readonly availableFutureFactoryControllers$: Observable<ControllerResponse[]>;\n\n  constructor(\n    @Inject(ControllerClientService)\n    private controllerService: IControllerService\n  ) {\n    this.availableControllers$ = of(this.controllerService.loadControllers()).pipe(\n      switchMap(() => this.controllerService.onChange()),\n      shareReplay(1)\n    );\n    this.availableFutureFactoryControllers$ =\n      this.setupAvailableFutureFactoryControllers(this.availableControllers$);\n\n    this.setupSelectedController(this.availableFutureFactoryControllers$);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  /**\n   * This method loads the available controllers from the backend.\n   */\n  loadControllers(): void {\n    this.controllerService.loadControllers();\n  }\n\n  private setupAvailableFutureFactoryControllers(\n    availableControllers$: Observable<ControllerResponse[]>\n  ): Observable<ControllerResponse[]> {\n    return availableControllers$.pipe(\n      filter((ac) => ac?.length > 0),\n      map((ac) => ac.filter((c) => c?.targetModule === 3)),\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * This method takes the list of available controllers\n   * and selects the first controller from the list, if no controller\n   * is selected, otherwise the selected controller is checked against\n   * the list of available controllers and selected if it is available.\n   *\n   * @param availableControllers$ Observable of available controllers\n   */\n  private setupSelectedController(\n    availableControllers$: Observable<ControllerResponse[]>\n  ): void {\n    availableControllers$\n      .pipe(\n        filter((ac) => ac?.length > 0),\n        map((ac) => ac.filter((c) => !!c)),\n        withLatestFrom(this.selectedController$),\n        map(\n          ([available, selected]) =>\n            // select first controller if selected is undefined\n            available.find((c) => c.controllerId === selected?.controllerId) ??\n            available[0]\n        ),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((controller) => this.selectedController$.next(controller));\n  }\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, shareReplay, switchMap } from 'rxjs/operators';\nimport { jsonIsoDateReviver } from '../../common/util/json.revivers';\nimport {\n  IMqttMessage,\n  IMqttService,\n  IPublishOptions,\n  MqttClientService, MqttPrefixRequired,\n} from '../futurefactory.external.service';\nimport { SelectedControllerService } from './selected-controller.service';\n\nexport type MqttMessage<T> = Omit<IMqttMessage, 'payload'> & { payload: T };\n\n/**\n * This service provides a typed interface to the MQTT service.\n *  - It subscribes to a topic and parses the payload as JSON\n *  - It publishes a message and stringifies the payload as JSON\n */\n@Injectable()\nexport class TypedMqttService {\n  constructor(\n    @Inject(MqttClientService) private mqttService: IMqttService,\n    @Optional() @Inject(MqttPrefixRequired) private readonly requirePrefix: boolean,\n    private selectedControllerService: SelectedControllerService\n  ) {\n    // treat missing injection token as required prefix\n    this.requirePrefix = requirePrefix ?? true;\n  }\n\n  /**\n   * Prepend the prefix if it is required.\n   * @param controllerId\n   * @param topic\n   * @private\n   */\n  private prependPrefix(controllerId: number, topic: string): string {\n    return this.requirePrefix ? `/j1/txt/${controllerId}/${topic}` : topic;\n  }\n\n  /**\n   * This method subscribes to a topic and parses the payload as JSON.\n   * The observable is shared and replayed with a buffer size of 1.\n   *\n   * @param topic The topic from which the messages should be received\n   * @returns An observable of messages with the payload parsed as JSON\n   */\n  subscribe<T>(topic: string): Observable<MqttMessage<T>> {\n    return this.selectedControllerService.selectedController$.pipe(\n      filter((c) => !!c?.controllerId),\n      map((c) => c?.controllerId as number),\n      switchMap((controllerId) =>\n        this.mqttService.subscribe(controllerId, this.prependPrefix(controllerId, topic))\n      ),\n      map((msg) => this.parsePayload(msg.topic, msg) as MqttMessage<T>),\n      shareReplay(1)\n    );\n  }\n\n  /**\n   * This method parses the payload of a message as JSON.\n   * @param topic The topic to which the message was published\n   * @param msg The message from which the payload should be parsed\n   * @returns The message with the payload parsed as JSON\n   */\n  private parsePayload<T>(topic: string, msg: IMqttMessage): MqttMessage<T> {\n    try {\n      return {\n        ...msg,\n        payload: JSON.parse(msg.payload?.toString(), jsonIsoDateReviver) as T,\n      };\n    } catch (error) {\n      console.error(\n        'Unable to parse message payload in topic \"%s\" as JSON',\n        topic,\n        error\n      );\n      return {\n        ...msg,\n        payload: {} as T,\n      };\n    }\n  }\n\n  publish<T>(topic: string, message: T, options?: IPublishOptions): void {\n    const controllerId =\n      this.selectedControllerService.selectedController$.value?.controllerId;\n    if (!controllerId) {\n      throw new Error('No controller selected');\n    }\n    this.mqttService.publish(\n      controllerId,\n      this.prependPrefix(controllerId, topic),\n      JSON.stringify(message),\n      // Expand default options with provided options\n      { retain: false, qos: 2, ...(options ?? {}) }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ControllerResponse } from '@fischertechnik/ft-api';\nimport {\n  Observable,\n  OperatorFunction,\n  ReplaySubject,\n  map,\n  pipe,\n  startWith,\n} from 'rxjs';\nimport {\n  IControllerService,\n  IMqttMessage,\n  IMqttService,\n} from './futurefactory.external.service';\n\nexport { TypedMqttService } from './services/typed-mqtt.service';\n\n@Injectable()\nexport class MqttServiceMock implements IMqttService {\n  subscribe(controllerId: number, topic: string): Observable<IMqttMessage> {\n    return new Observable<IMqttMessage>();\n  }\n  publish(controllerId: number, topic: string, message: string): void {}\n}\n\n@Injectable()\nexport class ControllerServiceMock implements IControllerService {\n  private readonly controllers$ = new ReplaySubject<ControllerResponse[]>(1);\n\n  onChange(): Observable<ControllerResponse[]> {\n    return this.controllers$.asObservable();\n  }\n  loadControllers(): void {\n    this.controllers$.next([\n      {\n        name: 'controller',\n        hardwareId: '50F14AFC164C',\n        hardwareModel: 'TXT',\n        alarm: true,\n        pushMessage: true,\n        shared: true,\n        mqttUser: undefined,\n        softwareVersion: '1.1.9',\n        softwareName: 'txt',\n        controllerId: 1,\n        crdate: 1560873431,\n      },\n    ]);\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport {\n  Observable,\n  OperatorFunction,\n  ReplaySubject,\n  combineLatest,\n  noop,\n} from 'rxjs';\nimport { map, scan, shareReplay, startWith, takeUntil } from 'rxjs/operators';\nimport {\n  ANY_SERIAL,\n  CcuTopic,\n  FtsTopic,\n  ModuleTopic,\n  getCcuCalibrationTopic,\n  getFtsTopic,\n  getModuleTopic,\n} from '../../common/protocol';\nimport {\n  ModuleCalibrationState,\n  PairedModule,\n  PairingState,\n} from '../../common/protocol/ccu';\nimport { FtsState } from '../../common/protocol/fts';\nimport { ModuleState } from '../../common/protocol/module';\nimport { Connection } from '../../common/protocol/vda';\nimport { TypedMqttService } from '../futurefactory.service';\nimport { getPayload } from '../utils/rx.utils';\n\nexport type StateLogType = 'FTS' | 'MODULE' | 'CONNECTION';\nexport const StateLogType = {\n  FTS: 'FTS' as StateLogType,\n  MODULE: 'MODULE' as StateLogType,\n  CONNECTION: 'CONNECTION' as StateLogType,\n};\n\nexport interface StateLogBase {\n  type: StateLogType;\n  received: Date;\n}\n\nexport interface StateLogFts extends StateLogBase {\n  type: 'FTS';\n  state: FtsState;\n}\n\nexport interface StateLogModule extends StateLogBase {\n  type: 'MODULE';\n  state: ModuleState;\n}\nexport interface StateLogConnection extends StateLogBase {\n  type: 'CONNECTION';\n  state: Connection;\n}\n\nexport type StateLog = StateLogFts | StateLogModule | StateLogConnection;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatesService implements OnDestroy {\n  private readonly destroy = new ReplaySubject<boolean>(1);\n\n  private readonly STATE_TOPICS = {\n    fts: getFtsTopic(ANY_SERIAL, FtsTopic.STATE),\n    module: getModuleTopic(ANY_SERIAL, ModuleTopic.STATE),\n    fts_connection: getFtsTopic(ANY_SERIAL, FtsTopic.CONNECTION),\n    module_connection: getModuleTopic(ANY_SERIAL, ModuleTopic.CONNECTION),\n  };\n\n  private readonly ftsState$: Observable<StateLogFts>;\n  private readonly moduleState$: Observable<StateLogModule>;\n  private readonly ftsConnection$: Observable<StateLogConnection>;\n  private readonly moduleConnection$: Observable<StateLogConnection>;\n\n  public readonly pairingState$: Observable<PairingState>;\n  public readonly pairedModules$: Observable<PairedModule[]>;\n  public readonly pairedTransports$: Observable<PairedModule[]>;\n  public readonly allModules$: Observable<PairedModule[]>;\n  public readonly ftsStateLog$: Observable<StateLogFts[]>;\n  public readonly moduleStateLog$: Observable<StateLogModule[]>;\n  public readonly ftsConnectionLog$: Observable<StateLogConnection[]>;\n  public readonly moduleConnectionLog$: Observable<StateLogConnection[]>;\n  public readonly moduleStates$: Observable<Map<string, ModuleState>>;\n  public readonly ftsStates$: Observable<Map<string, FtsState>>;\n  public readonly stateLog$: Observable<StateLog[]>;\n  public readonly calibrationState$: Observable<ModuleCalibrationState>;\n\n  constructor(private mqttService: TypedMqttService) {\n    this.pairingState$ = this.mqttService\n      .subscribe<PairingState>(CcuTopic.PAIRING_STATE)\n      .pipe(getPayload(), shareReplay(1));\n    this.pairedModules$ = this.pairingState$.pipe(\n      map((payload) => payload.modules),\n      shareReplay(1)\n    );\n    this.pairedTransports$ = this.pairingState$.pipe(\n      map((payload) => payload.transports),\n      shareReplay(1)\n    );\n    this.allModules$ = this.pairingState$.pipe(\n      map((payload) => [...payload.modules, ...payload.transports]),\n      shareReplay(1)\n    );\n    this.ftsState$ = this.subscribeTo<FtsState, StateLogFts>(\n      this.STATE_TOPICS.fts,\n      'FTS'\n    );\n    this.moduleState$ = this.subscribeTo<ModuleState, StateLogModule>(\n      this.STATE_TOPICS.module,\n      'MODULE'\n    );\n    this.ftsConnection$ = this.subscribeTo<Connection, StateLogConnection>(\n      this.STATE_TOPICS.fts_connection,\n      'CONNECTION'\n    );\n    this.moduleConnection$ = this.subscribeTo<Connection, StateLogConnection>(\n      this.STATE_TOPICS.module_connection,\n      'CONNECTION'\n    );\n\n    this.ftsStateLog$ = this.ftsState$.pipe(this.collectLogs(), shareReplay(1));\n\n    this.moduleStateLog$ = this.moduleState$.pipe(\n      this.collectLogs(),\n      shareReplay(1)\n    );\n\n    this.ftsConnectionLog$ = this.ftsConnection$.pipe(\n      this.collectLogs(),\n      shareReplay(1)\n    );\n\n    this.moduleConnectionLog$ = this.moduleConnection$.pipe(\n      this.collectLogs(),\n      shareReplay(1)\n    );\n\n    this.moduleStates$ = this.moduleState$.pipe(\n      scan((states, moduleState) => {\n        const newStates = new Map(states);\n        if (moduleState.type === 'MODULE') {\n          newStates.set(moduleState.state.serialNumber, moduleState.state);\n        }\n        return newStates;\n      }, new Map<string, ModuleState>()),\n      shareReplay(1)\n    );\n\n    this.ftsStates$ = this.ftsState$.pipe(\n      scan((states, ftsState) => {\n        const newStates = new Map(states);\n        if (ftsState.type === 'FTS') {\n          newStates.set(ftsState.state.serialNumber, ftsState.state);\n        }\n        return newStates;\n      }, new Map<string, FtsState>()),\n      shareReplay(1)\n    );\n\n    this.stateLog$ = combineLatest([\n      this.ftsState$,\n      this.moduleState$,\n      this.ftsConnection$,\n      this.moduleConnection$,\n    ]).pipe(\n      scan((acc, val) => {\n        const filled = val.filter((v) => v.type !== undefined);\n        return [...new Set([...acc, ...filled])];\n      }, [] as StateLog[]),\n      shareReplay(1)\n    );\n\n    this.calibrationState$ = this.mqttService\n      .subscribe<ModuleCalibrationState>(getCcuCalibrationTopic(ANY_SERIAL))\n      .pipe(map((message) => message.payload));\n\n    this.calibrationState$ = this.mqttService\n      .subscribe<ModuleCalibrationState>(getCcuCalibrationTopic(ANY_SERIAL))\n      .pipe(getPayload());\n\n    // immediately start accumulating data\n    this.ftsStateLog$.pipe(takeUntil(this.destroy)).subscribe(noop);\n    this.moduleStateLog$.pipe(takeUntil(this.destroy)).subscribe(noop);\n    this.ftsConnectionLog$.pipe(takeUntil(this.destroy)).subscribe(noop);\n    this.moduleConnectionLog$.pipe(takeUntil(this.destroy)).subscribe(noop);\n    this.stateLog$.pipe(takeUntil(this.destroy)).subscribe(noop);\n    this.moduleStates$.pipe(takeUntil(this.destroy)).subscribe(noop);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy.next(true);\n    this.destroy.complete();\n  }\n\n  private subscribeTo<T, R>(topic: string, type: StateLogType): Observable<R> {\n    return this.mqttService.subscribe<T>(topic).pipe(\n      map((msg) => {\n        return {\n          type,\n          received: new Date(),\n          state: msg.payload,\n        } as unknown as R;\n      }),\n      startWith({} as R),\n      shareReplay(1)\n    );\n  }\n\n  private collectLogs<T>(): OperatorFunction<T, T[]> {\n    return scan<T, T[]>((acc, log) => {\n      if (!(log as any).type) {\n        return acc;\n      }\n      return [...new Set([...acc, log])];\n    }, [] as T[]);\n  }\n}\n","import { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Subscription } from 'rxjs';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { PairingState } from '../../common/protocol/ccu';\nimport {\n  CollisionWarningPopupComponent\n} from '../components/collision-warning-popup/collision-warning-popup.component';\nimport { StatesService } from './states.service';\nimport { FtsErrors, FtsState } from '../../common/protocol/fts';\nimport { map, withLatestFrom } from 'rxjs/operators';\n\n@Injectable()\nexport class CollisionWarningDetectorService implements OnDestroy {\n  private dialogRef: MatDialogRef<CollisionWarningPopupComponent> | null = null;\n  private subscription: Subscription | null = null;\n\n  constructor(private statesService: StatesService, private dialog: MatDialog) {\n  }\n\n  init() {\n    if (!this.subscription) {\n      this.subscription = this.statesService.ftsStates$.pipe(\n        // only include states with collision warnings:\n        map((states) => this.getFtsWithCollisions(states)),\n        withLatestFrom(this.statesService.pairingState$),\n        // filter collisions array to only include paired FTS:\n        map(([collisions, pairings]) =>\n          collisions.filter((collision) => this.isPairedFtsSerial(collision.serialNumber, pairings))\n        )\n      ).subscribe((collisions) => {\n        if (collisions && collisions.length > 0) {\n          if (this.dialogRef) {\n            this.dialogRef.componentInstance.data.collisions = collisions;\n          } else {\n            this.dialogRef = this.dialog.open(CollisionWarningPopupComponent, {\n              data: { collisions },\n              disableClose: true,\n            });\n\n            this.dialogRef.afterClosed().subscribe(() => {\n              this.dialogRef = null;\n            });\n          }\n        } else {\n          this.closeDialog();\n        }\n      });\n    }\n  }\n\n  closeDialog() {\n    if (this.dialogRef) {\n      this.dialogRef.close();\n      this.dialogRef = null;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = null;\n    }\n    this.closeDialog();\n  }\n\n  private hasCollisionWarning(state: FtsState) {\n    return state.errors && state.errors.some((error) => error.errorType === FtsErrors.COLLISION);\n  }\n\n  private getFtsWithCollisions(states: Map<string, FtsState>): FtsState[] {\n    return [...states.values()].filter((state) => this.hasCollisionWarning(state)).map((state) => state);\n  }\n\n  private isPairedFtsSerial(serialNumber: string, pairings: PairingState) {\n    return pairings.transports?.some((pairing) => pairing.serialNumber === serialNumber);\n  }\n}\n","<ng-container *ngIf=\"showLanguageSelector\">\n  <button class=\"lang-button\" mat-button [matMenuTriggerFor]=\"localMenu\">\n    <span>{{ selectedLocale | uppercase }}</span>\n    <mat-icon>arrow_drop_down</mat-icon>\n  </button>\n  <mat-menu class=\"nav__language-menu\" #localMenu=\"matMenu\" [overlapTrigger]=\"false\">\n    <button *ngFor=\"let locale of locales\" mat-menu-item (click)=\"setLanguage(locale)\">{{locale | uppercase}}</button>\n  </mat-menu>\n</ng-container>","import { Component, Inject, LOCALE_ID } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { I18nService } from '@fischertechnik/ft-common-ui';\nimport { ShowLanguageSelector } from '../../futurefactory.external.service';\n\n@Component({\n  selector: 'ff-language-selector',\n  templateUrl: './language-selector.component.html',\n  styleUrls: ['./language-selector.component.scss'],\n})\nexport class LanguageSelectorComponent {\n  selectedLocale: string;\n  readonly locales = ['de', 'en', 'es', 'fr', 'nl', 'pt', 'ru'];\n\n  constructor(\n    @Inject(ShowLanguageSelector) readonly showLanguageSelector: boolean,\n    @Inject(LOCALE_ID) protected locale: string,\n    private i18n: I18nService,\n    private router: Router\n  ) {\n    this.selectedLocale = locale;\n    this.i18n.use(locale);\n  }\n\n  setLanguage(locale: string) {\n    this.selectedLocale = locale;\n    this.i18n.use(locale);\n    location.href = `/${locale}/aps${this.router.url}`;\n  }\n}\n","<h2 mat-dialog-title>\n  <mat-icon style=\"vertical-align: baseline\">report_problem</mat-icon>\n  {{ 'Versions-Konflikt' | translate }}\n</h2>\n<div mat-dialog-content *ngIf=\"data.message\">\n  <p>{{ 'Modulversionen stimmen nicht mit der Version der zentralen Steuerung überein!' | translate }}</p>\n  <p>\n    {{ 'Für eine einwandfreie Funktion installieren Sie bitte einen einheitlichen Softwarestand. Die aktuellen Versionen finden Sie unter' | translate }}\n    <br>\n    <a href=\"https://www.fischertechnik.de/agile-production-simulation/update-blog\">https://www.fischertechnik.de/agile-production-simulation/update-blog</a>\n  </p>\n  <p><strong>{{ 'Version der zentralen Steuerung:' | translate }} {{ data.message.ccuVersion }}</strong></p>\n  <table mat-table [dataSource]=\"data.message.mismatchedModules\">\n\n    <!-- Module Type Column -->\n    <ng-container matColumnDef=\"moduleType\">\n      <th mat-header-cell *matHeaderCellDef>{{ 'Modul' | translate }}</th>\n      <td mat-cell *matCellDef=\"let module\">\n        {{ 'Produktionsschritt.' + (module.moduleType ?? module.deviceType) | translate }}\n      </td>\n    </ng-container>\n\n    <!-- Serial Number Column -->\n    <ng-container matColumnDef=\"serialNumber\">\n      <th mat-header-cell *matHeaderCellDef>{{ 'Seriennummer' | translate }}</th>\n      <td mat-cell *matCellDef=\"let module\">\n        <strong>{{ module.serialNumber }}</strong>\n      </td>\n    </ng-container>\n\n    <!-- Description Column -->\n    <ng-container matColumnDef=\"description\">\n      <th mat-header-cell *matHeaderCellDef>{{ 'Controller' | translate }}</th>\n      <td mat-cell *matCellDef=\"let module\">\n        <span *ngIf=\"module.is24V\">24V</span> <!-- 24V Module -->\n        <span *ngIf=\"module.isTXT\">TXT</span> <!-- TXT Controller -->\n        <span *ngIf=\"!module.isTXT\">{{ 'SPS' | translate }}</span> <!-- SPS if not TXT Controller -->\n      </td>\n    </ng-container>\n\n    <!-- Installed Version Column -->\n    <ng-container matColumnDef=\"version\">\n      <th mat-header-cell *matHeaderCellDef>{{ 'Installiert' | translate }}</th>\n      <td mat-cell *matCellDef=\"let module\">\n        {{ module.version }}\n      </td>\n    </ng-container>\n\n    <!-- Required Version Column -->\n    <ng-container matColumnDef=\"requiredVersion\">\n      <th mat-header-cell *matHeaderCellDef>{{ 'Erwartete Version' | translate }}</th>\n      <td mat-cell *matCellDef=\"let module\">\n        {{ module.requiredVersion }}\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n</div>\n<div mat-dialog-actions>\n  <button mat-flat-button mat-dialog-close cdkFocusInitial color=\"warn\">{{ 'OK' | translate }}</button>\n</div>\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { MismatchedModule, MismatchedVersionMessage } from '../../../common/protocol/ccu';\n\n@Component({\n  selector: 'ff-version-mismatch-popup',\n  templateUrl: './version-mismatch-popup.component.html',\n  styleUrls: ['./version-mismatch-popup.component.scss']\n})\nexport class VersionMismatchPopupComponent {\n  readonly displayedColumns: Array<keyof MismatchedModule | \"description\"> = ['serialNumber', 'moduleType', 'description', 'version', 'requiredVersion'];\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: { message: MismatchedVersionMessage },\n  ) {}\n\n}\n","import { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { VersionMismatchPopupComponent } from '../components/version-mismatch-popup/version-mismatch-popup.component';\nimport { TypedMqttService } from './typed-mqtt.service';\nimport { Subscription } from 'rxjs';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { MismatchedVersionMessage } from '../../common/protocol/ccu';\nimport { CcuTopic } from '../../common/protocol';\n\n@Injectable()\nexport class VersionMismatchPopupService implements OnDestroy {\n  private dialogRef: MatDialogRef<VersionMismatchPopupComponent> | null = null;\n  private subscription: Subscription | null = null;\n  private lastMessageDate: Date | null = null;\n\n  constructor(private mqttService: TypedMqttService, private dialog: MatDialog) {}\n\n  init() {\n    if (!this.subscription) {\n      this.subscription = this.mqttService.subscribe<MismatchedVersionMessage>(CcuTopic.VERSION_MISMATCH).subscribe((message) => {\n        if (!message.payload.mismatchedModules || message.payload.mismatchedModules.length === 0) {\n          this.closeDialog();\n        } else {\n          this.updateDialog(message.payload);\n        }\n      });\n    }\n  }\n\n  /**\n   * Update the dialog with the new message or open a new dialog if one isn't already open.\n   * If the message is older than the last displayed message, it will be ignored.\n   *\n   * @param message\n   * @private\n   */\n  private updateDialog(message: MismatchedVersionMessage) {\n    if (this.dialogRef) {\n      // Update the data of the currently open dialog\n      this.lastMessageDate = message.timestamp;\n      this.dialogRef.componentInstance.data.message = message;\n    } else if (!this.lastMessageDate || this.lastMessageDate < message.timestamp) {\n      this.lastMessageDate = message.timestamp;\n      // Open a new dialog if one isn't already open\n      this.dialogRef = this.dialog.open(VersionMismatchPopupComponent, {\n        data: { message: message },\n        disableClose: true,\n      });\n\n      // Handle dialog close event\n      this.dialogRef.afterClosed().subscribe(() => {\n        this.dialogRef = null;\n      });\n    }\n  }\n\n  closeDialog() {\n    if (this.dialogRef) {\n      this.dialogRef.close();\n      this.dialogRef = null;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = null;\n    }\n    this.closeDialog();\n  }\n}\n","import { Component } from '@angular/core';\nimport { VersionMismatchPopupService } from '../../services/version-mismatch-popup.service';\n\n@Component({\n  selector: 'ff-version-info',\n  templateUrl: './version-info.component.html',\n  styleUrls: ['./version-info.component.scss'],\n  providers: [VersionMismatchPopupService],\n})\nexport class VersionInfoComponent {\n  readonly now: number;\n\n  constructor(private mismatchPopup: VersionMismatchPopupService) {\n    this.now = Date.now();\n    mismatchPopup.init();\n  }\n}\n","<a href=\"{{ './assets/version.json?v='+ now }}\" target=\"_blank\" alt=\"version information\">\n  <mat-icon color=\"primary\">info</mat-icon>\n</a>\n","<ng-template #resetDialogContent>\n  <h2 mat-dialog-title><mat-icon>sync_problem</mat-icon> {{ 'Fabrik zurücksetzen' | translate }}</h2>\n  <div mat-dialog-content>\n    <p>{{'Soll die Fabrik wirklich zurückgesetzt werden?' | translate}}</p>\n    <p>\n      <mat-checkbox [(ngModel)]=\"withStorage\">\n        {{ 'Auch den Lagerbestand leeren?' | translate }}\n      </mat-checkbox>\n    </p>\n  </div>\n  <div mat-dialog-actions>\n    <button mat-flat-button mat-dialog-close color=\"warn\" (click)=\"sendFactoryReset()\">{{ 'Ja' | translate }}</button>\n    <button mat-flat-button mat-dialog-close cdkFocusInitial>{{ 'Nein' | translate }}</button>\n  </div>\n</ng-template>\n\n<button mat-mini-fab\n        [title]=\"'Fabrik zurücksetzen' | translate\"\n        [attr.aria-label]=\"'Fabrik zurücksetzen' | translate\"\n        color=\"primary\"\n        class=\"action-btn\"\n        (click)=\"confirmFactoryReset()\">\n  <mat-icon>sync_problem</mat-icon>\n</button>\n","import { Component, TemplateRef, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { take } from 'rxjs/operators';\nimport { CcuTopic } from '../../../common/protocol';\nimport { ResetRequest } from '../../../common/protocol/ccu';\nimport { TypedMqttService } from '../../services/typed-mqtt.service';\n\n@Component({\n  selector: 'ff-factory-reset',\n  templateUrl: './factory-reset.component.html',\n  styleUrls: ['./factory-reset.component.scss'],\n})\nexport class FactoryResetComponent {\n  @ViewChild('resetDialogContent')\n  readonly resetDialogContent!: TemplateRef<any>;\n  constructor(private dialog: MatDialog, private mqtt: TypedMqttService) {}\n\n  withStorage: boolean = false;\n\n  confirmFactoryReset() {\n    this.dialog\n      .open(this.resetDialogContent)\n      .afterClosed()\n      .pipe(take(1))\n      .subscribe(() => this.clearState());\n  }\n\n  clearState() {\n    this.withStorage = false;\n  }\n\n  sendFactoryReset() {\n    const reset: ResetRequest = {\n      timestamp: new Date(),\n      withStorage: this.withStorage,\n    };\n    this.mqtt.publish(CcuTopic.SET_RESET, reset, { qos: 2 });\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ReplaySubject, takeUntil } from 'rxjs';\nimport { ModuleTopic, getModuleTopic } from '../common/protocol';\nimport { ConnectionState } from '../common/protocol/vda';\nimport { FutureFactoryRoutes } from './futurefactory.routes';\nimport { TypedMqttService } from './services/typed-mqtt.service';\nimport { getPayload } from './utils/rx.utils';\nimport { CollisionWarningDetectorService } from './services/collision-warning-detector.service';\n\ntype NodeRedConnectionStatus = { connectionState: ConnectionState };\n\n@Component({\n  selector: 'ff-futurefactory',\n  templateUrl: './futurefactory.component.html',\n  styleUrls: [\n    './futurefactory.component.scss',\n    // Included the fonts definitions here, that were taken from the cloud-based google fonts\n    './futurefactory.fonts.scss',\n  ],\n  providers: [CollisionWarningDetectorService],\n})\nexport class FutureFactoryComponent implements OnDestroy {\n  private readonly destroy$ = new ReplaySubject<boolean>(1);\n  readonly FutureFactoryRoutes = FutureFactoryRoutes;\n\n  constructor(\n    private mqttService: TypedMqttService,\n    private translate: TranslateService,\n    private notification: MatSnackBar,\n    private collisionWarningDetectorService: CollisionWarningDetectorService\n  ) {\n    this.mqttService\n      .subscribe<NodeRedConnectionStatus>(\n        getModuleTopic('NodeRed', 'status' as ModuleTopic)\n      )\n      .pipe(getPayload(), takeUntil(this.destroy$))\n      .subscribe((status) => {\n        if (status.connectionState === ConnectionState.ONLINE) {\n          this.notification.dismiss();\n        } else {\n          this.notification.open(\n            this.translate.instant(\n              'Die zentrale Steuerung hat die Verbindung zur APS verloren. Bitte starten Sie die zentrale Steuerung neu.'\n            ),\n            undefined,\n            {\n              duration: 0,\n              panelClass: 'error-snackbar',\n              horizontalPosition: 'center',\n              verticalPosition: 'top',\n            }\n          );\n        }\n      });\n    collisionWarningDetectorService.init();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n","<nav mat-tab-nav-bar [tabPanel]=\"tabPanel\" backgroundColor=\"accent\">\n  <a mat-tab-link class=\"button\" #rlaA=\"routerLinkActive\" [active]=\"rlaA.isActive\" routerLinkActive=\"active\" [routerLink]=\"FutureFactoryRoutes.DASHBOARD\">{{ 'Übersicht' | translate }}</a>\n  <a mat-tab-link class=\"button\" #rlaB=\"routerLinkActive\" [active]=\"rlaB.isActive\" routerLinkActive=\"active\" [routerLink]=\"FutureFactoryRoutes.ORDERS\">{{ 'Aufträge' | translate }}</a>\n  <a mat-tab-link class=\"button\" #rlaC=\"routerLinkActive\" [active]=\"rlaC.isActive\" routerLinkActive=\"active\" [routerLink]=\"FutureFactoryRoutes.PRODUCTION_FLOWS\">{{ 'Abläufe' | translate }}</a>\n  <a mat-tab-link class=\"button\" #rlaD=\"routerLinkActive\" [active]=\"rlaD.isActive\" routerLinkActive=\"active\" [routerLink]=\"FutureFactoryRoutes.LAYOUT\">{{ 'Konfiguration' | translate }}</a>\n  <a mat-tab-link class=\"button\" #rlaE=\"routerLinkActive\" [active]=\"rlaE.isActive\" routerLinkActive=\"active\" [routerLink]=\"FutureFactoryRoutes.MODULE\">{{ 'Module' | translate }}</a>\n  <a mat-tab-link class=\"button\" #rlaF=\"routerLinkActive\" [active]=\"rlaF.isActive\" routerLinkActive=\"active\" [routerLink]=\"FutureFactoryRoutes.SIMULATION\">{{ 'Planspiel' | translate }}</a>\n  <a mat-tab-link class=\"button\" #rlaG=\"routerLinkActive\" [active]=\"rlaG.isActive\" routerLinkActive=\"active\" [routerLink]=\"FutureFactoryRoutes.LOGS\">{{ 'Meldungen' | translate }}</a>\n\n  <ff-language-selector></ff-language-selector>\n  <ff-version-info></ff-version-info>\n</nav>\n<mat-tab-nav-panel #tabPanel></mat-tab-nav-panel>\n\n<mat-tab-nav-panel class=\"page-content mat-typography\">\n  <ff-factory-reset></ff-factory-reset>\n  <router-outlet></router-outlet>\n</mat-tab-nav-panel>\n","import { Workpiece } from './ccu';\nimport { ActionState, InstantActions, Load, VdaError, VdaInformation } from './vda';\n\n/**\n * A list of all supported module types in the future factory and their unique names.\n */\nexport enum ModuleType {\n  DRILL = 'DRILL',\n  /**\n   * The START module is a placeholder for the first navigation step in an order.\n   * As it is unknown where the FTS starts during order generation, the start module will be set to START\n   * */\n  START = 'START',\n  MILL = 'MILL',\n  DPS = 'DPS',\n  AIQS = 'AIQS',\n  HBW = 'HBW',\n  OVEN = 'OVEN',\n  CHRG = 'CHRG',\n}\n\n/** Modules that support the production, but do not perform manufacturing processes **/\nexport const SUPPORT_MODULES = new Set([\n  ModuleType.START,\n  ModuleType.HBW,\n  ModuleType.DPS,\n  ModuleType.CHRG,\n]);\n\n/** The default production duration if nothing is configured */\nexport const MODULE_DEFAULT_PRODUCTION_DURATION = 5;\n\nexport type Module = {\n  serialNumber: string;\n  type: ModuleType;\n  placeholder?: boolean;\n};\nexport type ModuleState = {\n  headerId?: number;\n  type: ModuleType;\n  timestamp: Date;\n  serialNumber: string;\n  orderId: string;\n  orderUpdateId: number;\n  paused: boolean;\n  actionState?: ActionState<ModuleCommandType | InstantActions> | null;\n  actionStates?: Array<ActionState<ModuleCommandType | InstantActions>> | null;\n  errors: Array<VdaError>;\n  loads?: Array<Load>;\n  information?: Array<VdaInformation>;\n  operatingMode?: 'AUTOMATIC' | 'TEACHIN';\n  metadata?: unknown;\n};\n\nexport const ModuleInfoTypes = {\n  CALIBRATION_DATA: \"calibration_data\",\n  CALIBRATION_STATUS: \"calibration_status\"\n};\nexport const ModuleCalibrationStatusKeys = {\n  POSITIONS_CURRENT: 'POSITIONS.CURRENT',\n  POSITIONS_AVAILABLE: 'POSITIONS.AVAILABLE',\n};\n\n/**\n * A union of all supported commands by any module.\n */\nexport enum ModuleCommandType {\n  /** Drilling module */\n  DRILL = 'DRILL',\n  /** Milling module   */\n  MILL = 'MILL',\n  /** AIQS module */\n  CHECK_QUALITY = 'CHECK_QUALITY',\n  /** OVEN module */\n  FIRE = 'FIRE',\n  /** All modules: Load the workpiece from the module onto the FTS */\n  DROP = 'DROP',\n  /** All modules: take the workpiece from the FTS. Some modules like DPS or HBW will also store/output the workpiece **/\n  PICK = 'PICK',\n}\n\n/** The mapping from module type to the production command it supports.\n * Some modules may not have a production command and are not listed here. */\nexport const MODULE_COMMAND_MAP: { [x in ModuleType]?: ModuleCommandType } = {\n  [ModuleType.DRILL]: ModuleCommandType.DRILL,\n  [ModuleType.AIQS]: ModuleCommandType.CHECK_QUALITY,\n  [ModuleType.MILL]: ModuleCommandType.MILL,\n  [ModuleType.OVEN]: ModuleCommandType.FIRE,\n};\n\n/** The result of a finished quality check action. */\nexport enum QualityResult {\n  /** The workpiece passed the quality check.  */\n  PASSED = 'PASSED',\n  /** The workpiece failed the quality check. */\n  FAILED = 'FAILED',\n}\n\nexport type StoreMetadata = {\n  type: Workpiece;\n  workpieceId?: string;\n};\n\nexport type DurationMetadata = {\n  duration: number;\n  // type: Workpiece;\n};\n\nexport type ProductionCommand = {\n  timestamp: Date;\n  serialNumber: string;\n  orderId: string;\n  orderUpdateId: number;\n  action: Action;\n};\n\n/** The result of a production action\n * In Delivery          = 100  --> ModuleType.DPS and command ModuleCommandType.DROP\n * Quality Assurance    = 200  --> ModuleType.AIQS and command ModuleCommandType.CHECK_QUALITY\n * Stockpiling          = 300  --> ModuleType.HBW and command ModuleCommandType.PICK\n * Stock removal        = 400  --> ModuleType.HBW and command ModuleCommandType.DROP\n * Processing OVEN      = 500  --> ModuleType.OVEN and command ModuleCommandType.FIRE\n * Processing Mill      = 600  --> ModuleType.MILL and command ModuleCommandType.MILL\n * Processing Drill     = 700  --> ModuleType.DRILL and command ModuleCommandType.DRILL\n * Shipping             = 800  --> ModuleType.DPS and command ModuleCommandType.PICK\n *\n * use getNfcPosition to get the correct NFC position for the ModuleType and ModuleCommandType.\n * */\nexport type NfcPosition = 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800;\n\n/** Metadata for delivery Process */\nexport type DeliveryMetadata = {\n  workpiece: {\n    workpieceId: string;\n    type: Workpiece;\n    state: 'PROCESSED',\n    history: Array<HistoryPoint>;\n  }\n};\n/** History Point defines a timestamp with a <finished/started>(?) (has to be clarified) process on a specific module */\nexport type HistoryPoint = {\n  ts: number; // the timestamp has to be a unix timestamp because ROBO Pro Coding is unable to create it from an ISO string\n  // number defined as <100/200/300/400/500/600/700/800/>\n  code: NfcPosition;\n};\n\nexport type Action = {\n  id: string;\n  command: ModuleCommandType;\n  metadata?: DurationMetadata | StoreMetadata | DeliveryMetadata;\n};\n\n/**\n * Generates a unique key for the mapping of ModuleCommandType and ModuleType to NFC position\n * @param moduleType the module type\n * @param moduleCommand the module command\n */\nconst generateAssociationKeyNfcModuleCommand = (moduleType: ModuleType, moduleCommand: ModuleCommandType): string => {\n  return `${moduleType}_${moduleCommand}`;\n}\n\n/**\n * Mapping of ModuleCommandType and ModuleType to NFC position\n */\nconst nfcModuleCommandMap: Map<string, NfcPosition> = new Map<string, NfcPosition>([\n  [\n    generateAssociationKeyNfcModuleCommand(ModuleType.DPS, ModuleCommandType.DROP), 100\n  ],\n  [\n    generateAssociationKeyNfcModuleCommand(ModuleType.AIQS, ModuleCommandType.CHECK_QUALITY), 200\n  ],\n  [\n    generateAssociationKeyNfcModuleCommand(ModuleType.HBW, ModuleCommandType.PICK), 300\n  ],\n  [\n    generateAssociationKeyNfcModuleCommand(ModuleType.HBW, ModuleCommandType.DROP), 400\n  ],\n  [\n    generateAssociationKeyNfcModuleCommand(ModuleType.OVEN, ModuleCommandType.FIRE), 500\n  ],\n  [\n    generateAssociationKeyNfcModuleCommand(ModuleType.MILL, ModuleCommandType.MILL), 600\n  ],\n  [\n    generateAssociationKeyNfcModuleCommand(ModuleType.DRILL, ModuleCommandType.DRILL), 700\n  ],\n  [\n    generateAssociationKeyNfcModuleCommand(ModuleType.DPS, ModuleCommandType.PICK), 800\n  ],\n]);\n\n/**\n * Returns the NFC position for the given module type and module command.\n * @param moduleType\n * @param moduleCommand\n * @returns the NFC position, undefined if the combination is not supported\n */\nexport const getNfcPosition = (moduleType: ModuleType, moduleCommand: ModuleCommandType): NfcPosition | undefined => {\n  const key = generateAssociationKeyNfcModuleCommand(moduleType, moduleCommand);\n  return nfcModuleCommandMap.get(key);\n}\n\nexport enum StorageModuleBayPosition {\n  A1 = \"A1\",\n  A2 = \"A2\",\n  A3 = \"A3\",\n  B1 = \"B1\",\n  B2 = \"B2\",\n  B3 = \"B3\",\n  C1 = \"C1\",\n  C2 = \"C2\",\n  C3 = \"C3\",\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, shareReplay } from 'rxjs';\nimport {\n  ANY_SERIAL,\n  CcuTopic,\n  FtsTopic,\n  ModuleTopic,\n  getFtsTopic,\n  getModuleTopic,\n} from '../../common/protocol';\nimport { ProductionFlows } from '../../common/protocol/ccu';\nimport { TypedMqttService } from '../futurefactory.service';\nimport { getPayload } from '../utils/rx.utils';\n\nexport interface OrderStatus {\n  [order: string]: {\n    current: string;\n    log: string[];\n    lastTimestamp: Date;\n  };\n}\n\nexport const STATE_TOPICS = {\n  fts: getFtsTopic(ANY_SERIAL, FtsTopic.STATE),\n  module: getModuleTopic(ANY_SERIAL, ModuleTopic.STATE),\n  order: CcuTopic.ORDER_RESPONSE,\n};\n\n/**\n * Holds the current production flows as the mqtt subscription will only send them once per page load\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductionFlowsService {\n  /** The current flows as a replayable observable */\n  readonly productionFlows$: Observable<ProductionFlows>;\n\n  constructor(private mqttService: TypedMqttService) {\n    this.productionFlows$ = this.mqttService\n      .subscribe<ProductionFlows>(CcuTopic.FLOWS)\n      .pipe(getPayload(), shareReplay(1));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { map, Observable, shareReplay } from 'rxjs';\nimport { CcuTopic } from '../../common/protocol';\nimport {\n  FactoryLayout,\n  FactoryNode,\n  FactoryRoadFlat,\n  FtsPairedModule,\n  PairedModule,\n  PairingState,\n  RoadDirection,\n} from '../../common/protocol/ccu';\nimport { Module, ModuleType } from '../../common/protocol/module';\nimport { TypedMqttService } from '../futurefactory.service';\nimport { StatesService } from './states.service';\nimport { getPayload } from '../utils/rx.utils';\n\nexport type FactoryTileId = string;\nexport type FactoryTile = {\n  type: string;\n  x: number;\n  y: number;\n  id: string;\n};\nexport type FactoryRoadTile = FactoryTile & {\n  type: 'ROAD';\n  road: { [T in RoadDirection]?: FactoryTileId };\n};\nexport type FactoryModuleTile = FactoryTile & {\n  type: 'MODULE';\n  direction: RoadDirection;\n  intersection?: FactoryTileId;\n  moduleType: ModuleType;\n  connected: boolean;\n  placeholder?: boolean;\n};\nexport type FactoryGridLayout = Array<FactoryModuleTile | FactoryRoadTile>;\n\n/** Defines the modules, that are twice the size of a regular module */\nexport const largeModules = [ModuleType.HBW, ModuleType.DPS];\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FactoryLayoutService {\n  readonly currentGridLayout$: Observable<FactoryGridLayout>;\n  readonly pairedModules$: Observable<Array<PairedModule>>;\n  readonly pairedFTS$: Observable<Array<FtsPairedModule>>;\n  readonly pairingState$: Observable<PairingState>;\n\n  // directions to update, in clockwise order. The order is used for the module connection\n  private readonly DIRECTION_UPDATES: Array<{\n    direction: RoadDirection;\n    inverse: RoadDirection;\n    xDiff: number;\n    yDiff: number;\n  }> = [\n    {\n      direction: RoadDirection.NORTH,\n      inverse: RoadDirection.SOUTH,\n      xDiff: 0,\n      yDiff: -1,\n    },\n    {\n      direction: RoadDirection.EAST,\n      inverse: RoadDirection.WEST,\n      xDiff: 1,\n      yDiff: 0,\n    },\n    {\n      direction: RoadDirection.SOUTH,\n      inverse: RoadDirection.NORTH,\n      xDiff: 0,\n      yDiff: 1,\n    },\n    {\n      direction: RoadDirection.WEST,\n      inverse: RoadDirection.EAST,\n      xDiff: -1,\n      yDiff: 0,\n    },\n  ];\n\n  constructor(private mqtt: TypedMqttService, private factoryStateService: StatesService) {\n    this.currentGridLayout$ = this.mqtt\n      .subscribe<FactoryLayout>(CcuTopic.LAYOUT)\n      .pipe(\n        getPayload(),\n        map((layout) => this.layoutToGridLayout(layout)),\n        shareReplay(1)\n      );\n\n    this.pairingState$ = this.factoryStateService.pairingState$;\n    this.pairedModules$ = this.factoryStateService.pairedModules$;\n    this.pairedFTS$ = this.factoryStateService.pairedTransports$;\n  }\n\n  public getInverseDirection(direction: RoadDirection): RoadDirection {\n    switch (direction) {\n      case RoadDirection.EAST:\n        return RoadDirection.WEST;\n      case RoadDirection.WEST:\n        return RoadDirection.EAST;\n      case RoadDirection.NORTH:\n        return RoadDirection.SOUTH;\n      case RoadDirection.SOUTH:\n        return RoadDirection.NORTH;\n    }\n  }\n\n  public isLargeModule(moduleType: ModuleType): boolean {\n    return largeModules.includes(moduleType);\n  }\n\n  /**\n   * convert the layout to a grid layout and assign coordinates to all elements\n   * @param layout\n   */\n  public layoutToGridLayout(\n    layout: FactoryLayout\n  ): Array<FactoryModuleTile | FactoryRoadTile> {\n    const { modules, intersections, roads } = layout;\n    const road_tiles = this.createPositionedRoadTiles(intersections, roads);\n    const module_tiles = this.createModuleTiles(modules);\n    this.positionModuleTiles(module_tiles, road_tiles, roads);\n\n    const allTiles: Array<FactoryModuleTile | FactoryRoadTile> = [\n      ...Array.from(road_tiles.values()),\n      ...Array.from(module_tiles.values()),\n    ];\n    this.moveToPositivePositions(allTiles);\n\n    return allTiles;\n  }\n\n  /**\n   * Moves the grid positions of a collection of tiles into positive values. The tiles are moved in-place\n   * @param allTiles\n   * @private\n   */\n  private moveToPositivePositions(\n    allTiles: Array<FactoryModuleTile | FactoryRoadTile>\n  ) {\n    // get the minimum x and y values and offset the values into positive space\n    const minimums = allTiles.reduce(\n      (minimums, tile) => {\n        minimums.x = tile.x < minimums.x ? tile.x : minimums.x;\n        minimums.y = tile.y < minimums.y ? tile.y : minimums.y;\n        return minimums;\n      },\n      { x: 0, y: 0 }\n    );\n    allTiles.forEach((tile) => {\n      tile.x = tile.x - minimums.x;\n      tile.y = tile.y - minimums.y;\n    });\n  }\n\n  /**\n   * Positions and connects the module tiles in the road grid according to the given road connections.\n   * Connections are performed in-place, road tiles and module tiles are modified.\n   * @param module_tiles - The modules to connect\n   * @param road_tiles - The road tiles to connect the modules to\n   * @param roads - The road connections for the modules\n   * @private\n   */\n  private positionModuleTiles(\n    module_tiles: Map<string, FactoryModuleTile>,\n    road_tiles: Map<string, FactoryRoadTile>,\n    roads: FactoryRoadFlat[]\n  ): void {\n    // connect the modules to the road tiles\n    for (const edge of roads) {\n      const fromModule = module_tiles.get(edge.from);\n      const toModule = module_tiles.get(edge.to);\n      if (fromModule) {\n        const toNode = road_tiles.get(edge.to);\n        if (fromModule && toNode) {\n          fromModule.direction = edge.direction;\n          fromModule.intersection = toNode.id;\n          const inverseDirectionUpdate = this.DIRECTION_UPDATES.find(\n            (update) => update.inverse === edge.direction\n          );\n          if (inverseDirectionUpdate) {\n            fromModule.x = toNode.x + inverseDirectionUpdate.xDiff;\n            fromModule.y = toNode.y + inverseDirectionUpdate.yDiff;\n            toNode.road[inverseDirectionUpdate.direction] = fromModule.id;\n          }\n        }\n      } else if (toModule) {\n        const fromNode = road_tiles.get(edge.from);\n        if (toModule && fromNode) {\n          const directionUpdate = this.DIRECTION_UPDATES.find(\n            (update) => update.direction === edge.direction\n          );\n          if (directionUpdate) {\n            toModule.x = fromNode.x + directionUpdate.xDiff;\n            toModule.y = fromNode.y + directionUpdate.yDiff;\n            toModule.direction = directionUpdate.inverse;\n          }\n          fromNode.road[edge.direction] = toModule.id;\n          toModule.intersection = fromNode.id;\n        }\n      }\n    }\n  }\n\n  /**\n   * Create module tiles from a list of modules\n   * @param modules\n   * @private\n   */\n  private createModuleTiles(modules: Module[]): Map<string, FactoryModuleTile> {\n    // Add the connected modules to the grid\n    const module_tiles = new Map<string, FactoryModuleTile>();\n    modules.forEach((n) =>\n      module_tiles.set(n.serialNumber, {\n        type: 'MODULE',\n        id: n.serialNumber,\n        x: 0,\n        y: 0,\n        direction: n.type === ModuleType.DPS ? RoadDirection.WEST : RoadDirection.EAST,\n        connected: false,\n        moduleType: n.type,\n        placeholder: n.placeholder,\n      })\n    );\n    return module_tiles;\n  }\n\n  /**\n   * Create road tiles from a list of intersections and connect them using the given roads\n   *\n   * This function expects that all intersections are connected to a single road network.\n   * The behaviour is undefined when the list contains unconnected intersections\n   * @param intersections\n   * @param roads\n   * @private\n   */\n  private createPositionedRoadTiles(\n    intersections: FactoryNode[],\n    roads: FactoryRoadFlat[]\n  ): Map<string, FactoryRoadTile> {\n    const visited = new Set<string>();\n    const road_tiles = new Map<string, FactoryRoadTile>();\n    if (!intersections.length) {\n      return road_tiles;\n    }\n    intersections.forEach((n) =>\n      road_tiles.set(n.id, {\n        type: 'ROAD',\n        id: n.id,\n        x: 0,\n        y: 0,\n        road: {},\n      })\n    );\n\n    // create connections for the road grid\n    for (const edge of roads) {\n      const fromNode = road_tiles.get(edge.from);\n      const toNode = road_tiles.get(edge.to);\n      if (fromNode && toNode) {\n        fromNode.road[edge.direction] = toNode.id;\n        toNode.road[this.getInverseDirection(edge.direction)] = fromNode.id;\n      }\n    }\n    // assume all road tiles are connected\n    // walk through all nodes starting from the first\n    let start = intersections[0].id;\n    const stack: Array<FactoryRoadTile> = [road_tiles.get(start)!];\n\n    // Traverse the graph using depth-first search to calculate the positions\n    while (stack.length > 0) {\n      const activeNode = stack.pop()!;\n\n      for (const direction of this.DIRECTION_UPDATES) {\n        const nodeid = activeNode.road[direction.direction];\n        if (nodeid && !visited.has(nodeid)) {\n          visited.add(nodeid);\n          const connectedNode = road_tiles.get(nodeid);\n          if (connectedNode) {\n            connectedNode.x = activeNode.x + direction.xDiff;\n            connectedNode.y = activeNode.y + direction.yDiff;\n            stack.push(connectedNode);\n          }\n        }\n      }\n    }\n    return road_tiles;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MqttService } from 'ngx-mqtt';\nimport { Observable, merge } from 'rxjs';\nimport { map, scan, shareReplay, startWith } from 'rxjs/operators';\nimport {\n  ANY_SERIAL,\n  CcuTopic,\n  FtsTopic,\n  ModuleTopic,\n  OrderResponse,\n  getFtsTopic,\n  getModuleTopic,\n} from '../../common/protocol';\nimport { FtsState } from '../../common/protocol/fts';\nimport { ModuleState } from '../../common/protocol/module';\nimport { getPayload } from '../utils/rx.utils';\nimport { MqttMessage, TypedMqttService } from './typed-mqtt.service';\n\nexport interface OrderStatus {\n  [order: string]: {\n    current: string;\n    log: string[];\n    lastTimestamp: Date;\n  };\n}\n\nexport const STATE_TOPICS = {\n  fts: getFtsTopic(ANY_SERIAL, FtsTopic.STATE),\n  module: getModuleTopic(ANY_SERIAL, ModuleTopic.STATE),\n  order: CcuTopic.ORDER_RESPONSE,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderStatesService {\n  readonly orderStatus$: Observable<OrderStatus>;\n  readonly activeOrders$: Observable<OrderResponse[]>;\n  readonly completedOrders$: Observable<OrderResponse[]>;\n  readonly hasRunningOrders$: Observable<boolean>;\n\n  constructor(private mqttService: TypedMqttService) {\n    const ftsState$ = this.mqttService.subscribe<FtsState>(STATE_TOPICS.fts);\n    const moduleState$ = this.mqttService.subscribe<ModuleState>(\n      STATE_TOPICS.module\n    );\n    const orderState$ = this.mqttService.subscribe<OrderResponse>(\n      STATE_TOPICS.order\n    );\n\n    this.orderStatus$ = merge(ftsState$, moduleState$, orderState$).pipe(\n      scan(this.buildOrderStatus, {} as OrderStatus),\n      shareReplay(1)\n    );\n\n    this.activeOrders$ = this.listenForActiveOrders();\n    this.completedOrders$ = this.listenForCompletedOrders();\n    this.hasRunningOrders$ = this.setupHasRunningOrders(this.activeOrders$);\n  }\n\n  buildOrderStatus = (\n    status: OrderStatus,\n    message: MqttMessage<FtsState | ModuleState | OrderResponse>\n  ): OrderStatus => {\n    const newStatus = { ...status };\n    let orderId, newMessage, timestamp;\n    if (message) {\n      if (MqttService.filterMatchesTopic(STATE_TOPICS.fts, message.topic)) {\n        const ftsResponse = message.payload as FtsState;\n        orderId = ftsResponse.orderId;\n        if (ftsResponse.actionState) {\n          timestamp = new Date(ftsResponse.actionState.timestamp);\n          newMessage = `FTS ${ftsResponse.serialNumber}: ${ftsResponse.actionState.state}`;\n        }\n      } else if (\n        MqttService.filterMatchesTopic(STATE_TOPICS.module, message.topic)\n      ) {\n        const moduleResponse = message.payload as ModuleState;\n        orderId = moduleResponse.orderId;\n        if (moduleResponse.actionState) {\n          timestamp = new Date(moduleResponse.actionState.timestamp);\n          newMessage = `Module ${moduleResponse.serialNumber}: ${moduleResponse.actionState.command} ${moduleResponse.actionState.state}`;\n        }\n      } else if (\n        MqttService.filterMatchesTopic(STATE_TOPICS.order, message.topic)\n      ) {\n        const orderResponse = message.payload as OrderResponse;\n        orderId = orderResponse.orderId;\n        timestamp = new Date(orderResponse.timestamp);\n        newMessage = `Order created: ${orderResponse.orderId} ${orderResponse.type}`;\n      }\n      if (orderId) {\n        const prev = status[orderId]?.current;\n        const log = prev\n          ? [prev, ...status[orderId]?.log]\n          : status[orderId]?.log || [];\n        newStatus[orderId] = {\n          current: newMessage || 'Unknown',\n          lastTimestamp: timestamp || new Date(),\n          log: log,\n        };\n      }\n    }\n    return newStatus;\n  };\n\n  private listenForActiveOrders(): Observable<OrderResponse[]> {\n    return this.mqttService\n      .subscribe<OrderResponse[]>(CcuTopic.ACTIVE_ORDERS)\n      .pipe(getPayload(), shareReplay(1));\n  }\n\n  private listenForCompletedOrders(): Observable<OrderResponse[]> {\n    return this.mqttService\n      .subscribe<OrderResponse[]>(CcuTopic.COMPLETED_ORDERS)\n      .pipe(getPayload(), shareReplay(1));\n  }\n\n  private setupHasRunningOrders(\n    activeOrders$: Observable<OrderResponse[]>\n  ): Observable<boolean> {\n    return activeOrders$.pipe(\n      startWith([]),\n      map((activeOrders) => (activeOrders ?? []).length > 0),\n      shareReplay(1)\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ControllerResponse } from '@fischertechnik/ft-api';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, withLatestFrom } from 'rxjs/operators';\nimport { SelectedControllerService } from '../../services/selected-controller.service';\n\n@Injectable()\nexport class MissingControllerBannerState {\n  private readonly factoryControllers$: Observable<ControllerResponse[]>;\n  public readonly hasController$: Observable<boolean>;\n\n  constructor(private controllerService: SelectedControllerService) {\n    this.factoryControllers$ =\n      this.controllerService.availableFutureFactoryControllers$;\n    this.hasController$ = this.setupHasController(\n      this.factoryControllers$,\n      this.controllerService.selectedController$\n    );\n  }\n\n  private setupHasController(\n    factoryControllers$: Observable<ControllerResponse[]>,\n    selectedController$: Observable<ControllerResponse | undefined>\n  ): Observable<boolean> {\n    return factoryControllers$.pipe(\n      withLatestFrom(selectedController$),\n      map(\n        ([controllers, selectedController]) =>\n          !!selectedController || controllers.length > 0\n      ),\n      shareReplay(1)\n    );\n  }\n}\n","<ng-container [ngSwitch]=\"state.hasController$ | async\">\n  <ng-content *ngSwitchCase=\"true\"></ng-content>\n  <div *ngSwitchDefault class=\"missing-controller-banner\">\n    <h1>{{ \"Controller for the Agile Production Simulation is not connected\" | translate }}</h1>\n  </div>\n</ng-container>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { MissingControllerBannerState } from './missing-controller-banner.state';\n\n@Component({\n  selector: 'ff-missing-controller-banner',\n  templateUrl: './missing-controller-banner.component.html',\n  styleUrls: ['./missing-controller-banner.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MissingControllerBannerState],\n})\nexport class MissingControllerBannerComponent {\n  constructor(public state: MissingControllerBannerState) {}\n}\n","<ng-template #flowsConnector>\n  <svg viewBox=\"0 0 100 20\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill=\"var(--accent-color)\" stroke=\"var(--accent-color)\" d=\"M0,0 L100,0 L50,19 L0,0\"/>\n  </svg>\n</ng-template>\n\n<ff-missing-controller-banner>\n  <div id=\"flows-configuration\">\n    <h2 class=\"heading\">\n      {{ 'Bearbeitungsschritte' | translate }}\n    </h2>\n    <section class=\"flows-actions\">\n      <mat-button-toggle\n        [attr.aria-label]=\"'Bearbeitungsschritt hinzufügen' | translate\"\n        [disabled]=\"hasRunningOrders$ | async\"\n        #add_toggle>\n        <mat-icon>add_circle</mat-icon>\n      </mat-button-toggle>\n      <button mat-raised-button\n              (click)=\"saveFlows()\"\n              [disabled]=\"(hasRunningOrders$ | async) || !modified\"\n              [attr.aria-label]=\"'Speichern' | translate\"\n              [matTooltip]=\"'Speichern' | translate\">\n        <mat-icon>save</mat-icon>\n      </button>\n      <button mat-raised-button\n              (click)=\"resetFlows()\"\n              [attr.aria-label]=\"'Zurücksetzen' | translate\"\n              [matTooltip]=\"'Zurücksetzen' | translate\"\n              [disabled]=\"!modified\">\n        <mat-icon>refresh</mat-icon>\n      </button>\n      <mat-slide-toggle\n        [attr.aria-label]=\"'Erweiterte Bearbeitungsschritte aktivieren' | translate\"\n        [disabled]=\"hasRunningOrders$ | async\"\n        [(ngModel)]=\"extendedFlows\"\n        [style.margin-left.px]=\"16\">\n        {{ 'Erweiterte Bearbeitungsschritte aktivieren' | translate }}\n      </mat-slide-toggle>\n    </section>\n    <section class=\"workpiece__steps\" [style.display]=\"add_toggle.checked ? 'block' : 'none'\">\n      <mat-card>\n        <mat-card-title>\n          {{ 'Vorhandene Produktionsmodule' | translate }}\n        </mat-card-title>\n        <mat-card-content>\n          <div cdkDropList\n               class=\"modules-list\"\n               [id]=\"availableModulesId\"\n               [cdkDropListDisabled]=\"hasRunningOrders$ | async\"\n               [cdkDropListConnectedTo]=\"[Workpiece.BLUE, Workpiece.RED, Workpiece.WHITE]\"\n               cdkDropListSortingDisabled>\n            <section class=\"module-item\"\n                     [class.blocked]=\"hasRunningOrders$ | async\"\n                     *ngFor=\"let module of (selectableTypes$ | async)\"\n                     cdkDrag [cdkDragData]=\"module\">\n              <h3>{{ 'Produktionsschritt.' + module | translate }}</h3>\n            </section>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </section>\n    <section class=\"workpiece__flows\">\n      <section class=\"flows-start\">\n        <h2>{{ 'Auslagern aus Hochregallager' | translate }}</h2>\n      </section>\n      <ng-container *ngTemplateOutlet=\"flowsConnector\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"flowsConnector\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"flowsConnector\"></ng-container>\n      <mat-card class=\"workpiece__flows__steps\">\n        <mat-card-header>\n          <img mat-card-avatar class=\"workpiece--icon\"\n               src=\"assets/images/ic_ft_workpiece_blue.svg\"\n               [attr.alt]=\"'Werkstück.Blau' | translate\"/>\n          <mat-card-title class=\"workpiece--name\">\n            {{ 'Werkstück.Blau' | translate }}\n          </mat-card-title>\n          <img class=\"workpiece__finished\"\n               src=\"assets/images/drilled+milled.svg\"\n               [attr.alt]=\"'Fertiges Werkstück' | translate\"/>\n        </mat-card-header>\n        <mat-card-content>\n          <div cdkDropList\n               [id]=\"Workpiece.BLUE\"\n               [cdkDropListData]=\"blueSteps\"\n               class=\"step-list\"\n               [cdkDropListDisabled]=\"hasRunningOrders$ | async\"\n               [cdkDropListConnectedTo]=\"[availableModulesId, Workpiece.RED, Workpiece.WHITE]\"\n               [cdkDropListEnterPredicate]=\"enterPredicate__bound\"\n               [cdkDropListSortPredicate]=\"sortPredicate\"\n               (cdkDropListDropped)=\"drop($event)\">\n            <section class=\"step-item\"\n                     [class.blocked]=\"hasRunningOrders$ | async\"\n                     *ngFor=\"let step of blueSteps; let index=index\"\n                     cdkDrag [cdkDragData]=\"step\">\n              <img class=\"step-item__icon\"\n                   [src]=\"'assets/images/ic_ft_' + step.toLowerCase() + '.svg'\"\n                   [attr.alt]=\"'Produktionsschritt.' + step | translate\"/>\n              <h3>{{ 'Produktionsschritt.' + step | translate }}</h3>\n              <span class=\"buttons push\">\n                <button mat-icon-button\n                        [attr.aria-label]=\"'Löschen' | translate\"\n                        [disabled]=\"hasRunningOrders$ | async\"\n                        (click)=\"deleteStepAtIndex(index, blueSteps)\">\n                  <mat-icon>delete</mat-icon>\n                </button>\n              </span>\n            </section>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      <mat-card class=\"workpiece__flows__steps\">\n        <mat-card-header>\n          <img mat-card-avatar class=\"workpiece--icon\"\n               src=\"assets/images/ic_ft_workpiece_red.svg\"\n               [attr.alt]=\"'Werkstück.Rot' | translate\"/>\n          <mat-card-title class=\"workpiece--name\">\n            {{ 'Werkstück.Rot' | translate }}\n          </mat-card-title>\n          <img class=\"workpiece__finished\"\n               src=\"assets/images/milled.svg\"\n               [attr.alt]=\"'Fertiges Werkstück' | translate\"/>\n        </mat-card-header>\n        <mat-card-content>\n          <div cdkDropList\n               [id]=\"Workpiece.RED\"\n               [cdkDropListData]=\"redSteps\"\n               class=\"step-list\"\n               [cdkDropListDisabled]=\"hasRunningOrders$ | async\"\n               [cdkDropListConnectedTo]=\"[availableModulesId, Workpiece.BLUE, Workpiece.WHITE]\"\n               [cdkDropListEnterPredicate]=\"enterPredicate__bound\"\n               [cdkDropListSortPredicate]=\"sortPredicate\"\n               (cdkDropListDropped)=\"drop($event)\">\n            <section class=\"step-item\"\n                     [class.blocked]=\"hasRunningOrders$ | async\"\n                     *ngFor=\"let step of redSteps; let index=index\"\n                     cdkDrag [cdkDragData]=\"step\">\n              <img class=\"step-item__icon\"\n                   [src]=\"'assets/images/ic_ft_' + step.toLowerCase() + '.svg'\"\n                   [attr.alt]=\"'Produktionsschritt.' + step | translate\"/>\n              <h3>{{ 'Produktionsschritt.' + step | translate }}</h3>\n              <span class=\"buttons push\">\n                <button mat-icon-button\n                        [attr.aria-label]=\"'Löschen' | translate\"\n                        [disabled]=\"hasRunningOrders$ | async\"\n                        (click)=\"deleteStepAtIndex(index, redSteps)\">\n                  <mat-icon>delete</mat-icon>\n                </button>\n              </span>\n            </section>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      <mat-card class=\"workpiece__flows__steps\">\n        <mat-card-header>\n          <img mat-card-avatar class=\"workpiece--icon\"\n               src=\"assets/images/ic_ft_workpiece_white.svg\"\n               [attr.alt]=\"'Werkstück.Weiß' | translate\"/>\n          <mat-card-title class=\"workpiece--name\">\n            {{ 'Werkstück.Weiß' | translate }}\n          </mat-card-title>\n          <img class=\"workpiece__finished\"\n               src=\"assets/images/drilled.svg\"\n               [attr.alt]=\"'Fertiges Werkstück' | translate\"/>\n        </mat-card-header>\n        <mat-card-content>\n          <div cdkDropList\n               [id]=\"Workpiece.WHITE\"\n               [cdkDropListData]=\"whiteSteps\"\n               class=\"step-list\"\n               [cdkDropListDisabled]=\"hasRunningOrders$ | async\"\n               [cdkDropListConnectedTo]=\"[availableModulesId, Workpiece.BLUE, Workpiece.RED]\"\n               [cdkDropListEnterPredicate]=\"enterPredicate__bound\"\n               [cdkDropListSortPredicate]=\"sortPredicate\"\n               (cdkDropListDropped)=\"drop($event)\">\n            <section class=\"step-item\"\n                     [class.blocked]=\"hasRunningOrders$ | async\"\n                     *ngFor=\"let step of whiteSteps; let index=index\"\n                     cdkDrag [cdkDragData]=\"step\">\n              <img class=\"step-item__icon\"\n                   [src]=\"'assets/images/ic_ft_' + step.toLowerCase() + '.svg'\"\n                   [attr.alt]=\"'Produktionsschritt.' + step | translate\"/>\n              <h3>{{ 'Produktionsschritt.' + step | translate }}</h3>\n              <span class=\"buttons push\">\n                <button mat-icon-button\n                        [attr.aria-label]=\"'Löschen' | translate\"\n                        [disabled]=\"hasRunningOrders$ | async\"\n                        (click)=\"deleteStepAtIndex(index, whiteSteps)\">\n                  <mat-icon>delete</mat-icon>\n                </button>\n              </span>\n            </section>\n          </div>\n        </mat-card-content>\n      </mat-card>\n      <ng-container *ngTemplateOutlet=\"flowsConnector\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"flowsConnector\"></ng-container>\n      <ng-container *ngTemplateOutlet=\"flowsConnector\"></ng-container>\n      <section class=\"flows-end\">\n        <h2>{{ 'Auslieferung über Warenausgang' | translate }}</h2>\n      </section>\n    </section>\n  </div>\n</ff-missing-controller-banner>\n","import {\n  CdkDrag,\n  CdkDragDrop,\n  CdkDropList,\n  moveItemInArray,\n  transferArrayItem,\n} from '@angular/cdk/drag-drop';\nimport { Component, OnDestroy } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  Observable,\n  ReplaySubject,\n  firstValueFrom,\n  map,\n  takeUntil,\n} from 'rxjs';\nimport { CcuTopic } from '../../../common/protocol';\nimport {\n  PairedModule,\n  ProductionFlows,\n  Workpiece,\n} from '../../../common/protocol/ccu';\nimport { ModuleType, SUPPORT_MODULES } from '../../../common/protocol/module';\nimport { TypedMqttService } from '../../futurefactory.service';\nimport { FactoryLayoutService } from '../../services/factory-layout.service';\nimport { OrderStatesService } from '../../services/order-states.service';\nimport { ProductionFlowsService } from '../../services/production-flow.service';\n\n// This record contains the allowed modules for each workpiece type\n// It has to reside outside of the component, otherwise the drag and drop functionality\n// will not work correctly\nconst allowedModules = {\n  [Workpiece.BLUE]: [\n    ModuleType.AIQS,\n    ModuleType.MILL,\n    ModuleType.DRILL,\n    ModuleType.OVEN,\n  ],\n  [Workpiece.RED]: [ModuleType.AIQS, ModuleType.MILL, ModuleType.OVEN],\n  [Workpiece.WHITE]: [ModuleType.AIQS, ModuleType.DRILL, ModuleType.OVEN],\n};\n\n/**\n * This record contains the allowed modules for each workpiece type\n * after the extended flows option is enabled\n */\nconst allModules = [\n  ModuleType.AIQS,\n  ModuleType.MILL,\n  ModuleType.DRILL,\n  ModuleType.OVEN,\n];\n\n/**\n * Allows viewing and editing the steps for the production of a workpiece type\n */\n@Component({\n  selector: 'ff-flow-editor',\n  templateUrl: './flow-editor.component.html',\n  styleUrls: ['./flow-editor.component.scss'],\n})\nexport class FutureFactoryFlowEditorComponent implements OnDestroy {\n  private readonly destroyed$ = new ReplaySubject<void>(1);\n  private productionFlows: ProductionFlows = {};\n  readonly availableTypes$: Observable<Array<ModuleType>>;\n  readonly selectableTypes$: Observable<Array<ModuleType>>;\n  readonly Workpiece = Workpiece;\n  readonly availableModulesId = 'available-modules';\n  readonly hasRunningOrders$: Observable<boolean>;\n\n  modified = false;\n  extendedFlows = false;\n  enterPredicate__bound = this.enterPredicate.bind(this);\n  blueSteps: ModuleType[] = [];\n  redSteps: ModuleType[] = [];\n  whiteSteps: ModuleType[] = [];\n\n  constructor(\n    public productionFlowsService: ProductionFlowsService,\n    public layout: FactoryLayoutService,\n    private orderStates: OrderStatesService,\n    private mqtt: TypedMqttService,\n    private translate: TranslateService,\n    private notification: MatSnackBar\n  ) {\n    productionFlowsService.productionFlows$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((flows) => {\n        this.productionFlows = flows;\n        this.resetFlows();\n      });\n\n    const isPairedProductionModule = (module: PairedModule) =>\n      module.pairedSince &&\n      module.subType &&\n      !SUPPORT_MODULES.has(module.subType);\n\n    this.availableTypes$ = layout.pairedModules$.pipe(\n      map((modules) =>\n        modules\n          .filter(isPairedProductionModule)\n          .map((module) => module.subType!)\n      )\n    );\n    this.selectableTypes$ = this.availableTypes$.pipe(\n      map((modTypes) => [...new Set(modTypes ?? [])])\n    );\n\n    this.hasRunningOrders$ = this.orderStates.hasRunningOrders$;\n  }\n\n  /**\n   * Reset the flows to the current factory configuration\n   * @private\n   */\n  public resetFlows(): void {\n    this.modified = false;\n    const flows = JSON.parse(JSON.stringify(this.productionFlows));\n    if (!this.modified) {\n      this.blueSteps = flows.BLUE?.steps || [];\n      this.redSteps = flows.RED?.steps || [];\n      this.whiteSteps = flows.WHITE?.steps || [];\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * Predicate function that only allows dragging of modules that are allowed for the\n   * workpiece type at the drop location\n   * The AIQS module is only allowed once per workpiece type.\n   * Also: When the is no valid index for the module to be dropped, it is not allowed.\n   */\n  enterPredicate(\n    drag: CdkDrag<ModuleType>,\n    drop: CdkDropList<ModuleType[]>\n  ): boolean {\n    const allowedModulesForColor = this.extendedFlows\n      ? allModules\n      : allowedModules[drop.id] ?? [];\n    const hasAiqs =\n      drag.data === ModuleType.AIQS && drop.data.includes(ModuleType.AIQS);\n    const isAllowedModule = allowedModulesForColor.includes(drag.data);\n\n    if (!(isAllowedModule && !hasAiqs)) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Ensures, that no module can be placed directly after or before itself.\n   * Also ensures that AIQS is always at the end of the chain.\n   * This method is used as a predicate function for the drag-and-drop functionality.\n   */\n  sortPredicate(index: number, drag: CdkDrag<ModuleType>, drop: CdkDropList<ModuleType[]>): boolean {\n    const steps = [...drop.data];\n    moveItemInArray(steps, index, drop.data.indexOf(drag.data));\n\n    const isAiqs = drag.data === ModuleType.AIQS;\n    const isModuleSame = steps[index + 1] === drag.data;\n    const isPreviousModuleSame = steps[index - 1] === drag.data;\n    const isPreviousModuleAiqs = steps[index - 1] === ModuleType.AIQS;\n\n    if (isAiqs) {\n      return index === steps.length;\n    } else {\n      return !isModuleSame && !isPreviousModuleSame && !isPreviousModuleAiqs;\n    }\n  }\n\n  drop(event: CdkDragDrop<ModuleType[]>) {\n    if (\n      event.previousIndex === event.currentIndex &&\n      event.previousContainer === event.container\n    ) {\n      return;\n    }\n\n    this.modified = true;\n    if (event.previousContainer === event.container) {\n      moveItemInArray(\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    } else if (event.previousContainer.id === this.availableModulesId) {\n      event.container.data.splice(event.currentIndex, 0, event.item.data);\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        event.container.data,\n        event.previousIndex,\n        event.currentIndex\n      );\n    }\n\n    this.ensureChainConsistency(event.container.data);\n  }\n\n  /**\n   * (Ensure = check & repair; mutates the input array!)\n   * Ensures that the AIQS is always at the end of the chain.\n   *   - If not, it moves the AIQS module to the end of the chain and notifies the user.\n   * Ensures, that no module follows or precedes itself.\n   *   - If so, it removes the module from the steps array and notifies the user.\n   * @param steps The array of steps to check\n   * @returns\n   */\n  ensureChainConsistency(steps: ModuleType[]): void {\n    // ensures that AIQS is always at the end of the chain\n    const lastIndex = steps.length - 1;\n    const aiqsIndex = steps.indexOf(ModuleType.AIQS);\n    if (aiqsIndex !== -1 && aiqsIndex !== lastIndex) {\n      // move aiqs to end\n      steps.splice(lastIndex, 0, steps.splice(aiqsIndex, 1)[0]);\n      this.notification.open(\n        this.translate.instant('AIQS muss immer am Ende der Kette stehen'),\n        this.translate.instant('OK'),\n        { duration: 5000 }\n      );\n    }\n\n    // ensures that no module follows or precedes itself\n    let i = 0;\n    while (i < steps.length - 1) {\n      if (steps[i] === steps[i + 1]) {\n        steps.splice(i, 1);\n        this.notification.open(\n          this.translate.instant(\n            'Ein Produktionsschritt wurde entfernt, da dieser direkt auf sich selbst folgte.'\n          ),\n          this.translate.instant('OK'),\n          { duration: 5000 }\n        );\n      } else {\n        i++;\n      }\n    }\n  }\n\n  deleteStepAtIndex(index: number, steps: ModuleType[]) {\n    this.modified = true;\n    steps.splice(index, 1);\n\n    this.ensureChainConsistency(steps);\n  }\n\n  async saveFlows() {\n    const hasRunningOrders = await firstValueFrom(this.hasRunningOrders$);\n    if (hasRunningOrders) {\n      return;\n    }\n    const flows: ProductionFlows = {\n      BLUE: { steps: [...this.blueSteps] },\n      RED: { steps: [...this.redSteps] },\n      WHITE: { steps: [...this.whiteSteps] },\n    };\n    this.modified = false;\n    this.mqtt.publish(CcuTopic.SET_FLOWS, flows, { qos: 2 });\n  }\n}\n","import { map, Observable } from 'rxjs';\nimport { ROUTE_TO_MODULE_ROOT } from '../futurefactory.routes';\nimport { ActivatedRoute } from '@angular/router';\nimport { DeviceType } from '../../common/protocol/ccu';\nimport { ModuleType } from '../../common/protocol/module';\n\nexport function getRouteToModuleRoot(activatedRoute: ActivatedRoute): Observable<string> {\n  return activatedRoute.data.pipe(map(data => `${data[ROUTE_TO_MODULE_ROOT] ?? '.'}`));\n}\n\nexport const MODULE_ICON_PATHS: { [t in ModuleType | DeviceType | 'undefined' | 'UNDEFINED' ]: string } = {\n  [ModuleType.AIQS]: 'assets/images/ic_ft_aiqs.svg',\n  [ModuleType.HBW]: 'assets/images/ic_ft_hbw.svg',\n  [ModuleType.DPS]: 'assets/images/ic_ft_dps.svg',\n  [ModuleType.DRILL]: 'assets/images/ic_ft_drill.svg',\n  [ModuleType.MILL]: 'assets/images/ic_ft_mill.svg',\n  [ModuleType.CHRG]: 'assets/images/ic_ft_chrg.svg',\n  [ModuleType.OVEN]: 'assets/images/ic_ft_oven.svg',\n  [ModuleType.START]: 'assets/images/placeholder.svg',\n  'MODULE': 'assets/images/placeholder.svg',\n  'FTS': 'assets/images/ic_ft_fts.svg',\n  'UNDEFINED': 'assets/images/placeholder.svg',\n  'undefined': 'assets/images/placeholder.svg'\n};\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { GridsterItem } from 'angular-gridster2';\nimport { BehaviorSubject, combineLatest, map, Observable, shareReplay, startWith, Subject, } from 'rxjs';\nimport { FactoryLayout, PairedModule, RoadDirection, } from '../../common/protocol/ccu';\nimport { ModuleType } from '../../common/protocol/module';\nimport { FactoryGridLayout, FactoryLayoutService, FactoryModuleTile, FactoryRoadTile, } from './factory-layout.service';\n\nexport interface GridItem extends GridsterItem {\n  tile: FactoryModuleTile | FactoryRoadTile;\n}\n\n/** length of the docking path to a module in mm */\nconst DOCKING_ROAD_LENGTH = 380;\n/** length of the docking path for the charger in mm */\nconst CHARGER_ROAD_LENGTH = 430;\n/** length of the road between intersections in mm */\nconst ROAD_LENGTH = 360;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LayoutEditorService implements OnDestroy {\n  // next direction in clockwise order\n  private readonly NEXT_DIRECTIONS_CLOCKWISE: Record<\n    RoadDirection,\n    RoadDirection\n  > = {\n    [RoadDirection.NORTH]: RoadDirection.EAST,\n    [RoadDirection.EAST]: RoadDirection.SOUTH,\n    [RoadDirection.SOUTH]: RoadDirection.WEST,\n    [RoadDirection.WEST]: RoadDirection.NORTH,\n  };\n  // directions to update, in clockwise order. The order is used for the module connection\n  private readonly DIRECTION_UPDATES: Array<{\n    direction: RoadDirection;\n    inverse: RoadDirection;\n    xDiff: number;\n    yDiff: number;\n  }> = [\n    {\n      direction: RoadDirection.NORTH,\n      inverse: RoadDirection.SOUTH,\n      xDiff: 0,\n      yDiff: -1,\n    },\n    {\n      direction: RoadDirection.EAST,\n      inverse: RoadDirection.WEST,\n      xDiff: 1,\n      yDiff: 0,\n    },\n    {\n      direction: RoadDirection.SOUTH,\n      inverse: RoadDirection.NORTH,\n      xDiff: 0,\n      yDiff: 1,\n    },\n    {\n      direction: RoadDirection.WEST,\n      inverse: RoadDirection.EAST,\n      xDiff: -1,\n      yDiff: 0,\n    },\n  ];\n\n  private readonly EXTRA_TILE_OFFSETS_FOR_MODULES: Record<\n    string,\n    {\n      [key in RoadDirection]: { x: number; y: number, cols: number, rows: number };\n    }\n  > = {\n    [ModuleType.DPS]: {\n      [RoadDirection.NORTH]: { x: 0, y: 0, cols: 2, rows: 1 },\n      [RoadDirection.EAST]: { x: 0, y: 0, cols:  1, rows: 2 },\n      [RoadDirection.SOUTH]: { x: -1, y: 0, cols: 2, rows: 1 },\n      [RoadDirection.WEST]: { x: 0, y: -1, cols: 1, rows: 2 },\n    },\n    [ModuleType.HBW]: {\n      [RoadDirection.NORTH]: { x: -1, y: 0, cols: 2, rows: 1 },\n      [RoadDirection.EAST]: { x: 0, y: -1, cols:  1, rows: 2 },\n      [RoadDirection.SOUTH]: { x: 0, y: 0, cols: 2, rows: 1 },\n      [RoadDirection.WEST]: { x: 0, y: 0, cols: 1, rows: 2 },\n    },\n  };\n\n  private grid: GridItem[] = [];\n  private _modified = false;\n\n  public get modified() {\n    return this._modified;\n  }\n\n  private destroyed$ = new Subject<void>();\n  private gridSubject: BehaviorSubject<GridItem[]> = new BehaviorSubject<\n    GridItem[]\n  >([]);\n  readonly editorGrid$: Observable<GridItem[]> =\n    this.gridSubject.asObservable();\n  private baseLayout: FactoryGridLayout = [];\n\n  readonly availableModules$: Observable<PairedModule[]>;\n\n  constructor(private layoutService: FactoryLayoutService) {\n    // internal subscription to always update the grid\n    this.layoutService.currentGridLayout$.subscribe((layout) => {\n      this.baseLayout = layout; // store layout for grid reset\n      this.updateEditorGrid(layout);\n    });\n    this.availableModules$ = this._getAvailableModules(\n      this.layoutService.pairedModules$.pipe(startWith([])),\n      this.editorGrid$,\n      this.layoutService.currentGridLayout$\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  /**\n   * Determine the list of modules to show in the list\n   * @param modules$\n   * @param editorGrid$\n   * @param currentGridLayout$\n   * @private\n   */\n  _getAvailableModules(\n    modules$: Observable<PairedModule[]>,\n    editorGrid$: Observable<GridItem[]>,\n    currentGridLayout$: Observable<FactoryGridLayout>\n  ): Observable<PairedModule[]> {\n    // This method is not marked as private to be able to test it directly.\n\n    const availableModules$ = combineLatest([\n      modules$,\n      editorGrid$,\n      currentGridLayout$,\n    ]).pipe(\n      map(([mods, grid, currentGridLayout]) => {\n        const modulesInLayout = currentGridLayout.filter(\n          (mod): mod is FactoryModuleTile => mod.type === 'MODULE'\n        );\n        const modules = [...mods];\n        for (const module of modulesInLayout) {\n          // add modules that are\n          if (\n            !modules.find((checkMod) => checkMod.serialNumber === module.id)\n          ) {\n            modules.push({\n              type: 'MODULE',\n              subType: module.moduleType,\n              connected: false,\n              serialNumber: module.id,\n            });\n          }\n        }\n        return modules.filter(\n          (mod) =>\n            mod.type === 'MODULE' &&\n            !grid.find((item) => item.tile.id === mod.serialNumber)\n        );\n      }),\n      shareReplay(1)\n    );\n\n    return availableModules$;\n  }\n\n  public isLargeModule(moduleType: ModuleType): boolean {\n    return this.layoutService.isLargeModule(moduleType);\n  }\n\n  public hasGridItemId(id: string): boolean {\n    return this.grid.find(item => item.tile.id === id) != undefined;\n  }\n\n  /**\n   * Add all elements that are part of the currently used factory layout and remove all others\n   * @param layout\n   */\n  updateEditorGrid(layout: FactoryGridLayout) {\n    if (this._modified) {\n      return;\n    }\n    // first remove all deleted elements\n    this.grid = this.grid.filter(item => layout.find(tile => tile.id === item.tile.id))\n    // then fill in the changed or added elements\n    for (const tile of layout) {\n      const gridItem = this.grid.find((item) => item.tile.id === tile.id);\n      let offX = 0, offY = 0, rows = 1, cols = 1;\n      if (tile.type === 'MODULE') {\n        const modifiers = this.EXTRA_TILE_OFFSETS_FOR_MODULES[tile.moduleType]?.[tile.direction];\n        if (modifiers) {\n          offX = modifiers.x;\n          offY = modifiers.y;\n          rows = modifiers.rows;\n          cols = modifiers.cols;\n        }\n      }\n      if (!gridItem) {\n        this.grid.push({\n          tile: JSON.parse(JSON.stringify(tile)), // deep copy\n          x: tile.x + offX,\n          y: tile.y + offY,\n          rows: rows,\n          cols: cols,\n          resizeEnabled: false,\n        });\n      } else {\n        // move existing items\n        gridItem.tile = JSON.parse(JSON.stringify(tile)); // deep copy\n        gridItem.x = tile.x + offX;\n        gridItem.y = tile.y + offY;\n        gridItem.rows = rows;\n        gridItem.cols = cols;\n      }\n    }\n    this.moveToPositiveCoordinates(this.grid);\n    this.gridSubject.next(this.grid);\n  }\n\n  private moveToPositiveCoordinates(grid: GridItem[]) {\n    const minX = grid.reduce((minimum, item) => Math.min(item.x, minimum), 0 );\n    const minY = grid.reduce((minimum, item) => Math.min(item.y, minimum), 0 );\n    for (const item of grid) {\n      item.x -= minX;\n      item.y -= minY;\n      item.tile.x -= minX;\n      item.tile.y -= minY;\n    }\n  }\n\n  resetLayout() {\n    this.grid = [];\n    this._modified = false;\n    this.updateEditorGrid(this.baseLayout);\n  }\n\n  getNextId(): string {\n    const ids = this.grid\n      .filter((item) => item.tile.type === 'ROAD')\n      .map((item) => Number(item.tile.id));\n    if (!ids.length) {\n      return '1';\n    }\n    return String(Math.max(...ids) + 1);\n  }\n\n  private getGridItemAtTilePosition(x: number, y: number): GridItem | undefined {\n    return this.grid.find((item) => item.tile.x === x && item.tile.y === y);\n  }\n  private hasOverlappingItem(needle: GridItem) {\n    return this.grid.find(item => (! ((item.x >= (needle.x + needle.cols) ||\n        (item.x + item.cols) <= needle.x ||\n        item.y >= (needle.y + needle.rows) ||\n          (item.y + item.rows) <= needle.y))) && needle !== item )\n  }\n\n  public deleteGridItem(changed: GridItem) {\n    this._modified = true;\n    this.clearItemAssociations(changed);\n    this.grid = this.grid.filter((item) => item !== changed);\n    this.gridSubject.next(this.grid);\n  }\n\n  private clearItemAssociations(changed: GridItem) {\n    // delete old associations\n    for (const item of this.grid) {\n      if (\n        item !== changed &&\n        item.tile.type === 'MODULE' &&\n        item.tile.intersection === changed.tile.id\n      ) {\n        item.tile.intersection = undefined;\n      } else if (item !== changed && item.tile.type === 'ROAD') {\n        const roads = item.tile.road;\n        for (const dir of Object.keys(roads) as RoadDirection[]) {\n          if (roads[dir] === changed.tile.id) {\n            roads[dir] = undefined;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * After a tile has been moved, update its connections\n   * @param changed\n   */\n  updateMovedGridItem(changed: GridItem) {\n    this._modified = true;\n    changed.tile.x = changed.x;\n    changed.tile.y = changed.y;\n    if (changed.tile.type === 'MODULE') {\n      const modifiers = this.EXTRA_TILE_OFFSETS_FOR_MODULES[changed.tile.moduleType]?.[changed.tile.direction];\n      if (modifiers) {\n        changed.tile.x -= modifiers.x;\n        changed.tile.y -= modifiers.y;\n      }\n    }\n\n    // delete old associations\n    this.clearItemAssociations(changed);\n\n    // create new associations\n    if (changed.tile.type === 'ROAD') {\n      this.rebuildConnectionsForRoad(changed);\n    } else if (changed.tile.type === 'MODULE') {\n      this.rebuildConnectionsForModule(changed);\n    }\n    this.moveToPositiveCoordinates(this.grid);\n    this.gridSubject.next(this.grid);\n  }\n\n  /**\n   * Connects a module to a road tile\n   * @param changed\n   * @private\n   */\n  private rebuildConnectionsForModule(changed: GridItem) {\n    if (changed.tile.type !== 'MODULE') {\n      return;\n    }\n    changed.tile.intersection = undefined;\n    const lastDirection = changed.tile.direction;\n    const startIndex = Math.max(\n      0,\n      this.DIRECTION_UPDATES.findIndex(\n        (update) => update.direction === lastDirection\n      )\n    );\n\n    for (\n      let i = 0;\n      i < this.DIRECTION_UPDATES.length && !changed.tile.intersection;\n      ++i\n    ) {\n      // loop through the complete array starting at any chosen index\n      const update =\n        this.DIRECTION_UPDATES[\n          (i + startIndex) % this.DIRECTION_UPDATES.length\n        ];\n      // road connection is moved along the x or y axis depending on the large module type\n      let xPos = changed.tile.x + update.xDiff;\n      let yPos = changed.tile.y + update.yDiff;\n      const item = this.getGridItemAtTilePosition(xPos, yPos);\n\n      if (item && item.tile.type === 'ROAD') {\n        changed.tile.direction = update.direction;\n        const modifiers = this.EXTRA_TILE_OFFSETS_FOR_MODULES[changed.tile.moduleType]?.[update.direction];\n        if (modifiers) {\n          changed.x = changed.tile.x + modifiers.x;\n          changed.y = changed.tile.y + modifiers.y;\n          changed.rows = modifiers.rows;\n          changed.cols = modifiers.cols;\n          console.log(modifiers)\n        }\n        if (!this.hasOverlappingItem(changed)) {\n          changed.tile.intersection = item.tile.id;\n          item.tile.road[update.inverse] = changed.tile.id;\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Connects a road tile to all neighboring tiles.\n   * @param changed\n   * @private\n   */\n  private rebuildConnectionsForRoad(changed: GridItem) {\n    if (changed.tile.type !== 'ROAD') {\n      return;\n    }\n    changed.tile.road['NORTH'] = undefined;\n    changed.tile.road['EAST'] = undefined;\n    changed.tile.road['SOUTH'] = undefined;\n    changed.tile.road['WEST'] = undefined;\n    for (const update of this.DIRECTION_UPDATES) {\n      const item = this.getGridItemAtTilePosition(\n        changed.tile.x + update.xDiff,\n        changed.tile.y + update.yDiff\n      );\n      if (item) {\n        changed.tile.road[update.direction] = item.tile.id;\n        if (item.tile.type === 'ROAD') {\n          item.tile.road[update.inverse] = changed.tile.id;\n        } else if (item.tile.type === 'MODULE' && !item.tile.intersection) {\n          const modifiers = this.EXTRA_TILE_OFFSETS_FOR_MODULES[item.tile.moduleType]?.[update.inverse];\n          const oldX = item.x;\n          const oldY = item.y;\n          const oldRows = item.rows;\n          const oldCols = item.cols;\n          if (modifiers) {\n            item.x = item.tile.x + modifiers.x;\n            item.y = item.tile.y + modifiers.y;\n            item.rows = modifiers.rows;\n            item.cols = modifiers.cols;\n            console.log(modifiers)\n          }\n          if (this.hasOverlappingItem(item)) {\n            item.x = oldX\n            item.y = oldY\n            item.rows = oldRows\n            item.cols = oldCols\n          } else {\n            item.tile.direction = update.inverse;\n            item.tile.intersection = changed.tile.id;\n          }\n        }\n      }\n    }\n  }\n\n  addItem(item: GridItem) {\n    this.grid = [...this.grid, item];\n    this.updateMovedGridItem(item);\n  }\n\n  /**\n   * Rotates the direction a module uses to connect to a road clockwise.\n   * @param item\n   */\n  rotateModuleConnection(item: GridItem) {\n    console.log(\"olditem\", item)\n    if (item.tile.type === 'MODULE') {\n      const oldDirection = item.tile.direction;\n      const directionIndex = this.DIRECTION_UPDATES.findIndex(\n        (update) => update.direction === oldDirection\n      );\n      const nextIndex = (directionIndex + 1) % this.DIRECTION_UPDATES.length;\n      item.tile.direction = this.DIRECTION_UPDATES[nextIndex].direction;\n      const modifier = this.EXTRA_TILE_OFFSETS_FOR_MODULES[item.tile.moduleType]?.[item.tile.direction];\n      if (modifier) {\n        item.rows = modifier.rows;\n        item.cols = modifier.cols;\n        item.x = item.tile.x + modifier.x;\n        item.y = item.tile.y + modifier.y;\n      }\n      console.log(modifier)\n      console.log(item)\n      // rotate the tile by switching the rows and cols\n\n      this.updateMovedGridItem(item);\n    }\n  }\n\n  public convertGridLayoutToLayout(grid: FactoryGridLayout): FactoryLayout {\n    const layout: FactoryLayout = { modules: [], intersections: [], roads: [] };\n    for (const tile of grid) {\n      switch (tile.type) {\n        case 'MODULE':\n          layout.modules.push({\n            type: tile.moduleType,\n            serialNumber: tile.id,\n            placeholder: tile.placeholder\n          });\n          if (tile.intersection) {\n            layout.roads.push({\n              direction: tile.direction,\n              from: tile.id,\n              to: tile.intersection,\n              length: (tile.moduleType === ModuleType.CHRG ? CHARGER_ROAD_LENGTH : DOCKING_ROAD_LENGTH),\n            });\n          }\n          break;\n        case 'ROAD':\n          layout.intersections.push({\n            id: tile.id,\n          });\n          // only add NORTH and EAST connections to other intersections to avoid duplicates\n          for (const update of this.DIRECTION_UPDATES) {\n            if (\n              update.direction === RoadDirection.NORTH ||\n              update.direction === RoadDirection.EAST\n            ) {\n              const targetId = tile.road[update.direction];\n              if (targetId) {\n                const target = grid.find(\n                  (value) => value.id === tile.road[update.direction]\n                );\n                // do not add connections to modules, that is done from the module side\n                if (target && target.type !== 'MODULE') {\n                  layout.roads.push({\n                    length: ROAD_LENGTH,\n                    from: tile.id,\n                    to: targetId,\n                    direction: update.direction,\n                  });\n                }\n              }\n            }\n          }\n          break;\n      }\n    }\n    return layout;\n  }\n\n  public async getNewGridLayout(): Promise<FactoryGridLayout> {\n    return this.convertGridToGridLayout(this.grid);\n  }\n  public convertGridToGridLayout(grid: Array<GridItem>): FactoryGridLayout {\n    return grid.map((item) => item.tile);\n  }\n\n  /**\n   * Verifies all modules are connected to an intersection and there is only a single network that connects all tiles\n   * @param grid\n   */\n  public validateGridLayout(grid: FactoryGridLayout): boolean {\n    const notVisited = new Set(grid.map((tile) => tile.id));\n    if (notVisited.size) {\n      const stack: Array<string> = [grid[0].id];\n      while (stack.length) {\n        const activeId = stack.pop();\n        const activeTile = grid.find((tile) => tile.id === activeId);\n        if (!activeId || !activeTile || !notVisited.has(activeTile.id)) {\n          continue;\n        }\n        notVisited.delete(activeTile.id);\n        switch (activeTile.type) {\n          case 'ROAD':\n            for (const update of this.DIRECTION_UPDATES) {\n              const id = activeTile.road[update.direction];\n              if (id && notVisited.has(id)) {\n                stack.push(id);\n              }\n            }\n            break;\n          case 'MODULE':\n            const id = activeTile.intersection;\n            if (!id) {\n              return false; // a module has to be connected\n            } else if (notVisited.has(id)) {\n              stack.push(id);\n            }\n            break;\n        }\n      }\n    }\n    // starting from the first tile all tiles have to be reachable\n    return notVisited.size === 0;\n  }\n\n  /**\n   * Notify the service that the layout has been saved and the next layout update will be accepted\n   */\n  public setLayoutSaved() {\n    this._modified = false;\n  }\n}\n","<ng-template #defaultLayoutDialogContent>\n  <h2 mat-dialog-title><mat-icon>healing</mat-icon> {{ 'Zurücksetzen auf Standardlayout' | translate }}</h2>\n  <div mat-dialog-content>\n    {{'Soll die Fabrik wirklich auf das Standardlayout zurückgesetzt werden?' | translate}}\n  </div>\n  <div mat-dialog-actions>\n    <button mat-flat-button mat-dialog-close color=\"warn\" (click)=\"sendDefaultLayoutReset()\">{{ 'Ja' | translate }}</button>\n    <button mat-flat-button mat-dialog-close cdkFocusInitial>{{ 'Nein' | translate }}</button>\n  </div>\n</ng-template>\n<ng-template #layoutActions>\n  <button *ngIf=\"editable\" mat-raised-button\n    (click)=\"drawer.toggle()\"\n    [disabled]=\"hasRunningOrders$ | async\"\n    aria-label=\"'Hinzufügen' | translate\"\n    [matTooltip]=\"'Hinzufügen' | translate\">\n    <mat-icon>add_circle</mat-icon>\n  </button>\n  <button *ngIf=\"editable\" mat-raised-button\n    (click)=\"saveLayout()\"\n    [attr.aria-label]=\"'Speichern' | translate\"\n    [matTooltip]=\"'Speichern' | translate\"\n    [disabled]=\"(hasRunningOrders$ | async) || !layoutEditor.modified || (isValidLayout$ | async) === false\">\n    <mat-icon>save</mat-icon>\n  </button>\n  <button *ngIf=\"editable\" mat-raised-button\n    (click)=\"resetLayout()\"\n    [attr.aria-label]=\"'Zurücksetzen' | translate\"\n    [matTooltip]=\"'Zurücksetzen' | translate\"\n    [disabled]=\"!layoutEditor.modified\">\n    <mat-icon>refresh</mat-icon>\n  </button>\n  <button *ngIf=\"editable\" mat-raised-button\n    (click)=\"resetDefaultLayout()\"\n    [attr.aria-label]=\"'Zurücksetzen auf Standardlayout' | translate\"\n    [matTooltip]=\"'Zurücksetzen auf Standardlayout' | translate\">\n    <mat-icon>healing</mat-icon>\n  </button>\n  <button mat-raised-button\n    (click)=\"zoomIn()\"\n    [attr.aria-label]=\"'Vergrößern' | translate\"\n    [matTooltip]=\"'Vergrößern' | translate\">\n    <mat-icon>zoom_in</mat-icon>\n  </button>\n  <button mat-raised-button\n    (click)=\"zoomOut()\"\n    [attr.aria-label]=\"'Verkleinern' | translate\"\n    [matTooltip]=\"'Verkleinern' | translate\">\n    <mat-icon>zoom_out</mat-icon>\n  </button>\n</ng-template>\n\n<div id=\"layout-configuration\">\n  <ng-container *ngTemplateOutlet=\"layoutActions\"></ng-container>\n  <mat-drawer-container class=\"example-container\" hasBackdrop=true>\n    <mat-drawer #drawer mode=\"over\">\n      <mat-action-list *ngIf=\"editable\">\n        <button mat-list-item (click)=\"add_intersection()\">\n          <mat-icon color=\"accent\">flare</mat-icon>\n          <span>{{'Kreuzung' | translate}}</span>\n        </button>\n        <button mat-list-item (click)=\"add_charger()\">\n          <mat-icon color=\"accent\">power</mat-icon>\n          <span>{{'Produktionsschritt.CHRG' | translate}}</span>\n        </button>\n        <button mat-list-item *ngFor=\"let mod of (layoutEditor.availableModules$ | async)\"\n                (click)=\"add_production(mod)\">\n          <img [src]=\"'assets/images/ic_ft_' + mod.subType?.toLowerCase() + '.svg'\" class=\"module-icon\" [alt]=\"'Produktionsschritt.' + mod.subType | translate\">\n          <span><span>{{'Produktionsschritt.' + mod.subType | translate}} </span> <span>{{mod.serialNumber}}</span></span>\n        </button>\n      </mat-action-list>\n    </mat-drawer>\n    <mat-drawer-content>\n      <div #gridZoomContainer id=\"grid-zoom\" [ngStyle]=\"widthScaleStyle$ | async\">\n        <gridster [options]=\"options\" #gridster [class.readonly]=\"!editable\">\n          <gridster-item [item]=\"item\" class=\"ff-tile\"\n            *ngFor=\"let item of gridContents$ | async\"\n            [class.is-road]=\"item.tile.type === 'ROAD'\"\n            [class.highlight]=\"item.tile.id === highlightedId\">\n            <button class=\"gridster-item-content\"\n              mat-icon-button mat-raised-button\n              *ngIf=\"editable\" (click)=\"delete_item(item)\"\n              [disabled]=\"hasRunningOrders$ | async\"\n              [attr.aria-label]=\"'Löschen' | translate\"\n              [matTooltip]=\"'Löschen' | translate\"\n              style=\"float: right; z-index: 1; position: relative\">\n              <mat-icon>delete</mat-icon>\n            </button>\n            <div class=\"roads\" *ngIf=\"item.tile.type === 'ROAD'\">\n              <div class=\"road road-south\"></div>\n              <div class=\"road road-east\"></div>\n              <div class=\"road road-north\"></div>\n              <div class=\"road road-west\"></div>\n              <div class=\"content intersection\">{{item.tile.id}}</div>\n            </div>\n            <div class=\"module\" *ngIf=\"item.tile.type === 'MODULE'\"\n              (click)=\"item_clicked(item)\"\n              [class.is-offline]=\"isOffline(item.tile.id)\"\n              [class.is-placeholder]=\"item.tile.placeholder\"\n              [class.is-large-module]=\"layoutEditor.isLargeModule(item.tile.moduleType)\"\n              [class.not-connected]=\"!item.tile.intersection\">\n              <div class=\"content\" [ngClass]=\"[item.tile.moduleType]\">\n                <div class=\"module-type\">{{'Produktionsschritt.' + item.tile.moduleType | translate}}</div>\n                <div class=\"module-id\">{{'ID:' | translate}} {{item.tile.id}}</div>\n              </div>\n              <div class=\"direction\" [ngClass]=\"[item.tile.direction, item.tile.moduleType]\" [title]=\"item.tile.direction\"></div>\n              <div class=\"actions\">\n                <button *ngIf=\"editable\"\n                  mat-icon-button\n                  mat-raised-button\n                  (click)=\"rotate_module(item)\"\n                  [disabled]=\"hasRunningOrders$ | async\"\n                  class=\"gridster-item-content\"\n                  [attr.aria-label]=\"'Drehen' | translate\" [matTooltip]=\"'Drehen' | translate\">\n                  <mat-icon>rotate_right</mat-icon>\n                </button>\n                <button mat-icon-button\n                  *ngIf=\"item.tile.moduleType !== ModuleType.CHRG\"\n                  routerLinkActive=\"active\"\n                  [routerLink]=\"[routeToRoot$ | async, FutureFactoryRoutes.MODULE, item.tile.id]\"\n                  [attr.aria-label]=\"'Mehr' | translate\"\n                  [matTooltip]=\"'Mehr' | translate\">\n                  <mat-icon>more</mat-icon>\n                </button>\n              </div>\n            </div>\n            <div class=\"ff-tile-overlay\" ></div>\n          </gridster-item>\n        </gridster>\n      </div>\n    </mat-drawer-content>\n  </mat-drawer-container>\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit, TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { MatDrawer } from '@angular/material/sidenav';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { GridsterComponent, GridsterConfig, GridsterItem, } from 'angular-gridster2';\nimport {\n  BehaviorSubject,\n  Observable,\n  ReplaySubject,\n  combineLatest,\n  combineLatestWith,\n  filter,\n  firstValueFrom,\n  map,\n  shareReplay,\n  startWith,\n  takeUntil,\n} from 'rxjs';\nimport { CcuTopic } from '../../../common/protocol';\nimport { AvailableState, PairedModule, RoadDirection } from '../../../common/protocol/ccu';\nimport { ModuleType } from '../../../common/protocol/module';\nimport { FutureFactoryRoutes } from '../../futurefactory.routes';\nimport { TypedMqttService } from '../../futurefactory.service';\nimport {\n  GridItem,\n  LayoutEditorService,\n} from '../../services/layout-editor.service';\nimport { OrderStatesService } from '../../services/order-states.service';\nimport { getRouteToModuleRoot } from '../../utils/routes.utils';\nimport { StatesService } from '../../services/states.service';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'ff-factory-layout',\n  templateUrl: './factory-layout.component.html',\n  styleUrls: ['./factory-layout.component.scss'],\n})\nexport class FactoryLayoutComponent\n  implements OnInit, AfterViewInit, OnDestroy\n{\n  private readonly destroy$ = new ReplaySubject<void>(1);\n  private readonly resizeObserver;\n  private readonly width$ = new BehaviorSubject<number>(0);\n  private readonly zoomScale$ = new BehaviorSubject<number>(1);\n  private readonly _editable$ = new BehaviorSubject<boolean>(false);\n  private readonly offlineModules = new Map<string, boolean>();\n\n  @ViewChild('drawer')\n  private drawer!: MatDrawer;\n\n  @ViewChild('gridZoomContainer', { static: true })\n  private gridZoomContainer!: ElementRef;\n\n  @ViewChild('gridster')\n  gridster!: GridsterComponent;\n\n  @ViewChild(\"defaultLayoutDialogContent\")\n  readonly defaultLayoutDialogContent!: TemplateRef<any>;\n\n  readonly gridContents$: Observable<GridItem[]>;\n  readonly widthScaleStyle$: Observable<Object>;\n  readonly isValidLayout$: Observable<boolean>;\n  readonly routeToRoot$: Observable<string>;\n  readonly hasRunningOrders$: Observable<boolean>;\n  readonly FutureFactoryRoutes = FutureFactoryRoutes;\n  readonly ModuleType = ModuleType;\n\n  @Input()\n  set editable(editable: boolean) {\n    this._editable$.next(editable);\n  }\n\n  get editable() {\n    return this._editable$.value;\n  }\n\n  @Input()\n  highlightedId?: string | null;\n\n  @Input()\n  startZoom?: number;\n\n  constructor(\n    private mqtt: TypedMqttService,\n    private orderStatesService: OrderStatesService,\n    private factoryStateService: StatesService,\n    public layoutEditor: LayoutEditorService,\n    private dialog: MatDialog,\n    private zone: NgZone,\n    private router: Router,\n    private activatedRoute: ActivatedRoute\n  ) {\n    this.routeToRoot$ = getRouteToModuleRoot(activatedRoute);\n    this.isValidLayout$ = layoutEditor.editorGrid$.pipe(\n      map((grid) =>\n        layoutEditor.validateGridLayout(\n          layoutEditor.convertGridToGridLayout(grid)\n        )\n      )\n    );\n    this.hasRunningOrders$ = this.orderStatesService.hasRunningOrders$;\n\n    if (window.ResizeObserver) {\n      this.resizeObserver = new ResizeObserver((entries) => {\n        this.zone.run(() => {\n          this.width$.next(entries[0].contentRect.width);\n        });\n      });\n    }\n\n    this.widthScaleStyle$ = this.getWidthScaleStyle$();\n\n    this.gridContents$ = layoutEditor.editorGrid$.pipe(\n      // combineLatestWith this is the replacement for the deprecated combineLatest operator\n      combineLatestWith(this._editable$),\n      map(([grid, editable]) =>\n        grid.map((tile) => (editable ? tile : { ...tile, dragEnabled: false }))\n      )\n    );\n    this.setupOfflineModules(this.factoryStateService.pairedModules$);\n  }\n\n  public isLargeModule(moduleType: ModuleType): boolean {\n    return this.layoutEditor.isLargeModule(moduleType);\n  }\n\n  public isOffline(moduleId: string): boolean {\n    return this.offlineModules.get(moduleId) ?? false;\n  }\n\n  private getWidthScaleStyle$() {\n    return combineLatest([\n      this.zoomScale$,\n      this.width$,\n      this.layoutEditor.editorGrid$,\n    ]).pipe(\n      map(([zoomScale, width, editorGrid]) => {\n        const gridWidth =\n          (2 + Math.max(...editorGrid.map((item) => item.x))) *\n            (this.options.margin! + this.options.fixedColWidth!) +\n          this.options.margin!;\n        const gridHeight =\n          (2 + Math.max(...editorGrid.map((item) => item.y))) *\n            (this.options.margin! + this.options.fixedRowHeight!) +\n          this.options.margin!;\n        const baseScale = Math.min(1, width / gridWidth);\n        const startZoom = this.startZoom || 1;\n        const scale = baseScale * zoomScale * startZoom;\n\n        if (this.gridster) {\n          this.gridster.options.scale = scale;\n          this.gridster.optionsChanged();\n        }\n\n        return {\n          transform: 'scale(' + scale + ')',\n          height: scale * gridHeight + 'px',\n        };\n      }),\n      startWith({}),\n      shareReplay(1)\n    );\n  }\n\n  private dragStopped = (item: GridsterItem): void => {\n    // use setTimeout to reorder the execution after the drag stop event has completed\n    // and the new coordinates are available.\n    setTimeout(() => {\n      const changed = item as GridItem;\n      this.layoutEditor.updateMovedGridItem(changed);\n    });\n  };\n\n  readonly options: GridsterConfig = {\n    scale: 1, // external zoom should set that.\n    //gridType: 'scrollVertical',\n    gridType: 'fixed',\n    fixedColWidth: 200,\n    fixedRowHeight: 200,\n    setGridSize: true,\n    minRows: 3,\n    margin: 10,\n    minCols: 3,\n    swap: false,\n    mobileBreakpoint: 0,\n    swapWhileDragging: false,\n    pushItems: false,\n    disablePushOnDrag: true,\n    disablePushOnResize: true,\n    draggable: {\n      dropOverItems: true,\n      enabled: true,\n      stop: this.dragStopped,\n    },\n  };\n\n  ngOnInit(): void {\n    this.layoutEditor.resetLayout();\n    if (this.resizeObserver) {\n      this.resizeObserver.observe(this.gridZoomContainer.nativeElement);\n    }\n  }\n\n  ngAfterViewInit() {\n    this.orderStatesService.hasRunningOrders$\n      .pipe(\n        filter((hasRunningOrders) => hasRunningOrders),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(() => this.drawer.close());\n  }\n\n  ngOnDestroy() {\n    if (this.resizeObserver) {\n      this.resizeObserver.unobserve(this.gridZoomContainer.nativeElement);\n    }\n    this.zoomScale$.complete();\n    this.width$.complete();\n    this._editable$.complete();\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  add_intersection() {\n    const item: GridItem = {\n      cols: 1,\n      rows: 1,\n      x: 0,\n      y: 0,\n      tile: {\n        type: 'ROAD',\n        x: 0,\n        y: 0,\n        road: {},\n        id: this.layoutEditor.getNextId(),\n      },\n    };\n    item.x = this.gridster.getFirstPossiblePosition(item).x;\n    item.y = this.gridster.getFirstPossiblePosition(item).y;\n    item.tile.x = item.x;\n    item.tile.y = item.y;\n    this.layoutEditor.addItem(item);\n  }\n\n\n  add_charger() {\n    let index = 0;\n    let prefix = 'CHRG';\n    while (this.layoutEditor.hasGridItemId(prefix+index)) {\n      index++;\n    }\n    this.add_production({\n      type: 'MODULE',\n      subType: ModuleType.CHRG,\n      serialNumber: prefix+index,\n      available: AvailableState.READY,\n      connected: true,\n    })\n  }\n\n  add_production(mod: PairedModule) {\n    const item: GridItem = {\n      cols: 1,\n      rows:\n        mod.subType! === ModuleType.HBW || mod.subType! === ModuleType.DPS\n          ? 2\n          : 1,\n      x: 0,\n      y: 0,\n      tile: {\n        type: 'MODULE',\n        x: 0,\n        y: 0,\n        id: mod.serialNumber,\n        connected: true,\n        moduleType: mod.subType!,\n        direction:\n          mod.subType! === ModuleType.HBW\n            ? RoadDirection.WEST\n            : RoadDirection.EAST,\n      },\n    };\n    item.x = this.gridster.getFirstPossiblePosition(item).x;\n    item.y = this.gridster.getFirstPossiblePosition(item).y;\n    item.tile.x = item.x;\n    item.tile.y = item.y;\n    this.layoutEditor.addItem(item);\n  }\n\n  delete_item(item: GridItem) {\n    this.layoutEditor.deleteGridItem(item);\n  }\n\n  rotate_module(item: GridItem) {\n    this.layoutEditor.rotateModuleConnection(item);\n  }\n\n  async saveLayout(): Promise<void> {\n    const hasRunningOrders = await firstValueFrom(this.hasRunningOrders$);\n    if (hasRunningOrders) {\n      return;\n    }\n    const grid = await this.layoutEditor.getNewGridLayout();\n    if (!this.layoutEditor.validateGridLayout(grid)) {\n      alert('WRONG LAYOUT');\n    } else {\n      const layout = this.layoutEditor.convertGridLayoutToLayout(grid);\n      this.layoutEditor.setLayoutSaved();\n      return this.mqtt.publish(CcuTopic.SET_LAYOUT, layout);\n    }\n  }\n\n  resetLayout() {\n    this.layoutEditor.resetLayout();\n  }\n\n  zoomIn() {\n    if (this.zoomScale$.value < 4) {\n      this.zoomScale$.next(this.zoomScale$.value + 0.2);\n    }\n  }\n\n  zoomOut() {\n    if (this.zoomScale$.value > 0.3) {\n      this.zoomScale$.next(this.zoomScale$.value - 0.2);\n    }\n  }\n\n  async item_clicked(item: GridItem) {\n    if (!this.editable && item.tile.type === 'MODULE' && item.tile.moduleType !== ModuleType.CHRG) {\n      const root = await firstValueFrom(this.routeToRoot$);\n      await this.router.navigate(\n        [root, FutureFactoryRoutes.MODULE, item.tile.id],\n        { relativeTo: this.activatedRoute }\n      );\n    }\n  }\n\n  private setupOfflineModules(pairedModules$: Observable<PairedModule[]>) {\n    pairedModules$\n      .pipe(\n        startWith([]),\n        map((modules): [string, boolean][] => modules.map(module => [module.serialNumber, module.connected ?? false])),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((modules) => {\n        for (let [id, online] of modules) {\n          this.offlineModules.set(id, !online);\n        }\n      });\n  }\n\n  resetDefaultLayout() {\n    this.dialog.open(this.defaultLayoutDialogContent);\n  }\n\n  sendDefaultLayoutReset() {\n    this.mqtt.publish(CcuTopic.SET_DEFAULT_LAYOUT, { timestamp: new Date() })\n  }\n}\n","import { Workpiece } from '../../common/protocol';\n\nexport const WORKPIECE_TYPES = [\n  {\n    type: Workpiece.WHITE,\n    name: 'Werkstück.Weiß',\n    icon: 'assets/images/ic_ft_workpiece_white.svg',\n  },\n  {\n    type: Workpiece.BLUE,\n    name: 'Werkstück.Blau',\n    icon: 'assets/images/ic_ft_workpiece_blue.svg',\n  },\n  {\n    type: Workpiece.RED,\n    name: 'Werkstück.Rot',\n    icon: 'assets/images/ic_ft_workpiece_red.svg',\n  },\n];\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\nimport {\n  CcuTopic\n} from '../../common/protocol';\nimport { GeneralConfig } from '../../common/protocol/ccu';\nimport { getPayload } from '../utils/rx.utils';\nimport { TypedMqttService } from './typed-mqtt.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GeneralConfigService {\n  readonly config$: Observable<GeneralConfig> = this.mqttService\n    .subscribe<GeneralConfig>(CcuTopic.CONFIG)\n    .pipe(getPayload(), shareReplay(1));\n\n  constructor(private mqttService: TypedMqttService) {}\n\n  public saveConfig(config: GeneralConfig) {\n    this.mqttService.publish(CcuTopic.SET_CONFIG, config, { qos: 1 });\n  }\n}\n","<!-- config section to configure the planned duration times -->\n<section *ngIf=\"config?.productionDurations && config?.ftsSettings\">\n  <h2>{{ 'Gesamtdauer' | translate }}</h2>\n  <div class=\"config\">\n    <div class=\"config__item\" *ngFor=\"let type of wsTypes\">\n      <img class=\"config__item__icon\" [src]=\"type.icon\" [attr.alt]=\"type.name | translate\" />\n      <div class=\"config__item__label\">{{ type.name | translate }}</div>\n      <div class=\"config__item__value\">\n        <mat-form-field>\n          <input matInput type=\"number\" [(ngModel)]=\"config!.productionDurations![type.type]\" />\n          <span matSuffix>{{ 'Sekunden' | translate }}</span>\n        </mat-form-field>\n      </div>\n    </div>\n  </div>\n  <hr>\n  <h2>{{ 'Produktionseinstellungen' | translate }}</h2>\n  <div class=\"config__item\">\n    <div class=\"config__item__label\">{{ 'Anzahl parallel produzierbarer Werkstücke' | translate }}</div>\n    <div class=\"config__item__value\">\n      <mat-form-field>\n        <input matInput type=\"number\" [(ngModel)]=\"config!.productionSettings.maxParallelOrders\" />\n      </mat-form-field>\n    </div>\n  </div>\n  <hr>\n  <h2>{{ 'Transporteinstellungen' | translate }}</h2>\n  <div class=\"config__item\">\n    <div class=\"config__item__label\">{{ 'Ladeschwelle für FTS' | translate }}</div>\n    <div class=\"config__item__value\">\n      <mat-form-field>\n        <input matInput min=\"0\" max=\"100\" type=\"number\" [(ngModel)]=\"config!.ftsSettings.chargeThresholdPercent\" />\n        <span matSuffix>&#xFF05;</span>\n      </mat-form-field>\n    </div>\n  </div>\n\n  <button mat-raised-button color=\"primary\"\n    [disabled]=\"!configChanged\"\n    (click)=\"saveConfig()\">{{ 'Speichern' | translate }}</button>\n</section>\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { GeneralConfig } from '../../../common/protocol/ccu';\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/internal/operators/takeUntil';\nimport { GeneralConfigService } from '../../services/general-config.service';\nimport { WORKPIECE_TYPES } from '../../utils/workpiece.utils';\n\n@Component({\n  selector: 'ff-factory-config',\n  templateUrl: './factory-config.component.html',\n  styleUrls: ['./factory-config.component.css'],\n})\nexport class FactoryConfigComponent implements OnDestroy {\n  @Input() editable: boolean = false;\n\n  private destroy$ = new ReplaySubject<void>(1);\n\n  public config: GeneralConfig | undefined;\n  public originalConfig: GeneralConfig | undefined;\n  public wsTypes = WORKPIECE_TYPES;\n\n  /**\n   * Indicates if the user has changed the config.\n   */\n  public get configChanged(): boolean {\n    return JSON.stringify(this.config) !== JSON.stringify(this.originalConfig);\n  }\n\n  constructor(private generalConfigService: GeneralConfigService) {\n    this.generalConfigService.config$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((config: GeneralConfig) => {\n        this.config = config\n        this.originalConfig = JSON.parse(JSON.stringify(config));\n      });\n  }\n\n  saveConfig() {\n    if (this.config) {\n      this.generalConfigService.saveConfig(this.config);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ff-layout-editor',\n  templateUrl: './layout-editor.component.html',\n  styleUrls: ['./layout-editor.component.scss'],\n})\nexport class FutureFactoryLayoutEditorComponent {\n  // Strings in html file, should later be translated\n  readonly htmlStrings = {\n    configurationHeader: 'Fabrikkonfiguration',\n  };\n\n}\n","<ff-missing-controller-banner style=\"flex-direction: column;\">\n  <!-- Material tab to switch between factory layout and config tabs -->\n  <!-- no animation -->\n  <mat-tab-group [animationDuration]=\"0\">\n    <mat-tab label=\"{{ 'Fabrikkonfiguration' | translate }}\">\n      <ff-factory-layout [editable]=\"true\"></ff-factory-layout>\n    </mat-tab>\n    <mat-tab label=\"{{ 'Konfiguration' | translate }}\">\n      <ff-factory-config [editable]=\"true\"></ff-factory-config>\n    </mat-tab>\n  </mat-tab-group>\n</ff-missing-controller-banner>","<mat-card *ngIf=\"statusValues?.length || imageData?.length\">\n  <mat-card-title>{{ \"Kalibrierungsinformationen\" | translate }}</mat-card-title>\n  <mat-card-content>\n    <div *ngIf=\"statusValues\" class=\"value-list\">\n      <mat-form-field class=\"full-width\" *ngFor=\"let ref of statusValues\">\n        <mat-label>{{ ref.referenceKey | translate }}</mat-label>\n        <input matNativeControl readonly=\"readonly\" type=\"text\" [(ngModel)]=\"ref.referenceValue\">\n      </mat-form-field>\n    </div>\n\n    <figure *ngFor=\"let image of imageData\">\n      <img [src]=\"image.referenceValue\">\n      <figcaption>{{ image.referenceKey | translate}}</figcaption>\n    </figure>\n  </mat-card-content>\n</mat-card>","import { Component, Input } from '@angular/core';\nimport { ReferenceValue } from '../../../common/protocol/vda';\n\n@Component({\n  selector: 'ff-calibration-info',\n  templateUrl: './calibration-info.component.html',\n  styleUrls: ['./calibration-info.component.scss'],\n})\nexport class CalibrationInfoComponent {\n  @Input() imageData: Array<ReferenceValue> = [];\n  @Input() statusValues: Array<ReferenceValue> = [];\n}\n","<mat-card *ngIf=\"moduleType === ModuleType.DPS\">\n  <mat-card-content>\n    <section class=\"grid\">\n      <img src=\"assets/images/APS_E-A_3D.jpg\" alt=\"APS I/O in 3D\" />\n      <img src=\"assets/images/APS_E-A_Front.jpg\" alt=\"APS I/O Front\" />\n    </section>\n  </mat-card-content>\n</mat-card>\n\n<mat-card *ngIf=\"moduleType === ModuleType.HBW\">\n  <mat-card-content>\n    <section class=\"grid\">\n      <img src=\"assets/images/APS_Hochregal_3D.jpg\" alt=\"APS HBW in 3D\" />\n      <img src=\"assets/images/APS_Hochregal_Front.jpg\" alt=\"APS HBW Front\" />\n    </section>\n  </mat-card-content>\n</mat-card>\n\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { ModuleType } from '../../../common/protocol/module';\n\n@Component({\n  selector: 'ff-calibration-caption',\n  templateUrl: './calibration-caption.component.html',\n  styleUrls: ['./calibration-caption.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CalibrationCaptionComponent {\n  readonly ModuleType = ModuleType;\n  @Input() moduleType: ModuleType | null = null;\n}\n","export type CalibrationData = {\n  [moduleType: string]: {\n    [positionName: string]: Array<string>;\n  };\n};\n\nexport const calibrationData: CalibrationData = {\n  HBW: {\n    REF: [],\n    RACK_REIHE_1_SPALTE_A: [\n      'cal__rackOffset',\n      'cal__row1',\n      'cal__colA',\n    ],\n    RACK_REIHE_2_SPALTE_B: [\n      'cal__rackOffset',\n      'cal__row2',\n      'cal__colB',\n    ],\n    RACK_REIHE_3_SPALTE_C: [\n      'cal__rackOffset',\n      'cal__row3',\n      'cal__colC',\n    ],\n    RAMPE: [\n      'cal__rampOffset',\n      'cal__rampPositionX',\n      'cal__rampPositionY',\n      'cal__rampPositionRot',\n      'cal__rampPositionRotCheck',\n    ],\n    DROP: ['cal__AGVPositionRot'],\n    PICK: ['cal__AGVPositionRot'],\n    FACTORY_BASE_SETTINGS: [\n      'cal__timeProcessEnd',\n      'cal__timeGripperValveClose',\n      'cal__timeGripperValveOpen',\n      'cal__timeCompressor',\n    ],\n  },\n  DPS: {\n    REF: [],\n    HOME_BASE: ['RA.HOME.BASE.X', 'RA.HOME.BASE.Y', 'RA.HOME.BASE.Z'],\n    HOME_INPUT: ['RA.HOME.INPUT.X', 'RA.HOME.INPUT.Y', 'RA.HOME.INPUT.Z'],\n    HOME_OUTPUT: ['RA.HOME.OUTPUT.X', 'RA.HOME.OUTPUT.Y', 'RA.HOME.OUTPUT.Z'],\n    NIO_APPROACH: [\n      'RA.NIO.APPROACH.X',\n      'RA.NIO.APPROACH.Y',\n      'RA.NIO.APPROACH.Z',\n    ],\n    NIO_TARGET: ['RA.NIO.TARGET.X', 'RA.NIO.TARGET.Y', 'RA.NIO.TARGET.Z'],\n    CS_APPROACH: [\n      'RA.CS.APPROACH.X',\n      'RA.CS.APPROACH.Y',\n      'RA.CS.APPROACH.Z',\n      'cal__colorRedSetpoint',\n      'cal__colorBlueSetpoint',\n      'cal__colorWhiteSetpoint',\n      'cal__colorValue',\n    ],\n    CS_TARGET: [\n      'RA.CS.TARGET.X',\n      'RA.CS.TARGET.Y',\n      'RA.CS.TARGET.Z',\n      'cal__colorRedSetpoint',\n      'cal__colorBlueSetpoint',\n      'cal__colorWhiteSetpoint',\n      'cal__colorValue',\n    ],\n    NFC_APPROACH: [\n      'RA.NFC.APPROACH.X',\n      'RA.NFC.APPROACH.Y',\n      'RA.NFC.APPROACH.Z',\n    ],\n    NFC_TARGET: ['RA.NFC.TARGET.X', 'RA.NFC.TARGET.Y', 'RA.NFC.TARGET.Z'],\n    INPUT_PICK_APPROACH_A: [\n      'RA.INPUT.PICK.APPROACH_A.X',\n      'RA.INPUT.PICK.APPROACH_A.Y',\n      'RA.INPUT.PICK.APPROACH_A.Z',\n    ],\n    INPUT_PICK_APPROACH_B: [\n      'RA.INPUT.PICK.APPROACH_B.X',\n      'RA.INPUT.PICK.APPROACH_B.Y',\n      'RA.INPUT.PICK.APPROACH_B.Z',\n    ],\n    INPUT_PICK_TARGET: [\n      'RA.INPUT.PICK.TARGET.X',\n      'RA.INPUT.PICK.TARGET.Y',\n      'RA.INPUT.PICK.TARGET.Z',\n    ],\n    OUTPUT_DROP_APPROACH_A: [\n      'RA.OUTPUT.DROP.APPROACH_A.X',\n      'RA.OUTPUT.DROP.APPROACH_A.Y',\n      'RA.OUTPUT.DROP.APPROACH_A.Z',\n    ],\n    OUTPUT_DROP_APPROACH_B: [\n      'RA.OUTPUT.DROP.APPROACH_B.X',\n      'RA.OUTPUT.DROP.APPROACH_B.Y',\n      'RA.OUTPUT.DROP.APPROACH_B.Z',\n    ],\n    OUTPUT_DROP_TARGET: [\n      'RA.OUTPUT.DROP.TARGET.X',\n      'RA.OUTPUT.DROP.TARGET.Y',\n      'RA.OUTPUT.DROP.TARGET.Z',\n    ],\n    FTS_PICK_APPROACH_A: [\n      'RA.FTS.PICK.APPROACH_A.X',\n      'RA.FTS.PICK.APPROACH_A.Y',\n      'RA.FTS.PICK.APPROACH_A.Z',\n    ],\n    FTS_PICK_APPROACH_B: [\n      'RA.FTS.PICK.APPROACH_B.X',\n      'RA.FTS.PICK.APPROACH_B.Y',\n      'RA.FTS.PICK.APPROACH_B.Z',\n    ],\n    FTS_PICK_TARGET: [\n      'RA.FTS.PICK.TARGET.X',\n      'RA.FTS.PICK.TARGET.Y',\n      'RA.FTS.PICK.TARGET.Z',\n    ],\n    FTS_DROP_APPROACH_A: [\n      'RA.FTS.DROP.APPROACH_A.X',\n      'RA.FTS.DROP.APPROACH_A.Y',\n      'RA.FTS.DROP.APPROACH_A.Z',\n    ],\n    FTS_DROP_APPROACH_B: [\n      'RA.FTS.DROP.APPROACH_B.X',\n      'RA.FTS.DROP.APPROACH_B.Y',\n      'RA.FTS.DROP.APPROACH_B.Z',\n    ],\n    FTS_DROP_TARGET: [\n      'RA.FTS.DROP.TARGET.X',\n      'RA.FTS.DROP.TARGET.Y',\n      'RA.FTS.DROP.TARGET.Z',\n    ],\n    GRIP_ON: [],\n    GRIP_OFF: [],\n    CAMERA_HOME: ['cal__homePosX', 'cal__homePosY'],\n    CAMERA_HBW: ['cal__customPosX', 'cal__customPosY'],\n    FACTORY_BASE_SETTINGS: [\n      'cal__shortProcessWaitTime',\n      'cal__colorRange',\n    ],\n  },\n  AIQS: {\n    TO_NIO_BIN: ['cal__badTime'],\n    TO_CAMERA: ['cal__cameraTime'],\n    TO_PICKUP: [],\n    PICK: ['STEPS_BELT_CAMERA', 'STEPS_BELT_BIN', 'STEPS_BELT_GRIPPER'],\n    DROP: ['STEPS_BELT_CAMERA', 'STEPS_BELT_BIN', 'STEPS_BELT_GRIPPER'],\n    CHECK: ['STEPS_BELT_CAMERA', 'STEPS_BELT_BIN', 'STEPS_BELT_GRIPPER'],\n    FACTORY_BASE_SETTINGS: [\n      'cal__processEndTime',\n      'cal__midLightGateTime',\n      'cal__gripperDownTime',\n      'cal__vacuumReleaseTime',\n      'cal__prePhotoTime',\n    ],\n  },\n};\n\nexport default calibrationData;\n\n","import { Pipe, PipeTransform } from '@angular/core';\nimport {\n  CalibrationData,\n  calibrationData,\n} from '../../../common/data/calibration';\nimport { ModuleType } from '../../../common/protocol/module';\nimport { ReferenceValue } from '../../../common/protocol/vda';\n\n@Pipe({\n  name: 'filterRef',\n})\nexport class FilterRefPipe implements PipeTransform {\n  private calibrationData: CalibrationData = calibrationData;\n\n  transform(\n    value: Array<ReferenceValue>,\n    positionName: string,\n    moduleType: ModuleType\n  ): Array<ReferenceValue> {\n    if (!positionName || !moduleType) {\n      return [];\n    }\n    const positionCalibrationValues =\n      this.calibrationData[moduleType][positionName] ?? [];\n    return (value ?? []).filter((ref) =>\n      positionCalibrationValues.includes(ref.referenceKey)\n    );\n  }\n}\n","<ng-template #stopDialogContent>\n  <h2 mat-dialog-title><mat-icon>tune</mat-icon>{{ 'Kalibrierung beenden' | translate }}</h2>\n  <section mat-dialog-content>\n    {{'Nicht gespeicherte Änderungen gehen verloren.' | translate}}\n  </section>\n  <section mat-dialog-actions>\n    <button mat-flat-button mat-dialog-close color=\"warn\" (click)=\"sendCalibrationCommand(ModuleCalibrationCommand.STOP)\">{{ 'Kalibrierung beenden' | translate }}</button>\n    <button mat-flat-button mat-dialog-close cdkFocusInitial>{{ 'Abbrechen' | translate }}</button>\n  </section>\n</ng-template>\n\n<ff-missing-controller-banner>\n  <section id=\"module-calibration\" *ngIf=\"moduleData$ | async as moduleData\">\n    <h1>{{ 'Modulkalibrierung' | translate }} - {{moduleData.subType}} (ID: {{moduleData.serialNumber}})</h1>\n    <div *ngIf=\"!moduleData.calibrating && moduleData.connected\">\n      <button mat-raised-button *ngIf=\"!moduleData.calibrating\"\n              (click)=\"sendCalibrationCommand(ModuleCalibrationCommand.START)\"><mat-icon>tune</mat-icon>{{ \"Kalibrierung starten\" | translate }}</button>\n    </div>\n    <section *ngIf=\"moduleData.calibrating && moduleData.connected\">\n      <button mat-raised-button\n              (click)=\"this.dialog.open(stopDialogContent);\"><mat-icon>tune</mat-icon>{{ \"Kalibrierung beenden\" | translate }}</button>\n      <button mat-raised-button [disabled]=\"true\"\n              (click)=\"sendCalibrationCommand(ModuleCalibrationCommand.RESET, undefined, true)\"><mat-icon>clear</mat-icon>{{ \"Auf Werkseinstellungen zurücksetzen\" | translate }}</button>\n      <mat-card>\n        <mat-card-title>{{ \"Kalibrierungswerte\" | translate }}</mat-card-title>\n        <mat-card-content>\n          <button mat-raised-button\n                  *ngIf=\"!calibration_data?.length\"\n                  (click)=\"sendCalibrationCommand(ModuleCalibrationCommand.START)\"><mat-icon>refresh</mat-icon>{{ \"Werte laden\" | translate }}</button>\n          <section class=\"calibration-data\" *ngIf=\"calibration_data?.length\">\n            <section class=\"value-list\">\n              <section style=\"margin-bottom: 1rem\">\n                <mat-form-field class=\"full-width\">\n                  <mat-label>{{ \"Position zum Kalibrieren\" | translate}}</mat-label>\n                  <mat-select [(value)]=\"current_position\">\n                    <mat-option *ngFor=\"let pos of available_positions\" [value]=\"pos\">{{ pos | translate }}</mat-option>\n                    <mat-option [value]=\"'FACTORY_BASE_SETTINGS'\">{{ \"FACTORY_BASE_SETTINGS\" | translate }}</mat-option>\n                  </mat-select>\n                </mat-form-field>\n                <button mat-raised-button\n                        *ngIf=\"current_position !== 'FACTORY_BASE_SETTINGS'\"\n                        (click)=\"sendCalibrationCommand(ModuleCalibrationCommand.SELECT, current_position?.trim()?.toUpperCase())\"><mat-icon>flag</mat-icon>{{ \"Position wählen\" | translate }}</button>\n                <button mat-raised-button\n                        *ngIf=\"current_position !== 'FACTORY_BASE_SETTINGS'\"\n                        (click)=\"sendCalibrationCommand(ModuleCalibrationCommand.TEST, current_position?.trim()?.toUpperCase())\"><mat-icon>play_arrow</mat-icon>{{ \"Position testen\" | translate }}</button>\n              </section>\n              <mat-form-field class=\"full-width\" *ngFor=\"let ref of calibration_data | filterRef:current_position:moduleData.subType!\">\n                <mat-label>{{ ref.referenceKey | translate }}</mat-label>\n                <input matNativeControl #refInput type=\"number\" [ngModel]=\"ref.referenceValue\" (ngModelChange)=\"updateRef(refInput, ref, $event)\">\n              </mat-form-field>\n            </section>\n          </section>\n        </mat-card-content>\n        <mat-card-actions *ngIf=\"calibration_data?.length\">\n          <button mat-raised-button\n                  (click)=\"calibrationCommandWithValues(ModuleCalibrationCommand.SET_VALUES)\"><mat-icon>access_time</mat-icon>{{ \"Anwenden\" | translate }}</button>\n          <button mat-raised-button\n                  (click)=\"sendCalibrationCommand(ModuleCalibrationCommand.RESET)\"><mat-icon>undo</mat-icon>{{ \"Zurücksetzen\" | translate }}</button>\n          <button mat-raised-button\n                  (click)=\"calibrationCommandWithValues(ModuleCalibrationCommand.STORE)\"><mat-icon>save</mat-icon>{{ \"Speichern\" | translate }}</button>\n        </mat-card-actions>\n      </mat-card>\n\n      <ff-calibration-info [imageData]=\"image_data\" [statusValues]=\"status_values\"></ff-calibration-info>\n      <ff-calibration-caption [moduleType]=\"moduleData.subType!\"></ff-calibration-caption>\n    </section>\n  </section>\n</ff-missing-controller-banner>\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  BehaviorSubject,\n  Observable,\n  Subject,\n  combineLatestWith,\n  filter,\n  map,\n  shareReplay,\n  startWith,\n  takeUntil,\n} from 'rxjs';\nimport { CcuTopic } from '../../../common/protocol';\nimport {\n  ModuleCalibration,\n  ModuleCalibrationCommand,\n  ModuleCalibrationState,\n  PairedModule,\n} from '../../../common/protocol/ccu';\nimport { ModuleCalibrationStatusKeys } from '../../../common/protocol/module';\nimport { ReferenceValue } from '../../../common/protocol/vda';\nimport { TypedMqttService } from '../../futurefactory.service';\nimport { FactoryLayoutService } from '../../services/factory-layout.service';\nimport { StatesService } from '../../services/states.service';\nimport { getRouteToModuleRoot } from '../../utils/routes.utils';\n\n@Component({\n  selector: 'ff-module-details',\n  templateUrl: './module-calibration.component.html',\n  styleUrls: ['./module-calibration.component.scss'],\n})\nexport class FutureFactoryModuleCalibrationComponent implements OnDestroy {\n  readonly ModuleCalibrationCommand = ModuleCalibrationCommand;\n\n  readonly moduleId$ = new BehaviorSubject<string | undefined>(undefined);\n  private destroyed$ = new Subject<void>();\n  readonly routeToRoot$: Observable<string>;\n\n  public image_data: Array<ReferenceValue> = [];\n  public calibration_data: Array<ReferenceValue> = [];\n  public available_positions: string[] = [];\n  public current_position: string = '';\n  public status_values: Array<ReferenceValue> = [];\n\n  @Input() set moduleId(id: string | undefined) {\n    this.moduleId$.next(id);\n  }\n\n  get moduleId(): string | undefined {\n    return this.moduleId$.value;\n  }\n\n  private moduleCalibration$: Observable<ModuleCalibrationState | undefined>;\n  readonly moduleData$: Observable<PairedModule | undefined>;\n\n  constructor(\n    readonly factoryLayoutService: FactoryLayoutService,\n    readonly statesService: StatesService,\n    private mqttClient: TypedMqttService,\n    private route: ActivatedRoute,\n    readonly dialog: MatDialog\n  ) {\n    route.params.pipe(takeUntil(this.destroyed$)).subscribe((params) => {\n      if (params['moduleId']) {\n        this.moduleId = params['moduleId'];\n      }\n    });\n\n    this.routeToRoot$ = getRouteToModuleRoot(route);\n\n    this.moduleData$ = this.createModuleDataObservable();\n    this.moduleCalibration$ = this.createModuleCalibrationObservable();\n\n    this.moduleCalibration$.subscribe((calibration_data) => {\n      if (calibration_data) {\n        this.calibration_data = [];\n        this.status_values = [];\n        this.image_data = [];\n        this.available_positions = [];\n        this.current_position = '';\n        if (calibration_data.references) {\n          for (const ref of calibration_data.references) {\n            this.calibration_data.push(ref);\n          }\n        }\n        if (calibration_data.status_references) {\n          for (const ref of calibration_data.status_references) {\n            if (\n              typeof ref.referenceValue === 'string' &&\n              ref.referenceValue.startsWith('data:')\n            ) {\n              this.image_data.push(ref);\n            } else if (\n              ref.referenceKey ===\n                ModuleCalibrationStatusKeys.POSITIONS_AVAILABLE &&\n              typeof ref.referenceValue === 'string'\n            ) {\n              this.available_positions = ref.referenceValue.split(',');\n            } else if (\n              ref.referenceKey ===\n                ModuleCalibrationStatusKeys.POSITIONS_CURRENT &&\n              typeof ref.referenceValue === 'string'\n            ) {\n              this.current_position = ref.referenceValue;\n            } else {\n              this.status_values.push(ref);\n            }\n          }\n        }\n        const referenceSorter = (refA: ReferenceValue, refB: ReferenceValue) =>\n          refA.referenceKey.localeCompare(refB.referenceKey);\n        this.calibration_data.sort(referenceSorter);\n        this.status_values.sort(referenceSorter);\n        this.image_data.sort(referenceSorter);\n      }\n    });\n  }\n\n  updateRef(refInput: HTMLInputElement, ref: ReferenceValue, newValue: number) {\n    this.calibration_data = this.calibration_data.map((_ref) => {\n      if (_ref.referenceKey === ref.referenceKey) {\n        _ref.referenceValue = newValue;\n      }\n      return _ref;\n    });\n    refInput.focus();\n  }\n\n  /**\n   * Get the module calibration data for the given module\n   * @private\n   */\n  private createModuleCalibrationObservable() {\n    return this.statesService.calibrationState$.pipe(\n      combineLatestWith(this.moduleId$),\n      map(([calib, moduleId]) =>\n        calib.serialNumber === moduleId ? calib : null\n      ),\n      filter((calib): calib is ModuleCalibrationState => !!calib),\n      startWith(undefined),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n  }\n\n  /**\n   * Get the paired module data for the given module\n   * @private\n   */\n  private createModuleDataObservable() {\n    return this.factoryLayoutService.pairedModules$.pipe(\n      combineLatestWith(this.moduleId$),\n      map(([modules, moduleId]) =>\n        moduleId\n          ? modules.find((module) => module.serialNumber === moduleId)\n          : undefined\n      ),\n      shareReplay(1),\n      takeUntil(this.destroyed$)\n    );\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.complete();\n    this.moduleId$.complete();\n  }\n\n  calibrationCommandWithValues(command: ModuleCalibrationCommand) {\n    if (this.moduleId) {\n      this.sendCalibrationCommand(\n        command,\n        undefined,\n        undefined,\n        this.calibration_data.map((ref) => {\n          ref.referenceValue = +ref.referenceValue;\n          return ref;\n        })\n      );\n    }\n  }\n\n  public sendCalibrationCommand(\n    command: ModuleCalibrationCommand,\n    position?: string,\n    factory?: boolean,\n    references?: Array<ReferenceValue>\n  ) {\n    if (this.moduleId) {\n      this.mqttClient.publish<ModuleCalibration>(\n        CcuTopic.SET_MODULE_CALIBRATION,\n        {\n          timestamp: new Date(),\n          serialNumber: this.moduleId,\n          command: command,\n          position,\n          factory,\n          references,\n        }\n      );\n    }\n  }\n}\n","<ff-missing-controller-banner>\n  <section id=\"module-details\" *ngIf=\"moduleData$ | async as moduleData\">\n  <h1>{{ 'Moduleinstellungen' | translate }} - {{'Produktionsschritt.' + moduleData.subType | translate}} (ID: {{moduleData.serialNumber}})</h1>\n  <div class=\"wideflex\">\n    <section class=\"left\">\n    <section class=\"image\">\n      <img [src]=\"'assets/images/ic_ft_' + moduleData.subType?.toLowerCase() + '.svg'\"\n           [attr.alt]=\"'Produktionsschritt.' + moduleData.subType | translate\">\n    </section>\n    <section class=\"module_settings\">\n      <h3>{{ 'Modulwerte' | translate }}</h3>\n      <dl *ngIf=\"moduleData.productionDuration !== undefined\">\n        <dt>{{ 'Fertigungsdauer' | translate }}</dt>\n        <dd>\n          <input type=\"number\"\n                 [value]=\"moduleData.productionDuration\"\n                 [disabled]=\"!durationEditEnabled.checked\"\n                 #durationInput>\n          &nbsp;{{ 'Sekunden' | translate }}&nbsp;\n          <mat-button-toggle #durationEditEnabled\n                             (click)=\"clickEditDuration()\">\n            <mat-icon>edit</mat-icon>\n          </mat-button-toggle>\n        </dd>\n      </dl>\n      <dl>\n        <dt>{{ 'Verbunden' | translate }}</dt>\n        <dd>{{moduleData.connected}}</dd>\n      </dl>\n      <dl>\n        <dt>{{ 'Blockiert durch Fehler' | translate }}</dt>\n        <dd>\n          {{moduleData.connected && moduleData.available === BLOCKED_STATE}}\n          <button mat-icon-button>\n            <mat-icon>more</mat-icon>\n          </button>\n        </dd>\n      </dl>\n      <dl>\n        <dt>{{ 'Kalibrierung' | translate }}</dt>\n        <dd>\n          {{moduleData.calibrating ?? false}}\n          <a class=\"calibration-button\" mat-stroked-button *ngIf=\"moduleData.hasCalibration\" [routerLink]=\"[CALIBRATION_ROUTE]\">\n            <mat-icon [title]=\"'Kalibrieren' | translate\">\n              tune\n            </mat-icon>\n            {{'Kalibrieren' | translate}}\n          </a>\n        </dd>\n      </dl>\n    </section>\n    </section>\n    <section class=\"location\">\n      <ff-factory-layout [startZoom]=\"0.6\" [editable]=\"false\" [highlightedId]=\"moduleId\"></ff-factory-layout>\n    </section>\n  </div>\n    <section class=\"order_info\">\n      <h3>{{ 'Aktueller Auftrag' | translate }}</h3>\n      <dl *ngIf=\"orderInfo$ | async as orderInfo\">\n        <dt>{{ 'Bestellung' | translate }}</dt>\n        <dd>\n          <a *ngIf=\"orderInfo.orderId\"\n            [routerLink]=\"[routeToRoot$ | async, ORDERS_ROUTE, orderInfo.orderId]\">\n            <span class=\"workpiece\">{{orderInfo.workpiece}}</span>&nbsp;\n            <span class=\"orderId\">{{orderInfo.orderId}}</span>\n          </a>\n        </dd>\n        <dt>{{ 'Start der Bearbeitung' | translate }}</dt>\n        <dd>{{orderInfo.startedAt ?? ('Unbekannt' | translate)}}</dd>\n      </dl>\n    </section>\n  </section>\n</ff-missing-controller-banner>\n","import { Component, ElementRef, Input, OnDestroy, ViewChild, } from '@angular/core';\nimport { MatButtonToggle } from '@angular/material/button-toggle';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  BehaviorSubject,\n  combineLatestWith,\n  distinctUntilChanged,\n  filter,\n  map,\n  Observable,\n  shareReplay,\n  startWith,\n  Subject,\n  takeUntil,\n} from 'rxjs';\nimport { CcuTopic } from '../../../common/protocol';\nimport {\n  AvailableState,\n  ModuleSettings,\n  OrderManufactureStep,\n  OrderResponse,\n  OrderState,\n  PairedModule,\n  Workpiece,\n} from '../../../common/protocol/ccu';\nimport {\n  ModuleCommandType,\n  ModuleState,\n} from '../../../common/protocol/module';\nimport { TypedMqttService } from '../../futurefactory.service';\nimport { FactoryLayoutService } from '../../services/factory-layout.service';\nimport { OrderStatesService } from '../../services/order-states.service';\nimport { StatesService } from '../../services/states.service';\nimport { FutureFactoryRoutes } from '../../futurefactory.routes';\nimport { getRouteToModuleRoot } from '../../utils/routes.utils';\n\ninterface OrderStepInfo {\n  command?: ModuleCommandType;\n  orderId: string;\n  workpiece?: Workpiece;\n  workpieceId?: string;\n  startedAt?: Date;\n  eta?: Date;\n}\n\n@Component({\n  selector: 'ff-module-details',\n  templateUrl: './module-details.component.html',\n  styleUrls: ['./module-details.component.scss'],\n})\nexport class FutureFactoryModuleDetailsComponent implements OnDestroy {\n  readonly ORDERS_ROUTE = FutureFactoryRoutes.ORDERS;\n\n  @ViewChild('durationEditEnabled')\n  durationEditToggle!: MatButtonToggle;\n  @ViewChild('durationInput')\n  durationInput!: ElementRef<HTMLInputElement>;\n\n  readonly moduleId$ = new BehaviorSubject<string | undefined>(undefined);\n  private destroyed$ = new Subject<void>();\n  readonly routeToRoot$: Observable<string>;\n\n  @Input() set moduleId(id: string | undefined) {\n    this.moduleId$.next(id);\n  }\n\n  get moduleId(): string | undefined {\n    return this.moduleId$.value;\n  }\n\n  readonly moduleData$: Observable<PairedModule | undefined>;\n\n  readonly orderInfo$: Observable<OrderStepInfo | undefined>;\n  readonly BLOCKED_STATE = AvailableState.BLOCKED;\n  readonly CALIBRATION_ROUTE = FutureFactoryRoutes.CALIBRATION;\n\n  /**\n   * Find the latest step of the order currently executed on the module\n   * @param order\n   * @param serialNumber\n   * @private\n   */\n  private findLatestOrderStepIndexForModule(\n    order: OrderResponse,\n    serialNumber: string\n  ): number {\n    for (let i = order.productionSteps.length - 1; i >= 0; i--) {\n      const step = order.productionSteps[i];\n      if (\n        step.type === 'MANUFACTURE' &&\n        step.serialNumber === serialNumber &&\n        step.state !== OrderState.ENQUEUED &&\n        step.startedAt\n      ) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Find the first step of the current sequence for the module containing the given step index\n   * @param order\n   * @param serialNumber\n   * @param currentIndex\n   * @private\n   */\n  private findStartOfCurrentModuleSteps(\n    order: OrderResponse,\n    serialNumber: string,\n    currentIndex: number\n  ): OrderManufactureStep | undefined {\n    let firstStep: OrderManufactureStep | undefined;\n    for (let i = currentIndex; i >= 0; i--) {\n      const step = order.productionSteps[i];\n      if (\n        step.type === 'MANUFACTURE' &&\n        step.serialNumber === serialNumber &&\n        step.state !== OrderState.ENQUEUED &&\n        step.startedAt\n      ) {\n        firstStep = step;\n      } else {\n        break;\n      }\n    }\n    return firstStep;\n  }\n\n  /**\n   * Checks if there are still incomplete steps for the current module\n   * @param order\n   * @param serialNumber\n   * @param currentIndex\n   * @private\n   */\n  private hasCurrentlyRemainingModuleSteps(\n    order: OrderResponse,\n    serialNumber: string,\n    currentIndex: number\n  ): boolean {\n    let remaining = false;\n    if (currentIndex < 0) {\n      return false;\n    }\n    for (let i = currentIndex; i < order.productionSteps.length; i++) {\n      const step = order.productionSteps[i];\n      if (step.type !== 'MANUFACTURE' || step.serialNumber !== serialNumber) {\n        break;\n      } else if (\n        step.state === OrderState.ENQUEUED ||\n        step.state === OrderState.IN_PROGRESS\n      ) {\n        remaining = true;\n        break;\n      }\n    }\n    return remaining;\n  }\n\n  constructor(\n    readonly factoryLayoutService: FactoryLayoutService,\n    readonly statesService: StatesService,\n    private orderStatesService: OrderStatesService,\n    private mqttClient: TypedMqttService,\n    private route: ActivatedRoute,\n  ) {\n    route.params.pipe(takeUntil(this.destroyed$)).subscribe((params) => {\n      if (params['moduleId']) {\n        this.moduleId = params['moduleId'];\n      }\n    });\n\n    this.routeToRoot$ = getRouteToModuleRoot(route);\n\n    this.moduleData$ = this.createModuleDataObservable();\n\n    this.orderInfo$ = this.createOrderInfoObservable();\n  }\n\n  /**\n   * Get the current order information for the current module\n   * @private\n   */\n  private createOrderInfoObservable(): Observable<OrderStepInfo | undefined> {\n    // Use module state to get order id\n    const moduleState$ = this.statesService.moduleStates$.pipe(\n      combineLatestWith(this.moduleId$),\n      map(([states, serialNumber]) =>\n        serialNumber ? states.get(serialNumber) : undefined\n      ),\n      filter((state): state is ModuleState => !!state),\n      distinctUntilChanged()\n    );\n\n    // get the order information for that id.\n    return moduleState$.pipe(\n      combineLatestWith(\n        this.orderStatesService.activeOrders$.pipe(startWith([]))\n      ),\n      map(([state, orders]) => {\n        let orderStepInfo: OrderStepInfo | undefined;\n        let firstModuleStep: OrderManufactureStep | undefined;\n        const currentOrder = orders.find((o) => o.orderId === state.orderId);\n\n        if (currentOrder) {\n          const currentModuleStepIndex = this.findLatestOrderStepIndexForModule(\n            currentOrder,\n            state.serialNumber\n          );\n          firstModuleStep = this.findStartOfCurrentModuleSteps(\n            currentOrder,\n            state.serialNumber,\n            currentModuleStepIndex\n          );\n          if (\n            this.hasCurrentlyRemainingModuleSteps(\n              currentOrder,\n              state.serialNumber,\n              currentModuleStepIndex\n            )\n          ) {\n            orderStepInfo = {\n              orderId: state.orderId,\n              workpiece: currentOrder?.type,\n              workpieceId: currentOrder?.workpieceId,\n              startedAt: firstModuleStep?.startedAt,\n            };\n          }\n        }\n        return orderStepInfo;\n      })\n    );\n  }\n\n  /**\n   * Get the paired module data for the given module\n   * @private\n   */\n  private createModuleDataObservable() {\n    return this.factoryLayoutService.pairedModules$.pipe(\n      combineLatestWith(this.moduleId$),\n      map(([modules, moduleId]) =>\n        moduleId\n          ? modules.find((module) => module.serialNumber === moduleId)\n          : undefined\n      ),\n      shareReplay(1),\n      takeUntil(this.destroyed$),\n    );\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.complete();\n    this.moduleId$.complete();\n  }\n\n  clickEditDuration() {\n    if (this.moduleId && !this.durationEditToggle.checked) {\n      const settings: ModuleSettings = {\n        serialNumber: this.moduleId,\n        duration: Number(this.durationInput.nativeElement.value),\n      };\n      this.mqttClient.publish(CcuTopic.SET_MODULE_DURATION, settings);\n    }\n  }\n}\n","import { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AvailableState, DeviceType, FtsPairedModule, PairedModule, PairingState } from '../../../common/protocol/ccu';\nimport { ModuleType } from '../../../common/protocol/module';\n\nexport interface ModuleListData {\n  type: DeviceType;\n  subType: ModuleType | undefined;\n  serialNumber: string;\n  connected: boolean;\n  available: AvailableState | undefined;\n  ip: string | undefined;\n  version: string | undefined;\n  pairedSince: Date | undefined;\n  hasCalibration: boolean | undefined;\n  charging: boolean | undefined;\n}\n\nexport class ModuleListDataSource extends MatTableDataSource<ModuleListData> {\n  private collection$: Subscription | undefined;\n  private connectionCount = 0;\n\n  constructor(\n    private pairingState$: Observable<PairingState>,\n    private translate: TranslateService\n  ) {\n    super();\n  }\n\n  override connect(): BehaviorSubject<ModuleListData[]> {\n    const isFts = (mod: PairedModule | FtsPairedModule): mod is FtsPairedModule => mod?.type === 'FTS';\n    if (!this.collection$) {\n      this.collection$ = this.pairingState$\n        .pipe(\n          map((data) => [...data.modules, ...data.transports] as const),\n          map((data) =>\n            data.map((mod) => {\n              return {\n                type: mod.type,\n                subType: mod.subType,\n                ip: mod.ip,\n                version: mod.version,\n                connected: mod.connected ?? false,\n                available: mod.available,\n                pairedSince: mod.pairedSince,\n                serialNumber: mod.serialNumber,\n                hasCalibration: mod.hasCalibration,\n                charging: (isFts(mod)) ? mod.charging : undefined,\n              } as ModuleListData;\n            })\n          )\n        )\n        .subscribe((data) => (this.data = data));\n    }\n    this.connectionCount++;\n    return super.connect();\n  }\n\n  override disconnect() {\n    if (this.connectionCount) {\n      this.connectionCount--;\n      if (this.connectionCount === 0 && this.collection$) {\n        this.collection$.unsubscribe();\n        this.collection$ = undefined;\n      }\n    }\n    super.disconnect();\n  }\n\n  override readonly sortingDataAccessor = (\n    data: ModuleListData,\n    sortHeaderId: string\n  ): string | number => {\n    switch (sortHeaderId) {\n      case 'serialNumber': {\n        return data.serialNumber;\n      }\n      case 'connected': {\n        return data.connected ? 1 : 0;\n      }\n      case 'name': {\n        return this.translate.instant(\n          'Produktionsschritt.' + (data.subType ?? data.type)\n        );\n      }\n      default: {\n        return '';\n      }\n    }\n  };\n\n  override readonly sortData = (\n    data: ModuleListData[],\n    sort: MatSort\n  ): ModuleListData[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const valueA = this.sortingDataAccessor(a, active);\n      const valueB = this.sortingDataAccessor(b, active);\n\n      return (valueA < valueB ? -1 : 1) * (direction === 'asc' ? 1 : -1);\n    });\n  };\n}\n","<ng-template #parkDialogContent>\n  <h2 mat-dialog-title><mat-icon>sync_problem</mat-icon> {{ 'Fabrik parken' | translate }}</h2>\n  <div mat-dialog-content>\n    <p>{{'Sollen die Fabrikmodule geparkt werden?' | translate}}</p>\n  </div>\n  <div mat-dialog-actions>\n    <button mat-flat-button mat-dialog-close color=\"warn\" (click)=\"sendFactoryPark()\">{{ 'Ja' | translate }}</button>\n    <button mat-flat-button mat-dialog-close cdkFocusInitial>{{ 'Nein' | translate }}</button>\n  </div>\n</ng-template>\n\n<button mat-mini-fab\n        [title]=\"'Fabrik parken' | translate\"\n        [attr.aria-label]=\"'Fabrik parken' | translate\"\n        color=\"primary\"\n        class=\"action-btn\"\n        (click)=\"confirmFactoryPark()\">\n  <mat-icon>local_parking</mat-icon>\n</button>\n","import { Component, TemplateRef, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { CcuTopic } from '../../../common/protocol';\nimport { ParkRequest } from '../../../common/protocol/ccu';\nimport { TypedMqttService } from '../../services/typed-mqtt.service';\n\n@Component({\n  selector: 'ff-factory-park',\n  templateUrl: './factory-park.component.html',\n  styleUrls: ['./factory-park.component.scss'],\n})\nexport class FactoryParkComponent {\n  @ViewChild('parkDialogContent')\n  readonly parkDialogContent!: TemplateRef<any>;\n  constructor(private dialog: MatDialog, private mqtt: TypedMqttService) {}\n\n  confirmFactoryPark() {\n    this.dialog.open(this.parkDialogContent);\n  }\n\n  sendFactoryPark() {\n    const park: ParkRequest = {\n      timestamp: new Date(),\n    };\n    this.mqtt.publish(CcuTopic.SET_PARK, park, { qos: 2 });\n  }\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n  name: 'toIcon'\n})\nexport class ToIconPipe implements PipeTransform {\n  transform(value: string, iconSet: Record<string, string> = {}) {\n    if (value in iconSet) {\n      return iconSet[value];\n    }\n    return value;\n  }\n}\n","<ff-missing-controller-banner>\n  <h2 class=\"header\">{{ 'Modulübersicht' | translate }}</h2>\n  <ff-factory-park></ff-factory-park>\n\n  <table mat-table matSort [dataSource]=\"dataSource\">\n    <ng-container matColumnDef=\"icon\">\n      <th mat-header-cell *matHeaderCellDef></th>\n      <td mat-cell *matCellDef=\"let mod\" (click)=\"moduleSelected(mod)\">\n        <img [src]=\"(mod.subType ?? mod.type) | toIcon:MODULE_ICON_PATHS\">\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"serialNumber\">\n      <th mat-header-cell mat-sort-header *matHeaderCellDef>{{ 'ID' | translate }}</th>\n      <td mat-cell *matCellDef=\"let mod\" (click)=\"moduleSelected(mod)\">\n        <span [title]=\"getMetadata(mod)\">\n          {{mod.serialNumber}}\n        </span>\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell mat-sort-header *matHeaderCellDef>{{ 'Name' | translate }}</th>\n      <td mat-cell *matCellDef=\"let mod\" (click)=\"moduleSelected(mod)\">\n        <span>\n          {{ 'Produktionsschritt.' + (mod.subType ?? mod.type) | translate }}\n        </span>\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"connected\">\n      <th mat-header-cell mat-sort-header *matHeaderCellDef>{{ 'Verbunden' | translate }}</th>\n      <td mat-cell *matCellDef=\"let mod\" (click)=\"moduleSelected(mod)\">\n        <mat-icon [title]=\"mod.connected ? 'Verbunden' : 'Nicht verbunden' | translate\">\n          {{mod.connected ? 'wifi' : 'wifi_off'}}\n        </mat-icon>\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"available\">\n      <th mat-header-cell mat-sort-header *matHeaderCellDef>{{ 'Verfügbarkeitsstatus' | translate }}</th>\n      <td mat-cell *matCellDef=\"let mod\" (click)=\"moduleSelected(mod)\">\n        {{ ('AvailableState.' + mod.available) | translate }}\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"paired\">\n      <th mat-header-cell *matHeaderCellDef>{{ 'Konfiguriert' | translate }}</th>\n      <td mat-cell *matCellDef=\"let mod\" class=\"no-pointer\">\n        <ng-container *ngIf=\"mod.type === DeviceType.FTS\">\n          <span *ngIf=\"mod.connected\">\n            <button mat-stroked-button *ngIf=\"!mod.pairedSince\" (click)=\"connectFts(mod)\">\n              <mat-icon [title]=\"'Docke an DPS' | translate\">\n                pin_drop\n              </mat-icon>\n              {{'Docke an DPS' | translate}}\n            </button>\n            <mat-icon *ngIf=\"mod.pairedSince\" [title]=\"getInFactorySince(mod)\">\n              place\n            </mat-icon>\n             <a class=\"charge-button\" mat-stroked-button *ngIf=\"!mod.charging && mod.pairedSince\" (click)=\"setFtsCharge(mod, true)\">\n            <mat-icon [title]=\"'Laden' | translate\">\n              power\n            </mat-icon>\n               {{'Laden' | translate}}\n          </a>\n          <a class=\"charge-button\" mat-stroked-button *ngIf=\"mod.charging && mod.pairedSince\" (click)=\"setFtsCharge(mod, false)\">\n            <mat-icon [title]=\"'Laden' | translate\">\n              battery_charging_full\n            </mat-icon>\n            {{'Laden beenden' | translate}}\n          </a>\n          </span>\n        </ng-container>\n        <ng-container *ngIf=\"mod.type === DeviceType.MODULE\">\n          <mat-icon [title]=\"getPairedSince(mod)\">\n            {{mod.pairedSince ? 'grid_on' : 'grid_off'}}\n          </mat-icon>\n        </ng-container>\n        <a class=\"calibration-button\" mat-stroked-button *ngIf=\"mod.hasCalibration\"\n           [routerLink]=\"[mod.serialNumber, CALIBRATION_ROUTE]\">\n          <mat-icon [title]=\"'Kalibrieren' | translate\">\n            tune\n          </mat-icon>\n          {{'Kalibrieren' | translate}}\n        </a>\n        <ng-container *ngIf=\"mod.type === DeviceType.MODULE\">\n          <button mat-stroked-button color=\"warn\" class=\"delete-module-button\"\n            *ngIf=\"!mod.pairedSince && !hasConfirmedDelete(mod)\" (click)=\"confirmDelete(mod)\">\n            <mat-icon [title]=\"'Löschen' | translate\">delete</mat-icon>\n            {{'Löschen' | translate}}\n          </button>\n          <button mat-flat-button color=\"warn\" class=\"delete-module-button\"\n            *ngIf=\"!mod.pairedSince && hasConfirmedDelete(mod)\" (click)=\"deleteModule(mod)\">\n            <mat-icon [title]=\"'Löschen' | translate\">delete_forever</mat-icon>\n            {{'Endgültig löschen' | translate}}\n          </button>\n        </ng-container>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"\n      [class.has-details]=\"row.type === 'MODULE'\"></tr>\n  </table>\n\n</ff-missing-controller-banner>\n","import { AfterViewInit, Component, ViewChild } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { CcuTopic } from '../../../common/protocol';\nimport {\n  DeleteModuleRequest,\n  DeviceType,\n  FtsChargeRequest,\n  FtsPairingRequest,\n  PairedModule,\n} from '../../../common/protocol/ccu';\nimport { FutureFactoryRoutes } from '../../futurefactory.routes';\nimport { FactoryLayoutService } from '../../services/factory-layout.service';\nimport { TypedMqttService } from '../../services/typed-mqtt.service';\nimport { MODULE_ICON_PATHS } from '../../utils/routes.utils';\nimport {\n  ModuleListData,\n  ModuleListDataSource,\n} from './module-list.data-source';\n\n@Component({\n  selector: 'ff-module-list',\n  templateUrl: './module-list.component.html',\n  styleUrls: ['./module-list.component.scss'],\n})\nexport class FutureFactoryModuleListComponent implements AfterViewInit {\n  readonly MODULE_ICON_PATHS = MODULE_ICON_PATHS;\n  readonly CALIBRATION_ROUTE = FutureFactoryRoutes.CALIBRATION;\n  readonly DeviceType = DeviceType;\n  readonly displayedColumns = [\n    'icon',\n    'serialNumber',\n    'name',\n    'connected',\n    'available',\n    'paired',\n  ];\n  readonly dataSource: ModuleListDataSource;\n  @ViewChild(MatSort) sort!: MatSort;\n  readonly deletionMap = new Map<string, boolean>();\n\n  constructor(\n    readonly factoryLayoutService: FactoryLayoutService,\n    private translate: TranslateService,\n    private mqttService: TypedMqttService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute\n  ) {\n    this.dataSource = new ModuleListDataSource(\n      factoryLayoutService.pairingState$,\n      translate\n    );\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.sort = this.sort;\n  }\n\n  getMetadata(mod: ModuleListData): string {\n    if (!mod.ip || !mod.version) {\n      return this.translate.instant('Keine Metadaten verfügbar');\n    }\n    return `${mod.version} - ${mod.ip}`;\n  }\n\n  getInFactorySince(mod: ModuleListData): string {\n    if (!mod.pairedSince) {\n      return this.translate.instant('nicht in Fabrik eingebunden');\n    }\n    return this.translate.instant('In Fabrik eingebunden seit {{since}}', {\n      since: mod.pairedSince,\n    });\n  }\n\n  getPairedSince(mod: ModuleListData): string {\n    if (!mod.pairedSince) {\n      return this.translate.instant('nicht im Layout');\n    }\n    return this.translate.instant('im Layout seit {{since}}', {\n      since: mod.pairedSince,\n    });\n  }\n\n  connectFts(mod: ModuleListData) {\n    const request: FtsPairingRequest = {\n      serialNumber: mod.serialNumber,\n    };\n    this.mqttService.publish(CcuTopic.PAIRING_PAIR_FTS, request, { qos: 2 });\n  }\n\n  moduleSelected(row: ModuleListData) {\n    if (row.type === DeviceType.MODULE) {\n      this.router.navigate([row.serialNumber], {\n        relativeTo: this.activatedRoute,\n      });\n    }\n  }\n\n  setFtsCharge(mod: ModuleListData, charge: boolean) {\n    const request: FtsChargeRequest = {\n      serialNumber: mod.serialNumber,\n      charge,\n    };\n    this.mqttService.publish(CcuTopic.SET_CHARGE, request, { qos: 2 });\n  }\n\n  hasConfirmedDelete(mod: ModuleListData): boolean {\n    return this.deletionMap.get(mod.serialNumber) === true;\n  }\n\n  confirmDelete(mod: ModuleListData) {\n    this.deletionMap.set(mod.serialNumber, true);\n  }\n\n  deleteModule(mod: ModuleListData) {\n    if (this.deletionMap.get(mod.serialNumber) === true) {\n      const request: DeleteModuleRequest = {\n        serialNumber: mod.serialNumber,\n      };\n      this.mqttService.publish(CcuTopic.DELETE_MODULE, request, { qos: 2 });\n    }\n    this.deletionMap.delete(mod.serialNumber);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  BehaviorSubject,\n  MonoTypeOperatorFunction,\n  Observable,\n  pipe,\n} from 'rxjs';\nimport { map, shareReplay, startWith } from 'rxjs/operators';\nimport { CcuTopic } from '../../../common/protocol';\nimport { OrderResponse, OrderType } from '../../../common/protocol/ccu';\nimport { TypedMqttService } from '../../futurefactory.service';\nimport { OrderStatesService } from '../../services/order-states.service';\n\n@Injectable()\nexport class OrderListState {\n  readonly selectedOrder = new BehaviorSubject<OrderResponse | undefined>(\n    undefined\n  );\n  readonly activeOrders$: Observable<OrderResponse[]>;\n  readonly completedOrders$: Observable<OrderResponse[]>;\n\n  constructor(\n    private mqttService: TypedMqttService,\n    private orderStatesService: OrderStatesService\n  ) {\n    this.activeOrders$ = this.orderStatesService.activeOrders$.pipe(\n      this.filterOrdersByType(),\n      shareReplay(1)\n    );\n    this.completedOrders$ = this.orderStatesService.completedOrders$.pipe(\n      this.filterOrdersByType(),\n      shareReplay(1)\n    );\n  }\n\n  public setSelectedOrder(order: OrderResponse | undefined) {\n    this.selectedOrder.next(order);\n  }\n\n  isOrderSelected(order: OrderResponse): boolean {\n    return this.selectedOrder.value?.orderId === order.orderId;\n  }\n\n  /**\n   * Request the deletion of an order, only ENQUEUED orders can be deleted.\n   * Cancelling of active orders is not possible.\n   * @param $event\n   * @param orderId\n   */\n  public deleteOrder($event: MouseEvent, orderId: string) {\n    $event.stopPropagation();\n    this.mqttService.publish(CcuTopic.CANCEL_ORDERS, [orderId]);\n  }\n\n  /**\n   * OperatorFunction to filter orders by type.\n   * It is used in the constructor to filter the active and completed orders\n   * by the order type.\n   *\n   * @param orderType the type of orders to filter\n   * @returns {MonoTypeOperatorFunction<OrderResponse[]>}\n   */\n  private filterOrdersByType(): MonoTypeOperatorFunction<OrderResponse[]> {\n    return pipe(\n      map((orders) => orders ?? []),\n      map((orders) =>\n        orders.filter((o) => o.orderType === OrderType.PRODUCTION)\n      ),\n      startWith([])\n    );\n  }\n}\n","<ng-template #listoption let-order=\"order\">\n  <div\n    class=\"production-orders__list__item__content\"\n    [title]=\"'ID: ' + order.orderId\">\n    <span>{{ 'Auftrag' | translate }}</span>\n    <span>{{ order.timestamp | date : \"hh:mm\" }}</span>\n    <span>{{ order.type }}</span>\n    <span class=\"icon_column\">\n      <mat-icon\n        class=\"step-state\"\n        [attr.aria-label]=\"'Status.' + order.state | translate\"\n        [title]=\"'Status.' + order.state | translate\">\n        {{ order.state | toIcon:stateIcons }}\n      </mat-icon>\n    </span>\n    <span>\n      {{ order.startedAt | date : \"short\" }}\n      <button\n        *ngIf=\"order.state === 'ENQUEUED' && canRemove\"\n        mat-icon-button\n        (click)=\"state.deleteOrder($event, order.orderId)\">\n        <mat-icon\n          [attr.aria-label]=\"'Abbrechen' | translate\"\n          [title]=\"'Abbrechen' | translate\">\n          delete\n        </mat-icon>\n      </button>\n    </span>\n  </div>\n</ng-template>\n\n<mat-card>\n  <mat-card-title class=\"mb-0\">\n    <h2 class=\"mb-0\" *ngIf=\"(activeOrders$ | async)!.length > 0\">\n      {{ 'Laufende Aufträge' | translate }}\n    </h2>\n    <h2 class=\"mb-0\" *ngIf=\"(activeOrders$ | async)?.length === 0\">\n      {{ \"Keine laufenden Aufträge verfügbar\" | translate }}\n    </h2>\n  </mat-card-title>\n  <mat-card-content>\n    <div class=\"production-orders__list\"\n      *ngIf=\"(activeOrders$ | async)!.length > 0\">\n      <mat-selection-list\n        [multiple]=\"false\"\n        (selectionChange)=\"selectOrder($event)\">\n        <mat-list-option\n          *ngFor=\"let order of activeOrders$ | async; let first = first\"\n          color=\"accent\"\n          class=\"production-orders__list__item\"\n          [selected]=\"state.isOrderSelected(order)\"\n          [value]=\"order\">\n          <ng-container *ngTemplateOutlet=\"listoption; context: { order: order }\"></ng-container>\n        </mat-list-option>\n      </mat-selection-list>\n    </div>\n  </mat-card-content>\n</mat-card>\n\n<mat-card *ngIf=\"withCompleted\">\n  <mat-card-title class=\"mb-0\">\n    <h2 class=\"mb-0\" *ngIf=\"(completedOrders$ | async)!.length > 0\">\n      {{ 'Abgeschlossene Aufträge' | translate }}\n    </h2>\n    <h2 class=\"mb-0\" *ngIf=\"(completedOrders$ | async)!.length === 0\">\n      {{ \"Keine abgeschlossenen Aufträge verfügbar\" | translate }}\n    </h2>\n  </mat-card-title>\n  <mat-card-content>\n    <div class=\"production-orders__list\"\n      *ngIf=\"(completedOrders$ | async)!.length > 0\">\n      <mat-selection-list\n        [multiple]=\"false\"\n        (selectionChange)=\"selectOrder($event)\">\n        <mat-list-option\n          *ngFor=\"let order of completedOrders$ | async; let first = first\"\n          color=\"accent\"\n          class=\"production-orders__list__item\"\n          [selected]=\"state.isOrderSelected(order)\"\n          [value]=\"order\">\n          <ng-container *ngTemplateOutlet=\"listoption; context: { order: order }\"></ng-container>\n        </mat-list-option>\n      </mat-selection-list>\n    </div>\n  </mat-card-content>\n</mat-card>\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatSelectionListChange } from '@angular/material/list';\nimport { map } from 'rxjs/operators';\nimport { OrderResponse, OrderState } from '../../../common/protocol/ccu';\nimport { OrderListState } from './order-list.state';\nimport { shareReplay } from 'rxjs/internal/operators/shareReplay';\n\n@Component({\n  selector: 'ff-order-list',\n  templateUrl: './order-list.component.html',\n  styleUrls: ['./order-list.component.scss'],\n  providers: [OrderListState],\n})\nexport class OrderListComponent {\n  readonly stepTypeIcon: { [t in 'MANUFACTURE' | 'NAVIGATION']: string } = {\n    MANUFACTURE: 'precision_manufacturing',\n    NAVIGATION: 'forklift',\n  };\n  readonly stateIcons: { [t in OrderState]: string } = {\n    [OrderState.ENQUEUED]: 'hourglass_empty',\n    [OrderState.IN_PROGRESS]: 'play_circle',\n    [OrderState.FINISHED]: 'check_circle',\n    [OrderState.ERROR]: 'error',\n    [OrderState.CANCELLED]: 'hourglass_disabled',\n  };\n\n  @Input() multiple = false;\n  @Input() withCompleted = false;\n  @Input() canRemove = true;\n  @Input() set selectedOrder(order: OrderResponse | undefined) {\n    this.state.setSelectedOrder(order);\n  }\n  /** Used to filter for orders of a specific simulation. */\n  @Input() simulationId: string | undefined;\n  @Output() public readonly orderSelect = new EventEmitter<OrderResponse[]>();\n\n  activeOrders$ = this.state.activeOrders$.pipe(\n    map((orders: OrderResponse[]) => orders.filter(o => this.simulationId === undefined || o.simulationId == this.simulationId)),\n    shareReplay(1)\n  );\n  completedOrders$ = this.state.completedOrders$.pipe(\n    map((orders: OrderResponse[]) => orders.filter(o => this.simulationId === undefined || o.simulationId == this.simulationId)),\n    shareReplay(1)\n  );\n\n  constructor(public readonly state: OrderListState) {}\n\n  selectOrder($event: MatSelectionListChange): void {\n    const selectedOrders = $event.options.map(\n      (o) => o.value\n    ) as OrderResponse[];\n    this.orderSelect.emit(selectedOrders);\n  }\n}\n","<mat-list>\n  <mat-list-item class=\"production-order-steps__item\" *ngFor=\"let step of order?.productionSteps\"\n                 [class.mat-list-single-selected-option]=\"step.state === 'IN_PROGRESS'\">\n    <span>\n      <img *ngIf=\"step.type === 'MANUFACTURE'\" [src]=\"step.moduleType | toIcon:MODULE_ICON_PATHS\"\n           [attr.alt]=\"'Produktionsschritt.' + step.moduleType | translate\" style=\"vertical-align: middle; height: 24px\">\n      <img *ngIf=\"step.type === 'NAVIGATION'\" [src]=\"'FTS' | toIcon:MODULE_ICON_PATHS\"\n           [attr.alt]=\"'Produktionsschritt.FTS' | translate\" style=\"vertical-align: middle; height: 24px\">\n    </span>\n    <span>\n      <mat-icon\n        class=\"step-state\"\n        [attr.aria-label]=\"'Status.' + step.state | translate\"\n        [title]=\"'Status.' + step.state | translate\">\n        {{ step.state | toIcon:stateIcons }}\n      </mat-icon>\n    </span>\n    <span *ngIf=\"step.type === 'MANUFACTURE'\">{{'Produktionsschritt.' + step.moduleType | translate}}\n      : {{ 'Befehl.' + step.command | translate }}</span>\n    <span *ngIf=\"step.type === 'NAVIGATION'\">{{'Produktionsschritt.FTS' | translate}}\n      <mat-icon style=\"vertical-align: middle\">chevron_right</mat-icon>\n      <img style=\"vertical-align: middle; height: 24px\"\n           [src]=\"step.target | toIcon:MODULE_ICON_PATHS\"\n           [attr.alt]=\"'Produktionsschritt.' + step.target | translate\">\n      {{'Produktionsschritt.' + step.target | translate}}\n    </span>\n  </mat-list-item>\n</mat-list>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { OrderResponse } from '../../../common/protocol';\nimport { OrderState } from '../../../common/protocol/ccu';\nimport { ModuleCommandType } from '../../../common/protocol/module';\nimport { MODULE_ICON_PATHS } from '../../utils/routes.utils';\n\n@Component({\n  selector: 'ff-production-steps',\n  templateUrl: './production-steps.component.html',\n  styleUrls: ['./production-steps.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductionStepsComponent {\n  readonly MODULE_ICON_PATHS = MODULE_ICON_PATHS;\n  readonly actionHtmlStrings: { [t in ModuleCommandType]: string } = {\n    [ModuleCommandType.CHECK_QUALITY]: 'Qualitätsprüfung',\n    [ModuleCommandType.PICK]: 'FTS entladen',\n    [ModuleCommandType.DROP]: 'FTS beladen',\n    [ModuleCommandType.MILL]: 'Fräsen',\n    [ModuleCommandType.DRILL]: 'Bohren',\n    [ModuleCommandType.FIRE]: 'Erhitzen',\n  };\n  readonly stateIcons: { [t in OrderState]: string } = {\n    [OrderState.ENQUEUED]: 'hourglass_empty',\n    [OrderState.IN_PROGRESS]: 'play_circle',\n    [OrderState.FINISHED]: 'check_circle',\n    [OrderState.ERROR]: 'error',\n    [OrderState.CANCELLED]: 'hourglass_disabled',\n  };\n\n  @Input() order: OrderResponse | undefined = undefined;\n}\n","<div id=\"production-orders\" class=\"production-orders\">\n  <div class=\"wideflex\">\n    <div class=\"col\">\n      <ff-order-list\n        [selectedOrder]=\"selectedOrder$ | async\"\n        (orderSelect)=\"selectOrder($event)\">\n      </ff-order-list>\n      <mat-card id=\"production-order-steps\"\n        class=\"production-order-steps\"\n        *ngIf=\"selectedOrder$ | async as selectedOrder\">\n        <mat-card-title>\n          <h2 class=\"header\">{{ 'Fertigungsschritte' | translate }}</h2>\n        </mat-card-title>\n        <mat-card-content>\n          <ff-production-steps [order]=\"selectedOrder\"></ff-production-steps>\n        </mat-card-content>\n      </mat-card>\n    </div>\n\n    <div class=\"col\">\n      <mat-card>\n        <mat-card-title>\n          <h2 class=\"header\">\n            {{ 'Aktueller Fertigungsschritt' | translate }}\n          </h2>\n        </mat-card-title>\n        <mat-card-content>\n          <ff-factory-layout\n            [startZoom]=\"0.6\"\n            [editable]=\"false\"\n            [highlightedId]=\"activeStepId$ | async\">\n          </ff-factory-layout>\n        </mat-card-content>\n      </mat-card>\n      <mat-card class=\"production-order-details\"\n        *ngIf=\"selectedOrder$ | async as selectedOrder\">\n        <mat-card-title>\n          <h2 class=\"header\">{{ 'Auftragsinformationen' | translate }}</h2>\n        </mat-card-title>\n        <mat-card-content>\n          <dl>\n            <dt>{{ 'Auftragsnummer' | translate }}</dt>\n            <dd>{{selectedOrder.orderId}}</dd>\n          </dl>\n          <dl>\n            <dt>{{ 'Auftragsstatus' | translate }}</dt>\n            <dd>{{ 'Status.' + selectedOrder.state | translate }}</dd>\n          </dl>\n          <dl *ngIf=\"selectedOrder.timestamp\">\n            <dt>{{ 'Bestelldatum' | translate }}</dt>\n            <dd>{{selectedOrder.timestamp | date:'short'}}</dd>\n          </dl>\n          <dl *ngIf=\"selectedOrder.receivedAt\">\n            <dt>{{ 'Auftragseingang' | translate }}</dt>\n            <dd>{{selectedOrder.receivedAt | date:'short'}}</dd>\n          </dl>\n          <dl *ngIf=\"selectedOrder.startedAt\">\n            <dt>{{ 'Start der Bearbeitung' | translate }}</dt>\n            <dd>{{selectedOrder.startedAt | date:'short'}}</dd>\n          </dl>\n          <dl *ngIf=\"selectedOrder.stoppedAt\">\n            <dt>{{ 'Ende der Bearbeitung' | translate }}</dt>\n            <dd>{{selectedOrder.stoppedAt | date:'short'}}</dd>\n          </dl>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </div>\n</div>\n\n\n\n","import { Component, OnDestroy, ViewChild } from '@angular/core';\nimport { MatSelectionList } from '@angular/material/list';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  Observable,\n  Subject,\n  combineLatest,\n  firstValueFrom,\n  map,\n  shareReplay,\n  takeUntil,\n} from 'rxjs';\nimport { CcuTopic, OrderResponse } from '../../../common/protocol';\nimport { OrderManufactureStep, OrderState } from '../../../common/protocol/ccu';\nimport { TypedMqttService } from '../../futurefactory.service';\nimport { OrderStatesService } from '../../services/order-states.service';\n\n@Component({\n  templateUrl: './order-list.component.html',\n  styleUrls: ['./order-list.component.scss'],\n})\nexport class FutureFactoryOrderListComponent implements OnDestroy {\n  @ViewChild('selectionList')\n  selectionList!: MatSelectionList;\n\n  readonly activeOrders$: Observable<OrderResponse[]>;\n  private readonly destroyed$ = new Subject<void>();\n  readonly selectedOrder$: Observable<OrderResponse | undefined>;\n  readonly activeStepId$: Observable<string | undefined>;\n  private readonly paramOrderId$: Observable<string | null>;\n\n  constructor(\n    private mqttService: TypedMqttService,\n    private orderStatesService: OrderStatesService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ) {\n    this.paramOrderId$ = this.activatedRoute.paramMap.pipe(\n      takeUntil(this.destroyed$),\n      map((params) => params.get('orderId'))\n    );\n\n    this.activeOrders$ = this.orderStatesService.activeOrders$.pipe(\n      map((orders) => orders.filter((o) => o.orderType === 'PRODUCTION'))\n    );\n    this.selectedOrder$ = combineLatest([\n      this.paramOrderId$,\n      this.activeOrders$,\n    ]).pipe(\n      map(([selectedOrderId, activeOrders]) => {\n        const selectedOrder = selectedOrderId\n          ? activeOrders.find((o) => selectedOrderId === o.orderId)\n          : undefined;\n        return (\n          selectedOrder ?? (activeOrders.length ? activeOrders[0] : undefined)\n        );\n      }),\n      shareReplay(1)\n    );\n    this.activeStepId$ = this.selectedOrder$.pipe(\n      map((orderResponse) => {\n        if (!orderResponse) {\n          return undefined;\n        }\n        const usedProductionSteps: OrderManufactureStep[] =\n          this.getUsedProductionSteps(orderResponse);\n        return usedProductionSteps?.length\n          ? usedProductionSteps.reverse()[0].serialNumber\n          : undefined;\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  async selectOrder($event: OrderResponse[]): Promise<void> {\n    const lastOrderIdParam = await firstValueFrom(this.paramOrderId$);\n    const route = [lastOrderIdParam != null ? '..' : '.', $event[0].orderId];\n    await this.router.navigate(route, { relativeTo: this.activatedRoute });\n  }\n\n  private getUsedProductionSteps(\n    orderResponse: OrderResponse\n  ): OrderManufactureStep[] {\n    return orderResponse.productionSteps.filter(\n      (s): s is OrderManufactureStep => {\n        if (s.type !== 'MANUFACTURE') {\n          return false;\n        }\n        // skip production steps that have not been started or were never started\n        return (\n          s.state !== OrderState.ENQUEUED && s.state !== OrderState.CANCELLED\n        );\n      }\n    );\n  }\n\n  /**\n   * Request the deletion of an order, only ENQUEUED orders can be deleted.\n   * Cancelling of active orders is not possible.\n   * @param $event\n   * @param orderId\n   */\n  public deleteOrder($event: MouseEvent, orderId: string) {\n    $event.stopPropagation();\n    this.mqttService.publish(CcuTopic.CANCEL_ORDERS, [orderId]);\n  }\n}\n","import { OrderResponse } from \"../../common/protocol\";\nimport { GeneralConfig, OrderManufactureStep, OrderNavigationStep } from \"../../common/protocol/ccu\";\n\nexport function oee(orders: OrderResponse[], config: GeneralConfig): number {\n    const availabilityValue = availability(orders);\n    const performanceValue = performance(orders, config);\n    const qualityValue = quality(orders);\n    return availabilityValue * performanceValue * qualityValue;\n}\n\nexport function oeeForOrder(order: OrderResponse, config: GeneralConfig): number {\n    const availabilityValue = availabilityForOrder(order);\n    const performanceValue = performanceForOrder(order, config);\n    const qualityValue = qualityForOrder(order);\n    return availabilityValue * performanceValue * qualityValue;\n}\n\nexport function quality(orders: OrderResponse[]): number {\n    const numberOfOrders = orders.length;\n    const numberOfErroredOrders = orders.filter(order => ['ERROR', 'CANCELLED'].includes(order.state)).length;\n    return (numberOfOrders - numberOfErroredOrders) / numberOfOrders;\n}\n\nexport function qualityForOrder(order: OrderResponse): number {\n    if (['ERROR', 'CANCELLED'].includes(order.state)) {\n        return 0;\n    }\n    return 1;\n}\n\nexport function performance(orders: OrderResponse[], config: GeneralConfig): number {\n    const totalOrderDurations = orders.reduce((acc, order) => {\n        return acc + durationForOrder(order, config);\n    }, 0);\n    const plannedOrderDurations = orders.reduce((acc, order) => {\n        return acc + config.productionDurations[order.type]!;\n    }, 0);\n    return plannedOrderDurations / totalOrderDurations;\n}\n\nexport function performanceForOrder(order: OrderResponse, config: GeneralConfig): number {\n    const plannedOrderDuration = config.productionDurations[order.type]!;\n    const actualOrderDuration = durationForOrder(order, config);\n    return plannedOrderDuration / actualOrderDuration;\n}\n\n/**\n * Uses the general config as fallback in case the order is not yet started or finished.\n */\nexport function durationForOrder(order: OrderResponse, config: GeneralConfig): number {\n    if (!order.startedAt && !order.stoppedAt) {\n        return config.productionDurations[order.type]!;\n    } else if (order.startedAt && !order.stoppedAt) {\n        return Math.max(config.productionDurations[order.type]!, (Date.now() - order.startedAt.getTime()) / 1000);\n    } else {\n        return (order.stoppedAt!.getTime() - order.startedAt!.getTime()) / 1000;\n    }\n}\n\nexport function availability(orders: OrderResponse[]): number {\n    let totalProductionTime = 0;\n    let totalWaitingTime = 0;\n    for (let order of orders) {\n        totalProductionTime += productionTimeForOrder(order);\n        totalWaitingTime += waitingTimeForOrder(order);\n    }\n    const totalDuration = totalProductionTime + totalWaitingTime;\n    return totalProductionTime / totalDuration;\n}\n\nexport function availabilityForOrder(order: OrderResponse): number {\n    const productionTime = productionTimeForOrder(order);\n    const waitingTime = waitingTimeForOrder(order);\n    const totalDuration = productionTime + waitingTime;\n    return productionTime / totalDuration;\n}\n\n/**\n * If the time between the previous step ended and the current step started is longer than the threshold,\n * we assume that the machine was waiting for the operator to start the next step.\n * Otherwise we assume, that this is due to system delays, which we do not take into account.\n */\nconst WAITING_TIME_THRESHOLD_MS = 500;\nexport function waitingTimeForOrder(order: OrderResponse): number {\n    let waitingTime = 0;\n    for (let step of order.productionSteps) {\n        if (!step.startedAt) {\n            continue;\n        }\n        // the initial step does not have a dependent action and only depends on the order-received event\n        if (!step.dependentActionId) {\n            const delta = (step.startedAt?.getTime() || Date.now()) - order.receivedAt!.getTime();\n            if (delta > WAITING_TIME_THRESHOLD_MS) {\n                waitingTime += delta;\n            }\n        } else {\n            const dependentStep = order.productionSteps.find(s => s.id === step.dependentActionId);\n            // if the previous step is not yet finished, we cannot take this step into account yet\n            if (dependentStep && dependentStep.stoppedAt) {\n                const delta = step.startedAt!.getTime() - dependentStep.stoppedAt.getTime();\n                if (delta > WAITING_TIME_THRESHOLD_MS) {\n                    waitingTime += delta;\n                }\n            }\n        }\n    }\n    return waitingTime / 1000;\n}\n\nexport function productionTimeForOrder(order: OrderResponse): number {\n    let productionTime = 0;\n    for (let step of order.productionSteps) {\n        productionTime += calculateStepDuration(step);\n    }\n    return productionTime;\n}\n\nexport function calculateStepDuration(step: OrderNavigationStep | OrderManufactureStep): number {\n    let duration = 0;\n    if (step.startedAt && step.stoppedAt) {\n        duration = step.stoppedAt.getTime() - step.startedAt.getTime();\n    } else {\n        duration = step.startedAt ? Date.now() - step.startedAt.getTime() : 0;\n    }\n    return duration / 1000;\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { OrderResponse } from '../../../common/protocol';\n\n@Injectable()\nexport class FutureFactorySimulationLayoutState {\n  public readonly selectedOrder = new BehaviorSubject<\n    OrderResponse | undefined\n  >(undefined);\n\n  public setSelectedOrder(order: OrderResponse[] | OrderResponse | undefined) {\n    if (Array.isArray(order)) {\n      this.selectedOrder.next(order[0]);\n    } else {\n      this.selectedOrder.next(order);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\nimport {\n  CcuTopic\n} from '../../common/protocol';\nimport { CloudStock } from '../../common/protocol/ccu';\nimport { getPayload } from '../utils/rx.utils';\nimport { TypedMqttService } from './typed-mqtt.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StockStatesService {\n  readonly stock$: Observable<CloudStock> = this.mqttService.subscribe<CloudStock>(CcuTopic.STOCK).pipe(getPayload(), shareReplay(1));\n\n  constructor(private mqttService: TypedMqttService) {}\n}\n","import { ChangeDetectionStrategy, Component } from \"@angular/core\";\n\n@Component({\n  selector: 'ff-banner',\n  templateUrl: './banner.component.html',\n  styleUrls: ['./banner.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BannerComponent {}\n","<ng-content></ng-content>\n","import { Injectable } from '@angular/core';\nimport {\n  Observable,\n  OperatorFunction,\n  ReplaySubject,\n  combineLatest,\n  pipe,\n} from 'rxjs';\nimport { filter, map, startWith } from 'rxjs/operators';\nimport { OrderResponse } from '../../../common/protocol';\n\n@Injectable()\nexport class ProductionTimeCalculatorState {\n  private readonly selectedOrder = new ReplaySubject<OrderResponse | undefined>(\n    1\n  );\n\n  readonly startTime$: Observable<Date | undefined>;\n  readonly endTime$: Observable<Date | undefined>;\n  readonly duration$: Observable<number | undefined>;\n  readonly calculatedProductionTime$: Observable<number | undefined>;\n  readonly calculatedTransportTime$: Observable<number | undefined>;\n\n  constructor() {\n    this.startTime$ = this.setupStartTime(this.selectedOrder.asObservable());\n    this.endTime$ = this.setupEndTime(this.selectedOrder.asObservable());\n    this.duration$ = this.setupDuration(this.startTime$, this.endTime$);\n    this.calculatedProductionTime$ = this.setupCalculatedProductionTime(\n      this.selectedOrder.asObservable()\n    );\n    this.calculatedTransportTime$ = this.setupCalculatedTransportTime(\n      this.selectedOrder.asObservable()\n    );\n  }\n\n  public setSelectedOrder(order: OrderResponse | undefined) {\n    this.selectedOrder.next(order);\n  }\n\n  private setupStartTime(\n    order$: Observable<OrderResponse | undefined>\n  ): Observable<Date | undefined> {\n    return order$.pipe(\n      filter((order) => !!order),\n      map((order) => order?.startedAt),\n      startWith<Date | undefined>(undefined)\n    );\n  }\n\n  private setupEndTime(\n    order$: Observable<OrderResponse | undefined>\n  ): Observable<Date | undefined> {\n    return order$.pipe(\n      filter((order) => !!order),\n      map((order) => order?.stoppedAt),\n      startWith<Date | undefined>(undefined)\n    );\n  }\n\n  private setupDuration(\n    startTime$: Observable<Date | undefined>,\n    endTime$: Observable<Date | undefined>\n  ): Observable<number | undefined> {\n    return combineLatest([startTime$, endTime$]).pipe(\n      map(([startTime, endTime]) => {\n        if (startTime && endTime) {\n          return endTime.getTime() - startTime.getTime();\n        }\n        return undefined;\n      }),\n      startWith<number | undefined>(undefined)\n    );\n  }\n\n  private aggregateStepDuration(\n    requiredType: 'MANUFACTURE' | 'NAVIGATION'\n  ): OperatorFunction<OrderResponse | undefined, number | undefined> {\n    return pipe(\n      filter((order) => !!order),\n      map((order) => order?.productionSteps ?? []),\n      map((steps) => steps.filter((step) => step.type === requiredType)),\n      map((steps) =>\n        steps.reduce((acc, step) => {\n          if (step.startedAt && step.stoppedAt) {\n            return acc + (step.stoppedAt.getTime() - step.startedAt.getTime());\n          }\n          return acc;\n        }, 0)\n      ),\n      map((duration) => (duration > 0 ? duration : undefined))\n    );\n  }\n\n  private setupCalculatedProductionTime(\n    order$: Observable<OrderResponse | undefined>\n  ): Observable<number | undefined> {\n    return order$.pipe(this.aggregateStepDuration('MANUFACTURE'));\n  }\n\n  private setupCalculatedTransportTime(\n    order$: Observable<OrderResponse | undefined>\n  ): Observable<number | undefined> {\n    return order$.pipe(this.aggregateStepDuration('NAVIGATION'));\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'fallback',\n})\nexport class FallbackValuePipe implements PipeTransform {\n  transform(value: any, fallback?: any): any {\n    return value ?? fallback ?? undefined;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'toSeconds',\n})\nexport class ToSecondsPipe implements PipeTransform {\n  private readonly numberFormatter = new Intl.NumberFormat(undefined, {\n    maximumFractionDigits: 2,\n  });\n\n  transform(value: any) {\n    if (Number.isSafeInteger(value)) {\n      return `${this.numberFormatter.format(value / 1000)}s`;\n    }\n    return value;\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { OrderResponse } from '../../../common/protocol';\nimport { ProductionTimeCalculatorState } from './production-time-calculator.state';\n\n@Component({\n  selector: 'ff-production-time-calculator',\n  templateUrl: './production-time-calculator.component.html',\n  styleUrls: ['./production-time-calculator.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [ProductionTimeCalculatorState],\n})\nexport class ProductionTimeCalculatorComponent {\n  @Input() set order(order: OrderResponse | undefined) {\n    this.state.setSelectedOrder(order);\n  }\n\n  constructor(public readonly state: ProductionTimeCalculatorState) {}\n}\n","<h2>\n  {{ \"Start\" | translate }}:&nbsp;\n  {{ state.startTime$ | async | date : \"medium\" | fallback : \"Unbekannt\" | translate }}\n</h2>\n<h2>\n  {{ \"Ende\" | translate }}:&nbsp;\n  {{ state.endTime$ | async | date : \"medium\" | fallback : \"Unbekannt\" | translate }}\n</h2>\n<h2>\n  {{ \"Gesamtdauer\" | translate }}:&nbsp;\n  {{ state.duration$ | async | toSeconds | fallback : \"Unbekannt\" | translate }}\n</h2>\n<h2>\n  {{ \"Produktionsdauer\" | translate }}:&nbsp;\n  {{ state.calculatedProductionTime$ | async | toSeconds | fallback : \"Unbekannt\" | translate }}\n</h2>\n<h2>\n  {{ \"Transportdauer\" | translate }}:&nbsp;\n  {{ state.calculatedTransportTime$ | async | toSeconds | fallback : \"Unbekannt\" | translate }}\n</h2>\n","<div>\n  <section class=\"planning\">\n    <div class=\"simulation-is-starting\" *ngIf=\"startingSimulation\">\n      <mat-spinner></mat-spinner>\n      <h1>{{ \"Planspiel wird gestartet\" | translate }}</h1>\n    </div>\n    <ng-container *ngIf=\"(simulationIsRunning$ | async) === false\">\n      <button mat-raised-button color=\"primary\" (click)=\"startSimulation()\" [disabled]=\"!canStartSimulation\">\n        {{ \"Planspiel starten\" | translate }}\n      </button>\n      <br>\n      <!-- name edit box -->\n      <mat-form-field>\n        <mat-label>{{ \"Name des Planspiels\" | translate }}</mat-label>\n        <input matInput [(ngModel)]=\"simulation.name\" (ngModelChange)=\"checkSimulationName()\" />\n        <mat-hint *ngIf=\"!simulation.name\" class=\"error\">\n          {{ \"Bitte geben Sie einen Namen ein.\" | translate }}\n        </mat-hint>\n        <mat-hint *ngIf=\"simulationNameAlreadyExists\" class=\"error\">\n          {{ \"Ein Planspiel mit diesem Namen existiert bereits.\" | translate }}\n        </mat-hint>\n      </mat-form-field>\n\n      <h2>{{ \"Produktionsplanung\" | translate }}</h2>\n\n      <div *ngFor=\"let workpiece of simulation.workpieces\" class=\"order-item\"\n        [ngClass]=\"{'not-in-stock': !workpiece.inStock}\">\n        <mat-form-field style=\"flex: 1;\">\n          <mat-label>{{ \"Werkstücktyp\" | translate }}</mat-label>\n          <mat-select [(ngModel)]=\"workpiece.type\" (ngModelChange)=\"updateProducability()\">\n            <mat-option *ngFor=\"let type of wsTypes\" [value]=\"type.type\">\n              {{ type.name | translate }}\n            </mat-option>\n          </mat-select>\n          <mat-hint *ngIf=\"!workpiece.inStock\" class=\"error\">\n            {{ \"Dieses Werkstück ist nicht auf Lager.\" | translate }}\n          </mat-hint>\n        </mat-form-field>\n        <button mat-icon-button (click)=\"removeWorkpiece(workpiece)\">\n          <mat-icon>do_not_disturb_on</mat-icon>\n        </button>\n      </div>\n\n      <button mat-raised-button color=\"primary\" (click)=\"addWorkpiece()\">\n        {{ \"Werkstück hinzufügen\" | translate }}\n      </button>\n    </ng-container>\n    <ff-banner *ngIf=\"simulationIsRunning$ | async\">\n      <h1 style=\"margin: 0\">{{ \"Planspiel läuft\" | translate }}</h1>\n    </ff-banner>\n\n  </section>\n  <section class=\"order-list\">\n    <div *ngFor=\"let simulationId of allSimulationIds\" class=\"simulation-entry\">\n      <div class=\"header\" [ngClass]=\"{'active': selectedSimulationId===simulationId}\"\n        (click)=\"toggleSelectSimulation(simulationId)\">\n        <span>{{ simulationId }} (OEE: {{oee(simulationId) | percent}})</span>\n        <mat-icon>\n          {{ selectedSimulationId===simulationId ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}\n        </mat-icon> \n      </div>\n      <ng-container *ngIf=\"selectedSimulationId===simulationId\">\n        <ff-order-list [multiple]=\"true\" [withCompleted]=\"true\" [canRemove]=\"false\" [simulationId]=\"simulationId\"\n          [selectedOrder]=\"state.selectedOrder.value\" (orderSelect)=\"state.setSelectedOrder($event)\">\n        </ff-order-list>\n      </ng-container>\n    </div>\n    <div class=\"simulation-entry\">\n      <div class=\"header\" [ngClass]=\"{'active': selectedSimulationId===null}\"\n        (click)=\"toggleSelectSimulation(null)\">\n        <span>{{ \"Aufträge ohne Planspiel\" | translate }} (OEE: {{oee(null) | percent}})</span>\n        <mat-icon>\n          {{ selectedSimulationId===null ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}\n        </mat-icon>\n      </div>\n      <ng-container *ngIf=\"selectedSimulationId===null\">\n        <ff-order-list [multiple]=\"true\" [withCompleted]=\"true\" [canRemove]=\"false\" [simulationId]=\"null\"\n          [selectedOrder]=\"state.selectedOrder.value\" (orderSelect)=\"state.setSelectedOrder($event)\">\n        </ff-order-list>\n      </ng-container>\n    </div>\n    <hr>\n    <button mat-raised-button color=\"primary\" (click)=\"downloadCsv()\">\n      {{ \"CSV herunterladen\" | translate }}\n    </button>\n  </section>\n</div>\n\n<div class=\"vertical-divider\"></div>\n\n<!-- right side of the screen -->\n<section class=\"results\">\n  <div class=\"mat-elevation-z4\" *ngIf=\"selectedSimulationId !== undefined\">\n    <div class=\"header\" *ngIf=\"selectedSimulationId\">{{ \"Ergebnisse von '{{simulationId}}'\" | translate: {simulationId: selectedSimulationId} }}</div>\n    <div class=\"header\" *ngIf=\"selectedSimulationId===null\">{{ \"Ergebnisse von Aufträgen ohne Planspiel\" | translate }}</div>\n    <div style=\"padding: 1rem;\">\n      <div *ngIf=\"(runningSimulationId$ | async) === selectedSimulationId\">\n        {{ 'Bitte beachten Sie, dass die OEE-Berechnung erst nach Abschluss der Produktion einen sinnvollen Wert liefert.' | translate }}\n      </div>\n      <div class=\"oee-card-container\">\n        <mat-card>\n          <mat-card-title>{{ 'OEE' | translate }}</mat-card-title>\n          <mat-card-content>\n            <h1>{{ oee(selectedSimulationId) | percent }}</h1>\n          </mat-card-content>\n        </mat-card>\n        <mat-card>\n          <mat-card-title>{{ 'Qualität' | translate }}</mat-card-title>\n          <mat-card-content>\n            <h1>{{ quality(selectedSimulationId) | percent }}</h1>\n          </mat-card-content>\n        </mat-card>\n        <mat-card>\n          <mat-card-title>{{ 'Leistung' | translate }}</mat-card-title>\n          <mat-card-content>\n            <h1>{{ performance(selectedSimulationId) | percent }}</h1>\n          </mat-card-content>\n        </mat-card>\n        <mat-card>\n          <mat-card-title>{{ 'Verfügbarkeit' | translate }}</mat-card-title>\n          <mat-card-content>\n            <h1>{{ availability(selectedSimulationId) | percent }}</h1>\n          </mat-card-content>\n        </mat-card>\n      </div>\n      <hr>\n      <div *ngIf=\"state.selectedOrder.value as selectedOrder\">\n        <span style=\"display: inline-flex;\">\n          <h1>\n            {{ \"Gewählter Produktionsauftrag\" | translate }}:&nbsp;\n            {{ selectedOrder.orderId }} ({{ selectedOrder.type }}; {{ selectedOrder.receivedAt | date : \"medium\" }})\n          </h1>\n          <mat-icon style=\"height: 36px; width: 36px; margin-top: -2px; font-size: 36px;\"\n            [attr.aria-label]=\"'Status.' + selectedOrder.state | translate\"\n            [title]=\"'Status.' + selectedOrder.state | translate\">\n            {{ selectedOrder.state | toIcon:stateIcons }}\n          </mat-icon>\n        </span>\n        <ff-production-time-calculator [order]=\"selectedOrder\">\n        </ff-production-time-calculator>\n      </div>\n      <mat-expansion-panel *ngIf=\"state.selectedOrder.value as selectedOrder\" class=\"simulation__steps\">\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n            {{ \"Produktions- und Navigationsschritte\" | translate }}\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n        <ff-production-steps [order]=\"selectedOrder\"></ff-production-steps>\n      </mat-expansion-panel>\n      <ff-banner *ngIf=\"!state.selectedOrder.value\">\n        <h1 style=\"margin: 0\">{{ \"Kein Produktionsauftrag ausgewählt\" | translate }}</h1>\n      </ff-banner>\n    </div>\n  </div>\n</section>","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  ReplaySubject,\n  combineLatest,\n  filter,\n  firstValueFrom,\n  map,\n  take,\n  takeUntil,\n  tap,\n  timeout,\n} from 'rxjs';\nimport { CcuTopic } from '../../../common/protocol';\nimport {\n  CloudStock,\n  GeneralConfig,\n  OrderRequest,\n  OrderResponse,\n  OrderState,\n  Workpiece,\n  generateOrderRequestForProduction,\n} from '../../../common/protocol/ccu';\nimport { TypedMqttService } from '../../futurefactory.service';\nimport { GeneralConfigService } from '../../services/general-config.service';\nimport { OrderStatesService } from '../../services/order-states.service';\nimport { StockStatesService } from '../../services/stock-states.service';\nimport {\n  availability,\n  availabilityForOrder,\n  durationForOrder,\n  oee,\n  oeeForOrder,\n  performance,\n  performanceForOrder,\n  productionTimeForOrder,\n  quality,\n  qualityForOrder,\n  waitingTimeForOrder,\n} from '../../utils/oee-calculation.utils';\nimport { getPayload } from '../../utils/rx.utils';\nimport { WORKPIECE_TYPES } from '../../utils/workpiece.utils';\nimport { FutureFactorySimulationLayoutState } from './simulation-layout.state';\n\ninterface Simulation {\n  name: string;\n  workpieces: {\n    type: Workpiece,\n    inStock: boolean,\n  }[];\n}\n\n@Component({\n  templateUrl: './simulation-layout.component.html',\n  styleUrls: ['./simulation-layout.component.scss'],\n  providers: [FutureFactorySimulationLayoutState],\n})\nexport class FutureFactorySimulationLayoutComponent implements OnInit, OnDestroy {\n  private onDestroy$ = new ReplaySubject<void>(1);\n  \n  readonly stateIcons: { [t in OrderState]: string } = {\n    [OrderState.ENQUEUED]: 'hourglass_empty',\n    [OrderState.IN_PROGRESS]: 'play_circle',\n    [OrderState.FINISHED]: 'check_circle',\n    [OrderState.ERROR]: 'error',\n    [OrderState.CANCELLED]: 'hourglass_disabled',\n  };\n\n  startingSimulation = false;\n  simulationNameAlreadyExists = false;\n  allSimulationIds: string[] = [];\n  allOrders: OrderResponse[] = [];\n  /**\n   * undefined = no selection\n   * null = selection of \"no simulation\"\n   * string = selection of a simulation\n   */\n  selectedSimulationId: string | undefined | null;\n  config: GeneralConfig | undefined;\n  get canStartSimulation() {\n    return this.simulation.workpieces.length && this.simulation.workpieces.every(w => w.inStock) && !this.simulationNameAlreadyExists && this.simulation.name?.length > 0;\n  }\n\n  simulation: Simulation = {\n    name: 'Test Simulation',\n    workpieces: [\n      {\n        type: Workpiece.RED,\n        inStock: false,\n      },\n      {\n        type: Workpiece.WHITE,\n        inStock: false,\n      },\n      {\n        type: Workpiece.BLUE,\n        inStock: false,\n      },\n    ],\n  };\n\n  public wsTypes = WORKPIECE_TYPES;\n  public runningSimulationId$ = this.orderStatesService.activeOrders$.pipe(\n    map((orders: OrderResponse[]) => {\n      const simulationIds = Array.from(new Set(orders.filter(o => o.orderType === 'PRODUCTION' && o.simulationId && o.simulationId.length > 0).map(o => o.simulationId!)));\n      if (simulationIds.length > 0) {\n        return simulationIds[0];\n      }\n      return undefined;\n    })\n  );\n  public simulationIsRunning$ = this.runningSimulationId$.pipe(\n    map((runningSimulationId: string | undefined) => {\n      return !!runningSimulationId;\n    })\n  );\n\n  constructor(\n    public state: FutureFactorySimulationLayoutState,\n    private orderStatesService: OrderStatesService,\n    private mqttService: TypedMqttService,\n    private notification: MatSnackBar,\n    private translate: TranslateService,\n    generalConfigService: GeneralConfigService,\n    private stockStatesService: StockStatesService,\n  ) {\n    stockStatesService.stock$.pipe(\n      tap((stock: CloudStock) => this.updateProducability(stock)),\n      takeUntil(this.onDestroy$)\n    ).subscribe();\n\n    // retrieves all simulation ids and triggers the check for the simulation name\n    combineLatest([this.orderStatesService.activeOrders$, this.orderStatesService.completedOrders$]).pipe(\n      map(([activeOrders, completedOrders]) => [...activeOrders, ...completedOrders]),\n      map((orders: OrderResponse[]) => orders.filter(o => o.orderType === 'PRODUCTION')),\n      tap((orders: OrderResponse[]) => {\n        this.allOrders = orders;\n        this.allSimulationIds = Array.from(new Set(orders.map(o => o.simulationId!).filter(id => id?.length > 0)));\n        this.checkSimulationName();\n        if (!this.selectedSimulationId && this.allSimulationIds[0]) {\n          this.selectedSimulationId = this.allSimulationIds[0];\n        }\n      }),\n      takeUntil(this.onDestroy$)\n    ).subscribe();\n\n    generalConfigService.config$.pipe(\n      tap((config: GeneralConfig) => this.config = config),\n      takeUntil(this.onDestroy$)\n    ).subscribe();\n  }\n\n  ngOnInit() {\n    this.checkSimulationName();\n  }\n\n  ngOnDestroy(): void {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n\n  async startSimulation() {\n    this.startingSimulation = true;\n    const simulationId = this.simulation.name.trim();\n    // We need to add additional milliseconds to the timestamp, so the filter inside the cloud gateway does not filter the order request\n    // because the timestamp is identical to the timestamp of the last order request\n    // We add 25ms (arbitrary value) for each order request, so the timestamp is unique for each order request\n    const orderRequests: OrderRequest[] = this.simulation.workpieces.map(\n      (w, idx) => generateOrderRequestForProduction(w.type, simulationId, new Date(Date.now() + idx * 25/*ms*/))\n    );\n\n    for (const orderRequest of orderRequests) {\n      // due to the mqtt-implementation, we need to wait for the response of the order request\n      // before we can send the next order request\n      try {\n        await new Promise((resolve, reject) => {\n          this.mqttService.subscribe<OrderResponse>(CcuTopic.ORDER_RESPONSE).pipe(\n            getPayload(),\n            // moved the check from the if-clause to the filter, because we might receive a message\n            // that is not related to the current simulationId or a retained response from a previous order request\n            filter(orderResponse => orderResponse.simulationId === simulationId),\n            take(1),\n            takeUntil(this.onDestroy$),\n            timeout(30000)\n          ).subscribe({\n            next: () => resolve(true),\n            error: (err: any) => reject(err),\n          });\n\n          // subscribing to the order-response-topic before sending the order-request\n          this.mqttService.publish(CcuTopic.ORDER_REQUEST, orderRequest, { qos: 2 });\n        });\n      } catch (err) {\n        this.notification.open(\n          this.translate.instant('Beim Starten des Planspiels ist ein Fehler aufgetreten.'),\n          this.translate.instant('OK'),\n          { duration: 10000, panelClass: 'error-snackbar' }\n        );\n        this.startingSimulation = false;\n        return;\n      }\n    }\n\n    this.notification.open(\n      this.translate.instant('Das Planspiel wurde erfolgreich gestartet.'),\n      this.translate.instant('OK'),\n      { duration: 10000, panelClass: 'success-snackbar' }\n    );\n    this.startingSimulation = false;\n  }\n\n  removeWorkpiece(workpiece: any) {\n    this.simulation.workpieces = this.simulation.workpieces.filter(\n      (w) => w !== workpiece\n    );\n  }\n\n  addWorkpiece() {\n    this.simulation.workpieces.push({\n      type: Workpiece.WHITE,\n      inStock: false,\n    });\n    this.updateProducability();\n  }\n\n  async updateProducability(stock?: CloudStock) {\n    if (!stock) {\n      stock = await firstValueFrom(this.stockStatesService.stock$);\n    }\n    if (stock) {\n      const reserverForCurrentCalculationLoop: string[] = [];\n      this.simulation.workpieces.forEach((w) => {\n        const suitableWorkpiece = stock!.stockItems.find(stockItem => stockItem.workpiece?.state !== \"RESERVED\" && stockItem.workpiece?.type === w.type && reserverForCurrentCalculationLoop.indexOf(stockItem.workpiece?.id) === -1);\n        if (suitableWorkpiece) {\n          w.inStock = true;\n          reserverForCurrentCalculationLoop.push(suitableWorkpiece.workpiece?.id!);\n        } else {\n          w.inStock = false;\n        }\n      });\n    } else {\n      this.simulation.workpieces.forEach((w) => {\n        w.inStock = false;\n      });\n    }\n  }\n\n  checkSimulationName() {\n    const name = this.simulation.name.trim();\n    if (name.length === 0) {\n      this.simulationNameAlreadyExists = false;\n      return;\n    }\n    this.simulationNameAlreadyExists = this.allSimulationIds.some(simulationId => simulationId === name);\n  }\n\n  toggleSelectSimulation(simulationId: string | null) {\n    if (this.selectedSimulationId === simulationId) {\n      this.selectedSimulationId = undefined;\n    } else {\n      this.selectedSimulationId = simulationId;\n    }\n    this.state.setSelectedOrder(undefined);\n  }\n\n  /** OEE calculations */\n  oee(simulationId: string | null): number {\n    if (!this.config) {\n      return 0;\n    }\n    const orders = this.allOrders.filter(o => o.simulationId == simulationId);\n    return oee(orders, this.config);\n  }\n\n  availability(simulationId: string | null): number {\n    const orders = this.allOrders.filter(o => o.simulationId == simulationId);\n    return availability(orders);\n  }\n\n  availabilityForOrder(order: OrderResponse): number {\n    return availabilityForOrder(order);\n  }\n\n  quality(simulationId: string | null): number {\n    const orders = this.allOrders.filter(o => o.simulationId == simulationId);\n    return quality(orders);\n  }\n\n  qualityForOrder(order: OrderResponse): number {\n    return qualityForOrder(order);\n  }\n\n  performance(simulationId: string | null): number {\n    if (!this.config) {\n      return 0;\n    }\n    const orders = this.allOrders.filter(o => o.simulationId == simulationId);\n    return performance(orders, this.config);\n  }\n\n  downloadCsv() {\n    this.downloadCsvOee();\n    this.downloadRawDataCsv();\n  }\n\n  downloadCsvOee() {\n    const csvContent = 'data:text/csv;charset=utf-8,' + [\n      'Simulation',\n      'OrderId',\n      'OEE',\n      'Availability',\n      'Quality',\n      'Performance',\n      'Number of Orders',\n      'Duration (seconds)',\n      'Waiting Time (seconds)',\n      'Producton Time (seconds)',\n      'Start',\n      'End',\n      'Received At',\n    ].join(',') + '\\n' + [...this.allSimulationIds, null].map(simulationId => {\n      const orders = this.allOrders.filter(o => o.simulationId == simulationId && o.orderType === 'PRODUCTION');\n      const simulationIdForCsv = simulationId?.includes(',') ? `'${simulationId}'` : (simulationId ?? 'without simulation');\n      const mainRow = [\n        simulationIdForCsv,\n        'Planspielzusammenfassung',\n        oee(orders, this.config!),\n        availability(orders),\n        quality(orders),\n        performance(orders, this.config!),\n        orders.length,\n        orders.reduce((acc, order) => acc + durationForOrder(order, this.config!), 0),\n        orders.reduce((acc, order) => acc + waitingTimeForOrder(order), 0),\n        orders.reduce((acc, order) => acc + productionTimeForOrder(order), 0),\n        orders.reduce((acc, order) => {\n          if (order.startedAt && (!acc || order.startedAt.getTime() < acc.getTime())) {\n            return order.startedAt;\n          }\n          return acc;\n        }, new Date()),\n        orders.reduce((acc, order) => {\n          if (order.stoppedAt && (!acc || order.stoppedAt.getTime() > acc.getTime())) {\n            return order.stoppedAt;\n          }\n          return acc;\n        }, new Date()),\n      ].join(',');\n      const orderRows = orders.map(order => [\n        simulationIdForCsv,\n        order.orderId,\n        oeeForOrder(order, this.config!),\n        availabilityForOrder(order),\n        qualityForOrder(order),\n        performanceForOrder(order, this.config!),\n        1,\n        durationForOrder(order, this.config!),\n        waitingTimeForOrder(order),\n        productionTimeForOrder(order),\n        order.startedAt,\n        order.stoppedAt,\n        order.receivedAt,\n      ].join(','));\n      return [mainRow, ...orderRows].join('\\n');\n    }).join('\\n');\n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement('a');\n    link.setAttribute('href', encodedUri);\n    link.setAttribute('download', 'oee.csv');\n    document.body.appendChild(link); // Required for FF\n    link.click();\n  }\n\n  downloadRawDataCsv() {\n    const csvContent = 'data:text/csv;charset=utf-8,' + [\n      'Simulation',\n      'OrderId',\n      'WorkpieceType',\n      'WorkpieceId',\n      'StepId',\n      'Type',\n      'State',\n      'StartedAt',\n      'StoppedAt',\n      'ReceivedAt',\n      'ModuleType',\n      'Command',\n      'PreviousStepId',\n    ].join(',') + '\\n' + [...this.allSimulationIds, null].map(simulationId => {\n      const orders = this.allOrders.filter(o => o.simulationId == simulationId && o.orderType === 'PRODUCTION');\n      const simulationIdForCsv = simulationId?.includes(',') ? `'${simulationId}'` : (simulationId ?? 'without simulation');\n      const orderRows = orders.map(order => {\n        const mainRow = [\n          simulationIdForCsv,\n          order.orderId,\n          order.type,\n          order.workpieceId,\n          '',\n          'PRODUCTION',\n          order.state,\n          order.startedAt,\n          order.stoppedAt,\n          order.receivedAt,\n          '',\n          '',\n          '',\n        ].join(',');\n        const subRows = order.productionSteps.map(step => [\n          simulationIdForCsv,\n          order.orderId,\n          order.type,\n          order.workpieceId,\n          step.id,\n          step.type,\n          step.state,\n          step.startedAt,\n          step.stoppedAt,\n          '',\n          (step.type === 'MANUFACTURE' ? step.moduleType : step.target),\n          (step.type === 'MANUFACTURE' ? step.command : 'DRIVE'),\n          step.dependentActionId,\n        ].join(',')).join('\\n');\n        return [mainRow, subRows].join('\\n');\n      });\n      return orderRows.join('\\n');\n    }).join('\\n');\n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement('a');\n    link.setAttribute('href', encodedUri);\n    link.setAttribute('download', 'raw-data.csv');\n    document.body.appendChild(link); // Required for FF\n    link.click();\n  }\n}\n","import { MatTableDataSource } from '@angular/material/table';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { StateLog } from '../../services/states.service';\n\nexport class StateLogDataSource extends MatTableDataSource<StateLog> {\n  private collection$: Subscription | undefined;\n  private connectionCount = 0;\n\n  constructor(private stateLog$: Observable<StateLog[]>) {\n    super();\n  }\n\n  override connect(): BehaviorSubject<StateLog[]> {\n    if (!this.collection$) {\n      this.collection$ = this.stateLog$.subscribe((data) => (this.data = data));\n    }\n    this.connectionCount++;\n    return super.connect();\n  }\n\n  override disconnect() {\n    if (this.connectionCount) {\n      this.connectionCount--;\n      if (this.connectionCount === 0 && this.collection$) {\n        this.collection$.unsubscribe();\n        this.collection$ = undefined;\n      }\n    }\n    super.disconnect();\n  }\n}\n","<ng-container *ngIf=\"moduleInfo$ | async as moduleInfo\">\n  <p *ngIf=\"!moduleInfo\">\n    {{ 'Keine Modulinformationen verfügbar' | translate }}\n  </p>\n  <p *ngIf=\"moduleInfo\">\n    {{ 'Produktionsschritt.' + (moduleInfo.subType ?? moduleInfo.type) | translate }} ({{ moduleInfo.serialNumber }})\n  </p>\n</ng-container>\n","import { Component, Input } from '@angular/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { filter, map, shareReplay, startWith, take } from 'rxjs/operators';\nimport {\n  FtsPairedModule,\n  PairedModule,\n  PairingState,\n} from '../../../common/protocol/ccu';\nimport { StateLog, StatesService } from '../../services/states.service';\n\nexport type ModuleInfo = {\n  serialNumber: string;\n  type: string;\n  subType?: string;\n};\n\n@Component({\n  selector: 'ff-module-info',\n  templateUrl: './module-info.component.html',\n  styleUrls: ['./module-info.component.scss'],\n})\nexport class ModuleInfoComponent {\n  private readonly pairingState$: Observable<PairingState>;\n  private readonly pairedModule$: Observable<PairedModule | undefined>;\n  private readonly pairedFts$: Observable<FtsPairedModule | undefined>;\n\n  readonly moduleInfo$: Observable<ModuleInfo | undefined>;\n\n  @Input() stateLog: StateLog | null = null;\n\n  constructor(private stateService: StatesService) {\n    this.pairingState$ = this.stateService.pairingState$;\n    this.pairedModule$ = this.setupPairedModule(this.pairingState$);\n    this.pairedFts$ = this.setupPairedFts(this.pairingState$);\n    this.moduleInfo$ = this.setupModuleInfo(\n      this.pairedModule$,\n      this.pairedFts$\n    );\n  }\n\n  private setupPairedModule(\n    pairingState$: Observable<PairingState>\n  ): Observable<PairedModule | undefined> {\n    return pairingState$.pipe(\n      map((pairingState) => pairingState.modules as PairedModule[]),\n      map((modules) => {\n        const serialNumber = this.stateLog?.state?.serialNumber;\n        return modules.find((m) => m.serialNumber === serialNumber);\n      }),\n      take(1),\n      shareReplay(1)\n    );\n  }\n\n  private setupPairedFts(\n    pairingState$: Observable<PairingState>\n  ): Observable<FtsPairedModule | undefined> {\n    return pairingState$.pipe(\n      map((pairingState) => pairingState.transports as FtsPairedModule[]),\n      map((modules) => {\n        const serialNumber = this.stateLog?.state?.serialNumber;\n        return modules.find((m) => m.serialNumber === serialNumber);\n      }),\n      take(1),\n      shareReplay(1)\n    );\n  }\n\n  private setupModuleInfo(\n    pairedModule$: Observable<PairedModule | undefined>,\n    pairedFts$: Observable<FtsPairedModule | undefined>\n  ): Observable<ModuleInfo | undefined> {\n    return combineLatest([pairedModule$, pairedFts$]).pipe(\n      map(([pairedModule, pairedFts]) => pairedModule ?? pairedFts),\n      filter((pairedModule) => !!pairedModule),\n      map((pairedModule) => ({\n        serialNumber: pairedModule!.serialNumber,\n        type: pairedModule!.type,\n        subType: pairedModule!.subType,\n      })),\n      startWith(undefined),\n      shareReplay(1)\n    );\n  }\n}\n","<ng-template #errorTable let-errors=\"errors\">\n  <table mat-table [dataSource]=\"filterEmptyErrors(errors)\" *ngIf=\"hasErrors(errors)\">\n    <ng-container matColumnDef=\"timestamp\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ 'Fehlerzeitpunkt' | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        {{ row.timestamp | date: \"medium\" }}\n      </td>\n    </ng-container>\n    <ng-container *ngFor=\"let column of displayColumns\" [matColumnDef]=\"column\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ column | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        {{ row[column] | translate }}\n      </td>\n    </ng-container>\n    <ng-container matColumnDef=\"errorReferences\">\n      <th mat-header-cell *matHeaderCellDef>\n        {{ 'errorReferences' | translate }}\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <ng-container *ngIf=\"!row.errorReferences\">\n          <p class=\"ref-output\">N/A</p>\n        </ng-container>\n        <ng-container *ngFor=\"let ref of row.errorReferences\">\n          <ng-container *ngIf=\"ref.referenceKey && ref.referenceValue\">\n            <p class=\"ref-output\">{{ ref.referenceKey | translate }} - {{ ref.referenceValue | translate }}</p>\n          </ng-container>\n          <ng-container *ngIf=\"!ref.referenceKey || !ref.referenceValue\">\n            <p class=\"ref-output\" *ngFor=\"let kv of ref | keyvalue\">{{ kv.key }} - {{ kv.value }}</p>\n          </ng-container>\n        </ng-container>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"errorColumns\"></tr>\n    <tr class=\"mat-row\" *matNoDataRow>\n      <td class=\"mat-cell\" [attr.colspan]=\"errorColumns.length\">\n        {{ 'Keine Daten verfügbar' | translate }}\n      </td>\n    </tr>\n    <tr mat-row *matRowDef=\"let row; columns: errorColumns\"></tr>\n  </table>\n</ng-template>\n\n<ng-template #connectionStrings let-moduleInfo=\"moduleInfo\">\n  <p>{{ (moduleInfo.connected ? 'Verbunden' : 'Nicht verbunden') | translate }} - {{ 'AvailableState.' + moduleInfo.available | translate }}</p>\n  <p>{{ 'IP: {{ip}} - Version: {{version}}' | translate: {ip: moduleInfo.ip ?? 'N/A', version: moduleInfo.version ?? 'N/A'} }}</p>\n</ng-template>\n\n<ng-template #connectionState let-state=\"state\">\n  <section *ngIf=\"moduleInfo$ | async as moduleInfo\">\n    <h3>{{ 'Verbindungsstatus vom {{timestamp}}' | translate: {timestamp: state?.timestamp | date: 'medium' } }}</h3>\n    <p>{{ 'Produktionsschritt.' + (moduleInfo.subType ?? moduleInfo.type) | translate }} - {{ moduleInfo.serialNumber }}</p>\n    <ng-container *ngTemplateOutlet=\"connectionStrings; context: { moduleInfo: moduleInfo }\"></ng-container>\n  </section>\n</ng-template>\n\n<ng-template #ftsState let-state=\"state\">\n  <section *ngIf=\"ftsInfo$ | async as moduleInfo\">\n    <h3>{{ 'Status für FTS [{{serialNumber}}] vom {{timestamp}}' | translate: {serialNumber: moduleInfo.serialNumber, timestamp: state?.timestamp | date: 'medium' } }}</h3>\n    <ng-container *ngTemplateOutlet=\"connectionStrings; context: { moduleInfo: moduleInfo }\"></ng-container>\n    <p>{{ 'Letzter Knoten / letztes Module {{lastNodeId}}' | translate: {lastNodeId: moduleInfo.lastNodeId} }}</p>\n    <p>{{ 'Batteriestand {{percentage}}%' | translate: {percentage: state?.batteryState?.percentage} }}</p>\n  </section>\n  <ng-container *ngTemplateOutlet=\"errorTable; context: { errors: state.errors }\"></ng-container>\n</ng-template>\n\n<ng-template #moduleState let-state=\"state\">\n  <section *ngIf=\"moduleInfo$ | async as moduleInfo\">\n    <h3>{{ 'Status für Module [{{serialNumber}}] vom {{timestamp}}' | translate: {serialNumber: moduleInfo.serialNumber, timestamp: state?.timestamp | date: 'medium' } }}</h3>\n    <ng-container *ngTemplateOutlet=\"connectionStrings; context: { moduleInfo: moduleInfo }\"></ng-container>\n  </section>\n  <ng-container *ngTemplateOutlet=\"errorTable; context: { errors: state.errors }\"></ng-container>\n</ng-template>\n\n<ng-container [ngSwitch]=\"stateLog?.type\">\n  <ng-container *ngSwitchCase=\"StateLogType.CONNECTION\">\n    <ng-container *ngTemplateOutlet=\"connectionState; context: { state: stateLog?.state }\"></ng-container>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"StateLogType.FTS\">\n    <ng-container *ngTemplateOutlet=\"ftsState; context: { state: stateLog?.state }\"></ng-container>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"StateLogType.MODULE\">\n    <ng-container *ngTemplateOutlet=\"moduleState; context: { state: stateLog?.state }\"></ng-container>\n  </ng-container>\n</ng-container>","import { Component, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport {\n  FtsPairedModule,\n  PairedModule,\n  PairingState,\n} from '../../../common/protocol/ccu';\nimport { VdaError } from '../../../common/protocol/vda';\nimport {\n  StateLog,\n  StateLogType,\n  StatesService,\n} from '../../services/states.service';\n\n@Component({\n  selector: 'ff-state-log-details',\n  templateUrl: './state-log-details.component.html',\n  styleUrls: ['./state-log-details.component.scss'],\n})\nexport class StateLogDetailsComponent {\n  private readonly pairingState$: Observable<PairingState>;\n  readonly displayColumns = ['errorType', 'errorLevel'];\n  readonly errorColumns = [\n    'timestamp',\n    ...this.displayColumns,\n    'errorReferences',\n  ];\n  readonly StateLogType = StateLogType;\n  readonly moduleInfo$: Observable<PairedModule | undefined>;\n  readonly ftsInfo$: Observable<FtsPairedModule | undefined>;\n\n  @Input() stateLog: StateLog | null = null;\n\n  constructor(private stateService: StatesService) {\n    this.pairingState$ = this.stateService.pairingState$;\n\n    this.moduleInfo$ = this.setupModuleInfo(this.pairingState$);\n    this.ftsInfo$ = this.setupFtsInfo(this.pairingState$);\n  }\n\n  /**\n   * Check if errors are present and if they are not empty. The empty check is run against the errorLevel property.\n   * @param errors The errors to check.\n   * @returns True if errors are present and not empty.\n   */\n  public hasErrors(errors: Array<VdaError>): boolean {\n    const errs = errors ?? [];\n    return errs.length > 0 && errs.some((e) => !!e.errorLevel);\n  }\n\n  /**\n   * Filter out empty errors. Empty errors are those that have no errorLevel.\n   * @param errors\n   * @returns filtered errors\n   */\n  public filterEmptyErrors(errors: Array<VdaError>): Array<VdaError> {\n    const errs = errors ?? [];\n    return errs.filter((e) => !!e.errorLevel);\n  }\n\n  private setupModuleInfo(\n    pairingState$: Observable<PairingState>\n  ): Observable<PairedModule | undefined> {\n    return pairingState$.pipe(\n      map(\n        (pairingState) =>\n          [\n            ...pairingState.modules,\n            ...pairingState.transports,\n          ] as PairedModule[]\n      ),\n      map((modules) => {\n        const serialNumber = this.stateLog?.state?.serialNumber;\n        return modules.find((m) => m.serialNumber === serialNumber);\n      }),\n      take(1),\n      shareReplay(1)\n    );\n  }\n\n  private setupFtsInfo(\n    pairingState$: Observable<PairingState>\n  ): Observable<FtsPairedModule | undefined> {\n    return pairingState$.pipe(\n      map((pairingState) => pairingState.transports as FtsPairedModule[]),\n      map((modules) => {\n        const serialNumber = this.stateLog?.state?.serialNumber;\n        return modules.find((m) => m.serialNumber === serialNumber);\n      }),\n      take(1),\n      shareReplay(1)\n    );\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { StateLog } from '../../services/states.service';\nimport { ConnectionState } from '../../../common/protocol/vda';\n\nexport type ErrorLevel = 'NONE' | 'FATAL' | 'WARNING';\n\n@Pipe({\n  name: 'isErrorLevel'\n})\nexport class IsErrorLevelPipe implements PipeTransform {\n  transform(log: StateLog, severity: ErrorLevel): boolean {\n    if (log.type === 'MODULE' || log.type === 'FTS') {\n      if (log.state?.errors?.find(err => err.errorLevel == 'FATAL')) {\n        return severity === 'FATAL';\n      } else if (log.state?.errors?.find(err => err.errorLevel == 'WARNING')) {\n        return severity === 'WARNING';\n      }\n    } else if (log.type === 'CONNECTION') {\n      if (log.state.connectionState === ConnectionState.CONNECTIONBROKEN) {\n        return severity === 'WARNING';\n      }\n    }\n    return severity === 'NONE';\n  }\n}\n","<ff-missing-controller-banner>\n  <h2 class=\"header\">{{ \"Statusmeldungen\" | translate }}</h2>\n  <section class=\"filter-header\">\n    <h3 class=\"filter-label\">{{ 'Filter' | translate }}</h3>\n    <mat-form-field class=\"status-type-filter\" appearance=\"fill\">\n      <mat-label>{{ \"state.type\" | translate }}</mat-label>\n      <mat-select [(value)]=\"selectedType\">\n        <mat-option [value]=\"null\">{{ 'Alle Nachrichten' | translate }}</mat-option>\n        <mat-option *ngFor=\"let type of logTypes\" [value]=\"type\">\n          {{ type !== null ? ('StateLog.' + type | translate) : '' }}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <mat-form-field class=\"module-type-filter\" appearance=\"fill\">\n      <mat-label>{{ \"Module\" | translate }}</mat-label>\n      <mat-select [(value)]=\"selectedModule\">\n        <mat-option [value]=\"null\">{{ 'Alle Module' | translate }}</mat-option>\n        <mat-option *ngFor=\"let module of (modules$ | async)\" [value]=\"module.serialNumber\">\n          {{ 'Produktionsschritt.' + (module.subType ?? module.type) | translate }} ({{ module.serialNumber}})\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </section>\n  <section class=\"state-table-container\">\n    <table mat-table [dataSource]=\"dataSource\" multiTemplateDataRows\n      matSort matSortActive=\"received\" matSortDisableClear matSortDirection=\"desc\">\n      <ng-container matColumnDef=\"actions\">\n        <th mat-header-cell *matHeaderCellDef class=\"actions-column\"></th>\n        <td mat-cell *matCellDef=\"let row\" class=\"actions-column\">\n          <button mat-icon-button>\n            <mat-icon>{{ selectedState === row ? 'expand_more' : 'chevron_right'}}</mat-icon>\n          </button>\n        </td>\n      </ng-container>\n      <ng-container matColumnDef=\"received\">\n        <th mat-header-cell mat-sort-header disableClear *matHeaderCellDef>\n          {{ 'state.received' | translate }}\n        </th>\n        <td mat-cell *matCellDef=\"let row\">\n          {{ row.received | date: 'medium' }}\n        </td>\n      </ng-container>\n      <ng-container matColumnDef=\"type\">\n        <th mat-header-cell *matHeaderCellDef>\n          {{ 'state.type' | translate }}\n        </th>\n        <td mat-cell *matCellDef=\"let row\">\n          {{ 'StateLog.' + row.type | translate }}\n        </td>\n      </ng-container>\n      <ng-container matColumnDef=\"module\">\n        <th mat-header-cell *matHeaderCellDef>\n          {{ 'Nachrichtenherkunft' | translate }}\n        </th>\n        <td mat-cell *matCellDef=\"let row\">\n          <ff-module-info [stateLog]=\"row\"></ff-module-info>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"stateDetails\">\n        <td mat-cell *matCellDef=\"let row\" [attr.colspan]=\"stateColumns.length\">\n          <div class=\"selected-state-detail\"\n            [class.expanded]=\"selectedState === row\"\n            [@detailExpand]=\"selectedState === row ? 'expanded' : 'collapsed'\">\n            <ff-state-log-details [stateLog]=\"row\"></ff-state-log-details>\n          </div>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"stateColumns\"></tr>\n      <tr class=\"mat-row\" *matNoDataRow>\n        <td class=\"mat-cell\" class=\"no-data\" [attr.colspan]=\"stateColumns.length\">\n          {{ 'Keine Daten verfügbar' | translate }}\n        </td>\n      </tr>\n      <tr mat-row *matRowDef=\"let row; columns: stateColumns\"\n          class=\"state-row\"\n          [class.selected-state-row]=\"selectedState === row\"\n          [class.severity-fatal] = \"row | isErrorLevel:'FATAL'\"\n          [class.severity-warning] = \"row | isErrorLevel:'WARNING'\"\n          (click)=\"selectState(row)\">\n      </tr>\n      <tr mat-row *matRowDef=\"let row; columns: ['stateDetails']\" class=\"state-detail-row\"></tr>\n    </table>\n  </section>\n</ff-missing-controller-banner>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FtWindowModule } from '@fischertechnik/ft-window';\nimport { FutureFactoryComponent } from './futurefactory.component';\nimport {\n  CloudRoutes,\n  FutureFactoryRoutes,\n  ROUTE_TO_MODULE_ROOT,\n} from './futurefactory.routes';\nimport { FutureFactoryFlowEditorComponent } from './pages/flow-editor/flow-editor.component';\nimport { FutureFactoryLayoutEditorComponent } from './pages/layout-editor/layout-editor.component';\nimport { FutureFactoryModuleCalibrationComponent } from './pages/module-calibration/module-calibration.component';\nimport { FutureFactoryModuleDetailsComponent } from './pages/module-details/module-details.component';\nimport { FutureFactoryModuleListComponent } from './pages/module-list/module-list.component';\nimport { FutureFactoryOrderListComponent } from './pages/order-list/order-list.component';\nimport { FutureFactorySimulationLayoutComponent } from './pages/simulation-layout/simulation-layout.component';\nimport { FutureFactoryStatusLogComponent } from './pages/status-log/status-log.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FutureFactoryComponent,\n    children: [\n      {\n        path: CloudRoutes.DASHBOARD,\n        loadChildren: () => FtWindowModule,\n      },\n      {\n        path: FutureFactoryRoutes.ROOT,\n        redirectTo: FutureFactoryRoutes.DASHBOARD,\n        data: { [ROUTE_TO_MODULE_ROOT]: '.' },\n        pathMatch: 'full',\n      },\n      {\n        path: FutureFactoryRoutes.MODULE,\n        component: FutureFactoryModuleListComponent,\n        data: { [ROUTE_TO_MODULE_ROOT]: '..' },\n      },\n      {\n        path: FutureFactoryRoutes.MODULE + '/:moduleId',\n        component: FutureFactoryModuleDetailsComponent,\n        data: { [ROUTE_TO_MODULE_ROOT]: '../..' },\n      },\n      {\n        path: `${FutureFactoryRoutes.MODULE}/:moduleId/${FutureFactoryRoutes.CALIBRATION}`,\n        component: FutureFactoryModuleCalibrationComponent,\n        data: { [ROUTE_TO_MODULE_ROOT]: '../../..' },\n      },\n      {\n        path: FutureFactoryRoutes.ORDERS,\n        component: FutureFactoryOrderListComponent,\n        pathMatch: 'full',\n        data: { [ROUTE_TO_MODULE_ROOT]: '..' },\n      },\n      {\n        path: FutureFactoryRoutes.ORDERS + '/:orderId',\n        component: FutureFactoryOrderListComponent,\n        data: { [ROUTE_TO_MODULE_ROOT]: '../..' },\n      },\n      {\n        path: FutureFactoryRoutes.PRODUCTION_FLOWS,\n        component: FutureFactoryFlowEditorComponent,\n        data: { [ROUTE_TO_MODULE_ROOT]: '..' },\n      },\n      {\n        path: FutureFactoryRoutes.LAYOUT,\n        component: FutureFactoryLayoutEditorComponent,\n        data: { [ROUTE_TO_MODULE_ROOT]: '..' },\n      },\n      {\n        path: FutureFactoryRoutes.SIMULATION,\n        component: FutureFactorySimulationLayoutComponent,\n        data: { [ROUTE_TO_MODULE_ROOT]: '..' },\n      },\n      {\n        path: FutureFactoryRoutes.LOGS,\n        component: FutureFactoryStatusLogComponent,\n        data: { [ROUTE_TO_MODULE_ROOT]: '..' },\n      },\n      {\n        path: '**',\n        redirectTo: './',\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class FutureFactoryRoutingModule {}\n","import {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\nimport { AfterViewInit, Component, ViewChild } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nimport { StateLog, StateLogType, StatesService } from '../../services/states.service';\nimport { StateLogDataSource } from './state-log.data-source';\n\n@Component({\n  selector: 'ff-status-log',\n  templateUrl: './status-log.component.html',\n  styleUrls: ['./status-log.component.scss'],\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({ height: '0px' })),\n      state('expanded', style({ height: '*' })),\n      transition(\n        'expanded <=> collapsed',\n        animate('250ms cubic-bezier(0.4, 0.0, 0.2, 1)')\n      ),\n    ]),\n  ],\n})\nexport class FutureFactoryStatusLogComponent implements AfterViewInit {\n  readonly stateColumns = ['actions', 'received', 'type', 'module'];\n  readonly logTypes = [StateLogType.CONNECTION, StateLogType.MODULE, StateLogType.FTS];\n  readonly dataSource: StateLogDataSource;\n  readonly modules$ = this.statesService.allModules$;\n  selectedState: StateLog | null = null;\n  private _selectedType: string | null = null;\n  private _selectedModule: string | null = null;\n  @ViewChild(MatSort) sort!: MatSort;\n\n  constructor(private statesService: StatesService) {\n    this.filterPredicate = this.filterPredicate.bind(this);\n\n    this.dataSource = new StateLogDataSource(this.statesService.stateLog$);\n    this.dataSource.filterPredicate = this.filterPredicate;\n  }\n\n  filterPredicate = (data: StateLog, filter: string): boolean => {\n    const includesType = data.type === this._selectedType;\n    const includesModule = data.state.serialNumber === this._selectedModule;\n    if (this._selectedType && this._selectedModule) {\n      return includesType && includesModule;\n    }\n    if (this._selectedType && !this._selectedModule) {\n      return includesType;\n    }\n    if (!this._selectedType && this._selectedModule) {\n      return includesModule;\n    }\n    return true;\n  }\n\n  get selectedType() {\n    return this._selectedType;\n  }\n\n  set selectedType(type: string | null) {\n    this._selectedType = type;\n    // Update the filter for the data source\n    //  otherwise the filterPredicate will not be triggered\n    this.dataSource.filter = this.createFilter(this._selectedType, this._selectedModule);\n  }\n\n  get selectedModule() {\n    return this._selectedModule;\n  }\n\n  set selectedModule(module: string | null) {\n    this._selectedModule = module;\n    // Update the filter for the data source\n    //  otherwise the filterPredicate will not be triggered\n    this.dataSource.filter = this.createFilter(this._selectedType, this._selectedModule);\n  }\n\n  /**\n   * Creates a filter string for the data source, based on the selected type and module.\n   * These are combined with a ◬ character, which is not used in any of the data.\n   * @param {string|null} type\n   * @param {string|null} module\n   * @returns {string}\n   */\n  private createFilter(type: string | null, module: string | null): string {\n    return `${type ?? ''}◬${module ?? ''}`;\n  }\n\n  ngAfterViewInit(): void {\n    this.sort.active = 'received';\n    this.sort.start = 'desc';\n    this.dataSource.sort = this.sort;\n  }\n\n  selectState(state: StateLog) {\n    this.selectedState = this.selectedState === state ? null : state;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { GridsterModule } from 'angular-gridster2';\nimport { FutureFactoryComponentsModule } from '../components/components.module';\nimport { FutureFactoryPipesModule } from '../pipes/pipes.module';\nimport { UsedMaterialModule } from '../used-material.module';\nimport { FutureFactoryFlowEditorComponent } from './flow-editor/flow-editor.component';\nimport { FutureFactoryLayoutEditorComponent } from './layout-editor/layout-editor.component';\nimport { FutureFactoryModuleDetailsComponent } from './module-details/module-details.component';\nimport { FutureFactoryModuleListComponent } from './module-list/module-list.component';\nimport { FutureFactoryOrderListComponent } from './order-list/order-list.component';\nimport { FutureFactorySimulationLayoutComponent } from './simulation-layout/simulation-layout.component';\nimport { FutureFactoryStatusLogComponent } from './status-log/status-log.component';\nimport { FutureFactoryModuleCalibrationComponent } from './module-calibration/module-calibration.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    UsedMaterialModule,\n    FormsModule,\n    GridsterModule,\n    RouterModule,\n    TranslateModule,\n    FutureFactoryComponentsModule,\n    FutureFactoryPipesModule,\n  ],\n  declarations: [\n    FutureFactoryOrderListComponent,\n    FutureFactoryStatusLogComponent,\n    FutureFactoryLayoutEditorComponent,\n    FutureFactoryFlowEditorComponent,\n    FutureFactoryModuleDetailsComponent,\n    FutureFactoryModuleCalibrationComponent,\n    FutureFactoryModuleListComponent,\n    FutureFactorySimulationLayoutComponent,\n  ],\n  exports: [\n    FutureFactoryOrderListComponent,\n    FutureFactoryStatusLogComponent,\n    FutureFactoryLayoutEditorComponent,\n    FutureFactoryFlowEditorComponent,\n    FutureFactoryModuleDetailsComponent,\n    FutureFactoryModuleCalibrationComponent,\n    FutureFactoryModuleListComponent,\n    FutureFactorySimulationLayoutComponent,\n  ],\n})\nexport class FutureFactoryPagesModule {}\n","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { TranslateLoader } from '@ngx-translate/core';\nimport { ValidationError, XMLParser, XMLValidator } from 'fast-xml-parser';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\nexport type TranslationUnit = {\n  '@_id': string;\n  '@_datatype': string;\n  source: string;\n  target: {\n    '#text': string;\n    '@_state': string;\n  };\n  'context-group'?: {\n    '@_purpose': string;\n    context: Array<{\n      '#text': string;\n      '@_context-type': string;\n    }>;\n  };\n};\n\nexport class TranslateXlfHttpLoader implements TranslateLoader {\n  constructor(\n    private http: HttpClient,\n    public prefix: string = 'assets/i18n/messages.',\n    public suffix: string = '.xlf'\n  ) {}\n\n  /**\n   * Gets the translations from the server\n   */\n  public getTranslation(lang: string): Observable<Object> {\n    const targetFile = `${this.prefix}${lang}${this.suffix}`;\n    return this.http\n      .get(targetFile, {\n        responseType: 'text',\n        observe: 'body',\n      })\n      .pipe(\n        map((raw) => {\n          const validationResult: boolean | ValidationError =\n            XMLValidator.validate(raw);\n          if (validationResult !== true) {\n            throw new Error(\n              `Invalid XML: ${validationResult.err.msg} at ${validationResult.err.line}:${validationResult.err.col}`\n            );\n          }\n          return raw;\n        }),\n        map((raw) => {\n          const parser: XMLParser = new XMLParser({\n            ignoreAttributes: false,\n          });\n          return parser.parse(raw);\n        }),\n        map((translations) => {\n          if (!translations.xliff) {\n            throw new Error(`Invalid XLIFF: missing xliff root element`);\n          }\n          if (!translations.xliff.file) {\n            throw new Error(`Invalid XLIFF: missing xliff.file element`);\n          }\n          if (!translations.xliff.file.body) {\n            throw new Error(`Invalid XLIFF: missing xliff.file.body element`);\n          }\n          return translations.xliff.file.body['trans-unit'];\n        }),\n        map((translationUnits: TranslationUnit[]) =>\n          translationUnits.reduce((acc, unit) => {\n            const id = unit['@_id'];\n            if (!id || !unit.target) {\n              return acc;\n            }\n            if (typeof unit.target === 'string') {\n              acc[id] = unit.target;\n            } else if (typeof unit.target === 'object') {\n              acc[id] = unit.target['#text'];\n            }\n            return acc;\n          }, {} as Record<string, string>)\n        ),\n        tap(translations => {\n          console.groupCollapsed(`Loaded ${Object.keys(translations).length} translations for targetFile ${targetFile}`);\n          console.table(translations);\n          console.groupEnd();\n        }),\n        catchError((error) => {\n          console.error(`Failed to load translation for targetFile ${targetFile}:`, error);\n          // if the translation file cannot be loaded, return an empty object\n          return of({});\n        }),\n      );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport {\n  Inject,\n  LOCALE_ID,\n  ModuleWithProviders,\n  NgModule,\n  Provider,\n} from '@angular/core';\nimport { I18nService } from '@fischertechnik/ft-common-ui';\nimport { DASHBOARD_CONFIG } from '@fischertechnik/ft-window';\nimport {\n  TranslateLoader,\n  TranslateModule,\n  TranslateService,\n} from '@ngx-translate/core';\nimport { GridsterModule } from 'angular-gridster2';\nimport { FutureFactoryComponentsModule } from './components/components.module';\nimport { FutureFactoryComponent } from './futurefactory.component';\nimport { FUTURE_FACTORY_DASHBOARD } from './futurefactory.dashboard.config';\nimport {\n  ControllerClientService,\n  MqttClientService,\n  MqttPrefixRequired,\n  ShowLanguageSelector,\n} from './futurefactory.external.service';\nimport { FutureFactoryRoutingModule } from './futurefactory.routing.module';\nimport {\n  ControllerServiceMock,\n  MqttServiceMock,\n} from './futurefactory.service';\nimport { FutureFactoryPagesModule } from './pages/pages.module';\nimport { SelectedControllerService } from './services/selected-controller.service';\nimport { TypedMqttService } from './services/typed-mqtt.service';\nimport { TranslateXlfHttpLoader } from './translate/xlf-http-loader';\nimport { UsedMaterialModule } from './used-material.module';\n\nexport interface FutureFactoryModuleConfig {\n  showLanguageSelector: Provider;\n  mqttPrefixRequired: Provider;\n  mqttService: Provider;\n  controllerService: Provider;\n  dashboardConfig: Provider;\n}\n\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateXlfHttpLoader(http, 'assets/i18n/messages-omm.', '.xlf');\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FutureFactoryRoutingModule,\n    UsedMaterialModule,\n    GridsterModule,\n    FutureFactoryComponentsModule,\n    FutureFactoryPagesModule,\n    TranslateModule.forChild({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: createTranslateLoader,\n        deps: [HttpClient],\n      },\n      extend: true,\n      isolate: true,\n    }),\n  ],\n  declarations: [FutureFactoryComponent],\n  providers: [TypedMqttService, SelectedControllerService],\n  exports: [],\n})\nexport class FutureFactoryModule {\n  static configure(\n    config: Partial<FutureFactoryModuleConfig> = {}\n  ): ModuleWithProviders<FutureFactoryModule> {\n    return {\n      ngModule: FutureFactoryModule,\n      providers: [\n        config.showLanguageSelector ?? {\n          provide: ShowLanguageSelector,\n          useValue: false,\n        },\n        config.mqttPrefixRequired ?? {\n          provide: MqttPrefixRequired,\n          useValue: true,\n        },\n        config.mqttService ?? {\n          provide: MqttClientService,\n          useClass: MqttServiceMock,\n        },\n        config.controllerService ?? {\n          provide: ControllerClientService,\n          useClass: ControllerServiceMock,\n        },\n        config.dashboardConfig ?? {\n          provide: DASHBOARD_CONFIG,\n          useValue: FUTURE_FACTORY_DASHBOARD,\n        },\n      ],\n    };\n  }\n\n  constructor(\n    @Inject(LOCALE_ID) private locale: string,\n    private translate: TranslateService,\n    private i18n: I18nService\n  ) {\n    this.translate.setDefaultLang('de');\n    this.translate.addLangs(['de', 'en', 'es', 'fr', 'nl', 'pt', 'ru', 'ua']);\n    const detectedLocale = this.locale ?? this.translate.getBrowserLang();\n    console.log('Detected locale: ' + detectedLocale);\n    this.translate.use(detectedLocale);\n    this.i18n.use(detectedLocale);\n  }\n}\n","/**\n * This enum is used to define the routes of the application.\n * It is used in the app.routing.ts and app.component.ts.\n */\nexport enum RoutePaths {\n  // The root path of this application.\n  LOGS='factory/logs',\n  LAYOUT='factory/layout',\n  FLOWS='factory/flows',\n  ORDERS='factory/orders',\n  ROOT = '',\n  // The path to the (beemo) dashboard view\n  DASHBOARD = 'dashboard',\n  // The path to the factory view\n  FACTORY = 'factory',\n  // The path, that matches every other path.\n  WILDCARD = '**',\n}\n","<mat-toolbar><h1 class=\"mat-title\">{{ APP_TITLE }}</h1></mat-toolbar>\n\n<div class=\"page-content mat-typography\" *ngIf=\"i18nIsFullyLoaded$ | async\">\n  <router-outlet></router-outlet>\n</div>\n","import { Component } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { map } from 'rxjs/operators';\nimport { RoutePaths } from './app.routes';\nimport { APP_TITLE } from './constants';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  readonly APP_TITLE = APP_TITLE;\n  readonly RoutePaths = RoutePaths;\n\n  readonly i18nIsFullyLoaded$ = this.translate\n    .getStreamOnTranslationChange('dashboardOrder')\n    .pipe(map((value) => value !== 'dashboardOrder'));\n\n  constructor(private translate: TranslateService) {}\n}\n","// The name of the overall application.\nexport const APP_TITLE = 'Agile Production Simulation (APS)';\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FutureFactoryModule } from '@ft/futurefactory';\nimport { RoutePaths } from './app.routes';\n\nconst routes: Routes = [\n  {\n    path: RoutePaths.ROOT,\n    redirectTo: RoutePaths.FACTORY,\n    pathMatch: 'full',\n  },\n  {\n    path: RoutePaths.FACTORY,\n    loadChildren: () => FutureFactoryModule,\n  },\n  {\n    path: RoutePaths.WILDCARD,\n    redirectTo: RoutePaths.FACTORY,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Injectable } from '@angular/core';\nimport { ControllerResponse } from '@fischertechnik/ft-api';\nimport { IControllerService } from '@ft/futurefactory';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\n\n/**\n * Assigned module as enum integer. 0 = unset, 1 = smart home, 2 = training factory, 3 = agile production simulation.\n */\nenum FtModule {\n  Unset = 0,\n  SmartHome = 1,\n  TrainingFactory = 2,\n  // The Agile Production Simulation module.\n  APS = 3,\n}\n\n/**\n * Raspberry PI based implementation of the IControllerService.\n * The implementation is based on the mock implementation of the ft-api.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class LocalControllerService implements IControllerService {\n  private readonly controllers$ = new BehaviorSubject<ControllerResponse[]>([\n    {\n      targetModule: FtModule.APS,\n      name: 'APS',\n      hardwareModel: 'TXT',\n      alarm: true,\n      pushMessage: true,\n      shared: true,\n      mqttUser: {\n        mqttUserId: 1,\n        password: 'password',\n        crdate: 1560873431,\n        controllerId: '1',\n      },\n      softwareVersion: '1.1.9',\n      softwareName: 'txt',\n      controllerId: 1,\n      crdate: 1560873431,\n    },\n  ]);\n\n  onChange(): Observable<ControllerResponse[]> {\n    return this.controllers$.asObservable();\n  }\n\n  loadControllers(): void {\n    // Do nothing.\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport {\n  IMqttMessage,\n  IMqttService,\n  IPublishOptions,\n} from '@ft/futurefactory';\nimport { MqttService as NgxMqttService } from 'ngx-mqtt';\nimport { Observable, ReplaySubject, takeUntil } from 'rxjs';\n\n/**\n * This is a wrapper around the ngx-mqtt service to make it compatible with the\n * IMqttService interface. This is necessary, because the mqtt service is provided\n * by the fischertechnik Cloud for the cloud and this service is provided for the\n * local mqtt broker, running on the raspberry pi.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MqttService implements IMqttService, OnDestroy {\n  private readonly destroy = new ReplaySubject<boolean>(1);\n\n  constructor(private mqttService: NgxMqttService) {}\n\n  public publish(\n    _: number,\n    topic: string,\n    message: string,\n    options?: IPublishOptions\n  ): void {\n    this.mqttService.unsafePublish(topic, message, options);\n  }\n\n  public subscribe(_: number, topic: string): Observable<IMqttMessage> {\n    console.debug('Subscribing to topic : %s', topic);\n    return this.mqttService.observe(topic).pipe(takeUntil(this.destroy));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy.next(true);\n    this.destroy.complete();\n    this.mqttService.disconnect();\n  }\n}\n","import { APP_BASE_HREF } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CameraApiMockService,\n  CameraApiService,\n  ChartApiMockService,\n  ChartApiService,\n  ControllerApiService,\n  UserApiMockService,\n  UserApiService,\n} from '@fischertechnik/ft-api';\nimport { I18nService } from '@fischertechnik/ft-common-ui';\nimport { FT_ENVIRONMENT_TOKEN } from '@fischertechnik/ft-environment';\nimport {\n  AlarmMqttService,\n  AlarmService,\n  Bme680SensorMqttService,\n  Bme680SensorService,\n  CameraMqttService,\n  CameraService,\n  CloudMqttService,\n  HbwMqttService,\n  HbwService,\n  LdrSensorMqttService,\n  LdrSensorService,\n  NFCMqttService,\n  NFCService,\n  OrderMqttService,\n  OrderService,\n  PtuMqttService,\n  PtuService,\n  StateMqttService,\n  StateService,\n  StockMqttService,\n  StockService,\n} from '@fischertechnik/ft-mqtt';\nimport { FtWindowModule } from '@fischertechnik/ft-window';\nimport { LocalControllerService } from './services/controller.service';\nimport { MqttService as LocalMqttService } from './services/mqtt.service';\n\nexport function getAppBaseHref() {\n  const baseTags = document.getElementsByTagName('base');\n  if (baseTags.length) {\n    return baseTags[0].getAttribute('href');\n  }\n  return '/';\n}\n\n@NgModule({\n  imports: [\n    FtWindowModule.configure({\n      alarmService: {\n        provide: AlarmService,\n        useClass: AlarmMqttService,\n        deps: [I18nService, CloudMqttService],\n      },\n      ptuService: {\n        provide: PtuService,\n        useClass: PtuMqttService,\n        deps: [CloudMqttService],\n      },\n      cameraService: {\n        provide: CameraService,\n        useClass: CameraMqttService,\n        deps: [CloudMqttService],\n      },\n      ldrSensorService: {\n        provide: LdrSensorService,\n        useClass: LdrSensorMqttService,\n        deps: [CloudMqttService],\n      },\n      bme680SensorService: {\n        provide: Bme680SensorService,\n        useClass: Bme680SensorMqttService,\n        deps: [CloudMqttService],\n      },\n      nfcService: {\n        provide: NFCService,\n        useClass: NFCMqttService,\n        deps: [CloudMqttService],\n      },\n      orderService: {\n        provide: OrderService,\n        useClass: OrderMqttService,\n        deps: [CloudMqttService],\n      },\n      stateService: {\n        provide: StateService,\n        useClass: StateMqttService,\n        deps: [CloudMqttService],\n      },\n      stockService: {\n        provide: StockService,\n        useClass: StockMqttService,\n        deps: [CloudMqttService],\n      },\n      hbwService: {\n        provide: HbwService,\n        useClass: HbwMqttService,\n        deps: [CloudMqttService],\n      },\n      userApiService: { provide: UserApiService, useClass: UserApiMockService },\n      chartApiService: {\n        provide: ChartApiService,\n        useClass: ChartApiMockService,\n      },\n      cameraApiService: {\n        provide: CameraApiService,\n        useClass: CameraApiMockService,\n      },\n      controllerApiService: {\n        provide: ControllerApiService,\n        useClass: LocalControllerService,\n      },\n    }),\n  ],\n  providers: [\n    { provide: APP_BASE_HREF, useFactory: getAppBaseHref },\n    { provide: FT_ENVIRONMENT_TOKEN, useValue: {} },\n\n    // We need to provide the CloudMqttService with a local implementation\n    // because the beemo libs require the CloudMqttService instead of the\n    // IMqttService interface along with an injection token.\n    { provide: CloudMqttService, useClass: LocalMqttService },\n  ],\n})\nexport class UsedCloudModule {}\n","import { NgModule } from '@angular/core';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\n@NgModule({\n  imports: [MatToolbarModule],\n  exports: [MatToolbarModule],\n})\nexport class UsedMaterialModule {}\n","import { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {\n  ControllerClientService,\n  FutureFactoryModule,\n  MqttClientService,\n  MqttPrefixRequired,\n  ShowLanguageSelector,\n  TranslateXlfHttpLoader,\n  FUTURE_FACTORY_DASHBOARD_NO_HISTORY_CONFIG\n} from '@ft/futurefactory';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { IMqttServiceOptions, MqttModule } from 'ngx-mqtt';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app.routing';\nimport { LocalControllerService } from './services/controller.service';\nimport { MqttService as LocalMqttService } from './services/mqtt.service';\nimport { UsedCloudModule } from './used-cloud.module';\nimport { UsedMaterialModule } from './used-material.module';\nimport { DASHBOARD_CONFIG } from '@fischertechnik/ft-window';\n\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateXlfHttpLoader(http, 'assets/i18n/messages-ft.', '.xlf');\n}\n\nconst MQTT_SERVICE_OPTIONS: IMqttServiceOptions = {\n  hostname: window.location.hostname,\n  port: 9001,\n  path: '/ws',\n  username: 'default',\n  password: 'default',\n};\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    UsedMaterialModule,\n    UsedCloudModule,\n    HttpClientModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: createTranslateLoader,\n        deps: [HttpClient],\n      },\n    }),\n    MqttModule.forRoot(MQTT_SERVICE_OPTIONS),\n    FutureFactoryModule.configure({\n      showLanguageSelector: {\n        provide: ShowLanguageSelector,\n        useValue: true,\n      },\n      mqttPrefixRequired: {\n        provide: MqttPrefixRequired,\n        useValue: false,\n      },\n      mqttService: {\n        provide: MqttClientService,\n        useClass: LocalMqttService,\n      },\n      controllerService: {\n        provide: ControllerClientService,\n        useClass: LocalControllerService,\n      },\n      dashboardConfig: {\n        provide: DASHBOARD_CONFIG,\n        useValue: FUTURE_FACTORY_DASHBOARD_NO_HISTORY_CONFIG\n      },\n    }),\n  ],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["MqttClientService","InjectionToken","MqttPrefixRequired","ShowLanguageSelector","ControllerClientService","FUTURE_FACTORY_DASHBOARD","history","identifier","dialog","treeNodes","title","i18n","type","WindowType","children","FUTURE_FACTORY_DASHBOARD_NO_HISTORY_CONFIG","Object","FutureFactoryPipesModule","CommonModule","UsedMaterialModule","MatTabsModule","MatButtonModule","MatDividerModule","MatListModule","MatIconModule","MatMenuModule","MatSidenavModule","MatTableModule","MatTooltipModule","MatCardModule","DragDropModule","MatButtonToggleModule","MatExpansionModule","MatSortModule","MatSnackBarModule","MatDialogModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatPaginatorModule","MatProgressSpinnerModule","MatCheckboxModule","MatSlideToggleModule","FutureFactoryComponentsModule","GridsterModule","RouterModule","TranslateModule","FormsModule","AvailableState","Workpiece","BLUE","RED","WHITE","DeviceType","MODULE","FTS","OrderState","RoadDirection","ModuleCalibrationCommand","ANY_SERIAL","CcuTopic","serial","CALIBRATION_BASE","FtsTopic","topic","ROOT","Error","ModuleTopic","ConnectionState","CloudRoutes","FutureFactoryRoutes","ROUTE_TO_MODULE_ROOT","map","mqttMessage","payload","i0","CollisionWarningPopupComponent","constructor","data","MAT_DIALOG_DATA","selectors","FtsErrors","SIMPLE_ISO_DATE_REGEX","_","value","test","Date","SelectedControllerService","controllerService","this","ReplaySubject","BehaviorSubject","undefined","availableControllers$","of","loadControllers","pipe","switchMap","onChange","shareReplay","availableFutureFactoryControllers$","setupAvailableFutureFactoryControllers","setupSelectedController","ngOnDestroy","destroy$","next","complete","filter","ac","o","length","c","i","targetModule","withLatestFrom","selectedController$","available","selected","a","find","controllerId","_a","takeUntil","subscribe","controller","factory","TypedMqttService","mqttService","requirePrefix","selectedControllerService","prependPrefix","msg","parsePayload","JSON","parse","toString","jsonIsoDateReviver","error","console","publish","message","options","stringify","retain","qos","MqttServiceMock","Observable","ControllerServiceMock","controllers$","asObservable","name","hardwareId","hardwareModel","alarm","pushMessage","shared","mqttUser","softwareVersion","softwareName","crdate","StateLogType","CONNECTION","StatesService","fts","getFtsTopic","module","getModuleTopic","fts_connection","module_connection","pairingState$","getPayload","pairedModules$","modules","pairedTransports$","transports","allModules$","ftsState$","subscribeTo","STATE_TOPICS","moduleState$","ftsConnection$","moduleConnection$","ftsStateLog$","collectLogs","moduleStateLog$","ftsConnectionLog$","moduleConnectionLog$","moduleStates$","scan","states","moduleState","newStates","Map","set","state","serialNumber","ftsStates$","ftsState","stateLog$","combineLatest","acc","val","filled","v","Set","calibrationState$","getCcuCalibrationTopic","destroy","noop","received","startWith","log","CollisionWarningDetectorService","statesService","init","subscription","getFtsWithCollisions","collisions","pairings","collision","isPairedFtsSerial","dialogRef","componentInstance","open","disableClose","afterClosed","closeDialog","close","unsubscribe","hasCollisionWarning","errors","some","errorType","values","pairing","ctx_r4","oxw","LanguageSelectorComponent","showLanguageSelector","locale","router","selectedLocale","use","setLanguage","location","href","url","LOCALE_ID","VersionMismatchPopupComponent","VersionMismatchPopupService","mismatchedModules","updateDialog","lastMessageDate","timestamp","VersionInfoComponent","mismatchPopup","now","decls","FactoryResetComponent","mqtt","confirmFactoryReset","resetDialogContent","take","clearState","withStorage","sendFactoryReset","reset","ctx","FutureFactoryComponent","translate","notification","collisionWarningDetectorService","status","connectionState","dismiss","instant","duration","panelClass","horizontalPosition","verticalPosition","ModuleType","SUPPORT_MODULES","START","HBW","DPS","CHRG","ModuleCommandType","generateAssociationKeyNfcModuleCommand","moduleType","moduleCommand","DROP","AIQS","CHECK_QUALITY","PICK","OVEN","FIRE","MILL","DRILL","ProductionFlowsService","productionFlows$","largeModules","FactoryLayoutService","factoryStateService","direction","inverse","xDiff","yDiff","currentGridLayout$","layout","layoutToGridLayout","pairedFTS$","getInverseDirection","isLargeModule","includes","intersections","roads","road_tiles","createPositionedRoadTiles","module_tiles","createModuleTiles","positionModuleTiles","allTiles","Array","from","moveToPositivePositions","minimums","reduce","tile","x","y","forEach","edge","fromModule","get","toModule","to","toNode","intersection","id","inverseDirectionUpdate","DIRECTION_UPDATES","update","road","fromNode","directionUpdate","n","connected","placeholder","visited","stack","activeNode","pop","nodeid","has","add","connectedNode","push","order","OrderStatesService","newStatus","orderId","newMessage","MqttService","ftsResponse","actionState","moduleResponse","command","orderResponse","prev","d","current","_b","u","_c","lastTimestamp","orderState$","orderStatus$","merge","buildOrderStatus","activeOrders$","listenForActiveOrders","completedOrders$","listenForCompletedOrders","hasRunningOrders$","setupHasRunningOrders","activeOrders","MissingControllerBannerState","factoryControllers$","hasController$","setupHasController","controllers","selectedController","MissingControllerBannerComponent","ngContentSelectors","ctx_r16","ctx_r20","ctx_r24","allowedModules","allModules","FutureFactoryFlowEditorComponent","productionFlowsService","orderStates","enterPredicate","bind","destroyed$","flows","productionFlows","resetFlows","isPairedProductionModule","pairedSince","subType","availableTypes$","selectableTypes$","modTypes","modified","blueSteps","e","steps","redSteps","whiteSteps","drag","drop","allowedModulesForColor","extendedFlows","hasAiqs","sortPredicate","index","moveItemInArray","indexOf","isPreviousModuleAiqs","event","previousIndex","currentIndex","previousContainer","container","availableModulesId","splice","item","transferArrayItem","ensureChainConsistency","lastIndex","aiqsIndex","deleteStepAtIndex","saveFlows","firstValueFrom","activatedRoute","MODULE_ICON_PATHS","UNDEFINED","LayoutEditorService","layoutService","cols","rows","Subject","gridSubject","baseLayout","updateEditorGrid","availableModules$","_getAvailableModules","editorGrid$","_modified","modules$","mods","grid","currentGridLayout","modulesInLayout","mod","checkMod","hasGridItemId","gridItem","offX","offY","modifiers","EXTRA_TILE_OFFSETS_FOR_MODULES","resizeEnabled","moveToPositiveCoordinates","minX","minimum","Math","min","minY","resetLayout","getNextId","ids","Number","String","max","getGridItemAtTilePosition","hasOverlappingItem","needle","deleteGridItem","changed","clearItemAssociations","dir","keys","updateMovedGridItem","rebuildConnectionsForRoad","rebuildConnectionsForModule","lastDirection","startIndex","findIndex","NORTH","EAST","SOUTH","WEST","oldX","oldY","oldRows","oldCols","addItem","rotateModuleConnection","oldDirection","nextIndex","modifier","convertGridLayoutToLayout","targetId","target","getNewGridLayout","convertGridToGridLayout","validateGridLayout","notVisited","size","activeId","activeTile","delete","setLayoutSaved","ctx_r10","_r5","MAs","ctx_r18","ctx_r22","ctx_r26","ctx_r29","ctx_r31","ctx_r33","ctx_r38","ctx_r44","ctx_r48","FactoryLayoutComponent","orderStatesService","layoutEditor","zone","setTimeout","scale","gridType","fixedColWidth","fixedRowHeight","setGridSize","minRows","margin","minCols","swap","mobileBreakpoint","swapWhileDragging","pushItems","disablePushOnDrag","disablePushOnResize","draggable","dropOverItems","enabled","stop","dragStopped","routeToRoot$","getRouteToModuleRoot","isValidLayout$","window","ResizeObserver","resizeObserver","entries","run","width$","contentRect","width","widthScaleStyle$","getWidthScaleStyle$","gridContents$","combineLatestWith","_editable$","editable","dragEnabled","setupOfflineModules","isOffline","moduleId","offlineModules","zoomScale$","zoomScale","editorGrid","gridWidth","gridHeight","startZoom","gridster","optionsChanged","transform","height","ngOnInit","observe","gridZoomContainer","nativeElement","ngAfterViewInit","hasRunningOrders","drawer","unobserve","add_intersection","getFirstPossiblePosition","add_charger","prefix","add_production","delete_item","rotate_module","saveLayout","alert","zoomIn","zoomOut","item_clicked","root","navigate","relativeTo","online","resetDefaultLayout","defaultLayoutDialogContent","sendDefaultLayoutReset","WORKPIECE_TYPES","icon","GeneralConfigService","saveConfig","config","ctx_r8","FactoryConfigComponent","generalConfigService","config$","originalConfig","configChanged","FutureFactoryLayoutEditorComponent","configurationHeader","CalibrationInfoComponent","CalibrationCaptionComponent","calibrationData","REF","RACK_REIHE_1_SPALTE_A","RACK_REIHE_2_SPALTE_B","RACK_REIHE_3_SPALTE_C","RAMPE","FACTORY_BASE_SETTINGS","HOME_BASE","HOME_INPUT","HOME_OUTPUT","NIO_APPROACH","NIO_TARGET","CS_APPROACH","CS_TARGET","NFC_APPROACH","NFC_TARGET","INPUT_PICK_APPROACH_A","INPUT_PICK_APPROACH_B","INPUT_PICK_TARGET","OUTPUT_DROP_APPROACH_A","OUTPUT_DROP_APPROACH_B","OUTPUT_DROP_TARGET","FTS_PICK_APPROACH_A","FTS_PICK_APPROACH_B","FTS_PICK_TARGET","FTS_DROP_APPROACH_A","FTS_DROP_APPROACH_B","FTS_DROP_TARGET","GRIP_ON","GRIP_OFF","CAMERA_HOME","CAMERA_HBW","TO_NIO_BIN","TO_CAMERA","TO_PICKUP","CHECK","FilterRefPipe","positionName","positionCalibrationValues","ref","referenceKey","pure","ctx_r3","ctx_r9","ctx_r15","tmp_b_0","ctx_r28","ctx_r35","ctx_r36","ctx_r37","ctx_r39","FutureFactoryModuleCalibrationComponent","factoryLayoutService","mqttClient","route","params","moduleData$","createModuleDataObservable","moduleCalibration$","createModuleCalibrationObservable","calibration_data","status_values","image_data","available_positions","current_position","references","status_references","referenceValue","startsWith","split","referenceSorter","refA","refB","localeCompare","sort","moduleId$","updateRef","refInput","newValue","_ref","focus","calib","calibrationCommandWithValues","sendCalibrationCommand","position","ctx_r7","FutureFactoryModuleDetailsComponent","orderInfo$","createOrderInfoObservable","findLatestOrderStepIndexForModule","productionSteps","step","startedAt","findStartOfCurrentModuleSteps","firstStep","hasCurrentlyRemainingModuleSteps","remaining","distinctUntilChanged","orders","orderStepInfo","firstModuleStep","currentOrder","currentModuleStepIndex","workpiece","l","workpieceId","s","clickEditDuration","durationEditToggle","checked","settings","durationInput","MatTableDataSource","super","sortHeaderId","active","b","sortingDataAccessor","connect","isFts","collection$","ip","version","hasCalibration","charging","connectionCount","disconnect","ctx_r2","FactoryParkComponent","confirmFactoryPark","parkDialogContent","sendFactoryPark","park","ToIconPipe","iconSet","ctx_r21","ctx_r27","ctx_r43","ctx_r46","ctx_r55","ctx_r58","FutureFactoryModuleListComponent","dataSource","ModuleListDataSource","getMetadata","getInFactorySince","since","getPairedSince","connectFts","moduleSelected","row","setFtsCharge","charge","hasConfirmedDelete","deletionMap","confirmDelete","deleteModule","MatSort","OrderListState","filterOrdersByType","setSelectedOrder","selectedOrder","isOrderSelected","deleteOrder","$event","stopPropagation","orderType","OrderListComponent","MANUFACTURE","NAVIGATION","EventEmitter","simulationId","selectOrder","selectedOrders","orderSelect","emit","ProductionStepsComponent","FutureFactoryOrderListComponent","paramOrderId$","paramMap","selectedOrder$","selectedOrderId","activeStepId$","usedProductionSteps","getUsedProductionSteps","reverse","availability","performance","quality","qualityValue","availabilityForOrder","performanceForOrder","qualityForOrder","numberOfOrders","totalOrderDurations","durationForOrder","plannedOrderDurations","productionDurations","actualOrderDuration","stoppedAt","getTime","totalProductionTime","totalWaitingTime","productionTimeForOrder","waitingTimeForOrder","totalDuration","productionTime","waitingTime","dependentActionId","dependentStep","delta","r","receivedAt","calculateStepDuration","FutureFactorySimulationLayoutState","isArray","StockStatesService","BannerComponent","ProductionTimeCalculatorState","startTime$","setupStartTime","endTime$","setupEndTime","duration$","setupDuration","calculatedProductionTime$","setupCalculatedProductionTime","calculatedTransportTime$","setupCalculatedTransportTime","order$","startTime","endTime","aggregateStepDuration","requiredType","FallbackValuePipe","fallback","ToSecondsPipe","Intl","NumberFormat","maximumFractionDigits","isSafeInteger","numberFormatter","format","ProductionTimeCalculatorComponent","ctx_r17","FutureFactorySimulationLayoutComponent","stockStatesService","workpieces","inStock","simulationIds","runningSimulationId$","runningSimulationId","stock$","tap","stock","updateProducability","onDestroy$","completedOrders","allOrders","allSimulationIds","checkSimulationName","selectedSimulationId","canStartSimulation","simulation","every","w","simulationNameAlreadyExists","startSimulation","startingSimulation","trim","orderRequests","idx","generateOrderRequestForProduction","orderRequest","Promise","resolve","reject","timeout","err","removeWorkpiece","addWorkpiece","reserverForCurrentCalculationLoop","suitableWorkpiece","stockItems","stockItem","g","toggleSelectSimulation","oee","downloadCsv","downloadCsvOee","downloadRawDataCsv","csvContent","join","simulationIdForCsv","oeeForOrder","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","orderRows","ModuleInfoComponent","stateService","pairedModule$","setupPairedModule","pairedFts$","setupPairedFts","moduleInfo$","setupModuleInfo","pairingState","stateLog","m","pairedModule","pairedFts","StateLogDetailsComponent","displayColumns","ftsInfo$","setupFtsInfo","hasErrors","errs","errorLevel","filterEmptyErrors","IsErrorLevelPipe","severity","_d","ctx_r23","routes","path","component","loadChildren","FtWindowModule","redirectTo","pathMatch","includesType","_selectedType","includesModule","_selectedModule","filterPredicate","StateLogDataSource","selectedType","createFilter","selectedModule","start","selectState","selectedState","FutureFactoryStatusLogComponent","trigger","style","transition","animate","FutureFactoryRoutingModule","FutureFactoryPagesModule","http","suffix","getTranslation","lang","targetFile","responseType","raw","validationResult","XMLValidator","line","col","parser","XMLParser","ignoreAttributes","translations","xliff","file","translationUnits","unit","groupCollapsed","table","groupEnd","catchError","TranslateXlfHttpLoader","FutureFactoryModule","setDefaultLang","addLangs","detectedLocale","getBrowserLang","ngModule","providers","provide","useValue","mqttPrefixRequired","useClass","dashboardConfig","_e","DASHBOARD_CONFIG","imports","loader","TranslateLoader","useFactory","createTranslateLoader","deps","HttpClient","extend","isolate","RoutePaths","AppComponent","getStreamOnTranslationChange","AppRoutingModule","relativeLinkResolution","FtModule","LocalControllerService","APS","mqttUserId","password","unsafePublish","debug","baseTags","getElementsByTagName","getAttribute","UsedCloudModule","APP_BASE_HREF","getAppBaseHref","FT_ENVIRONMENT_TOKEN","CloudMqttService","LocalMqttService","alarmService","AlarmService","AlarmMqttService","I18nService","ptuService","PtuService","PtuMqttService","cameraService","CameraService","CameraMqttService","ldrSensorService","LdrSensorService","LdrSensorMqttService","bme680SensorService","Bme680SensorService","Bme680SensorMqttService","nfcService","NFCService","NFCMqttService","orderService","OrderService","OrderMqttService","StateService","StateMqttService","stockService","StockService","StockMqttService","hbwService","HbwService","HbwMqttService","userApiService","UserApiService","UserApiMockService","chartApiService","ChartApiService","ChartApiMockService","cameraApiService","CameraApiService","CameraApiMockService","controllerApiService","ControllerApiService","MatToolbarModule","MQTT_SERVICE_OPTIONS","hostname","port","username","AppModule","bootstrap","BrowserModule","BrowserAnimationsModule","HttpClientModule","MqttModule","enableProdMode","__NgCli_bootstrap_1","bootstrapModule","catch"],"sourceRoot":"webpack:///"}