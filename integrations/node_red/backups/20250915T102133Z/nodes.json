
<!-- --- [red-module:node-red/junction] --- -->
<!--
  05-junction.html
  This file exists so that the runtime loads the Junction node into the registry,
  but it is empty so it doesn't appear in the editor palette
-->

<!-- --- [red-module:node-red/inject] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="inject">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>

    <div class="form-row node-input-property-container-row">
        <ol id="node-input-property-container"></ol>
    </div>

    <div class="form-row" id="node-once">
        <label for="node-input-once">&nbsp;</label>
        <input type="checkbox" id="node-input-once" style="display:inline-block; width:15px; vertical-align:baseline;">
        <span data-i18n="inject.onstart"></span>&nbsp;
        <input type="text" id="node-input-onceDelay" placeholder="0.1" style="width:45px; height:28px;">&nbsp;
        <span data-i18n="inject.onceDelay"></span>
    </div>

    <div class="form-row">
        <label for=""><i class="fa fa-repeat"></i> <span data-i18n="inject.label.repeat"></span></label>
        <select id="inject-time-type-select">
            <option value="none" data-i18n="inject.none"></option>
            <option value="interval" data-i18n="inject.interval"></option>
            <option value="interval-time" data-i18n="inject.interval-time"></option>
            <option value="time" data-i18n="inject.time"></option>
        </select>
        <input type="hidden" id="node-input-repeat">
        <input type="hidden" id="node-input-crontab">
    </div>

    <div class="form-row inject-time-row hidden" id="inject-time-row-interval">
        <span data-i18n="inject.every"></span>
        <input id="inject-time-interval-count" class="inject-time-count" value="1"></input>
        <select style="width:100px" id="inject-time-interval-units">
            <option value="s" data-i18n="inject.seconds"></option>
            <option value="m" data-i18n="inject.minutes"></option>
            <option value="h" data-i18n="inject.hours"></option>
        </select><br/>
    </div>

    <div class="form-row inject-time-row hidden" id="inject-time-row-interval-time">
        <span data-i18n="inject.every"></span> <select style="width:90px; margin-left:20px;" id="inject-time-interval-time-units" class="inject-time-int-count" value="1">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="10">10</option>
            <option value="12">12</option>
            <option value="15">15</option>
            <option value="20">20</option>
            <option value="30">30</option>
            <option value="0">60</option>
        </select> <span data-i18n="inject.minutes"></span><br/>
        <span data-i18n="inject.between"></span> <select id="inject-time-interval-time-start" class="inject-time-times"></select>
        <span data-i18n="inject.and"></span> <select id="inject-time-interval-time-end" class="inject-time-times"></select><br/>
        <div id="inject-time-interval-time-days" class="inject-time-days" style="margin-top:5px">
            <div style="display:inline-block; vertical-align:top; margin-right:5px;" data-i18n="inject.on">on</div>
            <div style="display:inline-block;">
                <div>
                    <label><input type='checkbox' checked value='1'/> <span data-i18n="inject.days.0"></span></label>
                    <label><input type='checkbox' checked value='2'/> <span data-i18n="inject.days.1"></span></label>
                    <label><input type='checkbox' checked value='3'/> <span data-i18n="inject.days.2"></span></label>
                </div>
                <div>
                    <label><input type='checkbox' checked value='4'/> <span data-i18n="inject.days.3"></span></label>
                    <label><input type='checkbox' checked value='5'/> <span data-i18n="inject.days.4"></span></label>
                    <label><input type='checkbox' checked value='6'/> <span data-i18n="inject.days.5"></span></label>
                </div>
                <div>
                    <label><input type='checkbox' checked value='0'/> <span data-i18n="inject.days.6"></span></label>
                </div>
            </div>
        </div>
    </div>

    <div class="form-row inject-time-row hidden" id="inject-time-row-time">
        <span data-i18n="inject.at"></span> <input type="text" id="inject-time-time" value="12:00"></input><br/>
        <div id="inject-time-time-days" class="inject-time-days">
            <div style="display:inline-block; vertical-align:top; margin-right:5px;" data-i18n="inject.on"></div>
            <div style="display:inline-block;">
                <div>
                    <label><input type='checkbox' checked value='1'/> <span data-i18n="inject.days.0"></span></label>
                    <label><input type='checkbox' checked value='2'/> <span data-i18n="inject.days.1"></span></label>
                    <label><input type='checkbox' checked value='3'/> <span data-i18n="inject.days.2"></span></label>
                </div>
                <div>
                    <label><input type='checkbox' checked value='4'/> <span data-i18n="inject.days.3"></span></label>
                    <label><input type='checkbox' checked value='5'/> <span data-i18n="inject.days.4"></span></label>
                    <label><input type='checkbox' checked value='6'/> <span data-i18n="inject.days.5"></span></label>
                </div>
                <div>
                    <label><input type='checkbox' checked value='0'/> <span data-i18n="inject.days.6"></span></label>
                </div>
            </div>
        </div>
    </div>

</script>
<style>
    .inject-time-row {
        padding-left: 110px;
    }
    .inject-time-row:not(#inject-time-row-interval) select {
        margin: 3px 0;
    }
    .inject-time-days label {
        -webkit-user-select: none;
        -khtml-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        vertical-align: baseline;
        width: 100px;
    }
    .inject-time-days input {
        width: auto !important;
        vertical-align: baseline !important;
    }
    .inject-time-times {
        width: 90px !important;
    }
    #inject-time-time {
        width: 75px;
        margin-left: 8px;
        margin-bottom: 8px;
    }
    .inject-time-count {
        padding-left: 3px !important;
        width: 80px !important;
    }
</style>

<script type="text/javascript">
(function() {

    function resizeDialog(size) {
        size = size || { height: $(".red-ui-tray-content form").height() }
        var rows = $("#dialog-form>div:not(.node-input-property-container-row):visible");
        var height = size.height;
        for (var i=0; i<rows.length; i++) {
            height -= $(rows[i]).outerHeight(true);
        }
        var editorRow = $("#dialog-form>div.node-input-property-container-row");
        height -= (parseInt(editorRow.css("marginTop"))+parseInt(editorRow.css("marginBottom")));
        height += 16;
        $("#node-input-property-container").editableList('height',height);
    }
    /** Retrieve editableList items (refactored for re-use in the form inject button)*/
    function getProps(el, legacy) {
        var result = {
            props: []
        }
        el.each(function(i) {
            var prop = $(this);
            var p = {
                p:prop.find(".node-input-prop-property-name").typedInput('value')
            };
            if (p.p) {
                p.v = prop.find(".node-input-prop-property-value").typedInput('value');
                p.vt = prop.find(".node-input-prop-property-value").typedInput('type');
                if(legacy) {
                    if (p.p === "payload") { // save payload to old "legacy" property
                        result.payloadType = p.vt;
                        result.payload = p.v;
                        delete p.v;
                        delete p.vt;
                    } else if (p.p === "topic" && p.vt === "str") {
                        result.topic = p.v;
                        delete p.v;
                    }
                }
                result.props.push(p);
            }
        });
        return result;
    }
    /** Perform inject, optionally sending a custom msg (refactored for re-use in the form inject button)*/
    function doInject(node, customMsg) {
        var label = node._def.label.call(node,customMsg?customMsg.__user_inject_props__:undefined);
        if (label.length > 30) {
            label = label.substring(0, 50) + "...";
        }
        label = label.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        $.ajax({
            url: "inject/" + node.id,
            type: "POST",
            data: JSON.stringify(customMsg||{}),
            contentType: "application/json; charset=utf-8",
            success: function (resp) {
                RED.notify(node._("inject.success", { label: label }), { type: "success", id: "inject", timeout: 2000 });
            },
            error: function (jqXHR, textStatus, errorThrown) {
                if (jqXHR.status == 404) {
                    RED.notify(node._("common.notification.error", { message: node._("common.notification.errors.not-deployed") }), "error");
                } else if (jqXHR.status == 500) {
                    RED.notify(node._("common.notification.error", { message: node._("inject.errors.failed") }), "error");
                } else if (jqXHR.status == 0) {
                    RED.notify(node._("common.notification.error", { message: node._("common.notification.errors.no-response") }), "error");
                } else {
                    RED.notify(node._("common.notification.error", { message: node._("common.notification.errors.unexpected", { status: jqXHR.status, message: textStatus }) }), "error");
                }
            }
        });
    }
    RED.nodes.registerType('inject',{  
        category: 'common',
        color:"#a6bbcf",
        defaults: {
            name: {value:""},
            props:{value:[{p:"payload"},{p:"topic",vt:"str"}], validate:function(v, opt) {
                    if (!v || v.length === 0) { return true }
                    for (var i=0;i<v.length;i++) {
                        if (/msg|flow|global/.test(v[i].vt)) {
                            if (!RED.utils.validatePropertyExpression(v[i].v)) {
                                return RED._("node-red:inject.errors.invalid-prop", { prop: 'msg.'+v[i].p, error: v[i].v });
                            }
                        } else if (v[i].vt === "jsonata") {
                            try{ jsonata(v[i].v); }
                            catch(e){
                                return RED._("node-red:inject.errors.invalid-jsonata", { prop: 'msg.'+v[i].p, error: e.message });
                            }
                        } else if (v[i].vt === "json") {
                            try{ JSON.parse(v[i].v); }
                            catch(e){
                                return RED._("node-red:inject.errors.invalid-json", { prop: 'msg.'+v[i].p, error: e.message });
                            }
                        } else if (v[i].vt === "num"){
                            if (!/^[+-]?[0-9]*\.?[0-9]*([eE][-+]?[0-9]+)?$/.test(v[i].v)) {
                                return RED._("node-red:inject.errors.invalid-prop", { prop: 'msg.'+v[i].p, error: v[i].v });
                            }
                        }
                    }
                    return true;
                }
            },
            repeat: {
                value:"", validate: function(v, opt) {
                    if ((v === "") ||
                        (RED.validators.number(v) &&
                         (v >= 0) && (v <= 2147483))) {
                        return true;
                    }
                    return RED._("node-red:inject.errors.invalid-repeat");
                }
            },
            crontab: {value:""},
            once: {value:false},
            onceDelay: {value:0.1},
            topic: {value:""},
            payload: {value:"", validate: RED.validators.typedInput("payloadType", false) },
            payloadType: {value:"date"},
        },
        icon: "inject.svg",
        inputs:0,
        outputs:1,
        outputLabels: function(index) {
            var lab = '';

            // if only payload and topic - display payload type
            // if only one property - show it's type
            // if more than one property (other than payload and topic) - show "x properties" where x is the number of properties.
            // this.props will not be an array for legacy inject nodes until they are re-deployed
            //
            var props = this.props;
            if (!Array.isArray(props)) {
                props = [
                    { p:"payload", v: this.payload, vt: this.payloadType },
                    { p:"topic", v: this.topic, vt: "str" }
                ]
            }
            if (props) {
                for (var i=0,l=props.length; i<l; i++) {
                    if (i > 0) lab += "\n";
                    if (i === 5) {
                        lab += "... +"+(props.length-5);
                        break;
                    }
                    lab += props[i].p+": ";

                    var propType = props[i].p === "payload"? this.payloadType : props[i].vt;
                    if (propType === "json") {
                        try {
                            var parsedProp = JSON.parse(props[i].p === "payload"? this.payload : props[i].v);
                            propType = typeof parsedProp;
                            if (propType === "object" && Array.isArray(parsedProp)) {
                                propType = "Array";
                            }
                        } catch(e) {
                            propType = "invalid";
                        }
                    }
                    lab += this._("inject.label."+propType);
                }
            }
            return lab;
        },
        label: function(customProps) {
            var suffix = "";
            // if fire once then add small indication
            if (this.once) {
                suffix = " ¹";
            }
            // but replace with repeat one if set to repeat
            if ((this.repeat && this.repeat != 0) || this.crontab) {
                suffix = " ↻";
            }
            if (this.name) {
                return this.name+suffix;
            }
            var payload = "";
            var payloadType = "str";
            var topic = "";
            if (customProps) {
                for (var i=0;i<customProps.length;i++) {
                    if (customProps[i].p === "payload") {
                        payload = customProps[i].v;
                        payloadType = customProps[i].vt;
                    } else if (customProps[i].p === "topic") {
                        topic = customProps[i].v;
                    }
                }
            } else {
                payload = this.payload || "";
                payloadType = this.payloadType || "str";
                topic = this.topic || "";
            }
            if (payloadType === "string" ||
                    payloadType === "str" ||
                    payloadType === "num" ||
                    payloadType === "bool" ||
                    payloadType === "json") {
                if ((topic !== "") && ((topic.length + payload.length) <= 32)) {
                    return topic + ":" + payload+suffix;
                } else if (payload.length > 0 && payload.length < 24) {
                    return payload+suffix;
                } else {
                    return this._("inject.inject")+suffix;
                }
            } else if (payloadType === 'date' || payloadType === 'bin' || payloadType === 'env') {
                if ((topic !== "") && (topic.length <= 16)) {
                    return topic + ":" + this._('inject.label.'+payloadType)+suffix;
                } else {
                    return this._('inject.label.'+payloadType)+suffix;
                }
            } else if (payloadType === 'flow' || payloadType === 'global') {
                var key = RED.utils.parseContextKey(payload);
                return payloadType+"."+key.key+suffix;
            } else {
                return this._("inject.inject")+suffix;
            }
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var node = this;
            var payloadType = node.payloadType;

            if (node.payloadType == null) {
                if (node.payload == "") {
                    payloadType = "date";
                } else {
                    payloadType = "str";
                }
            } else if (node.payloadType === 'string' || node.payloadType === 'none') {
                payloadType = "str";
            }

            $("#inject-time-type-select").on("change", function() {
                $("#node-input-crontab").val('');
                var id = $("#inject-time-type-select").val();
                $(".inject-time-row").hide();
                $("#inject-time-row-"+id).show();

                // Scroll down
                var scrollDiv = $("#dialog-form").parent();
                scrollDiv.scrollTop(scrollDiv.prop('scrollHeight'));
                resizeDialog();
            });

            $("#node-input-once").on("change", function() {
                $("#node-input-onceDelay").attr('disabled', !$("#node-input-once").prop('checked'));
            })

            $(".inject-time-times").each(function() {
                for (var i=0; i<24; i++) {
                    var l = (i<10?"0":"")+i+":00";
                    $(this).append($("<option></option>").val(i).text(l));
                }
            });
            $("<option></option>").val(24).text("00:00").appendTo("#inject-time-interval-time-end");
            $("#inject-time-interval-time-start").on("change", function() {
                var start = Number($("#inject-time-interval-time-start").val());
                var end = Number($("#inject-time-interval-time-end").val());
                $("#inject-time-interval-time-end option").remove();
                for (var i=start+1; i<25; i++) {
                    var l = (i<10?"0":"")+i+":00";
                    if (i==24) {
                        l = "00:00";
                    }
                    var opt = $("<option></option>").val(i).text(l).appendTo("#inject-time-interval-time-end");
                    if (i === end) {
                        opt.attr("selected","selected");
                    }
                }
            });

            $(".inject-time-count").spinner({
                //max:60,
                min:1
            });

            var repeattype = "none";
            if (node.repeat != "" && node.repeat != 0) {
                repeattype = "interval";
                var r = "s";
                var c = node.repeat;
                if (node.repeat % 60 === 0) { r = "m"; c = c/60; }
                if (node.repeat % 1440 === 0) { r = "h"; c = c/60; }
                $("#inject-time-interval-count").val(c);
                $("#inject-time-interval-units").val(r);
                $("#inject-time-interval-days").prop("disabled","disabled");
            } else if (node.crontab) {
                var cronparts = node.crontab.split(" ");
                var days = cronparts[4];
                if (!isNaN(cronparts[0]) && !isNaN(cronparts[1])) {
                    repeattype = "time";
                    // Fixed time
                    var time = cronparts[1]+":"+cronparts[0];
                    $("#inject-time-time").val(time);
                    $("#inject-time-type-select").val("s");
                    if (days == "*") {
                        $("#inject-time-time-days input[type=checkbox]").prop("checked",true);
                    } else {
                        $("#inject-time-time-days input[type=checkbox]").removeAttr("checked");
                        days.split(",").forEach(function(v) {
                            $("#inject-time-time-days [value=" + v + "]").prop("checked", true);
                        });
                    }
                } else {
                    repeattype = "interval-time";
                    // interval - time period
                    var minutes = cronparts[0].slice(2);
                    if (minutes === "") { minutes = "0"; }
                    $("#inject-time-interval-time-units").val(minutes);
                    if (days == "*") {
                        $("#inject-time-interval-time-days input[type=checkbox]").prop("checked",true);
                    } else {
                        $("#inject-time-interval-time-days input[type=checkbox]").removeAttr("checked");
                        days.split(",").forEach(function(v) {
                            $("#inject-time-interval-time-days [value=" + v + "]").prop("checked", true);
                        });
                    }
                    var time = cronparts[1];
                    var timeparts = time.split(",");
                    var start;
                    var end;
                    if (timeparts.length == 1) {
                        // 0 or 0-10
                        var hours = timeparts[0].split("-");
                        if (hours.length == 1) {
                            if (hours[0] === "") {
                                start = "0";
                                end = "0";
                            }
                            else {
                                start = hours[0];
                                end = Number(hours[0])+1;
                            }
                        } else {
                            start = hours[0];
                            end = Number(hours[1])+1;
                        }
                    } else {
                        // 23,0 or 17-23,0-10 or 23,0-2 or 17-23,0
                        var startparts = timeparts[0].split("-");
                        start = startparts[0];

                        var endparts = timeparts[1].split("-");
                        if (endparts.length == 1) {
                            end = Number(endparts[0])+1;
                        } else {
                            end = Number(endparts[1])+1;
                        }
                    }
                    $("#inject-time-interval-time-end").val(end);
                    $("#inject-time-interval-time-start").val(start);

                }
            } else {
                $("#inject-time-type-select").val("none");
            }

            $(".inject-time-row").hide();
            $("#inject-time-type-select").val(repeattype);
            $("#inject-time-row-"+repeattype).show();

            /* */

            var eList = $('#node-input-property-container').css('min-height','120px').css('min-width','450px');

            eList.editableList({
                buttons: [
                    {
                        id: "node-inject-test-inject-button",
                        label: node._("inject.injectNow"),
                        click: function(e) {
                            var items = eList.editableList('items');
                            var props = getProps(items);
                            var m = {__user_inject_props__: props.props};
                            doInject(node, m);
                        }
                    }
                ],
                addItem: function(container,i,opt) {
                    var prop = opt;
                    if (!prop.hasOwnProperty('p')) {
                        prop = {p:"",v:"",vt:"str"};
                    }
                    container.css({
                        overflow: 'hidden',
                        whiteSpace: 'nowrap'
                    });
                    var row = $('<div/>').appendTo(container);

                    var propertyName = $('<input/>',{class:"node-input-prop-property-name",type:"text"})
                        .css("width","30%")
                        .appendTo(row)
                        .typedInput({types:['msg']});

                    $('<div/>',{style: 'display:inline-block; padding:0px 6px;'})
                        .text('=')
                        .appendTo(row);

                    var propertyValue = $('<input/>',{class:"node-input-prop-property-value",type:"text"})
                        .css("width","calc(70% - 30px)")
                        .appendTo(row)
                        .typedInput({default:prop.vt || 'str',types:['flow','global','str','num','bool','json','bin','date','jsonata','env','msg']});

                    propertyName.typedInput('value',prop.p);
                    propertyValue.typedInput('value',prop.v);
                },
                removable: true,
                sortable: true
            });
            $('#node-inject-test-inject-button').css("float", "right").css("margin-right", "unset");

            if (RED.nodes.subflow(node.z)) {
                $('#node-inject-test-inject-button').attr("disabled",true);
            }

            if (!node.props) {
                var payload = {
                    p:'payload',
                    v: node.payload ? node.payload : '',
                    vt:payloadType ? payloadType : 'date'
                };
                var topic = {
                    p:'topic',
                    v: node.topic ? node.topic : '',
                    vt:'str'
                }
                node.props = [payload,topic];
            }

            for (var i=0; i<node.props.length; i++) {
                var prop = node.props[i];
                var newProp = { p: prop.p, v: prop.v, vt: prop.vt };
                if (newProp.v === undefined) {
                    if (prop.p === 'payload') {
                        newProp.v = node.payload ? node.payload : '';
                        newProp.vt = payloadType ? payloadType : 'date';
                    } else if (prop.p === 'topic' && prop.vt === "str") {
                        newProp.v =  node.topic ? node.topic : '';
                    }
                }
                if (newProp.vt === "string") {
                    // Fix bug in pre 2.1 where an old Inject node might have
                    // a migrated rule with type 'string' not 'str'
                    newProp.vt = "str";
                }
                eList.editableList('addItem',newProp);
            }

            $("#inject-time-type-select").trigger("change");
            $("#inject-time-interval-time-start").trigger("change");

        },
        oneditsave: function() {
            var repeat = "";
            var crontab = "";
            var type = $("#inject-time-type-select").val();
            if (type == "none") {
                // nothing
            } else if (type == "interval") {
                var count = $("#inject-time-interval-count").val();
                var units = $("#inject-time-interval-units").val();
                if (units == "s") {
                    repeat = count;
                } else {
                    if (units == "m") {
                        //crontab = "*/"+count+" * * * "+days;
                        repeat = count * 60;
                    } else if (units == "h") {
                        //crontab = "0 */"+count+" * * "+days;
                        repeat = count * 60 * 60;
                    }
                }
            } else if (type == "interval-time") {
                repeat = "";
                var count = $("#inject-time-interval-time-units").val();
                var startTime = Number($("#inject-time-interval-time-start").val());
                var endTime = Number($("#inject-time-interval-time-end").val());
                var days = $('#inject-time-interval-time-days input[type=checkbox]:checked').map(function(_, el) {
                    return $(el).val()
                }).get();
                if (days.length == 0) {
                    crontab = "";
                } else {
                    if (days.length == 7) {
                        days="*";
                    } else {
                        days = days.join(",");
                    }
                    var timerange = "";
                    if (endTime == 0) {
                        timerange = startTime+"-23";
                    } else if (startTime+1 < endTime) {
                        timerange = startTime+"-"+(endTime-1);
                    } else if (startTime+1 == endTime) {
                        timerange = startTime;
                    } else {
                        var startpart = "";
                        var endpart = "";
                        if (startTime == 23) {
                            startpart = "23";
                        } else {
                            startpart = startTime+"-23";
                        }
                        if (endTime == 1) {
                            endpart = "0";
                        } else {
                            endpart = "0-"+(endTime-1);
                        }
                        timerange = startpart+","+endpart;
                    }
                    if (count === "0") {
                        crontab = count+" "+timerange+" * * "+days;
                    } else {
                        crontab = "*/"+count+" "+timerange+" * * "+days;
                    }
                }
            } else if (type == "time") {
                var time = $("#inject-time-time").val();
                var days = $('#inject-time-time-days  input[type=checkbox]:checked').map(function(_, el) {
                    return $(el).val()
                }).get();
                if (days.length == 0) {
                    crontab = "";
                } else {
                    if (days.length == 7) {
                        days="*";
                    } else {
                        days = days.join(",");
                    }
                    var parts = time.split(":");
                    if (parts.length === 2) {
                        repeat = "";
                        parts[1] = ("00" + (parseInt(parts[1]) % 60)).substr(-2);
                        parts[0] = ("00" + (parseInt(parts[0]) % 24)).substr(-2);
                        crontab = parts[1]+" "+parts[0]+" * * "+days;
                    }
                    else { crontab = ""; }
                }
            }

            $("#node-input-repeat").val(repeat);
            $("#node-input-crontab").val(crontab);

            /* Gather the properties */
            var items = $("#node-input-property-container").editableList('items');
            delete this.payloadType;
            delete this.payload;
            this.topic = "";
            var result = getProps(items, true);
            this.props = result.props;
            if(result.hasOwnProperty('payloadType')) { this.payloadType = result.payloadType; };
            if(result.hasOwnProperty('payload')) { this.payload = result.payload; };
            if(result.hasOwnProperty('topic')) { this.topic = result.topic; };
        },
        button: {
            enabled: function() {
                return !this.changed
            },
            onclick: function () {
                if (this.changed) {
                    return RED.notify(RED._("notification.warning", { message: RED._("notification.warnings.undeployedChanges") }), "warning");
                }
                doInject(this);
            }
        },
        oneditresize: resizeDialog
    });
})();
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="inject">
<p>Injects a message into a flow either manually or at regular intervals. The message
payload can be a variety of types, including strings, JavaScript objects or the current time.</p>
<h3>Outputs</h3>
<dl class="message-properties">
    <dt>payload<span class="property-type">various</span></dt>
    <dd>The configured payload of the message.</dd>
    <dt class="optional">topic <span class="property-type">string</span></dt>
    <dd>An optional property that can be configured in the node.</dd>
</dl>
<h3>Details</h3>
<p>The Inject node can initiate a flow with a specific payload value.
The default payload is a timestamp of the current time in millisecs since January 1st, 1970.</p>
<p>The node also supports injecting strings, numbers, booleans, JavaScript objects, or flow/global context values.</p>
<p>By default, the node is triggered manually by clicking on its button within the editor. It can also be set to
inject at regular intervals or according to a schedule.</p>
<p>It can also be configured to inject once each time the flows are started.</p>
<p>The maximum <i>Interval</i> that can be specified is about 596 hours / 24 days. However if you are looking at intervals
greater than one day you should consider using a scheduler node that can cope with power outages and restarts.</p>
<p><b>Note</b>: The <i>"Interval between times"</i> and <i>"at a specific time"</i> options use the standard cron system.
This means that 20 minutes will be at the next hour, 20 minutes past and 40 minutes past - not in 20 minutes time.
If you want every 20 minutes from now - use the <i>"interval"</i> option.</p>
<p><b>Note</b>: To include a newline in a string you must use a Function node to create the payload.</p>
</script>

<!-- --- [red-module:node-red/debug] --- -->

<script type="text/html" data-template-name="debug">
    <div class="form-row">
        <label for="node-input-typed-complete"><i class="fa fa-list"></i> <span data-i18n="debug.output"></span></label>
        <input id="node-input-typed-complete" type="text" style="width: 70%">
        <input id="node-input-complete" type="hidden">
        <input id="node-input-targetType" type="hidden">
    </div>
    <div class="form-row">
        <label for="node-input-tosidebar"><i class="fa fa-random"></i> <span data-i18n="debug.to"></span></label>
        <label for="node-input-tosidebar" style="width:70%">
        <input type="checkbox" id="node-input-tosidebar" style="display:inline-block; width:22px; vertical-align:top;"><span data-i18n="debug.toSidebar"></span>
        </label>
    </div>
    <div class="form-row">
        <label for="node-input-console"> </label>
        <label for="node-input-console" style="width:70%">
        <input type="checkbox" id="node-input-console" style="display:inline-block; width:22px; vertical-align:top;"><span data-i18n="debug.toConsole"></span>
        </label>
    </div>
    <div class="form-row">
    <label for="node-input-tostatus"> </label>
    <label for="node-input-tostatus" style="width:70%">
        <input type="checkbox" id="node-input-tostatus" style="display:inline-block; width:22px; vertical-align:top;"><span data-i18n="debug.toStatus"></span>
    </label>
    </div>
    <div class="form-row" id="node-tostatus-line">
        <label for="node-input-typed-status"></label>
        <input id="node-input-typed-status" type="text" style="width: 70%">
        <input id="node-input-statusVal" type="hidden">
        <input id="node-input-statusType" type="hidden">
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script src="debug/view/debug-utils.js"></script>

<script type="text/javascript">
(function() {
    var subWindow = null;

    function activateAjaxCall(node, active, successCallback) {
        var url;
        var body;

        if (Array.isArray(node)) {
            url = "debug/"+(active?"enable":"disable");
            body = {nodes: node.map(function(n) { return n.id})}
            node = node[0];
        } else {
            url = "debug/"+node.id+"/"+(active?"enable":"disable");
        }
        $.ajax({
            url: url,
            type: "POST",
            data: body,
            success: successCallback,
            error: function(jqXHR,textStatus,errorThrown) {
                if (jqXHR.status == 404) {
                    RED.notify(node._("common.notification.error", {message: node._("common.notification.errors.not-deployed")}),"error");
                } else if (jqXHR.status === 0) {
                    RED.notify(node._("common.notification.error", {message: node._("common.notification.errors.no-response")}),"error");
                } else {
                    // TODO where is the err.status comming from?
                    RED.notify(node._("common.notification.error",{message:node._("common.notification.errors.unexpected",{status:err.status,message:err.response})}),"error");
                }
            }
        });
    }

    RED.nodes.registerType('debug',{
        category: 'common',
        defaults: {
            name: {value:"_DEFAULT_"},
            active: {value:true},
            tosidebar: {value:true},
            console: {value:false},
            tostatus: {value:false},
            complete: {value:"false", required:true},
            targetType: {value:undefined},
            statusVal: {value:""},
            statusType: {value:"auto"}
        },
        label: function() {
            var suffix = "";
            if (this.console === true || this.console === "true") { suffix = " ⇲"; }
            if (this.targetType === "jsonata") {
                return (this.name || "JSONata") + suffix;
            }
            if (this.complete === true || this.complete === "true") {
                return (this.name||"msg") + suffix;
            } else {
                return (this.name || "msg." + ((!this.complete || this.complete === "false") ? "payload" : this.complete)) + suffix;
            }
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        color:"#87a980",
        inputs:1,
        outputs:0,
        icon: "debug.svg",
        align: "right",
        button: {
            toggle: "active",
            visible: function() { return this.tosidebar; },
            onclick: function() {
                var label = RED.utils.sanitize(this.name||"debug");
                var node = this;
                activateAjaxCall(node, node.active, function(resp, textStatus, xhr) {
                    var historyEvent = {
                        t:'edit',
                        node:node,
                        changes:{
                            active:!node.active
                        },
                        dirty:node.dirty,
                        changed:node.changed,
                        callback: function(ev) {
                            activateAjaxCall(ev.node, ev.node.active);
                        }
                    };
                    node.changed = true;
                    node.dirty = true;
                    RED.nodes.dirty(true);
                    RED.history.push(historyEvent);
                    RED.view.redraw();
                    if (xhr.status == 200) {
                        RED.notify(node._("debug.notification.activated",{label:label}),{type: "success", timeout: 2000});
                    } else if (xhr.status == 201) {
                        RED.notify(node._("debug.notification.deactivated",{label:label}),{type: "success", timeout: 2000});
                    }
                });
            }
        },
        onpaletteadd: function() {
            var options = {
                messageMouseEnter: function(sourceId) {
                    if (sourceId) {
                        var n = RED.nodes.node(sourceId);
                        if (n) {
                            n.highlighted = true;
                            n.dirty = true;
                        }
                        RED.view.redraw();
                    }
                },
                messageMouseLeave: function(sourceId) {
                    if (sourceId) {
                        var n = RED.nodes.node(sourceId);
                        if (n) {
                            n.highlighted = false;
                            n.dirty = true;
                        }
                        RED.view.redraw();
                    }
                },
                messageSourceClick: function(sourceId, aliasId, path) {
                    // Get all of the nodes that could have logged this message
                    if (RED.nodes.workspace(sourceId)) {
                        RED.view.reveal(sourceId);
                        return
                    }
                    var candidateNodes = [RED.nodes.node(sourceId)]
                    if (path) {
                        for (var i=2;i<path.length;i++) {
                            candidateNodes.push(RED.nodes.node(path[i]))
                        }
                    }
                    if (aliasId) {
                        candidateNodes.push(RED.nodes.node(aliasId));
                    }
                    if (candidateNodes.length > 1) {
                        // The node is in a subflow. Check to see if the active
                        // workspace is a subflow in the node's parentage. If
                        // so, reveal the relevant subflow instance node.
                        var ws = RED.workspaces.active();
                        for (var i=0;i<candidateNodes.length;i++) {
                            if (candidateNodes[i].z === ws) {
                                RED.view.reveal(candidateNodes[i].id);
                                return
                            }
                        }
                        // The active workspace is unrelated to the node. So
                        // fall back to revealing the top most node
                    }
                    RED.view.reveal(candidateNodes[0].id);
                },
                clear: function() {
                    RED.nodes.eachNode(function(node) {
                        node.highlighted = false;
                        node.dirty = true;
                    });
                    RED.view.redraw();
                }
            };

            var uiComponents = RED.debug.init(options);

            RED.sidebar.addTab({
                id: "debug",
                label: this._("debug.sidebar.label"),
                name: this._("debug.sidebar.name"),
                content: uiComponents.content,
                toolbar: uiComponents.footer,
                enableOnEdit: true,
                pinned: true,
                iconClass: "fa fa-bug",
                action: "core:show-debug-tab"
            });
            RED.actions.add("core:show-debug-tab",function() { RED.sidebar.show('debug'); });

            var that = this;
            RED._debug = function(msg) {
                that.handleDebugMessage("", {
                    name:"debug",
                    msg:msg
                });
            };

            this.refreshMessageList = function() {
                RED.debug.refreshMessageList(RED.workspaces.active());
                if (subWindow) {
                    try {
                        subWindow.postMessage({event:"workspaceChange",activeWorkspace:RED.workspaces.active()},"*");
                    } catch(err) {
                        console.log(err);
                    }
                }
            };
            RED.events.on("workspace:change", this.refreshMessageList);

            this.handleDebugMessage = function(t,o) {
                // console.log("->",o.id,o.z,o._alias);
                //
                // sourceNode should be the top-level node - one that is on a flow.
                var sourceNode;
                var pathParts;
                var pathHierarchy;
                if (o.path) {
                    // Path is a `/`-separated list of ids that identifies the
                    // complete parentage of the node that generated this message.
                    //    flow-id/subflow-A-instance/subflow-B-instance

                    // If it has one id, that is a top level flow or config node/global
                    // each subsequent id is the instance id of a subflow node
                    //
                    pathParts = o.path.split("/");
                    if (pathParts.length === 1) {
                        // The source node is on a flow or is a global/config - so can use its id to find
                        sourceNode = RED.nodes.node(o.id);
                    } else if (pathParts.length > 1) {
                        // Highlight the subflow instance node.
                        sourceNode = RED.nodes.node(pathParts[1]);
                    }
                    const getNodeLabel = (n) => n.name || (typeof n.label === "function" && n.label())  || (typeof n.label === "string" && n.label) || (n.type + ":" + n.id);
                    pathHierarchy = pathParts.map((id,index) => {
                        if (index === 0) {
                            if (id === "global") {
                                return { id: sourceNode.id, label: getNodeLabel(sourceNode) }
                            } 
                            return { id: id, label: RED.nodes.workspace(id).label } //flow id + name
                        } else {
                            const instanceNode = RED.nodes.node(id)
                            const pathLabel = (instanceNode.name || RED.nodes.subflow(instanceNode.type.substring(8)).name)
                            return { id: id, label: pathLabel }
                        }
                    })
                    if (pathParts.length === 1 && pathParts[0] !== "global") {
                        pathHierarchy.push({ id: o.id, label: getNodeLabel(sourceNode) })
                    }
                    if (o._alias) {
                        let aliasNode = RED.nodes.node(o._alias)
                        if (aliasNode) {
                            pathHierarchy.push({ id: o._alias, label: getNodeLabel(aliasNode) })
                        }
                    }
                } else {
                    // This is probably redundant...
                    sourceNode = RED.nodes.node(o.id) || RED.nodes.node(o.z);
                }
                if (sourceNode) {
                    var sourceFlow = RED.nodes.workspace(sourceNode.z)
                    o._source = {
                        id:sourceNode.id,
                        z:sourceNode.z,
                        name:sourceNode.name,
                        type:sourceNode.type,
                        // _alias identifies the actual logging node. This is
                        // not necessarily the same as sourceNode, which will be
                        // the top-level subflow instance node.
                        // This means the node's name is displayed in the sidebar.
                        _alias:o._alias,
                        flowName: sourceFlow?(sourceFlow.label||sourceNode.z):sourceNode.z,
                        path: pathParts,
                        pathHierarchy: pathHierarchy
                    };
                }
                RED.debug.handleDebugMessage(o);
                if (subWindow) {
                    try {
                        subWindow.postMessage({event:"message",msg:o},"*");
                    } catch(err) {
                        console.log(err);
                    }
                }
            };
            RED.comms.subscribe("debug",this.handleDebugMessage);

            this.clearMessageList = function() {
                RED.debug.clearMessageList(true);
                if (subWindow) {
                    try {
                        subWindow.postMessage({event:"projectChange"},"*");
                    } catch(err) {
                        console.log(err);
                    }
                }
            };
            RED.events.on("project:change", this.clearMessageList);
            RED.actions.add("core:clear-debug-messages", function() { RED.debug.clearMessageList(true) });
            RED.actions.add("core:clear-filtered-debug-messages", function() { RED.debug.clearMessageList(true, true) });

            RED.actions.add("core:activate-selected-debug-nodes", function() { setDebugNodeState(getSelectedDebugNodes(true), true); });
            RED.actions.add("core:activate-all-debug-nodes", function() { setDebugNodeState(getMatchingDebugNodes(true, true),true); });
            RED.actions.add("core:activate-all-flow-debug-nodes", function() { setDebugNodeState(getMatchingDebugNodes(true, false),true); });

            RED.actions.add("core:deactivate-selected-debug-nodes", function() { setDebugNodeState(getSelectedDebugNodes(false), false); });
            RED.actions.add("core:deactivate-all-debug-nodes", function() { setDebugNodeState(getMatchingDebugNodes(false, true),false); });
            RED.actions.add("core:deactivate-all-flow-debug-nodes", function() { setDebugNodeState(getMatchingDebugNodes(false, false),false); });

            function getSelectedDebugNodes(state) {
                var nodes = [];
                var selection = RED.view.selection();
                if (selection.nodes) {
                    selection.nodes.forEach(function(n) {
                        if (RED.nodes.subflow(n.z)) {
                            return;
                        }
                        if (n.type === 'debug' && n.active !== state) {
                            nodes.push(n);
                        } else if (n.type === 'group') {
                            nodes = nodes.concat( RED.group.getNodes(n,true).filter(function(n) {
                                return n.type === 'debug' && n.active !== state
                            }));
                        }
                    });
                }
                return nodes;

            }
            function getMatchingDebugNodes(state,globally) {
                var nodes = [];
                var filter = {type:"debug"};
                if (!globally) {
                    filter.z = RED.workspaces.active();
                }
                var candidateNodes = RED.nodes.filterNodes(filter);
                nodes = candidateNodes.filter(function(n) {
                    return n.active !== state && !RED.nodes.subflow(n.z)
                })
                return nodes;
            }

            function setDebugNodeState(nodes,state) {
                var historyEvents = [];
                if (nodes.length > 0) {
                    activateAjaxCall(nodes,false, function(resp, textStatus, xhr) {
                        nodes.forEach(function(n) {
                            historyEvents.push({
                                t: "edit",
                                node: n,
                                changed: n.changed,
                                changes: {
                                    active: n.active
                                }
                            });
                            n.active = state;
                            n.changed = true;
                            n.dirty = true;
                        })
                        RED.history.push({
                            t: "multi",
                            events: historyEvents,
                            dirty: RED.nodes.dirty(),
                            callback: function() {
                                activateAjaxCall(nodes,nodes[0].active);
                            }
                        });
                        RED.nodes.dirty(true);
                        RED.view.redraw();
                    });
                }
            }

            $("#red-ui-sidebar-debug-open").on("click", function(e) {
                e.preventDefault();
                subWindow = window.open(document.location.toString().replace(/[?#].*$/,"")+"debug/view/view.html"+document.location.search,"nodeREDDebugView","menubar=no,location=no,toolbar=no,chrome,height=500,width=600");
                subWindow.onload = function() {
                    subWindow.postMessage({event:"workspaceChange",activeWorkspace:RED.workspaces.active()},"*");
                };
            });
            RED.popover.tooltip($("#red-ui-sidebar-debug-open"),RED._('node-red:debug.sidebar.openWindow'));



            $(window).on('beforeunload',function() {
                if (subWindow) {
                    try {
                        subWindow.close();
                    } catch(err) {
                        console.log(err);
                    }
                }
            });

            this.handleWindowMessage = function(evt) {
                var msg = evt.data;
                if (msg.event === "mouseEnter") {
                    options.messageMouseEnter(msg.id);
                } else if (msg.event === "mouseLeave") {
                    options.messageMouseLeave(msg.id);
                } else if (msg.event === "mouseClick") {
                    options.messageSourceClick(msg.id,msg._alias,msg.path);
                } else if (msg.event === "clear") {
                    options.clear();
                }
            };
            window.addEventListener('message',this.handleWindowMessage);
        },
        onpaletteremove: function() {
            RED.comms.unsubscribe("debug",this.handleDebugMessage);
            RED.sidebar.removeTab("debug");
            RED.events.off("workspace:change", this.refreshMessageList);
            window.removeEventListener("message",this.handleWindowMessage);
            RED.actions.remove("core:show-debug-tab");
            RED.actions.remove("core:clear-debug-messages");
            delete RED._debug;
        },
        oneditprepare: function() {
            var autoType = {
                value: "auto",
                label: RED._("node-red:debug.autostatus"),
                hasValue: false
            };

            var counter = {
                value: "counter",
                label: RED._("node-red:debug.messageCount"),
                hasValue: false
            };

            $("#node-input-typed-status").typedInput({
                default: "auto",
                types:[autoType, "msg", "jsonata", counter],
                typeField: $("#node-input-statusType")
            });
            var that = this;
            var none = {
                value: "none",
                label: RED._("node-red:debug.none"),
                hasValue: false
            };
            if (this.tosidebar === undefined) {
                this.tosidebar = true;
                $("#node-input-tosidebar").prop('checked', true);
            }
            if (this.statusVal === undefined) {
                this.statusVal = (this.complete === "false") ? "payload" : ((this.complete === "true") ? "payload" : this.complete+"");
                $("#node-input-typed-status").typedInput('value',this.statusVal || "");
            }
            if (this.statusType === undefined) {
                this.statusType = "auto";
                $("#node-input-typed-status").typedInput('type',this.statusType || "auto");
            }
            if (typeof this.console === "string") {
                this.console = (this.console == 'true');
                $("#node-input-console").prop('checked', this.console);
                $("#node-input-tosidebar").prop('checked', true);
            }
            var fullType = {
                value: "full",
                label: RED._("node-red:debug.msgobj"),
                hasValue: false
            };

            $("#node-input-typed-complete").typedInput({
                default: "msg",
                types:['msg', fullType, "jsonata"],
                typeField: $("#node-input-targetType")
            });
            if (this.targetType === "jsonata") {
                var property = this.complete || "";
                $("#node-input-typed-complete").typedInput('type','jsonata');
                $("#node-input-typed-complete").typedInput('value',property);
            } else if ((this.targetType === "full") || this.complete === "true" || this.complete === true) {
                // show complete message object
                $("#node-input-typed-complete").typedInput('type','full');
            } else {
                var property = (!this.complete||(this.complete === "false")) ? "payload" : this.complete+"";
                $("#node-input-typed-complete").typedInput('type','msg');
                $("#node-input-typed-complete").typedInput('value',property);
            }
            $("#node-input-typed-complete").on('change',function() {
                if ($("#node-input-typed-complete").typedInput('type') === 'msg' &&
                    $("#node-input-typed-complete").typedInput('value') === ''
                ) {
                    $("#node-input-typed-complete").typedInput('value','payload');
                }
            });

            $("#node-input-tostatus").on('change',function() {
                if ($(this).is(":checked")) {
                    if (that.statusType === "counter") {
                        that.statusVal = "";
                    }
                    else if (!that.hasOwnProperty("statusVal") || that.statusVal === "") {
                        var type = $("#node-input-typed-complete").typedInput('type');
                        var comp = "payload";
                        if (type !== 'full') {
                            comp = $("#node-input-typed-complete").typedInput('value');
                        }
                        that.statusType = "auto";
                        that.statusVal = comp;
                    }
                    $("#node-input-typed-status").typedInput('type',that.statusType);
                    $("#node-input-typed-status").typedInput('value',that.statusVal);
                    $("#node-tostatus-line").show();
                }
                else {
                    $("#node-tostatus-line").hide();
                    that.statusType = "auto";
                    that.statusVal = "";
                    $("#node-input-typed-status").typedInput('type',that.statusType);
                    $("#node-input-typed-status").typedInput('value',that.statusVal);
                }
            });
        },
        oneditsave: function() {
            var type = $("#node-input-typed-complete").typedInput('type');
            if (type === 'full') {
                $("#node-input-complete").val("true");
            } else {
                $("#node-input-complete").val($("#node-input-typed-complete").typedInput('value'));
            }
            $("#node-input-statusVal").val($("#node-input-typed-status").typedInput('value'));
        },
        onadd: function() {
            if (this.name === '_DEFAULT_') {
                this.name = ''
                RED.actions.invoke("core:generate-node-names", this, {generateHistory: false})
            }
        }
    });
})();
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="debug">
    <p>Displays selected message properties in the debug sidebar tab and optionally the runtime log. By default it displays <code>msg.payload</code>, but can be configured to display any property, the full message or the result of a JSONata expression.</p>
    <h3>Details</h3>
    <p>The debug sidebar provides a structured view of the messages it is sent, making it easier to understand their structure.</p>
    <p>JavaScript objects and arrays can be collapsed and expanded as required. Buffer objects can be displayed as raw data or as a string if possible.</p>
    <p>Alongside each message, the debug sidebar includes information about the time the message was received, the node that sent it and the type of the message.
       Clicking on the source node id will reveal that node within the workspace.</p>
    <p>The button on the node can be used to enable or disable its output. It is recommended to disable or remove any Debug nodes that are not being used.</p>
    <p>The node can also be configured to send all messages to the runtime log, or to send short (32 characters) to the status text under the debug node.</p>
</script>

<!-- --- [red-module:node-red/complete] --- -->
<script type="text/html" data-template-name="complete">
    <div class="form-row node-input-target-row">
        <button id="node-input-complete-target-select" class="red-ui-button" data-i18n="common.label.selectNodes"></button>
    </div>
    <div class="form-row node-input-target-row node-input-target-list-row" style="position: relative; min-height: 100px">
        <div style="position: absolute; top: -30px; right: 0;"><input type="text" id="node-input-complete-target-filter"></div>
        <div id="node-input-complete-target-container-div"></div>
    </div>

    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>
<script type="text/javascript">
    RED.nodes.registerType('complete',{
        category: 'common',
        color:"#c0edc0",
        defaults: {
            name: {value:""},
            scope: {value:[], type:"*[]"},
            uncaught: {value:false}
        },
        inputs:0,
        outputs:1,
        icon: "alert.svg",
        label: function() {
            if (this.name) {
                return this.name;
            }
            return this._("complete.completeNodes",{number:this.scope.length});
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var node = this;
            var scope = node.scope || [];

            this._resize = function() {
                var rows = $("#dialog-form>div:not(.node-input-target-list-row)");
                var height = $("#dialog-form").height();
                for (var i=0;i<rows.length;i++) {
                    height -= $(rows[i]).outerHeight(true);
                }
                var editorRow = $("#dialog-form>div.node-input-target-list-row");
                editorRow.css("height",height+"px");
            };
            var search = $("#node-input-complete-target-filter").searchBox({
                style: "compact",
                delay: 300,
                change: function() {
                    var val = $(this).val().trim().toLowerCase();
                    if (val === "") {
                        dirList.treeList("filter", null);
                        search.searchBox("count","");
                    } else {
                        var count = dirList.treeList("filter", function(item) {
                            return item.label.toLowerCase().indexOf(val) > -1 || item.node.type.toLowerCase().indexOf(val) > -1
                        });
                        search.searchBox("count",count+" / "+candidateNodes.length);
                    }
                }
            });

            var dirList = $("#node-input-complete-target-container-div").css({width: "100%", height: "100%"})
                .treeList({multi:true}).on("treelistitemmouseover", function(e, item) {
                    item.node.highlighted = true;
                    item.node.dirty = true;
                    RED.view.redraw();
                }).on("treelistitemmouseout", function(e, item) {
                    item.node.highlighted = false;
                    item.node.dirty = true;
                    RED.view.redraw();
                })
            var candidateNodes = RED.nodes.filterNodes({z:node.z});
            var allChecked = true;
            var items = [];
            var nodeItemMap = {};

            candidateNodes.forEach(function(n) {
                if (n.id === node.id) {
                    return;
                }
                var isChecked = scope.indexOf(n.id) !== -1;

                allChecked = allChecked && isChecked;

                var nodeDef = RED.nodes.getType(n.type);
                var label;
                var sublabel;
                if (nodeDef) {
                    var l = nodeDef.label;
                    label = (typeof l === "function" ? l.call(n) : l)||"";
                    sublabel = n.type;
                    if (sublabel.indexOf("subflow:") === 0) {
                        var subflowId = sublabel.substring(8);
                        var subflow = RED.nodes.subflow(subflowId);
                        sublabel = "subflow : "+subflow.name;
                    }
                }
                if (!nodeDef || !label) {
                    label = n.type;
                }
                nodeItemMap[n.id] = {
                    node: n,
                    label: label,
                    sublabel: sublabel,
                    selected: isChecked,
                    checkbox: true
                };
                items.push(nodeItemMap[n.id]);
            });
            dirList.treeList('data',items);

            $("#node-input-complete-target-select").on("click", function(e) {
                e.preventDefault();
                var preselected = dirList.treeList('selected').map(function(n) {return n.node.id});
                RED.tray.hide();
                RED.view.selectNodes({
                    selected: preselected,
                    onselect: function(selection) {
                        RED.tray.show();
                        var newlySelected = {};
                        selection.forEach(function(n) {
                            newlySelected[n.id] = true;
                            if (nodeItemMap[n.id]) {
                                nodeItemMap[n.id].treeList.select(true);
                            }
                        })
                        preselected.forEach(function(id) {
                            if (!newlySelected[id]) {
                                nodeItemMap[id].treeList.select(false);
                            }
                        })
                    },
                    oncancel: function() {
                        RED.tray.show();
                    },
                    filter: function(n) {
                        return n.id !== node.id;
                    }
                });
            })

        },
        oneditsave: function() {
            this.scope = $("#node-input-complete-target-container-div").treeList('selected').map(function(i) { return i.node.id})
        },
        oneditresize: function(size) {
            this._resize();
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="complete">
    <p>Trigger a flow when another node completes its handling of a message.</p>
    <h3>Details</h3>
    <p>If a node tells the runtime when it has finished handling a message,
        this node can be used to trigger a second flow.</p>
    <p>For example, this can be used alongside a node with no output port,
        such as the Email sending node, to continue the flow.</p>
    <p>This node must be configured to handle the event for selected nodes in the
        flow. Unlike the Catch node, it does not provide a 'handle all' mode automatically
        applies to all nodes in the flow.</p>
    <p>Not all nodes will trigger this event - it will depend on whether they
        have been implemented to support this feature as introduced in Node-RED 1.0.</p>
</script>

<!-- --- [red-module:node-red/catch] --- -->

<script type="text/html" data-template-name="catch">
    <div class="form-row">
        <label style="width: auto" for="node-input-scope" data-i18n="catch.label.source"></label>
        <select id="node-input-scope-select">
            <option value="all" data-i18n="catch.scope.all"></option>
            <option value="target" data-i18n="catch.scope.selected"></options>
        </select>
    </div>
    <div class="form-row node-input-uncaught-row">
        <input type="checkbox" id="node-input-uncaught" style="display: inline-block; width: auto; vertical-align: top; margin-left: 30px; margin-right: 5px;">
        <label for="node-input-uncaught" style="width: auto" data-i18n="catch.label.uncaught"></label>
    </div>
    <div class="form-row node-input-target-row">
        <button id="node-input-catch-target-select" class="red-ui-button" data-i18n="common.label.selectNodes"></button>
    </div>
    <div class="form-row node-input-target-row node-input-target-list-row" style="position: relative; min-height: 100px">
        <div style="position: absolute; top: -30px; right: 0;"><input type="text" id="node-input-catch-target-filter"></div>
        <div id="node-input-catch-target-container-div"></div>
    </div>

    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>
<script type="text/javascript">
    RED.nodes.registerType('catch',{
        category: 'common',
        color:"#e49191",
        defaults: {
            name: {value:""},
            scope: {value:null, type:"*[]"},
            uncaught: {value:false}
        },
        inputs:0,
        outputs:1,
        icon: "alert.svg",
        label: function() {
            if (this.name) {
                return this.name;
            }
            if (this.scope) {
                return this._("catch.catchNodes",{number:this.scope.length});
            }
            return this.uncaught?this._("catch.catchUncaught"):this._("catch.catch")
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var node = this;
            var scope = node.scope || [];

            this._resize = function() {
                var rows = $("#dialog-form>div:not(.node-input-target-list-row)");
                var height = $("#dialog-form").height();
                for (var i=0;i<rows.length;i++) {
                    height -= $(rows[i]).outerHeight(true);
                }
                var editorRow = $("#dialog-form>div.node-input-target-list-row");
                editorRow.css("height",height+"px");
            };
            var search = $("#node-input-catch-target-filter").searchBox({
                style: "compact",
                delay: 300,
                change: function() {
                    var val = $(this).val().trim().toLowerCase();
                    if (val === "") {
                        dirList.treeList("filter", null);
                        search.searchBox("count","");
                    } else {
                        var count = dirList.treeList("filter", function(item) {
                            return item.label.toLowerCase().indexOf(val) > -1 || item.node.type.toLowerCase().indexOf(val) > -1
                        });
                        search.searchBox("count",count+" / "+candidateNodes.length);
                    }
                }
            });
            var dirList = $("#node-input-catch-target-container-div").css({width: "100%", height: "100%"})
                .treeList({multi:true}).on("treelistitemmouseover", function(e, item) {
                    item.node.highlighted = true;
                    item.node.dirty = true;
                    RED.view.redraw();
                }).on("treelistitemmouseout", function(e, item) {
                    item.node.highlighted = false;
                    item.node.dirty = true;
                    RED.view.redraw();
                })
            var candidateNodes = RED.nodes.filterNodes({z:node.z});
            var allChecked = true;
            var items = [];
            var nodeItemMap = {};

            candidateNodes.forEach(function(n) {
                if (n.id === node.id) {
                    return;
                }
                var isChecked = scope.indexOf(n.id) !== -1;

                allChecked = allChecked && isChecked;

                var nodeDef = RED.nodes.getType(n.type);
                var label;
                var sublabel;
                if (nodeDef) {
                    var l = nodeDef.label;
                    label = (typeof l === "function" ? l.call(n) : l)||"";
                    sublabel = n.type;
                    if (sublabel.indexOf("subflow:") === 0) {
                        var subflowId = sublabel.substring(8);
                        var subflow = RED.nodes.subflow(subflowId);
                        sublabel = "subflow : "+subflow.name;
                    }
                }
                if (!nodeDef || !label) {
                    label = n.type;
                }
                nodeItemMap[n.id] = {
                    node: n,
                    label: label,
                    sublabel: sublabel,
                    selected: isChecked,
                    checkbox: true
                };
                items.push(nodeItemMap[n.id]);
            });
            dirList.treeList('data',items);

            $("#node-input-catch-target-select").on("click", function(e) {
                e.preventDefault();
                var preselected = dirList.treeList('selected').map(function(n) {return n.node.id});
                RED.tray.hide();
                RED.view.selectNodes({
                    selected: preselected,
                    onselect: function(selection) {
                        RED.tray.show();
                        var newlySelected = {};
                        selection.forEach(function(n) {
                            newlySelected[n.id] = true;
                            if (nodeItemMap[n.id]) {
                                nodeItemMap[n.id].treeList.select(true);
                            }
                        })
                        preselected.forEach(function(id) {
                            if (!newlySelected[id]) {
                                nodeItemMap[id].treeList.select(false);
                            }
                        })
                    },
                    oncancel: function() {
                        RED.tray.show();
                    },
                    filter: function(n) {
                        return n.id !== node.id;
                    }
                });
            })

            $("#node-input-scope-select").on("change", function(e) {
                var scope = $(this).val();
                if (scope === "target") {
                    $(".node-input-target-row").show();
                    $(".node-input-uncaught-row").hide();
                } else {
                    $(".node-input-target-row").hide();
                    $(".node-input-uncaught-row").show();
                }
                node._resize();
            });
            if (this.scope === null) {
                $("#node-input-scope-select").val("all");
            } else {
                $("#node-input-scope-select").val("target");
            }
            $("#node-input-scope-select").trigger("change");
        },
        oneditsave: function() {
            var scope = $("#node-input-scope-select").val();
            if (scope === 'all') {
                this.scope = null;
            } else {
                $("#node-input-uncaught").prop("checked",false);
                this.scope = $("#node-input-catch-target-container-div").treeList('selected').map(function(i) { return i.node.id})
            }
        },
        oneditresize: function(size) {
            this._resize();
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="catch">
    <p>Catch errors thrown by nodes on the same tab.</p>
    <h3>Outputs</h3>
    <dl class="message-properties">
        <dt>error.message <span class="property-type">string</span></dt>
        <dd>the error message.</dd>
        <dt>error.source.id <span class="property-type">string</span></dt>
        <dd>the id of the node that threw the error.</dd>
        <dt>error.source.type <span class="property-type">string</span></dt>
        <dd>the type of the node that threw the error.</dd>
        <dt>error.source.name <span class="property-type">string</span></dt>
        <dd>the name, if set, of the node that threw the error.</dd>
    </dl>
    <h3>Details</h3>
    <p>If a node throws an error whilst handling a message, the flow will typically
       halt. This node can be used to catch those errors and handle them with a
       dedicated flow.</p>
    <p>By default, the node will catch errors thrown by any node on the same tab. Alternatively
    it can be targetted at specific nodes, or configured to only catch errors that
    have not already been caught by a 'targeted' catch node.</p>
    <p>When an error is thrown, all matching catch nodes will receive the message.</p>
    <p>If an error is thrown within a subflow, the error will get handled by any
       catch nodes within the subflow. If none exists, the error will be propagated
       up to the tab the subflow instance is on.</p>
   <p>If the message already has a <code>error</code> property, it is copied to <code>_error</code>.</p>
</script>

<!-- --- [red-module:node-red/status] --- -->

<script type="text/html" data-template-name="status">
    <div class="form-row">
        <label style="width: auto" for="node-input-scope" data-i18n="status.label.source"></label>
        <select id="node-input-scope-select">
            <option value="all" data-i18n="status.scope.all"></option>
            <option value="target" data-i18n="status.scope.selected"></options>
        </select>
    </div>
    <div class="form-row node-input-target-row">
        <button id="node-input-status-target-select" class="red-ui-button" data-i18n="common.label.selectNodes"></button>
    </div>
    <div class="form-row node-input-target-row node-input-target-list-row" style="position: relative; min-height: 100px">
        <div style="position: absolute; top: -30px; right: 0;"><input type="text" id="node-input-status-target-filter"></div>
        <div id="node-input-status-target-container-div"></div>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('status',{
        category: 'common',
        color:"#94c1d0",
        defaults: {
            name: {value:""},
            scope: {value:null, type:"*[]"}
        },
        inputs:0,
        outputs:1,
        icon: "status.svg",
        label: function() {
            return this.name||(this.scope?this._("status.statusNodes",{number:this.scope.length}):this._("status.status"));
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var node = this;
            var scope = node.scope || [];
            this._resize = function() {
                var rows = $("#dialog-form>div:not(.node-input-target-list-row)");
                var height = $("#dialog-form").height();
                for (var i=0;i<rows.length;i++) {
                    height -= $(rows[i]).outerHeight(true);
                }
                var editorRow = $("#dialog-form>div.node-input-target-list-row");
                editorRow.css("height",height+"px");
            };
            var search = $("#node-input-status-target-filter").searchBox({
                style: "compact",
                delay: 300,
                change: function() {
                    var val = $(this).val().trim().toLowerCase();
                    if (val === "") {
                        dirList.treeList("filter", null);
                        search.searchBox("count","");
                    } else {
                        var count = dirList.treeList("filter", function(item) {
                            return item.label.toLowerCase().indexOf(val) > -1 || item.node.type.toLowerCase().indexOf(val) > -1
                        });
                        search.searchBox("count",count+" / "+candidateNodes.length);
                    }
                }
            });

            var dirList = $("#node-input-status-target-container-div").css({width: "100%", height: "100%"})
                .treeList({multi:true}).on("treelistitemmouseover", function(e, item) {
                    item.node.highlighted = true;
                    item.node.dirty = true;
                    RED.view.redraw();
                }).on("treelistitemmouseout", function(e, item) {
                    item.node.highlighted = false;
                    item.node.dirty = true;
                    RED.view.redraw();
                })
            var candidateNodes = RED.nodes.filterNodes({z:node.z});
            var allChecked = true;
            var items = [];
            var nodeItemMap = {};

            candidateNodes.forEach(function(n) {
                if (n.id === node.id) {
                    return;
                }
                var isChecked = scope.indexOf(n.id) !== -1;

                allChecked = allChecked && isChecked;

                var nodeDef = RED.nodes.getType(n.type);
                var label;
                var sublabel;
                if (nodeDef) {
                    var l = nodeDef.label;
                    label = (typeof l === "function" ? l.call(n) : l)||"";
                    sublabel = n.type;
                    if (sublabel.indexOf("subflow:") === 0) {
                        var subflowId = sublabel.substring(8);
                        var subflow = RED.nodes.subflow(subflowId);
                        sublabel = "subflow : "+subflow.name;
                    }
                }
                if (!nodeDef || !label) {
                    label = n.type;
                }
                nodeItemMap[n.id] = {
                    node: n,
                    label: label,
                    sublabel: sublabel,
                    selected: isChecked,
                    checkbox: true
                };
                items.push(nodeItemMap[n.id]);
            });
            dirList.treeList('data',items);

            $("#node-input-status-target-select").on("click", function(e) {
                e.preventDefault();
                var preselected = dirList.treeList('selected').map(function(n) {return n.node.id});
                RED.tray.hide();
                RED.view.selectNodes({
                    selected: preselected,
                    onselect: function(selection) {
                        RED.tray.show();
                        var newlySelected = {};
                        selection.forEach(function(n) {
                            newlySelected[n.id] = true;
                            if (nodeItemMap[n.id]) {
                                nodeItemMap[n.id].treeList.select(true);
                            }
                        })
                        preselected.forEach(function(id) {
                            if (!newlySelected[id]) {
                                nodeItemMap[id].treeList.select(false);
                            }
                        })
                    },
                    oncancel: function() {
                        RED.tray.show();
                    },
                    filter: function(n) {
                        return n.id !== node.id;
                    }
                });
            })

            $("#node-input-scope-select").on("change", function(e) {
                var scope = $(this).val();
                if (scope === "target") {
                    $(".node-input-target-row").show();
                } else {
                    $(".node-input-target-row").hide();
                }
                node._resize();
            });
            if (this.scope === null) {
                $("#node-input-scope-select").val("all");
            } else {
                $("#node-input-scope-select").val("target");
            }
            $("#node-input-scope-select").trigger("change");
        },
        oneditsave: function() {
            var scope = $("#node-input-scope-select").val();
            if (scope === 'all') {
                this.scope = null;
            } else {
                this.scope = $("#node-input-status-target-container-div").treeList('selected').map(function(i) { return i.node.id})
            }
        },
        oneditresize: function(size) {
            this._resize();
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="status">
    <p>Report status messages from other nodes on the same tab.</p>
    <h3>Outputs</h3>
    <dl class="message-properties">
        <dt>status.text <span class="property-type">string</span></dt>
        <dd>the status text.</dd>
        <dt>status.source.type <span class="property-type">string</span></dt>
        <dd>the type of the node that reported status.</dd>
        <dt>status.source.id <span class="property-type">string</span></dt>
        <dd>the id of the node that reported status.</dd>
        <dt>status.source.name <span class="property-type">string</span></dt>
        <dd>the name, if set, of the node that reported status.</dd>
    </dl>
    <h3>Details</h3>
   <p>This node does not produce a <code>payload</code>.</p>
   <p>By default the node reports status for all nodes on the same workspace tab.
   It can be configured to selectively report status for individual nodes.</p>
</script>

<!-- --- [red-module:node-red/link] --- -->

<script type="text/html" data-template-name="link in">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div style="position:relative; height: 30px; text-align: right;"><div style="display:inline-block"><input type="text" id="node-input-link-target-filter"></div></div>
    <div class="form-row node-input-link-row"></div>
</script>
<script type="text/html" data-template-name="link out">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-row">
        <label for="node-input-mode"><span data-i18n="link.outMode"></span></label>
        <select id="node-input-mode" style="width: 70%">
            <option value="link" selected data-i18n="link.sendToAll"></option>
            <option value="return" data-i18n="link.returnToCaller"></option>
        </select>
    </div>
    <div class="node-input-link-rows" style="position:relative; height: 30px; text-align: right;"><div style="display:inline-block"><input type="text" id="node-input-link-target-filter"></div></div>
    <div class="form-row node-input-link-row node-input-link-rows"></div>
</script>

<script type="text/html" data-template-name="link call">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-row">
        <label for="node-input-timeout"><span data-i18n="exec.label.timeout"></span></label>
        <input type="text" id="node-input-timeout" placeholder="30" style="width: 70px; margin-right: 5px;"><span data-i18n="inject.seconds"></span>
    </div>
    <div class="form-row">
        <label for="node-input-linkType" data-i18n="link.linkCallType"></label>
        <select id="node-input-linkType" style="width: 70%">
            <option value="static" data-i18n="link.staticLinkCall"></option>
            <option value="dynamic" data-i18n="link.dynamicLinkCall"></option>
        </select>
    </div>
    <div class="link-call-target-tree" style="position:relative; height: 30px; text-align: right;">
        <div style="display:inline-block"><input type="text" id="node-input-link-target-filter"></div>
    </div>
    <div class="form-row node-input-link-row link-call-target-tree"></div>
</script>

<script type="text/javascript">
(function() {

    let treeList;

    function onEditPrepare(node,targetType) {
        if (!node.links) {
            node.links = [];
        }
        node.oldLinks = [];

        const activeSubflow = RED.nodes.subflow(node.z);

        treeList = $("<div>")
            .css({width: "100%", height: "100%"})
            .appendTo(".node-input-link-row")
            .treeList({autoSelect:false})
            .on('treelistitemmouseover',function(e,item) {
                if (item.node) {
                    item.node.highlighted = true;
                    item.node.dirty = true;
                    RED.view.redraw();
                }
            })
            .on('treelistitemmouseout',function(e,item) {
                if (item.node) {
                    item.node.highlighted = false;
                    item.node.dirty = true;
                    RED.view.redraw();
                }
            });
        const candidateNodes = RED.nodes.filterNodes({type:targetType});
        let candidateNodesCount = 0;

        const search = $("#node-input-link-target-filter").searchBox({
            style: "compact",
            delay: 300,
            change: function() {
                var val = $(this).val().trim().toLowerCase();
                if (val === "") {
                    treeList.treeList("filter", null);
                    search.searchBox("count","");
                } else {
                    const count = treeList.treeList("filter", function(item) {
                        return item.label.toLowerCase().indexOf(val) > -1 || (item.node && item.node.type.toLowerCase().indexOf(val) > -1)
                    });
                    search.searchBox("count",count+" / "+candidateNodesCount);
                }
            }
        });

        const flows = [];
        const flowMap = {};

        if (activeSubflow) {
            flowMap[activeSubflow.id] = {
                id: activeSubflow.id,
                class: 'red-ui-palette-header',
                label: "Subflow : " + (activeSubflow.name || activeSubflow.id),
                expanded: true,
                children: []
            };
            flows.push(flowMap[activeSubflow.id])
        }
        if (!activeSubflow || node.type === "link call") {
            // Only "Link Call" can look outside of its own subflow
            // Link In and Link Out nodes outside of a subflow should be ignored
            RED.nodes.eachWorkspace(function (ws) {
                flowMap[ws.id] = {
                    id: ws.id,
                    class: 'red-ui-palette-header',
                    label: (ws.label || ws.id) + (node.z === ws.id ? " *" : ""),
                    expanded: true,
                    children: []
                }
                flows.push(flowMap[ws.id])
            })
        }

        candidateNodes.forEach(function (n) {
            if (flowMap[n.z]) {
                if (targetType === "link out" && n.mode === 'return') {
                    // Link In nodes looking for Link Out nodes should not
                    // include return-mode nodes.
                    return;
                }
                const isChecked = (node.links.indexOf(n.id) !== -1) || (n.links || []).indexOf(node.id) !== -1;
                if (isChecked) {
                    node.oldLinks.push(n.id);
                }
                flowMap[n.z].children.push({
                    id: n.id,
                    node: n,
                    label: n.name || n.id,
                    selected: isChecked,
                    checkbox: node.type !== "link call",
                    radio: node.type === "link call"
                })
                candidateNodesCount++;
            }
        });
        const flowsFiltered = flows.filter(function(f) { return f.children.length > 0 })
        treeList.treeList('data',flowsFiltered);
        setTimeout(function() {
            treeList.treeList('show',node.z);
        },100);
    }

    function resizeNodeList() {
        var rows = $("#dialog-form>div:not(.node-input-link-row)");
        var height = $("#dialog-form").height();
        for (var i=0;i<rows.length;i++) {
            height -= $(rows[i]).outerHeight(true);
        }
        var editorRow = $("#dialog-form>div.node-input-link-row");
        height -= (parseInt(editorRow.css("marginTop"))+parseInt(editorRow.css("marginBottom")));
        $(".node-input-link-row").css("height",height+"px");
    }

    function onEditSave(node) {
        var flows = treeList.treeList('data');
        node.links = [];
        if (node.type !== "link out" || $("#node-input-mode").val() === 'link') {
            flows.forEach(function(f) {
                f.children.forEach(function(n) {
                    if (n.selected) {
                        node.links.push(n.id);
                    }
                })
            })
        }
        node.oldLinks.sort();
        node.links.sort();

        if (node.type === "link call") {
            return
        }

        var nodeMap = {};
        var length = Math.max(node.oldLinks.length,node.links.length);
        for (var i=0;i<length;i++) {
            if (i<node.oldLinks.length) {
                nodeMap[node.oldLinks[i]] = nodeMap[node.oldLinks[i]]||{};
                nodeMap[node.oldLinks[i]].old = true;
            }
            if (i<node.links.length) {
                nodeMap[node.links[i]] = nodeMap[node.links[i]]||{};
                nodeMap[node.links[i]].new = true;
            }
        }
        var n;
        for (var id in nodeMap) {
            if (nodeMap.hasOwnProperty(id)) {
                n = RED.nodes.node(id);
                if (n) {
                    if (nodeMap[id].old && !nodeMap[id].new) {
                        // Removed id
                        i = n.links.indexOf(node.id);
                        if (i > -1) {
                            n.links.splice(i,1);
                        }
                    } else if (!nodeMap[id].old && nodeMap[id].new) {
                        // Added id
                        i = n.links.indexOf(id);
                        if (i === -1) {
                            n.links.push(node.id);
                        }
                    }
                }
            }
        }
    }

    function onAdd() {
        if (this.name === '_DEFAULT_') {
            this.name = ''
            RED.actions.invoke("core:generate-node-names", this, {generateHistory: false})
        }
        for (var i=0;i<this.links.length;i++) {
            var n = RED.nodes.node(this.links[i]);
            if (n && n.links.indexOf(this.id) === -1) {
                n.links.push(this.id);
            }
        }
    }

    RED.nodes.registerType('link in',{
        category: 'common',
        color:"#ddd",//"#87D8CF",
        defaults: {
            name: { value: "_DEFAULT_" },
            links: { value: [], type:"link out[]" }
        },
        inputs:0,
        outputs:1,
        icon: "link-out.svg",
        outputLabels: function(i) {
            return this.name||this._("link.linkIn");
        },
        showLabel: false,
        label: function() {
            return this.name||this._("link.linkIn");
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            onEditPrepare(this,"link out");
        },
        oneditsave: function() {
            onEditSave(this);
            // In case the name has changed, ensure any link call nodes on this
            // tab are redrawn with the updated name
            var localCallNodes = RED.nodes.filterNodes({z:RED.workspaces.active(), type:"link call"});
            localCallNodes.forEach(function(node) {
                node.dirty = true;
            });
        },
        onadd: onAdd,
        oneditresize: resizeNodeList
    });

    RED.nodes.registerType('link call',{
        category: 'common',
        color:"#ddd",//"#87D8CF",
        defaults: {
            name: { value: "" },
            links: { value: [], type:"link in[]" },
            linkType: { value:"static" },
            timeout: {
                value: "30",
                label: RED._("node-red:link.timeout"),
                validate:RED.validators.number(true)
            }
        },
        inputs: 1,
        outputs: 1,
        icon: "link-call.svg",
        inputLabels: function(i) {
            return this.name||this._("link.linkCall");
        },
        label: function() {
            if (this.name) {
                return this.name;
            }
            if (this.linkType === "dynamic") {
                return this._("link.dynamicLinkLabel");
            } else if (this.links.length > 0) {
                var targetNode = RED.nodes.node(this.links[0]);
                return targetNode && (targetNode.name || this._("link.linkCall"));
            }
            return this._("inject.none");
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            const updateVisibility = function() {
                const static = $('#node-input-linkType').val() !== "dynamic";
                if(static) {
                    $("div.link-call-target-tree").show();
                } else {
                    $("div.link-call-target-tree").hide();
                }
            }
            $("#node-input-linkType").on("change",function(d){
                updateVisibility();
            });
            if (["static","dynamic"].indexOf(this.linkType) < 0) {
                $("#node-input-linkType").val('static');
            }
            updateVisibility();
            onEditPrepare(this,"link in");
        },
        oneditsave: function() {
            onEditSave(this);
        },
        oneditresize: resizeNodeList
    });

    RED.nodes.registerType('link out',{
        category: 'common',
        color:"#ddd",//"#87D8CF",
        defaults: {
            name: { value:"_DEFAULT_" },
            mode: { value: "link" },// link || return
            links: { value: [], type:"link in[]" }
        },
        align:"right",
        inputs:1,
        outputs:0,
        icon: function() {
            if (this.mode === "return") {
                return "link-return.svg";
            } else {
                return "link-out.svg";
            }
        },
        inputLabels: function(i) {
            return this.name||(this.mode === "return" ?this._("link.linkOutReturn"):this._("link.linkOut"));
        },
        showLabel: false,
        label: function() {
            return this.name||(this.mode === "return" ?this._("link.linkOutReturn"):this._("link.linkOut"));
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            onEditPrepare(this,"link in");
            $("#node-input-mode").on("change", function() {
                $(".node-input-link-rows").toggle(this.value === "link")
            })
            if (!this.mode) {
                $("#node-input-mode").val('link').trigger("change");
            }

        },
        oneditsave: function() {
            onEditSave(this);
        },
        onadd: onAdd,
        oneditresize: resizeNodeList
    });



})();
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="link in">
    <p>Create virtual wires between flows.</p>
    <h3>Details</h3>
    <p>The node can be connected to any <code>link out</code> node that exists on any tab.
       Once connected, they behave as if they were wired together.</p>
    <p>The wires between link nodes are only displayed when a link node is selected.
       If there are any wires to other tabs, a virtual node is shown that can be clicked
       on to jump to the appropriate tab.</p>
    <p><b>Note: </b>Links cannot be created going into, or out of, a subflow.</p>
</script>

<script type="text/html" data-help-name="link out">
    <p>Create virtual wires between flows.</p>
    <h3>Details</h3>
    <p>This node can be configured to either send messages to all <code>link in</code>
       nodes it is connected to, or to send a response back to the <code>link call</code>
       node that triggered the flow.</p>
    <p>When in 'send to all' mode, the wires between link nodes are only displayed when
       the node is selected. If there are any wires to other tabs, a virtual node
       is shown that can be clicked on to jump to the appropriate tab.</p>
    <p><b>Note: </b>Links cannot be created going into, or out of, a subflow.</p>
</script>

<script type="text/html" data-help-name="link call">
    <p>Calls a flow that starts with a <code>link in</code> node and passes on the response.</p>
    <h3>Inputs</h3>
    <dl class="message-properties">
      <dt class="optional">target<span class="property-type">string</span></dt>
      <dd>When the option <b>Link Type</b> is set to "Dynamic target", set <code>msg.target</code> to the name of the
          <code>link in</code> node you wish to call.</dd>
    </dl>
    <h3>Details</h3>
    <p>This node can be connected to a <code>link in</code> node that exists on any tab.
       The flow connected to that node must end with a <code>link out</code> node configured
       in 'return' mode.</p>
    <p>When this node receives a message, it is passed to the connected <code>link in</code> node.
       It then waits for a response which it then sends on.</p>
    <p>If no response is received within the configured timeout, default 30 seconds, the node
       will log an error that can be caught using the <code>catch</code> node.</p>
    <p>When the option <b>Link Type</b> is set to "Dynamic target" <code>msg.target</code> can be used to call a
       <code>link in</code> by name or id. 
    <ul>
      <li>If there is a <code>link in</code> nodes with the same id, it will be called</li>
      <li>If there are two or more <code>link in</code> nodes with the same name, an error will be raised</li>
      <li>A <code>link call</code> cannot call a <code>link in</code> node inside a subflow</li>
    </ul>
    </p>
    The flow connected to that node must end with a <code>link out</code> node configured
    in 'return' mode.</p>
</script>

<!-- --- [red-module:node-red/comment] --- -->

<script type="text/html" data-template-name="comment">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-row node-text-editor-row">
        <input type="hidden" id="node-input-info" autofocus="autofocus">
        <div style="height: 250px; min-height:150px;" class="node-text-editor" id="node-input-info-editor"></div>
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('comment',{
        category: 'common',
        color:"#ffffff",
        defaults: {
            name: {value:""},
            info: {value:""}
        },
        inputs:0,
        outputs:0,
        icon: "comment.svg",
        label: function() {
            return this.name||this._("comment.comment");
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        info: function() {
            return this.name?"# "+this.name+"\n\n---\n\n":"";
        },
        oneditprepare: function() {
            var that = this;
            this.editor = RED.editor.createEditor({
                id: 'node-input-info-editor',
                mode: 'ace/mode/markdown',
                value: $("#node-input-info").val()
            });
            this.editor.focus();
        },
        oneditsave: function() {
            $("#node-input-info").val(this.editor.getValue());
            this.editor.destroy();
            delete this.editor;
        },
        oneditcancel: function() {
            this.editor.destroy();
            delete this.editor;
        },
        oneditresize: function(size) {
            var rows = $("#dialog-form>div:not(.node-text-editor-row)");
            var height = $("#dialog-form").height();
            for (var i=0; i<rows.length; i++) {
                height -= $(rows[i]).outerHeight(true);
            }
            var editorRow = $("#dialog-form>div.node-text-editor-row");
            height -= (parseInt(editorRow.css("marginTop"))+parseInt(editorRow.css("marginBottom")));
            $(".node-text-editor").css("height",height+"px");
            this.editor.resize();
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="comment">
    <p>A node you can use to add comments to your flows.</p>
    <h3>Details</h3>
    <p>The edit panel will accept Markdown syntax. The text will be rendered into
    this information side panel.</p>
</script>

<!-- --- [red-module:node-red/unknown] --- -->

<script type="text/html" data-template-name="unknown">
    <div class="form-tips"><span data-i18n="[html]unknown.tip"></span></div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('unknown',{
        category: 'unknown',
        color:"#fff0f0",
        defaults: {
            name: {value:""}
        },
        inputs:1,
        outputs:1,
        icon: "",
        label: function() {
            return "("+this.name+")"||this._("unknown.label.unknown");
        },
        labelStyle: function() {
            return "node_label_unknown";
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="unknown">
    <p>This node is a type unknown to your installation of Node-RED.</p>
    <h3>Details</h3>
    <p><i>If you deploy with the node in this state, its configuration will be preserved, but
    the flow will not start until the missing type is installed.</i></p>
    <p>Use the <code>Menu - Manage Palette</code> option
    to search for and install nodes, or <b>npm install &lt;module&gt;</b> to
    install, any missing modules and restart Node-RED and reimport the nodes.</p>
    <p>It is possible this node type is already installed, but is missing a dependency. Check the Node-RED start-up
    log for any error messages associated with the missing node type.</p>
    <p>Otherwise, you should contact the author of the flow to obtain a copy of the missing node type.</p>
</script>

<!-- --- [red-module:node-red/function] --- -->
<script type="text/html" data-template-name="function">
    <style>
        .func-tabs-row {
            margin-bottom: 0;
        }
        #node-input-libs-container-row .red-ui-editableList-container {
            padding: 0px;
        }
        #node-input-libs-container-row .red-ui-editableList-container li {
            padding:0px;
        }
        #node-input-libs-container-row .red-ui-editableList-item-remove {
            right: 5px;
        }

        #node-input-libs-container-row .red-ui-editableList-header {
            display: flex;
            background: var(--red-ui-tertiary-background);
            padding-right: 75px;
        }
        #node-input-libs-container-row .red-ui-editableList-header > div {
            flex-grow: 1;
        }

        .node-libs-entry {
            display: flex;
        }

        .node-libs-entry .red-ui-typedInput-container {
            border-radius: 0;
            border: none;
        }
        .node-libs-entry .red-ui-typedInput-type-select {
            border-radius: 0 !important;
            height: 34px;
        }
        .node-libs-entry > span > input[type=text] {
            border-radius: 0;
            border-top-color: var(--red-ui-form-background);
            border-bottom-color: var(--red-ui-form-background);
            border-right-color: var(--red-ui-form-background);
        }
        .node-libs-entry > span > input[type=text].input-error {
        }
        .node-libs-entry > span {
            flex-grow: 1;
            width: 50%;
            position: relative;
        }
        .node-libs-entry span .node-input-libs-var, .node-libs-entry span .red-ui-typedInput-container {
            width: 100%;
        }
        .node-libs-entry > span > span > i {
            display: none;
        }
        .node-libs-entry > span > span.input-error > i {
            display: inline;
        }

    </style>
    <input type="hidden" id="node-input-func">
    <input type="hidden" id="node-input-noerr">
    <input type="hidden" id="node-input-finalize">
    <input type="hidden" id="node-input-initialize">

    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <div style="display: inline-block; width: calc(100% - 105px)"><input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name"></div>
    </div>


    <div class="form-row func-tabs-row">
        <ul style="min-width: 600px; margin-bottom: 20px;" id="func-tabs"></ul>
    </div>
    <div id="func-tabs-content" style="min-height: calc(100% - 95px);">

        <div id="func-tab-config" style="display:none">
            <div class="form-row">
                <label for="node-input-outputs"><i class="fa fa-random"></i> <span data-i18n="function.label.outputs"></span></label>
                <input id="node-input-outputs" style="width: 60px;" value="1">
            </div>

            <div class="form-row node-input-libs-row hide" style="margin-bottom: 0px;">
                <label><i class="fa fa-cubes"></i> <span data-i18n="function.label.modules"></span></label>
            </div>
            <div class="form-row node-input-libs-row hide" id="node-input-libs-container-row">
                <ol id="node-input-libs-container"></ol>
            </div>
        </div>

        <div id="func-tab-init" style="display:none">
            <div class="form-row node-text-editor-row" style="position:relative">
                <div style="height: 250px; min-height:150px;" class="node-text-editor" id="node-input-init-editor" ></div>
                <div style="position: absolute; right:0; bottom: calc(100% - 20px); z-Index: 10;"><button id="node-init-expand-js" class="red-ui-button red-ui-button-small"><i class="fa fa-expand"></i></button></div>
            </div>
        </div>

        <div id="func-tab-body" style="display:none">
            <div class="form-row node-text-editor-row" style="position:relative">
                <div style="height: 220px; min-height:150px;" class="node-text-editor" id="node-input-func-editor" ></div>
                <div style="position: absolute; right:0; bottom: calc(100% - 20px); z-Index: 10;"><button id="node-function-expand-js" class="red-ui-button red-ui-button-small"><i class="fa fa-expand"></i></button></div>
            </div>
        </div>

        <div id="func-tab-finalize" style="display:none">
            <div class="form-row node-text-editor-row" style="position:relative">
                <div style="height: 250px; min-height:150px;" class="node-text-editor" id="node-input-finalize-editor" ></div>
                <div style="position: absolute; right:0; bottom: calc(100% - 20px); z-Index: 10;"><button id="node-finalize-expand-js" class="red-ui-button red-ui-button-small"><i class="fa fa-expand"></i></button></div>
            </div>
        </div>

    </div>
</script>

<script type="text/javascript">

(function() {

    var invalidModuleVNames = [
        'console',
        'util',
        'Buffer',
        'Date',
        'RED',
        'node',
        '__node__',
        'context',
        'flow',
        'global',
        'env',
        'setTimeout',
        'clearTimeout',
        'setInterval',
        'clearInterval',
        'promisify'
    ]

    var knownFunctionNodes = {};
    RED.events.on("nodes:add", function(n) {
        if (n.type === "function") {
            knownFunctionNodes[n.id] = n;
        }
    })
    RED.events.on("nodes:remove", function(n) {
        if (n.type === "function") {
            delete knownFunctionNodes[n.id];
        }
    })

    var missingModules = [];
    var missingModuleReasons = {};
    RED.events.on("runtime-state", function(event) {
        if (event.error === "missing-modules") {
            missingModules = event.modules.map(function(m) { missingModuleReasons[m.module] = m.error; return m.module });
            for (var id in knownFunctionNodes) {
                if (knownFunctionNodes.hasOwnProperty(id) && knownFunctionNodes[id].libs && knownFunctionNodes[id].libs.length > 0) {
                    RED.editor.validateNode(knownFunctionNodes[id])
                }
            }
        } else if (!event.text) {
            missingModuleReasons = {};
            missingModules = [];
            for (var id in knownFunctionNodes) {
                if (knownFunctionNodes.hasOwnProperty(id) && knownFunctionNodes[id].libs && knownFunctionNodes[id].libs.length > 0) {
                    RED.editor.validateNode(knownFunctionNodes[id])
                }
            }
        }
        RED.view.redraw();
    });

    var installAllowList = ['*'];
    var installDenyList = [];

    var modulesEnabled = true;
    if (RED.settings.get('externalModules.modules.allowInstall', true) === false) {
        modulesEnabled = false;
    }
    var settingsAllowList = RED.settings.get("externalModules.modules.allowList")
    var settingsDenyList = RED.settings.get("externalModules.modules.denyList")
    if (settingsAllowList || settingsDenyList) {
        installAllowList = settingsAllowList;
        installDenyList = settingsDenyList
    }
    installAllowList = RED.utils.parseModuleList(installAllowList);
    installDenyList = RED.utils.parseModuleList(installDenyList);


    // object that maps from library name to its descriptor
    var allLibs = [];

    function moduleName(module) {
        var match = /^([^@]+)@(.+)/.exec(module);
        if (match) {
            return [match[1], match[2]];
        }
        return [module, undefined];
    }

    function getAllUsedModules() {
        var moduleSet = new Set();
        for (var id in knownFunctionNodes) {
            if (knownFunctionNodes.hasOwnProperty(id)) {
                if (knownFunctionNodes[id].libs) {
                    for (var i=0, l=knownFunctionNodes[id].libs.length; i<l; i++) {
                        if (RED.utils.checkModuleAllowed(knownFunctionNodes[id].libs[i].module,null,installAllowList,installDenyList)) {
                            moduleSet.add(knownFunctionNodes[id].libs[i].module);
                        }
                    }
                }
            }
        }
        var modules = Array.from(moduleSet);
        modules.sort();
        return modules;
    }

    function prepareLibraryConfig(node) {
        $(".node-input-libs-row").show();
        var usedModules = getAllUsedModules();
        var typedModules = usedModules.map(function(l) {
            return {icon:"fa fa-cube", value:l,label:l,hasValue:false}
        })
        typedModules.push({
            value:"_custom_", label:RED._("editor:subflow.licenseOther"), icon:"red/images/typedInput/az.svg"
        })

        var libList = $("#node-input-libs-container").css('min-height','100px').css('min-width','450px').editableList({
            header: $('<div><div data-i18n="node-red:function.require.moduleName"></div><div data-i18n="node-red:function.require.importAs"></div></div>'),
            addItem: function(container,i,opt) {
                var parent = container.parent();
                var row0 = $("<div/>").addClass("node-libs-entry").appendTo(container);
                var fmoduleSpan = $("<span>").appendTo(row0);
                var fmodule = $("<input/>", {
                    class: "node-input-libs-val",
                    placeholder: RED._("node-red:function.require.module"),
                    type: "text"
                }).css({
                }).appendTo(fmoduleSpan).typedInput({
                    types: typedModules,
                    default: usedModules.indexOf(opt.module) > -1 ? opt.module : "_custom_"
                });
                if (usedModules.indexOf(opt.module) === -1) {
                    fmodule.typedInput('value', opt.module);
                }
                var moduleWarning = $('<span style="position: absolute;right:2px;top:7px; display:inline-block; width: 16px;"><i class="fa fa-warning"></i></span>').appendTo(fmoduleSpan);
                RED.popover.tooltip(moduleWarning.find("i"),function() {
                    var val = fmodule.typedInput("type");
                    if (val === "_custom_") {
                        val = fmodule.val();
                    }
                    var errors = [];

                    if (!RED.utils.checkModuleAllowed(val,null,installAllowList,installDenyList)) {
                        return RED._("node-red:function.error.moduleNotAllowed",{module:val});
                    } else {
                        return RED._("node-red:function.error.moduleLoadError",{module:val,error:missingModuleReasons[val]});
                    }
                })

                var fvarSpan = $("<span>").appendTo(row0);

                var fvar = $("<input/>", {
                    class: "node-input-libs-var red-ui-font-code",
                    placeholder: RED._("node-red:function.require.var"),
                    type: "text"
                }).css({
                }).appendTo(fvarSpan).val(opt.var);
                var vnameWarning = $('<span style="position: absolute; right:2px;top:7px;display:inline-block; width: 16px;"><i class="fa fa-warning"></i></span>').appendTo(fvarSpan);
                RED.popover.tooltip(vnameWarning.find("i"),function() {
                    var val = fvar.val();
                    if (invalidModuleVNames.indexOf(val) !== -1) {
                        return RED._("node-red:function.error.moduleNameReserved",{name:val})
                    } else {
                        return RED._("node-red:function.error.moduleNameError",{name:val})
                    }
                })



                fvar.on("change keyup paste", function (e) {
                    var v = $(this).val().trim();
                    if (v === "" || / /.test(v) || invalidModuleVNames.indexOf(v) !== -1) {
                        fvar.addClass("input-error");
                        vnameWarning.addClass("input-error");
                    } else {
                        fvar.removeClass("input-error");
                        vnameWarning.removeClass("input-error");
                    }
                });

                fmodule.on("change keyup paste", function (e) {
                    var val = $(this).typedInput("type");
                    if (val === "_custom_") {
                        val = $(this).val();
                    }
                    var varName = val.trim().replace(/^@/,"").replace(/@.*$/,"").replace(/[-_/].?/g, function(v) { return v[1]?v[1].toUpperCase():"" });
                    fvar.val(varName);
                    fvar.trigger("change");

                    if (RED.utils.checkModuleAllowed(val,null,installAllowList,installDenyList) && (missingModules.indexOf(val) === -1)) {
                        fmodule.removeClass("input-error");
                        moduleWarning.removeClass("input-error");
                    } else {
                        fmodule.addClass("input-error");
                        moduleWarning.addClass("input-error");
                    }
                });
                if (RED.utils.checkModuleAllowed(opt.module,null,installAllowList,installDenyList) && (missingModules.indexOf(opt.module) === -1)) {
                    fmodule.removeClass("input-error");
                    moduleWarning.removeClass("input-error");
                } else {
                    fmodule.addClass("input-error");
                    moduleWarning.addClass("input-error");
                }
                if (opt.var) {
                    fvar.trigger("change");
                }
            },
            removable: true
        });

        var libs = node.libs || [];
        for (var i=0,l=libs.length;i<l; i++) {
            libList.editableList('addItem',libs[i])
        }

    }

    function getLibsList() {
        var _libs = [];
        if (RED.settings.functionExternalModules !== false) {
            var libs = $("#node-input-libs-container").editableList("items");
            libs.each(function(i) {
                var item = $(this);
                var v = item.find(".node-input-libs-var").val();
                var n = item.find(".node-input-libs-val").typedInput("type");
                if (n === "_custom_") {
                    n = item.find(".node-input-libs-val").val();
                }
                if ((!v || (v === "")) ||
                    (!n || (n === ""))) {
                    return;
                }
                _libs.push({
                    var: v,
                    module: n
                });
            });
        }
        return _libs;
    }

    RED.nodes.registerType('function',{
        color:"#fdd0a2",
        category: 'function',
        defaults: {
            name: {value:"_DEFAULT_"},
            func: {value:"\nreturn msg;"},
            outputs: {value:1},
            noerr: {value:0,required:true,
                    validate: function(v, opt) {
                        if (!v) {
                            return true;
                        }
                        return RED._("node-red:function.error.invalid-js");
                    }},
            initialize: {value:""},
            finalize: {value:""},
            libs: {value: [], validate: function(v, opt) {
                if (!v) { return true; }
                for (var i=0,l=v.length;i<l;i++) {
                    var m = v[i];
                    if (!RED.utils.checkModuleAllowed(m.module,null,installAllowList,installDenyList)) {
                        return RED._("node-red:function.error.moduleNotAllowed", {
                            module: m.module
                        });
                    }
                    if (m.var === "" || / /.test(m.var)) {
                        return RED._("node-red:function.error.moduleNameError", {
                            name: m.var
                        });
                    }
                    if (missingModules.indexOf(m.module) > -1) {
                        return RED._("node-red:function.error.missing-module", {
                            module: m.module
                        });
                    }
                    if (invalidModuleVNames.indexOf(m.var) !== -1){
                        return RED._("node-red:function.error.moduleNameError", {
                            name: m.var
                        });
                    }
                }
                return true;
            }}
        },
        inputs:1,
        outputs:1,
        icon: "function.svg",
        label: function() {
            return this.name||this._("function.function");
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var that = this;

            var tabs = RED.tabs.create({
                id: "func-tabs",
                onchange: function(tab) {
                    $("#func-tabs-content").children().hide();
                    $("#" + tab.id).show();
                    let editor = $("#" + tab.id).find('.monaco-editor').first();
                    if(editor.length) {
                        if(that.editor.nodered && that.editor.type == "monaco") {
                            that.editor.nodered.refreshModuleLibs(getLibsList());
                        }
                        RED.tray.resize();
                        //auto focus editor on tab switch
                        if (that.initEditor.getDomNode() == editor[0]) {
                            that.initEditor.focus();
                        } else if (that.editor.getDomNode() == editor[0]) {
                            that.editor.focus();
                        } else if (that.finalizeEditor.getDomNode() == editor[0]) {
                            that.finalizeEditor.focus();
                        }
                    }
                }
            });
            tabs.addTab({
                id: "func-tab-config",
                iconClass: "fa fa-cog",
                label: that._("function.label.setup")
            });

            tabs.addTab({
                id: "func-tab-init",
                label: that._("function.label.initialize")
            });
            tabs.addTab({
                id: "func-tab-body",
                label: that._("function.label.function")
            });
            tabs.addTab({
                id: "func-tab-finalize",
                label: that._("function.label.finalize")
            });

            tabs.activateTab("func-tab-body");

            $( "#node-input-outputs" ).spinner({
                min:0,
                change: function(event, ui) {
                    var value = this.value;
                    if (!value.match(/^\d+$/)) { value = 1;  }
                    else if (value < this.min) { value = this.min; }
                    if (value !== this.value) { $(this).spinner("value", value); }
                }
            });

            var buildEditor = function(id, stateId, focus, value, defaultValue, extraLibs, offset) {
                var editor = RED.editor.createEditor({
                    id: id,
                    mode: 'ace/mode/nrjavascript',
                    value: value || defaultValue || "",
                    stateId: stateId,
                    focus: true,
                    globals: {
                        msg:true,
                        context:true,
                        RED: true,
                        util: true,
                        flow: true,
                        global: true,
                        console: true,
                        Buffer: true,
                        setTimeout: true,
                        clearTimeout: true,
                        setInterval: true,
                        clearInterval: true
                    },
                    extraLibs: extraLibs
                });
                if (defaultValue && value === "") {
                    editor.moveCursorTo(defaultValue.split("\n").length +offset, 0);
                }
                editor.__stateId = stateId;
                return editor;
            }
            this.initEditor = buildEditor('node-input-init-editor', this.id + "/" + "initEditor", false, $("#node-input-initialize").val(), RED._("node-red:function.text.initialize"), undefined, 0);
            this.editor = buildEditor('node-input-func-editor', this.id + "/" + "editor", true, $("#node-input-func").val(), undefined, that.libs || [], undefined, -1);
            this.finalizeEditor = buildEditor('node-input-finalize-editor', this.id + "/" + "finalizeEditor", false, $("#node-input-finalize").val(), RED._("node-red:function.text.finalize"), undefined, 0);

            RED.library.create({
                url:"functions", // where to get the data from
                type:"function", // the type of object the library is for
                editor:this.editor, // the field name the main text body goes to
                mode:"ace/mode/nrjavascript",
                fields:[
                    'name', 'outputs',
                    {
                        name: 'initialize',
                        get: function() {
                            return that.initEditor.getValue();
                        },
                        set: function(v) {
                            that.initEditor.setValue(v||RED._("node-red:function.text.initialize"), -1);
                        }
                    },
                    {
                        name: 'finalize',
                        get: function() {
                            return that.finalizeEditor.getValue();
                        },
                        set: function(v) {
                            that.finalizeEditor.setValue(v||RED._("node-red:function.text.finalize"), -1);
                        }
                    },
                    {
                        name: 'info',
                        get: function() {
                            return that.infoEditor.getValue();
                        },
                        set: function(v) {
                            that.infoEditor.setValue(v||"", -1);
                        }
                    }
                ],
                ext:"js"
            });

            var expandButtonClickHandler = function(editor) {
                return function (e) {
                    e.preventDefault();
                    var value = editor.getValue();
                    editor.saveView(`inside function-expandButtonClickHandler ${editor.__stateId}`);
                    var extraLibs = that.libs || [];
                    RED.editor.editJavaScript({
                        value: value,
                        width: "Infinity",
                        stateId: editor.__stateId,
                        mode: "ace/mode/nrjavascript",
                        focus: true,
                        cancel: function () {
                            setTimeout(function () {
                                editor.focus();
                            }, 250);
                        },
                        complete: function (v, cursor) {
                            editor.setValue(v, -1);
                            setTimeout(function () {
                                editor.restoreView();
                                editor.focus();
                            }, 250);
                        },
                        extraLibs: extraLibs
                    });
                }
            }
            $("#node-init-expand-js").on("click", expandButtonClickHandler(this.initEditor));
            $("#node-function-expand-js").on("click", expandButtonClickHandler(this.editor));
            $("#node-finalize-expand-js").on("click", expandButtonClickHandler(this.finalizeEditor));

            RED.popover.tooltip($("#node-init-expand-js"), RED._("node-red:common.label.expand"));
            RED.popover.tooltip($("#node-function-expand-js"), RED._("node-red:common.label.expand"));
            RED.popover.tooltip($("#node-finalize-expand-js"), RED._("node-red:common.label.expand"));

            if (RED.settings.functionExternalModules !== false) {
                prepareLibraryConfig(that);
            }
        },
        oneditsave: function() {
            var node = this;
            var noerr = 0;
            $("#node-input-noerr").val(0);

            var disposeEditor = function(editorName,targetName,defaultValue) {
                var editor = node[editorName];
                var annot = editor.getSession().getAnnotations();
                for (var k=0; k < annot.length; k++) {
                    if (annot[k].type === "error") {
                        noerr += annot.length;
                        break;
                    }
                }
                var val = editor.getValue();
                if (defaultValue) {
                    if (val.trim() == defaultValue.trim()) {
                        val = "";
                    }
                }
                editor.destroy();
                delete node[editorName];
                $("#"+targetName).val(val);
            }
            disposeEditor("editor","node-input-func");
            disposeEditor("initEditor","node-input-initialize", RED._("node-red:function.text.initialize"));
            disposeEditor("finalizeEditor","node-input-finalize", RED._("node-red:function.text.finalize"));

            $("#node-input-noerr").val(noerr);
            this.noerr = noerr;
            node.libs = getLibsList();
        },
        oneditcancel: function() {
            var node = this;

            node.editor.destroy();
            delete node.editor;

            node.initEditor.destroy();
            delete node.initEditor;

            node.finalizeEditor.destroy();
            delete node.finalizeEditor;
        },
        oneditresize: function(size) {
            var rows = $("#dialog-form>div:not(.node-text-editor-row)");
            var height = $("#dialog-form").height();
            for (var i=0; i<rows.length; i++) {
                height -= $(rows[i]).outerHeight(true);
            }
            var editorRow = $("#dialog-form>div.node-text-editor-row");
            height -= (parseInt(editorRow.css("marginTop"))+parseInt(editorRow.css("marginBottom")));
            $("#dialog-form .node-text-editor").css("height",height+"px");

            var height = size.height;
            $("#node-input-init-editor").css("height", (height - 83)+"px");
            $("#node-input-func-editor").css("height", (height - 83)+"px");
            $("#node-input-finalize-editor").css("height", (height - 83)+"px");

            this.initEditor.resize();
            this.editor.resize();
            this.finalizeEditor.resize();

            $("#node-input-libs-container").css("height", (height - 192)+"px");
        },
        onadd: function() {
            if (this.name === '_DEFAULT_') {
                this.name = ''
                RED.actions.invoke("core:generate-node-names", this, {generateHistory: false})
            }
        }
    });
})();
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="function">
    <p>A JavaScript function to run against the messages being received by the node.</p>
    <p>The messages are passed in as a JavaScript object called <code>msg</code>.</p>
    <p>By convention it will have a <code>msg.payload</code> property containing
       the body of the message.</p>
    <p>The function is expected to return a message object (or multiple message objects), but can choose
       to return nothing in order to halt a flow.</p>
    <p>The <b>On Start</b> tab contains code that will be run whenever the node is started.
        The <b>On Stop</b> tab contains code that will be run when the node is stopped.</p>
    <p>If the On Start code returns a Promise object, the node will not start handling messages
        until the promise is resolved.</p>
    <h3>Details</h3>
    <p>See the <a target="_blank" href="http://nodered.org/docs/writing-functions.html">online documentation</a>
    for more information on writing functions.</p>
    <h4>Sending messages</h4>
    <p>The function can either return the messages it wants to pass on to the next nodes
    in the flow, or can call <code>node.send(messages)</code>.</p>
    <p>It can return/send:</p>
    <ul>
      <li>a single message object - passed to nodes connected to the first output</li>
      <li>an array of message objects - passed to nodes connected to the corresponding outputs</li>
    </ul>
    <p>Note: The setup code is executed during the initialization of nodes. Therefore, if <code>node.send</code> is called in the setup tab, subsequent nodes may not be able to receive the message.</p>
    <p>If any element of the array is itself an array of messages, multiple
          messages are sent to the corresponding output.</p>
    <p>If null is returned, either by itself or as an element of the array, no
          message is passed on.</p>
    <h4>Logging and Error Handling</h4>
    <p>To log any information, or report an error, the following functions are available:</p>
      <ul>
          <li><code>node.log("Log message")</code></li>
          <li><code>node.warn("Warning")</code></li>
          <li><code>node.error("Error")</code></li>
      </ul>
    </p>
    <p>The Catch node can also be used to handle errors. To invoke a Catch node,
    pass <code>msg</code> as a second argument to <code>node.error</code>:</p>
    <pre>node.error("Error",msg);</pre>
    <h4>Accessing Node Information</h4>
    <p>The following properties are available to access information about the node:</p>
    <ul>
        <li><code>node.id</code> - id of the node</li>
        <li><code>node.name</code> - name of the node</li>
        <li><code>node.outputCount</code> - number of node outputs</li>
    </ul>
    <h4>Using environment variables</h4>
    <p>Environment variables can be accessed using <code>env.get("MY_ENV_VAR")</code>.</p>
</script>

<!-- --- [red-module:node-red/switch] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="switch">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" style="width: calc(100% - 105px)" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-row">
        <label for="node-input-property"><i class="fa fa-ellipsis-h"></i> <span data-i18n="switch.label.property"></span></label>
        <input type="text" id="node-input-property" style="width: calc(100% - 105px)"/>
        <input type="hidden" id="node-input-outputs"/>
    </div>
    <div class="form-row node-input-rule-container-row">
        <ol id="node-input-rule-container"></ol>
    </div>
    <div class="form-row">
        <select id="node-input-checkall" style="width:100%; margin-right:5px;">
            <option value="true" data-i18n="switch.checkall"></option>
            <option value="false" data-i18n="switch.stopfirst"></option>
        </select>
    </div>
    <div class="form-row">
        <input type="checkbox" id="node-input-repair" style="display: inline-block; width: auto; vertical-align: top;">
        <label style="width: auto;" for="node-input-repair"><span data-i18n="switch.label.repair"></span></label></input>
    </div>
</script>

<script type="text/javascript">
(function() {
    var operators = [
        {v:"eq",t:"==",kind:'V'},
        {v:"neq",t:"!=",kind:'V'},
        {v:"lt",t:"<",kind:'V'},
        {v:"lte",t:"<=",kind:'V'},
        {v:"gt",t:">",kind:'V'},
        {v:"gte",t:">=",kind:'V'},
        {v:"hask",t:"switch.rules.hask",kind:'V'},
        {v:"btwn",t:"switch.rules.btwn",kind:'V'},
        {v:"cont",t:"switch.rules.cont",kind:'V'},
        {v:"regex",t:"switch.rules.regex",kind:'V'},
        {v:"true",t:"switch.rules.true",kind:'V'},
        {v:"false",t:"switch.rules.false",kind:'V'},
        {v:"null",t:"switch.rules.null",kind:'V'},
        {v:"nnull",t:"switch.rules.nnull",kind:'V'},
        {v:"istype",t:"switch.rules.istype",kind:'V'},
        {v:"empty",t:"switch.rules.empty",kind:'V'},
        {v:"nempty",t:"switch.rules.nempty",kind:'V'},
        {v:"head",t:"switch.rules.head",kind:'S'},
        {v:"index",t:"switch.rules.index",kind:'S'},
        {v:"tail",t:"switch.rules.tail",kind:'S'},
        {v:"jsonata_exp",t:"switch.rules.exp",kind:'O'},
        {v:"else",t:"switch.rules.else",kind:'O'}
    ];

    var previousValueType = {value:"prev",label:RED._("node-red:switch.previous"),hasValue:false};
    function clipValueLength(v) {
        if (v.length > 15) {
            return v.substring(0,15)+"...";
        }
        return v;
    }
    function prop2name(key) {
        var result = RED.utils.parseContextKey(key);
        return result.key;
    }
    function getValueLabel(t,v) {
        if (t === 'str') {
            return '"'+clipValueLength(v)+'"';
        } else if (t === 'msg') {
            return t+"."+clipValueLength(v);
        } else if (t === 'flow' || t === 'global') {
            return t+"."+clipValueLength(prop2name(v));
        }
        return clipValueLength(v);
    }

    function exportRule(rule) {
        var type = rule.find("select").val();
        var r = {t:type};
        if (!(type === "true" || type === "false" || type === "null" || type === "nnull" || type === "empty" || type === "nempty" || type === "else")) {
            if ((type === "btwn") || (type === "index")) {
                r.v = rule.find(".node-input-rule-btwn-value").typedInput('value');
                r.vt = rule.find(".node-input-rule-btwn-value").typedInput('type');
                r.v2 = rule.find(".node-input-rule-btwn-value2").typedInput('value');
                r.v2t = rule.find(".node-input-rule-btwn-value2").typedInput('type');
            } else if ((type === "head") || (type === "tail")) {
                r.v = rule.find(".node-input-rule-num-value").typedInput('value');
                r.vt = rule.find(".node-input-rule-num-value").typedInput('type');
            } else if (type === "istype") {
                r.v = rule.find(".node-input-rule-type-value").typedInput('type');
                r.vt = rule.find(".node-input-rule-type-value").typedInput('type');
            } else if (type === "jsonata_exp") {
                r.v = rule.find(".node-input-rule-exp-value").typedInput('value');
                r.vt = rule.find(".node-input-rule-exp-value").typedInput('type');
            } else {
                r.v = rule.find(".node-input-rule-value").typedInput('value');
                r.vt = rule.find(".node-input-rule-value").typedInput('type');
            }
            if (type === "regex") {
                r.case = rule.find(".node-input-rule-case").prop("checked");
            }
        }
        return r;
    }

    function createValueField(row, defaultType){
        return $('<input/>',{class:"node-input-rule-value",type:"text",style:"width: 100%;"}).appendTo(row)
            .typedInput({default:defaultType||'str',types:['msg','flow','global','str','num','jsonata','env',previousValueType]});
    }

    function createNumValueField(row, defaultType){
        return $('<input/>',{class:"node-input-rule-num-value",type:"text",style:"width: 100%;"}).appendTo(row)
            .typedInput({default:defaultType||'num',types:['flow','global','num','jsonata','env']});
    }

    function createExpValueField(row){
        return $('<input/>',{class:"node-input-rule-exp-value",type:"text",style:"width: 100%;"}).appendTo(row)
            .typedInput({default:'jsonata',types:['jsonata']});
    }

    function createBtwnValueField(row, defaultType){
        return $('<input/>',{class:"node-input-rule-btwn-value",type:"text",style:"width: 100%;"}).appendTo(row)
                .typedInput({default:defaultType||'num',types:['msg','flow','global','str','num','jsonata','env',previousValueType]});
    }

    function createBtwnValue2Field(row3, andLabel, defaultType){
        $('<div/>',{class:"node-input-rule-btwn-label", style:"width: 120px; text-align: right;"}).text(" "+andLabel+" ").appendTo(row3);
        var row3InputCell = $('<div/>',{style:"flex-grow:1; margin-left: 5px;"}).appendTo(row3);
        return $('<input/>',{class:"node-input-rule-btwn-value2",type:"text",style:"width: 100%"}).appendTo(row3InputCell)
            .typedInput({default:defaultType||'num',types:['msg','flow','global','str','num','jsonata','env',previousValueType]});
    }

    function createTypeValueField(row, defaultType){
        return $('<input/>',{class:"node-input-rule-type-value",type:"text",style:"width: 100%;"}).appendTo(row).typedInput({default:defaultType || 'string',types:[
            {value:"string",label:RED._("common.type.string"),hasValue:false,icon:"red/images/typedInput/az.svg"},
            {value:"number",label:RED._("common.type.number"),hasValue:false,icon:"red/images/typedInput/09.svg"},
            {value:"boolean",label:RED._("common.type.boolean"),hasValue:false,icon:"red/images/typedInput/bool.svg"},
            {value:"array",label:RED._("common.type.array"),hasValue:false,icon:"red/images/typedInput/json.svg"},
            {value:"buffer",label:RED._("common.type.buffer"),hasValue:false,icon:"red/images/typedInput/bin.svg"},
            {value:"object",label:RED._("common.type.object"),hasValue:false,icon:"red/images/typedInput/json.svg"},
            {value:"json",label:RED._("common.type.jsonString"),hasValue:false,icon:"red/images/typedInput/json.svg"},
            {value:"undefined",label:RED._("common.type.undefined"),hasValue:false},
            {value:"null",label:RED._("common.type.null"),hasValue:false}
        ]});
    }

    RED.nodes.registerType('switch', {
        color: "#E2D96E",
        category: 'function',
        defaults: {
            name: {value:""},
            property: {value:"payload", required:true,
                       label:RED._("node-red:common.label.payload"),
                       validate: RED.validators.typedInput("propertyType", false)},
            propertyType: { value:"msg" },
            rules: {value:[{t:"eq", v:"", vt:"str"}]},
            checkall: {value:"true", required:true},
            repair: {value:false},
            outputs: {value:1}
        },
        inputs: 1,
        outputs: 1,
        outputLabels: function(index) {
            var rule = this.rules[index];
            var label = "";
            if (rule) {
                for (var i=0;i<operators.length;i++) {
                    if (operators[i].v === rule.t) {
                        label = /^switch/.test(operators[i].t)?this._(operators[i].t):operators[i].t;
                        break;
                    }
                }
                if ((rule.t === 'btwn') || (rule.t === 'index')) {
                    label += " "+getValueLabel(rule.vt,rule.v)+" & "+getValueLabel(rule.v2t,rule.v2);
                } else if (rule.t !== 'true' && rule.t !== 'false' && rule.t !== 'null' && rule.t !== 'nnull' && rule.t !== 'empty' && rule.t !== 'nempty' && rule.t !== 'else' ) {
                    label += " "+getValueLabel(rule.vt,rule.v);
                }
                return label;
            }
        },
        icon: "switch.svg",
        label: function() {
            return this.name||this._("switch.switch");
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var node = this;


            $("#node-input-property").typedInput({default:this.propertyType||'msg',types:['msg','flow','global','jsonata','env']});
            var outputCount = $("#node-input-outputs").val("{}");

            var andLabel = this._("switch.and");
            var caseLabel = this._("switch.ignorecase");

            $("#node-input-rule-container").css('min-height','150px').css('min-width','450px').editableList({
                addItem: function(container,i,opt) {
                    var focusValueField = false;
                    if (!opt.hasOwnProperty('r')) {
                        opt.r = {};
                        if (i > 0) {
                            var lastRule = $("#node-input-rule-container").editableList('getItemAt',i-1);
                            var exportedRule = exportRule(lastRule.element);
                            opt.r.vt = exportedRule.vt;
                            opt.r.v = "";
                            // We could copy the value over as well and preselect it (see the 'activeElement' code below)
                            // But not sure that feels right. Is copying over the last value 'expected' behaviour?
                            // It would make sense for an explicit 'copy' action, but not sure where the copy button would
                            // go for each rule without being wasted space for most users.
                            // opt.r.v = exportedRule.v;
                            focusValueField = true;
                        }
                    }

                    opt.element = container;
                    var rule = opt.r;
                    if (!rule.hasOwnProperty('t')) {
                        rule.t = 'eq';
                    }
                    if (!opt.hasOwnProperty('i')) {
                        opt._i = Math.floor((0x99999-0x10000)*Math.random()).toString();
                    }
                    container.css({
                        overflow: 'hidden',
                        whiteSpace: 'nowrap',
                        display: "flex",
                        "align-items":"center"
                    });
                    var inputRows = $('<div></div>',{style:"flex-grow:1"}).appendTo(container);
                    var row = $('<div></div>',{style:"display: flex;"}).appendTo(inputRows);
                    var row2 = $('<div/>',{style:"display: flex; padding-top: 5px; padding-left: 175px;"}).appendTo(inputRows);
                    var row3 = $('<div/>',{style:"display: flex; padding-top: 5px; align-items: center"}).appendTo(inputRows);

                    var row4 = $('<div/>',{style:"visibility: hidden; height: 0px;"}).appendTo(inputRows);
                    var textSpan = $("<span/>").appendTo(row4);
                    var selectField = $('<select/>',{style:"width:120px; text-align: center;"}).appendTo(row);
                    var group0 = $('<optgroup/>', { label: RED._("node-red:switch.label.value-rules") }).appendTo(selectField);
                    for (var d in operators) {
                        if(operators[d].kind === 'V') {
                            group0.append($("<option></option>").val(operators[d].v).text(/^switch/.test(operators[d].t)?node._(operators[d].t):operators[d].t));
                        }
                    }
                    var group1 = $('<optgroup/>', { label: RED._("node-red:switch.label.sequence-rules") }).appendTo(selectField);
                    for (var d in operators) {
                        if(operators[d].kind === 'S') {
                            group1.append($("<option></option>").val(operators[d].v).text(/^switch/.test(operators[d].t)?node._(operators[d].t):operators[d].t));
                        }
                    }
                    for (var d in operators) {
                        if(operators[d].kind === 'O') {
                            selectField.append($("<option></option>").val(operators[d].v).text(/^switch/.test(operators[d].t)?node._(operators[d].t):operators[d].t));
                        }
                    }

                    var rowInputCell = $('<div>',{style:"flex-grow:1; margin-left: 5px;"}).appendTo(row);


                    var valueField = null;
                    var numValueField = null;
                    var expValueField = null;
                    var btwnAndLabel = null;
                    var btwnValueField = null;
                    var btwnValue2Field = null;
                    var typeValueField = null;

                    var finalspan = $('<span/>',{style:"margin-left: 5px;"}).appendTo(container);
                    finalspan.append(' &#8594; <span class="node-input-rule-index">'+(i+1)+'</span> ');

                    var caseSensitive = $('<input/>',{id:"node-input-rule-case-"+i,class:"node-input-rule-case",type:"checkbox",style:"width:auto;vertical-align:top"}).appendTo(row2);
                    $('<label/>',{for:"node-input-rule-case-"+i,style:"margin-left: 3px;"}).text(caseLabel).appendTo(row2);

                    selectField.on("change", function() {
                        var fieldToFocus;
                        var type = selectField.val();
                        if (valueField) { valueField.typedInput('hide'); }
                        if (expValueField) { expValueField.typedInput('hide'); }
                        if (numValueField) { numValueField.typedInput('hide'); }
                        if (typeValueField) { typeValueField.typedInput('hide'); }
                        if (btwnValueField) { btwnValueField.typedInput('hide'); }
                        if (btwnValue2Field) { btwnValue2Field.typedInput('hide'); }

                        if ((type === "btwn") || (type === "index")) {
                            if (!btwnValueField){
                                btwnValueField = createBtwnValueField(rowInputCell);
                            }
                            btwnValueField.typedInput('show');
                            fieldToFocus = btwnValueField;
                        } else if ((type === "head") || (type === "tail")) {
                            if (!numValueField){
                                numValueField = createNumValueField(rowInputCell);
                            }
                            numValueField.typedInput('show');
                            fieldToFocus = numValueField;
                        } else if (type === "jsonata_exp") {
                            if (!expValueField){
                                expValueField = createExpValueField(rowInputCell);
                            }
                            expValueField.typedInput('show');
                            fieldToFocus = expValueField;

                        } else if (type === "istype") {
                            if (!typeValueField){
                                typeValueField = createTypeValueField(rowInputCell);
                            }
                            typeValueField.typedInput('show');
                            fieldToFocus = typeValueField;
                        } else if (! (type === "true" || type === "false" || type === "null" || type === "nnull" || type === "empty" || type === "nempty" || type === "else" )) {
                                if (!valueField){
                                    valueField = createValueField(rowInputCell);
                                }
                                valueField.typedInput('show');
                                fieldToFocus = valueField;
                        }
                        if (type === "regex") {
                            row2.show();
                            row3.hide();
                        } else if ((type === "btwn") || (type === "index")) {
                            row2.hide();
                            row3.show();
                            if (!btwnValue2Field){
                                btwnValue2Field = createBtwnValue2Field(row3, andLabel);
                            }
                            btwnValue2Field.typedInput('show');
                        } else {
                            row2.hide();
                            row3.hide();
                        }
                        var selectedLabel = selectField.find("option:selected").text();

                        textSpan.text(selectedLabel);
                        var width = textSpan.width();
                        if (width <= 30) {
                            selectField.outerWidth(60);
                        } else if (width <= 85) {
                            selectField.outerWidth(120);
                        } else {
                            selectField.width("auto")
                        }
                        if (fieldToFocus) {
                            fieldToFocus.typedInput("focus");
                        }
                        // Preselect the contents of the element
                        // if (focusValueField && document.activeElement) {
                        //     document.activeElement.selectionStart = 0;
                        //     document.activeElement.selectionEnd = document.activeElement.value.length;
                        // }
                    });
                    selectField.val(rule.t);

                    if ((rule.t == "btwn") || (rule.t == "index")) {
                        btwnValueField = createBtwnValueField(rowInputCell,rule.vt||'num');
                        btwnValueField.typedInput('value',rule.v);
                        btwnValue2Field = createBtwnValue2Field(row3, andLabel,rule.v2t||'num');
                        btwnValue2Field.typedInput('value',rule.v2);
                    } else if ((rule.t === "head") || (rule.t === "tail")) {
                        numValueField = createNumValueField(rowInputCell,rule.vt||'num');
                        numValueField.typedInput('value',rule.v);
                    } else if (rule.t === "istype") {
                        typeValueField = createTypeValueField(rowInputCell,rule.vt);
                        typeValueField.typedInput('value',rule.vt);
                    } else if (rule.t === "jsonata_exp") {
                        expValueField = createExpValueField(rowInputCell,rule.vt||'jsonata');
                        expValueField.typedInput('value',rule.v);
                    } else if (typeof rule.v != "undefined") {
                        valueField = createValueField(rowInputCell,rule.vt||'str');
                        valueField.typedInput('value',rule.v);
                    }
                    caseSensitive.prop('checked',!!rule.case);
                    selectField.change();

                    var currentOutputs = JSON.parse(outputCount.val()||"{}");
                    currentOutputs[opt.hasOwnProperty('i')?opt.i:opt._i] = i;
                    outputCount.val(JSON.stringify(currentOutputs));
                },
                removeItem: function(opt) {
                    var currentOutputs = JSON.parse(outputCount.val()||"{}");
                    if (opt.hasOwnProperty('i')) {
                        currentOutputs[opt.i] = -1;
                    } else {
                        delete currentOutputs[opt._i];
                    }
                    var rules = $("#node-input-rule-container").editableList('items');
                    rules.each(function(i) {
                        $(this).find(".node-input-rule-index").html(i+1);
                        var data = $(this).data('data');
                        currentOutputs[data.hasOwnProperty('i')?data.i:data._i] = i;
                    });
                    outputCount.val(JSON.stringify(currentOutputs));
                },
                sortItems: function(rules) {
                    var currentOutputs = JSON.parse(outputCount.val()||"{}");
                    var rules = $("#node-input-rule-container").editableList('items');
                    rules.each(function(i) {
                        $(this).find(".node-input-rule-index").html(i+1);
                        var data = $(this).data('data');
                        currentOutputs[data.hasOwnProperty('i')?data.i:data._i] = i;
                    });
                    outputCount.val(JSON.stringify(currentOutputs));
                },
                sortable: true,
                removable: true
            });

            for (var i=0;i<this.rules.length;i++) {
                var rule = this.rules[i];
                $("#node-input-rule-container").editableList('addItem',{r:rule,i:i});
            }
        },
        oneditsave: function() {
            var rules = $("#node-input-rule-container").editableList('items');
            var node = this;
            node.rules = [];
            rules.each(function(i) {
                node.rules.push(exportRule($(this)));
            });
            this.propertyType = $("#node-input-property").typedInput('type');
        },
        oneditresize: function(size) {
            var rows = $("#dialog-form>div:not(.node-input-rule-container-row)");
            var height = size.height;
            for (var i=0;i<rows.length;i++) {
                height -= $(rows[i]).outerHeight(true);
            }
            var editorRow = $("#dialog-form>div.node-input-rule-container-row");
            height -= (parseInt(editorRow.css("marginTop"))+parseInt(editorRow.css("marginBottom")));
            height += 16;
            $("#node-input-rule-container").editableList('height',height);
        }
    });
})();
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="switch">
    <p>Route messages based on their property values or sequence position.</p>
    <h3>Details</h3>
    <p>When a message arrives, the node will evaluate each of the defined rules
    and forward the message to the corresponding outputs of any matching rules.</p>
    <p>Optionally, the node can be set to stop evaluating rules once it finds one
    that matches.</p>
    <p>The rules can be evaluated against an individual message property, a flow or global
    context property, environment variable or the result of a JSONata expression.</p>
    <h4>Rules</h4>
    <p>There are four types of rule:</p>
    <ol>
        <li><b>Value</b> rules are evaluated against the configured property</li>
        <li><b>Sequence</b> rules can be used on message sequences, such as those
            generated by the Split node</li>
        <li>A JSONata <b>Expression</b> can be provided that will be evaluated
            against the whole message and will match if the expression returns
            a true value.</li>
        <li>An <b>Otherwise</b> rule can be used to match if none of the preceeding
            rules have matched.</li>
    </ol>
    <h4>Notes</h4>
    <p>The <code>is true/false</code> and <code>is null</code> rules perform strict
       comparisons against those types. They do not convert between types.</p>
    <p>The <code>is empty</code> and <code>is not empty</code> rules can be used to test the length of Strings, Arrays and Buffers, or the number of properties an Object has. Neither rule will pass if the property being tested has a <code>boolean</code>, <code>null</code> 
       or <code>undefined</code> value.</p>
    <h4>Handling message sequences</h4>
    <p>By default, the node does not modify the <code>msg.parts</code> property of messages
       that are part of a sequence.</p>
    <p>The <b>recreate message sequences</b> option can be enabled to generate new message sequences
       for each rule that matches. In this mode, the node will buffer the entire incoming
       sequence before sending the new sequences on. The runtime setting <code>nodeMessageBufferMaxLength</code>
       can be used to limit how many messages nodes will buffer.</p>
</script>

<!-- --- [red-module:node-red/change] --- -->

<script type="text/html" data-template-name="change">
    <style>
        ol#node-input-rule-container .red-ui-typedInput-container {
            flex:1;
        }
    </style>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" style="width: calc(100% - 105px)"  data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-row" style="margin-bottom:0;">
        <label><i class="fa fa-list"></i> <span data-i18n="change.label.rules"></span></label>
    </div>
    <div class="form-row node-input-rule-container-row">
        <ol id="node-input-rule-container"></ol>
    </div>
</script>

<script type="text/javascript">
(function() {
    function isInvalidProperty(v,vt) {
        if (/msg|flow|global/.test(vt)) {
            if (!RED.utils.validatePropertyExpression(v)) {
                return RED._("node-red:change.errors.invalid-prop", {
                    property: v
                });
            }
        } else if (vt === "jsonata") {
            try{ jsonata(v); } catch(e) {
                return RED._("node-red:change.errors.invalid-expr", {
                    error: e.message
                });
            }
        } else if (vt === "json") {
            try{ JSON.parse(v); } catch(e) {
                return RED._("node-red:change.errors.invalid-json-data", {
                    error: e.message
                });
            }
        }
        return false;
    }

    RED.nodes.registerType('change', {
        color: "#E2D96E",
        category: 'function',
        defaults: {
            name: {value:""},
            rules:{value:[{t:"set",p:"payload",pt:"msg",to:"",tot:"str"}],validate: function(rules, opt) {
                var msg;
                if (!rules || rules.length === 0) { return true }
                for (var i=0;i<rules.length;i++) {
                    var r = rules[i];
                    if (r.t === 'set') {
                        if (msg = isInvalidProperty(r.p,r.pt)) {
                            return msg;
                        }
                        if (msg = isInvalidProperty(r.to,r.tot)) {
                            return msg;
                        }
                    } else if (r.t === 'change') {
                        if (msg = isInvalidProperty(r.p,r.pt)) {
                            return msg;
                        }
                        if(msg = isInvalidProperty(r.from,r.fromt)) {
                            return msg;
                        }
                        if(msg = isInvalidProperty(r.to,r.tot)) {
                            return msg;
                        }
                    } else if (r.t === 'delete') {
                        if (msg = isInvalidProperty(r.p,r.pt)) {
                            return msg;
                        }
                    } else if (r.t === 'move') {
                        if (msg = isInvalidProperty(r.p,r.pt)) {
                            return msg;
                        }
                        if (msg = isInvalidProperty(r.to,r.tot)) {
                            return msg;
                        }
                    }
                }
                return true;
            }},
            // legacy
            action: {value:""},
            property: {value:""},
            from: {value:""},
            to: {value:""},
            reg: {value:false}
        },
        inputs: 1,
        outputs: 1,
        icon: "swap.svg",
        label: function() {
            function prop2name(type, key) {
                var result = RED.utils.parseContextKey(key);
                return type +"." +result.key;
            }
            if (this.name) {
                return this.name;
            }
            if (!this.rules) {
                if (this.action === "replace") {
                    return this._("change.label.set",{property:"msg."+this.property});
                } else if (this.action === "change") {
                    return this._("change.label.change",{property:"msg."+this.property});
                } else if (this.action === "move") {
                    return this._("change.label.move",{property:"msg."+this.property});
                } else {
                    return this._("change.label.delete",{property:"msg."+this.property});
                }
            } else {
                if (this.rules.length == 1) {
                    if (this.rules[0].t === "set") {
                        return this._("change.label.set",{property:prop2name((this.rules[0].pt||"msg"), this.rules[0].p)});
                    } else if (this.rules[0].t === "change") {
                        return this._("change.label.change",{property:prop2name((this.rules[0].pt||"msg"), this.rules[0].p)});
                    } else if (this.rules[0].t === "move") {
                        return this._("change.label.move",{property:prop2name((this.rules[0].pt||"msg"), this.rules[0].p)});
                    } else {
                        return this._("change.label.delete",{property:prop2name((this.rules[0].pt||"msg"), this.rules[0].p)});
                    }
                } else {
                    return this._("change.label.changeCount",{count:this.rules.length});
                }
            }
        },
        labelStyle: function() {
            return this.name ? "node_label_italic" : "";
        },
        oneditprepare: function() {
            var set = this._("change.action.set");
            var change = this._("change.action.change");
            var del = this._("change.action.delete");
            var move = this._("change.action.move");
            var to = this._("change.action.to");
            var toValueLabel = this._("change.action.toValue",to);
            var search = this._("change.action.search");
            var replace = this._("change.action.replace");
            var regex = this._("change.label.regex");
            var deepCopyLabel = this._("change.label.deepCopy");

            function createPropertyValue(row2_1, row2_2, defaultType) {
                var propValInput = $('<input/>',{class:"node-input-rule-property-value",type:"text"})
                    .appendTo(row2_1)
                    .typedInput({default:defaultType||'str',types:['msg','flow','global','str','num','bool','json','bin','date','jsonata','env']});

                var dcLabel = $('<label style="padding-left: 130px;"></label>').appendTo(row2_2);
                var deepCopy = $('<input type="checkbox" class="node-input-rule-property-deepCopy" style="width: auto; margin: 0 6px 0 0">').appendTo(dcLabel)
                $('<span>').text(deepCopyLabel).appendTo(dcLabel)

                propValInput.on("change", function(evt,type,val) {
                    row2_2.toggle(type === "msg" || type === "flow" || type === "global" || type === "env");
                })
                return [propValInput, deepCopy];
            }
            function createFromValue(row3_1, defaultType) {
                return $('<input/>',{class:"node-input-rule-property-search-value",type:"text"})
                .appendTo(row3_1)
                .typedInput({default:defaultType||'str',types:['msg','flow','global','str','re','num','bool','env']});
            }
            function createToValue(row3_2, defaultType) {
                return $('<input/>',{class:"node-input-rule-property-replace-value",type:"text"})
                .appendTo(row3_2)
                .typedInput({default:defaultType||'str',types:['msg','flow','global','str','num','bool','json','bin','env']});
            }
            function createMoveValue(row4, defaultType) {
                return $('<input/>',{class:"node-input-rule-property-move-value",type:"text"})
                .appendTo(row4)
                .typedInput({default:defaultType||'msg',types:['msg','flow','global']});
            }

            $('#node-input-rule-container').css('min-height','150px').css('min-width','450px').editableList({
                addItem: function(container,i,opt) {
                    var rule = opt;
                    if (!rule.hasOwnProperty('t')) {
                        rule = {t:"set",p:"payload",to:"",tot:"str"};
                    }
                    if (rule.t === "change" && rule.re) {
                        rule.fromt = 're';
                        delete rule.re;
                    }
                    if (rule.t === "set" && !rule.tot) {
                        if (rule.to.indexOf("msg.") === 0 && !rule.tot) {
                            rule.to = rule.to.substring(4);
                            rule.tot = "msg";
                        } else {
                            rule.tot = "str";
                        }
                    }
                    if (rule.t === "move" && !rule.tot) {
                        rule.tot = "msg";
                    }
                    container.css({
                        overflow: 'hidden',
                        whiteSpace: 'nowrap'
                    });
                    let fragment = document.createDocumentFragment();
                    var row1 = $('<div/>',{style:"display:flex; align-items: baseline"}).appendTo(fragment);
                    var row2 = $('<div/>',{style:"margin-top:8px;"}).appendTo(fragment);
                    var row3 = $('<div/>',{style:"margin-top:8px;"}).appendTo(fragment);
                    var row4 = $('<div/>',{style:"display:flex;margin-top:8px;align-items: baseline"}).appendTo(fragment);

                    var selectField = $('<select/>',{class:"node-input-rule-type",style:"width:110px; margin-right:10px;"}).appendTo(row1);
                    var selectOptions = [{v:"set",l:set},{v:"change",l:change},{v:"delete",l:del},{v:"move",l:move}];
                    for (var i=0; i<4; i++) {
                        selectField.append($("<option></option>").val(selectOptions[i].v).text(selectOptions[i].l));
                    }

                    var propertyName = $('<input/>',{class:"node-input-rule-property-name",type:"text"})
                        .appendTo(row1)
                        .typedInput({types:['msg','flow','global']});

                    var row2_1 = $('<div/>', {style:"display:flex;align-items: baseline"}).appendTo(row2);
                    $('<div/>',{style:"display:inline-block;text-align:right; width:120px; padding-right:10px; box-sizing:border-box;"})
                        .text(toValueLabel)
                        .appendTo(row2_1);

                    var row2_2 = $('<div/>', {style:"margin-top: 4px;"}).appendTo(row2);

                    var row3_1 = $('<div/>', {style:"display:flex;align-items: baseline"}).appendTo(row3);
                    $('<div/>',{style:"display:inline-block;text-align:right; width:120px; padding-right:10px; box-sizing:border-box;"})
                        .text(search)
                        .appendTo(row3_1);

                    var row3_2 = $('<div/>',{style:"display:flex;margin-top:8px;align-items: baseline"}).appendTo(row3);
                    $('<div/>',{style:"display:inline-block;text-align:right; width:120px; padding-right:10px; box-sizing:border-box;"})
                        .text(replace)
                        .appendTo(row3_2);

                    $('<div/>',{style:"display:inline-block;text-align:right; width:120px; padding-right:10px; box-sizing:border-box;"})
                        .text(to)
                        .appendTo(row4);

                    let propertyValue = null;
                    let fromValue = null;
                    let toValue = null;
                    let moveValue = null;

                    selectField.on("change", function() {
                        var type = $(this).val();
                        if (propertyValue) {
                            propertyValue.typedInput('hide');
                        }
                        if (fromValue) {
                            fromValue.typedInput('hide');
                        }
                        if (toValue) {
                            toValue.typedInput('hide');
                        }
                        if (moveValue) {
                            moveValue.typedInput('hide');
                        }

                        if (type == "set") {
                            if(!propertyValue) {
                                var parts = createPropertyValue(row2_1, row2_2);
                                propertyValue = parts[0];
                                deepCopy = parts[1];
                            }
                            propertyValue.typedInput('show');
                            row2.show();
                            row3.hide();
                            row4.hide();
                        } else if (type == "change") {
                            if(!fromValue) {
                                fromValue = createFromValue(row3_1);
                            }
                            fromValue.typedInput('show');
                            if(!toValue) {
                                toValue = createToValue(row3_2);
                            }
                            toValue.typedInput('show');
                            row2.hide();
                            row3.show();
                            row4.hide();
                        } else if (type == "delete") {
                            row2.hide();
                            row3.hide();
                            row4.hide();
                        } else if (type == "move") {
                            if(!moveValue) {
                                moveValue = createMoveValue(row4);
                            }
                            moveValue.typedInput('show');
                            row2.hide();
                            row3.hide();
                            row4.show();
                        }
                    });

                    selectField.val(rule.t);
                    propertyName.typedInput('value',rule.p);
                    propertyName.typedInput('type',rule.pt);
                    if (rule.t == "set") {
                        var parts = createPropertyValue(row2_1, row2_2, rule.tot);
                        propertyValue = parts[0];
                        deepCopy = parts[1];
                        propertyValue.typedInput('value',rule.to);
                        deepCopy.prop("checked", !!rule.dc);
                    }
                    if (rule.t == "move") {
                        moveValue = createMoveValue(row4,rule.tot);
                        moveValue.typedInput('value',rule.to);
                    }
                    if (rule.t == "change") {
                        fromValue = createFromValue(row3_1, rule.fromt);
                        fromValue.typedInput('value',rule.from);

                        toValue = createToValue(row3_2,rule.tot);
                        toValue.typedInput('value',rule.to);
                    }
                    selectField.change();
                    container[0].appendChild(fragment);
                },
                removable: true,
                sortable: true
            });

            if (!this.rules) {
                var rule = {
                    t:(this.action=="replace"?"set":this.action),
                    p:this.property,
                    pt:"msg"
                };

                if ((rule.t === "set")||(rule.t === "move")) {
                    rule.to = this.to;
                } else if (rule.t === "change") {
                    rule.from = this.from;
                    rule.to = this.to;
                    rule.re = this.reg;
                }

                delete this.to;
                delete this.from;
                delete this.reg;
                delete this.action;
                delete this.property;

                this.rules = [rule];
            }

            for (var i=0; i<this.rules.length; i++) {
                var rule = this.rules[i];
                $("#node-input-rule-container").editableList('addItem',rule);
            }
        },
        oneditsave: function() {
            var rules = $("#node-input-rule-container").editableList('items');
            var node = this;
            node.rules= [];
            rules.each(function(i) {
                var rule = $(this);
                var type = rule.find(".node-input-rule-type").val();
                var r = {
                    t:type,
                    p:rule.find(".node-input-rule-property-name").typedInput('value'),
                    pt:rule.find(".node-input-rule-property-name").typedInput('type')
                };
                if (type === "set") {
                    r.to = rule.find(".node-input-rule-property-value").typedInput('value');
                    r.tot = rule.find(".node-input-rule-property-value").typedInput('type');
                    if (rule.find(".node-input-rule-property-deepCopy").prop("checked")) {
                        r.dc = true;
                    }
                } else if (type === "move") {
                    r.to = rule.find(".node-input-rule-property-move-value").typedInput('value');
                    r.tot = rule.find(".node-input-rule-property-move-value").typedInput('type');
                } else if (type === "change") {
                    r.from = rule.find(".node-input-rule-property-search-value").typedInput('value');
                    r.fromt = rule.find(".node-input-rule-property-search-value").typedInput('type');
                    r.to = rule.find(".node-input-rule-property-replace-value").typedInput('value');
                    r.tot = rule.find(".node-input-rule-property-replace-value").typedInput('type');
                }
                node.rules.push(r);
            });
        },
        oneditresize: function(size) {
            var rows = $("#dialog-form>div:not(.node-input-rule-container-row)");
            var height = size.height;
            for (var i=0; i<rows.length; i++) {
                height -= $(rows[i]).outerHeight(true);
            }
            var editorRow = $("#dialog-form>div.node-input-rule-container-row");
            height -= (parseInt(editorRow.css("marginTop"))+parseInt(editorRow.css("marginBottom")));
            height += 16;
            $("#node-input-rule-container").editableList('height',height);
        }
    });
})();
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="change">
    <p>Set, change, delete or move properties of a message, flow context or global context.</p>
    <p>The node can specify multiple rules that will be applied in the order they are defined.</p>
    <h3>Details</h3>
    <p>The available operations are:</p>
    <dl class="message-properties">
    <dt>Set</dt>
    <dd>set a property. The value can be a variety of different types, or
            can be taken from an existing message or context property.</dd>
    <dt>Change</dt>
    <dd>search &amp; replace parts of the property. If regular expressions
        are enabled, the "replace with" property can include capture groups, for
        example <code>$1</code>. Replace will only change the type if there
        is a complete match.</dd>
    <dt>Delete</dt>
    <dd>delete a property.</dd>
    <dt>Move</dt>
    <dd>move or rename a property.</dd>
    </dl>
    <p>The "expression" type uses the <a href="http://jsonata.org/" target="_new">JSONata</a>
    query and expression language.
    </p>
</script>

<!-- --- [red-module:node-red/range] --- -->

<script type="text/html" data-template-name="range">
    <div class="form-row">
        <label for="node-input-property"><i class="fa fa-ellipsis-h"></i> <span data-i18n="common.label.property"></span></label>
        <input type="text" id="node-input-property" style="width:calc(70% - 1px)"/>
    </div>
    <div class="form-row">
        <label for="node-input-action"><i class="fa fa-dot-circle-o"></i> <span data-i18n="range.label.action"></span></label>
        <select id="node-input-action" style="width:70%;">
            <option value="scale" data-i18n="range.scale.payload"></option>
            <option value="clamp" data-i18n="range.scale.limit"></option>
            <option value="roll" data-i18n="range.scale.wrap"></option>
        </select>
    </div>
    <br/>
    <div class="form-row"><i class="fa fa-sign-in"></i> <span data-i18n="range.label.inputrange"></span>:</div>
    <div class="form-row"><label></label>
        <span data-i18n="range.label.from"></span>: <input type="text" id="node-input-minin" data-i18n="[placeholder]range.placeholder.min" style="width:100px;"/>
        &nbsp;&nbsp;<span data-i18n="range.label.to"></span>: <input type="text" id="node-input-maxin" data-i18n="[placeholder]range.placeholder.maxin" style="width:100px;"/>
    </div>
    <div class="form-row"><i class="fa fa-sign-out"></i> <span data-i18n="range.label.resultrange"></span>:</div>
    <div class="form-row"><label></label>
        <span data-i18n="range.label.from"></span>: <input type="text" id="node-input-minout" data-i18n="[placeholder]range.placeholder.min" style="width:100px;"/>
        &nbsp;&nbsp;<span data-i18n="range.label.to"></span>: <input type="text" id="node-input-maxout" data-i18n="[placeholder]range.placeholder.maxout" style="width:100px;"/>
    </div>
    <br/>
    <div class="form-row"><label></label>
        <input type="checkbox" id="node-input-round" style="display: inline-block; width: auto; vertical-align: top;">
        <label style="width: auto;" for="node-input-round"><span data-i18n="range.label.roundresult"></span></label></input>
    </div>
    <br/>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-tips" id="node-tip"><span data-i18n="range.tip"></span></div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('range', {
        color: "#E2D96E",
        category: 'function',
        defaults: {
            minin: {value:"", required: true,
                    label:RED._("node-red:range.label.minin"),
                    validate:RED.validators.number(false)},
            maxin: {value:"", required: true,
                    label:RED._("node-red:range.label.maxin"),
                    validate:RED.validators.number(false)},
            minout: {value:"", required:true,
                     label:RED._("node-red:range.label.minout"),
                     validate:RED.validators.number(false)},
            maxout: {value:"", required:true,
                     label:RED._("node-red:range.label.maxout"),
                     validate:RED.validators.number(false)},
            action: {value:"scale"},
            round: {value:false},
            property: {value:"payload",required:true,
                       label:RED._("node-red:common.label.property")},
            name: {value:""}
        },
        inputs: 1,
        outputs: 1,
        icon: "range.svg",
        label: function() {
            if (this.minout !== "" && this.maxout !== "") { return this.name||this.minout + " - " + this.maxout; }
            else { return this.name||this._("range.range"); }
        },
        labelStyle: function() {
            return this.name ? "node_label_italic" : "";
        },
        oneditprepare: function() {
            if (this.property === undefined) {
                $("#node-input-property").val("payload");
            }
            $("#node-input-property").typedInput({default:'msg',types:['msg']});
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="range">
    <p>Maps a numeric value to a different range.</p>
    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt>payload <span class="property-type">number</span></dt>
        <dd>The payload <i>must</i> be a number. Anything else will try to be
        parsed into a number and rejected if that fails.</dd>
    </dl>
    <h3>Outputs</h3>
    <dl class="message-properties">
        <dt>payload <span class="property-type">number</span></dt>
        <dd>The value mapped to the new range.</dd>
    </dl>
    <h3>Details</h3>
    <p>This node will linearly scale the received value. By default, the result
    is not constrained to the range defined in the node.</p>
    <p><i>Scale and limit to target range</i> means that the result will never be outside
    the range specified within the target range.</p>
    <p><i>Scale and wrap within the target range</i> means that the result will
    be wrapped within the target range.</p>
    <p>For example an input 0 - 10 mapped to 0 - 100.</p>
    <table style="outline-width:#888 solid thin">
        <tr><th width="80px">mode</th><th width="80px">input</th><th width="80px">output</th></tr>
        <tr><td><center>scale</center></td><td><center>12</center></td><td><center>120</center></td></tr>
        <tr><td><center>limit</center></td><td><center>12</center></td><td><center>100</center></td></tr>
        <tr><td><center>wrap</center></td><td><center>12</center></td><td><center>20</center></td></tr>
    </table>
</script>

<!-- --- [red-module:node-red/template] --- -->

<script type="text/html" data-template-name="template">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <div style="display: inline-block; width: calc(100% - 105px)"><input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name"></div>
    </div>
    <div class="form-row">
        <label for="node-input-field"><i class="fa fa-ellipsis-h"></i> <span data-i18n="template.label.property"></span></label>
        <input type="text" id="node-input-field" placeholder="payload" style="width:250px;">
        <input type="hidden" id="node-input-fieldType">
    </div>
    <div class="form-row" style="position: relative; margin-bottom: 0px;">
        <label for="node-input-template"><i class="fa fa-file-code-o"></i> <span data-i18n="template.label.template"></span></label>
        <input type="hidden" id="node-input-template" autofocus="autofocus">
        <div style="position: absolute; right:0;display:inline-block; text-align: right; font-size: 0.8em;">
            <span data-i18n="template.label.format"></span>:
            <select id="node-input-format" style="width:110px; font-size: 10px !important;  height: 24px; padding:0;">
                <option value="handlebars">mustache</option>
                <option value="html">HTML</option>
                <option value="json">JSON</option>
                <option value="javascript">JavaScript</option>
                <option value="css">CSS</option>
                <option value="markdown">Markdown</option>
                <option value="python">Python</option>
                <option value="sql">SQL</option>
                <option value="yaml">YAML</option>
                <option value="text" data-i18n="template.label.none"></option>
            </select>
            <button id="node-template-expand-editor" class="red-ui-button red-ui-button-small"><i class="fa fa-expand"></i></button>
        </div>
    </div>
    <div class="form-row node-text-editor-row">
        <div style="height: 250px; min-height:150px;" class="node-text-editor" id="node-input-template-editor" ></div>
    </div>
    <div class="form-row">
        <label for="node-input-syntax"><i class="fa fa-code"></i> <span data-i18n="template.label.syntax"></span></label>
        <select id="node-input-syntax" style="width:180px;">
            <option value="mustache" data-i18n="template.label.mustache"></option>
            <option value="plain" data-i18n="template.label.plain"></option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-output"><i class="fa fa-long-arrow-right"></i> <span data-i18n="template.label.output"></span></label>
        <select id="node-input-output" style="width:180px;">
            <option value="str" data-i18n="template.label.plain"></option>
            <option value="json" data-i18n="template.label.json"></option>
            <option value="yaml" data-i18n="template.label.yaml"></option>
        </select>
    </div>

</script>

<script type="text/javascript">
    RED.nodes.registerType('template',{
        color:"rgb(243, 181, 103)",
        category: 'function',
        defaults: {
            name: {value:""},
            field: {value:"payload",
                    label:"payload",
                    validate:RED.validators.typedInput("fieldType", false)},
            fieldType: {value:"msg"},
            format: {value:"handlebars"},
            syntax: {value:"mustache"},
            template: {value:"This is the payload: {{payload}} !"},
            output: {value:"str"}
        },
        inputs:1,
        outputs:1,
        icon: "template.svg",
        label: function() {
            return this.name||this._("template.template");;
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            const that = this;
            const stateId = RED.editor.generateViewStateId("node", this, "");
            if (!this.field) {
                this.field = 'payload';
                $("#node-input-field").val("payload");
            }
            if (!this.fieldType) {
                this.fieldType = 'msg';
            }
            if (!this.syntax) {
                this.syntax = 'mustache';
                $("#node-input-syntax").val(this.syntax);
            }
            $("#node-input-field").typedInput({
                default: 'msg',
                types: ['msg','flow','global'],
                typeField: $("#node-input-fieldType")
            });
            this.editor = RED.editor.createEditor({
                id: 'node-input-template-editor',
                mode: 'ace/mode/html',
                stateId: stateId,
                value: $("#node-input-template").val()
            });
            RED.library.create({
                url:"templates", // where to get the data from
                type:"template", // the type of object the library is for
                editor:that.editor, // the field name the main text body goes to
                fields:['name','format','output','syntax'],
                ext: "txt"
            });

            $("#node-input-format").on("change", function() {
                var mod = "ace/mode/"+$("#node-input-format").val();
                that.editor.getSession().setMode({
                    path: mod,
                    v: Date.now()
                });
            });
            RED.popover.tooltip($("#node-template-expand-editor"), RED._("node-red:common.label.expand"));
            $("#node-template-expand-editor").on("click", function (e) {
                e.preventDefault();
                const value = that.editor.getValue();
                that.editor.saveView();
                RED.editor.editText({
                    mode: $("#node-input-format").val(),
                    value: value,
                    stateId: stateId,
                    width: "Infinity",
                    focus: true,
                    complete: function (v, cursor) {
                        that.editor.setValue(v, -1);
                        setTimeout(function () {
                            that.editor.restoreView();
                            that.editor.focus();
                        }, 250);
                    }
                })
            })
        },
        oneditsave: function() {
            $("#node-input-template").val(this.editor.getValue());
            this.editor.destroy();
            delete this.editor;
        },
        oneditcancel: function() {
            this.editor.destroy();
            delete this.editor;
        },
        oneditresize: function(size) {
            var rows = $("#dialog-form>div:not(.node-text-editor-row)");
            var height = $("#dialog-form").height();
            for (var i=0; i<rows.length; i++) {
                height -= $(rows[i]).outerHeight(true);
            }
            var editorRow = $("#dialog-form>div.node-text-editor-row");
            height -= (parseInt(editorRow.css("marginTop"))+parseInt(editorRow.css("marginBottom")));
            $(".node-text-editor").css("height",height+"px");
            this.editor.resize();
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="template">
    <p>Sets a property based on the provided template.</p>
    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt>msg <span class="property-type">object</span></dt>
        <dd>A msg object containing information to populate the template.</dd>
        <dt class="optional">template <span class="property-type">string</span></dt>
        <dd>A template to be populated from <code>msg.payload</code>. If not configured in the edit panel,
         this can be set as a property of msg.</dd>
    </dl>
    <h3>Outputs</h3>
    <dl class="message-properties">
        <dt>msg <span class="property-type">object</span></dt>
        <dd>a msg with a property set by populating the configured template with properties from the incoming msg.</dd>
    </dl>
    <h3>Details</h3>
    <p>By default this uses the <i><a href="http://mustache.github.io/mustache.5.html" target="_blank">mustache</a></i>
    format, but this can be switched off if required.</p>
    <p>For example, when a template of:
    <pre>Hello {{payload.name}}. Today is {{date}}</pre>
    <p>receives a message containing:
    <pre>{
  date: "Monday",
  payload: {
    name: "Fred"
  }
}</pre>
    <p>The resulting property will be:
    <pre>Hello Fred. Today is Monday</pre>
    <p>It is possible to use a property from the flow context or global context. Just use <code>{{flow.name}}</code> or
    <code>{{global.name}}</code>, or for persistable store <code>store</code> use <code>{{flow[store].name}}</code> or
    <code>{{global[store].name}}</code>.
    <p><b>Note: </b>By default, <i>mustache</i> will escape any non-alphanumeric or HTML entities in the values it substitutes.
       To prevent this, use <code>{{{triple}}}</code> braces.</p>
    <p>If you need to use <code>{{ }}</code> within your content, you can change the characters
       used to mark the templated sections. For example, to use <code>[[ ]]</code>
       instead, add the following line to the top of the template:</p>
    <pre>{{=[[ ]]=}}</pre>
</script>

<!-- --- [red-module:node-red/delay] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="delay">
    <div class="form-row">
        <label for="node-input-delay-action"><i class="fa fa-tasks"></i> <span data-i18n="delay.action"></span></label>
        <select id="node-input-delay-action" style="width:270px !important">
            <option value="delay" data-i18n="delay.delaymsg"></option>
            <option value="rate" data-i18n="delay.limitrate"></option>
        </select>
    </div>

    <div id="delay-details">
        <div class="form-row">
            <label></label>
            <select id="node-input-delay-type" style="width:270px !important">
                <option value="delay" data-i18n="delay.delayfixed"></option>
                <option value="random" data-i18n="delay.randomdelay"></option>
                <option value="delayv" data-i18n="delay.delayvarmsg"></option>
            </select>
        </div>
        <div class="form-row" id="delay-details-for">
            <label for="node-input-timeout"><i class="fa fa-clock-o"></i> <span data-i18n="delay.for"></span></label>
            <input type="text" id="node-input-timeout" style="text-align:end; width:50px !important">
            <select id="node-input-timeoutUnits" style="width:200px !important">
              <option value="milliseconds" data-i18n="delay.milisecs"></option>
              <option value="seconds" data-i18n="delay.secs"></option>
              <option value="minutes" data-i18n="delay.mins"></option>
              <option value="hours" data-i18n="delay.hours"></option>
              <option value="days" data-i18n="delay.days"></option>
            </select>
        </div>
        <div id="random-details" class="form-row">
            <label for="node-input-randomFirst"><i class="fa fa-clock-o"></i> <span data-i18n="delay.between"></span></label>
            <input type="text" id="node-input-randomFirst" placeholder="" style="text-align:end; width:50px !important">
            &nbsp;<span data-i18n="delay.and"></span>&nbsp;
            <input type="text" id="node-input-randomLast" placeholder="" style="text-align:end; width:50px !important">
            <select id="node-input-randomUnits" style="width:140px !important">
              <option value="milliseconds" data-i18n="delay.milisecs"></option>
              <option value="seconds" data-i18n="delay.secs"></option>
              <option value="minutes" data-i18n="delay.mins"></option>
              <option value="hours" data-i18n="delay.hours"></option>
              <option value="days" data-i18n="delay.days"></option>
            </select>
        </div>
    </div>

    <div id="rate-details">
        <div class="form-row">
            <label></label>
            <select id="node-input-rate-type" style="width:270px !important">
                <option value="all" data-i18n="delay.limitall"></option>
                <option value="topic" data-i18n="delay.limittopic"></option>
            </select>
        </div>
        <div class="form-row">
            <label for="node-input-rate"><i class="fa fa-clock-o"></i> <span data-i18n="delay.rate"></span></label>
            <input type="text" id="node-input-rate" placeholder="1" style="text-align:end; width:40px !important">
            <label for="node-input-rateUnits"><span data-i18n="delay.msgper"></span></label>
            <input type="text" id="node-input-nbRateUnits" placeholder="1" style="text-align:end; width:40px !important">
            <select id="node-input-rateUnits" style="width:90px !important">
              <option value="second" data-i18n="delay.label.units.second.singular"></option>
              <option value="minute" data-i18n="delay.label.units.minute.singular"></option>
              <option value="hour" data-i18n="delay.label.units.hour.singular"></option>
              <option value="day" data-i18n="delay.label.units.day.singular"></option>
            </select>
        </div>
        <div class="form-row" id="rate-override" style="display: flex; align-items: center">
            <label></label><input style="width:30px; margin:0" type="checkbox" id="node-input-allowrate"><label style="margin:0;width: auto;" for="node-input-allowrate" data-i18n="delay.allowrate"></label>
        </div>
        <div class="form-row" id="rate-details-drop">
            <input type="hidden" id="node-input-outputs" value="1">
            <label></label>
            <select id="node-input-drop-select" style="width: 70%">
                <option id="node-input-drop-select-queue" value="queue" data-i18n="delay.queuemsg"></option>
                <option value="drop" data-i18n="delay.dropmsg"></option>
                <option value="emit" data-i18n="delay.sendmsg"></option>
            </select>
        </div>
        <div class="form-row" id="rate-details-per-topic">
            <label></label>
            <select id="node-input-rate-topic-type" style="width:270px !important">
                <option value="queue" data-i18n="delay.fairqueue"></option>
                <option value="timed" data-i18n="delay.timedqueue"></option>
            </select>
        </div>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('delay',{
        category: 'function',
        color:"#E6E0F8",
        defaults: {
            name: {value:""},
            pauseType: {value:"delay", required:true},
            timeout: {
                value:"5", required:true,
                label:RED._("node-red:delay.label.delay"),
                validate:function(v,opt) {
                    if (RED.validators.number(v) && (v >= 0)) {
                        return true;
                    }
                    return RED._("node-red:delay.errors.invalid-timeout");
                }},
            timeoutUnits: {value:"seconds"},
            rate: {
                value:"1",
                required:true,
                label:RED._("node-red:delay.label.rate"),
                validate:function(v,opt) {
                    if (RED.validators.number(v) && (v >= 0)) {
                        return true;
                    }
                    return RED._("node-red:delay.errors.invalid-rate");
                }
            },
            nbRateUnits: {
                value:"1",
                required:false,
                validate:function(v,opt) {
                    if (v === undefined || (RED.validators.number(v) && (v >= 0))) {
                        return true;
                    }
                    return RED._("node-red:delay.errors.invalid-rate-unit");
                }
            },
            rateUnits: {value: "second"},
            randomFirst: {
                value:"1", required:true,
                validate:function(v,opt) {
                    if (RED.validators.number(v) && (v >= 0)) {
                        return true;
                    }
                    return RED._("node-red:delay.errors.invalid-random-first");
                }},
            randomLast: {
                value:"5", required:true,
                validate:function(v,opt) {
                    if (RED.validators.number(v) && (v >= 0)) {
                        return true;
                    }
                    return RED._("node-red:delay.errors.invalid-random-last");
                }},
            randomUnits: {value: "seconds"},
            drop: {value:false},
            allowrate: {value:false},
            outputs: { value: 1},
        },
        inputs:1,
        outputs:1,
        icon: "timer.svg",
        label: function() {
            if (this.name) {
                return this.name;
            }
            if (this.pauseType == "delayv") {
                return this._("delay.label.variable");
            } else if (this.pauseType == "delay") {
                var units = this.timeoutUnits ? this.timeoutUnits.charAt(0) : "s";
                if (this.timeoutUnits == "milliseconds") { units = "ms"; }
                return this._("delay.label.delay")+" "+this.timeout+units;
            } else if (this.pauseType == "random") {
                return this._("delay.label.random");
            } else {
                var rate = this.rate+" msg/"+(this.rateUnits ? (this.nbRateUnits > 1 ? this.nbRateUnits : '') + this.rateUnits.charAt(0) : "s");
                if (this.pauseType == "rate") {
                    return this._("delay.label.limit")+" "+rate;
                } else if (this.pauseType == "timed") {
                    return this._("delay.label.limitTopic")+" "+rate;
                } else {
                    return this._("delay.label.limitTopic")+" "+rate;
                }
            }
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var node = this;
            $( "#node-input-timeout" ).spinner({min:1});
            $( "#node-input-rate" ).spinner({min:1});
            $( "#node-input-nbRateUnits" ).spinner({min:1});

            $( "#node-input-randomFirst" ).spinner({min:0});
            $( "#node-input-randomLast" ).spinner({min:1});

            $('.ui-spinner-button').on("click", function() {
                $(this).siblings('input').trigger("change");
            });

            $( "#node-input-nbRateUnits" ).on('change keyup', function() {
                var $this = $(this);
                var val = parseInt($this.val());
                var type = "singular";
                if (val > 1) {
                    type = "plural";
                }
                if ($this.attr("data-type") == type) {
                    return;
                }
                $this.attr("data-type", type);
                $("#node-input-rateUnits option").each(function () {
                    var $option = $(this);
                    var key = "delay.label.units." + $option.val() + "." + type;
                    $option.attr('data-i18n', 'node-red:' + key);
                    $option.html(node._(key));
                });
            });

            if (this.pauseType == "delay") {
                $("#node-input-delay-action").val('delay');
                $("#node-input-delay-type").val('delay');
            } else if (this.pauseType == "delayv") {
                $("#node-input-delay-action").val('delay');
                $("#node-input-delay-type").val('delayv');
            } else if (this.pauseType == "random") {
                $("#node-input-delay-action").val('delay');
                $("#node-input-delay-type").val('random');
            } else if (this.pauseType == "rate") {
                $("#node-input-delay-action").val('rate');
                $("#node-input-rate-type").val('all');
            } else if (this.pauseType == "queue") {
                $("#node-input-delay-action").val('rate');
                $("#node-input-rate-type").val('topic');
                $("#node-input-rate-topic-type").val('queue');
            } else if (this.pauseType == "timed") {
                $("#node-input-delay-action").val('rate');
                $("#node-input-rate-type").val('topic');
                $("#node-input-rate-topic-type").val('timed');
            }

            if (!this.timeoutUnits) {
                $("#node-input-timeoutUnits option").filter(function() {
                    return $(this).val() == 'seconds';
                }).attr('selected', true);
            }

            if (!this.randomUnits) {
                $("#node-input-randomUnits option").filter(function() {
                    return $(this).val() == 'seconds';
                }).attr('selected', true);
            }

            $("#node-input-delay-action").on("change",function() {
                if (this.value === "delay") {
                    $("#delay-details").show();
                    $("#rate-details").hide();
                } else if (this.value === "rate") {
                    $("#delay-details").hide();
                    $("#rate-details").show();
                }
            }).trigger("change");

            $("#node-input-delay-type").on("change", function() {
                if (this.value === "delay") {
                    $("#delay-details-for").show();
                    $("#random-details").hide();
                } else if (this.value === "delayv") {
                    $("#delay-details-for").show();
                    $("#random-details").hide();
                } else if (this.value === "random") {
                    $("#delay-details-for").hide();
                    $("#random-details").show();
                }
            }).trigger("change");

            if (this.outputs === 2) {
                $("#node-input-drop-select").val("emit");
            } else if (this.drop) {
                $("#node-input-drop-select").val("drop");
            } else {
                $("#node-input-drop-select").val("queue");
            }

            $("#node-input-rate-type").on("change", function() {
                if (this.value === "all") {
                    $("#rate-details-per-topic").hide();
                    $("#node-input-drop-select-queue").attr('disabled', false);
                } else if (this.value === "topic") {
                    if ($("#node-input-drop-select").val() === "queue") {
                        $("#node-input-drop-select").val("drop");
                    }
                    $("#node-input-drop-select-queue").attr('disabled', true);
                    $("#rate-details-per-topic").show();
                }
            }).trigger("change");
        },
        oneditsave: function() {
            var action = $("#node-input-delay-action").val();
            if (action === "delay") {
                this.pauseType = $("#node-input-delay-type").val();
                $("#node-input-outputs").val(1);
            } else if (action === "rate") {
                action = $("#node-input-rate-type").val();
                if (action === "all") {
                    this.pauseType = "rate";
                } else {
                    this.pauseType = $("#node-input-rate-topic-type").val();
                }
                var dropType = $("#node-input-drop-select").val();
                this.drop = dropType !== "queue";
                $("#node-input-outputs").val(dropType === "emit"?2:1);
            }
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="delay">
    <p>Delays each message passing through the node or limits the rate at which they can pass.</p>
    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt class="optional">delay <span class="property-type">number</span></dt>
        <dd>Sets the delay, in milliseconds, to be applied to the message. This
            option only applies if the node is configured to allow the message to
            override the configured default delay interval.</dd>
        <dt class="optional">rate <span class="property-type">number</span></dt>
        <dd>Sets the rate value in milliseconds between messages.
            This node overwrites the existing rate value defined in the node configuration
            when it receives the message which contains <code>msg.rate</code> value in milliSeconds.
            This option only applies if the node is configured to allow the message to
            override the configured default rate interval.</dd>
        <dt class="optional">reset</dt>
        <dd>If the received message has this property set to any value, all
            outstanding messages held by the node are cleared without being sent.</dd>
        <dt class="optional">flush</dt>
        <dd>If the received message has this property set to a numeric value then that many messages
            will be released immediately. If set to any other type (e.g. boolean), then all
            outstanding messages held by the node are sent immediately.</dd>
        <dt class="optional">toFront</dt>
        <dd>When in rate limit mode, if the received message has this property set to boolean <code>true</code>,
            then the message is pushed to the front of the queue and will be released next.
            This can be used in combination with <code>msg.flush=1</code> to resend immediately.
        </dd>
    </dl>
    <h3>Details</h3>
    <p>When configured to delay messages, the delay interval can be a fixed value,
        a random value within a range or dynamically set for each message.
        Each message is delayed independently of any other message, based on
        the time of its arrival.
    </p>
    <p>When configured to rate limit messages, their delivery is spread across
        the configured time period. The status shows the number of messages currently in the queue.
        It can optionally discard intermediate messages as they arrive.</p>
    </p>
    <p>If set to allow override of the rate, the new rate will be applied immediately,
        and will remain in effect until changed again, the node is reset, or the flow is restarted.</p>
    <p>The rate limiting can be applied to all messages, or group them according to
        their <code>msg.topic</code> value. When grouping, intermediate messages are
        automatically dropped. At each time interval, the node can either release
        the most recent message for all topics, or release the most recent message
        for the next topic.
    </p>
    <p><b>Note</b>: In rate limit mode the maximum queue depth can be set by a property in your
        <i>settings.js</i> file. For example <code>nodeMessageBufferMaxLength: 1000,</code></p>
</script>

<!-- --- [red-module:node-red/trigger] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="trigger">
    <div class="form-row">
        <label data-i18n="trigger.send" for="node-input-op1"></label>
        <input type="hidden" id="node-input-op1type">
        <input style="width:70%" type="text" id="node-input-op1" placeholder="1">
    </div>
    <div class="form-row">
        <label data-i18n="trigger.then"></label>
        <select id="node-then-type" style="width:70%;">
            <option value="block" data-i18n="trigger.wait-reset"></option>
            <option value="wait" data-i18n="trigger.wait-for"></option>
            <option value="loop" data-i18n="trigger.wait-loop"></option>
        </select>
    </div>
    <div class="form-row node-type-duration">
        <label></label>
        <input type="text" id="node-input-duration" style="text-align:end; width:70px !important">
        <select id="node-input-units" style="width:140px !important">
            <option value="ms" data-i18n="trigger.duration.ms"></option>
            <option value="s" data-i18n="trigger.duration.s"></option>
            <option value="min" data-i18n="trigger.duration.m"></option>
            <option value="hr" data-i18n="trigger.duration.h"></option>
        </select>
    </div>
    <div class="form-row node-type-wait">
    <label></label>
        <input type="checkbox" id="node-input-extend" style="margin-left:0px; vertical-align:top; width:auto !important;"> <label style="width:auto !important;" for="node-input-extend" data-i18n="trigger.extend"></label>
    </div>
    <div class="form-row node-type-override">
    <label></label>
        <input type="checkbox" id="node-input-overrideDelay" style="margin-left:0px; vertical-align:top; width:auto !important;"> <label style="width:auto !important;" for="node-input-overrideDelay" data-i18n="trigger.override"></label>
    </div>
    <div class="form-row node-type-wait">
        <label data-i18n="trigger.then-send"></label>
        <input type="hidden" id="node-input-op2type">
        <input style="width:70%" type="text" id="node-input-op2" placeholder="0">
    </div>
    <div class="form-row" id="node-second-output">
        <label></label>
            <input type="checkbox" id="node-input-second" style="margin-left: 0px; vertical-align: top; width: auto !important;"> <label style="width:auto !important;" for="node-input-second" data-i18n="trigger.second"></label>
        </div>
    <div class="form-row">
        <label data-i18n="trigger.label.reset" style="width:auto"></label>
        <div style="display:inline-block; width:70%;vertical-align:top">
        <ul>
            <li data-i18n="trigger.label.resetMessage"></li>
            <li><span data-i18n="trigger.label.resetPayload"></span> <input type="text" id="node-input-reset" style="width:150px" data-i18n="[placeholder]trigger.label.resetprompt"></li>
        </ul>
    </div>
    <br/>
    <div class="form-row">
        <label data-i18n="trigger.for" for="node-input-bytopic"></label>
        <select id="node-input-bytopic" style="width:120px;">
            <option value="all" data-i18n="trigger.alltopics"></option>
            <option value="topic" data-i18n="trigger.bytopics"></option>
        </select>
        <span class="form-row" id="node-stream-topic">
            <input type="text" id="node-input-topic" style="width:46%;"/>
        </span>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name"></input>
        <input type="hidden" id="node-input-outputs" value="1">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('trigger',{
        category: 'function',
        color:"#E6E0F8",
        defaults: {
            name: {value:""},
            op1: {value:"1",
                  label: RED._("node-red:trigger.send"),
                  validate: RED.validators.typedInput("op1type", false)},
            op2: {value:"0",
                  label: RED._("node-red:trigger.then-send"),
                  validate: RED.validators.typedInput("op2type", false)},
            op1type: {value:"val"},
            op2type: {value:"val"},
            duration: {
                value:"250", required:true,
                label:RED._("node-red:trigger.label.duration"),
                validate:RED.validators.number(false)},
            extend: {value:"false"},
            overrideDelay: {value:"false"},
            units: {value:"ms"},
            reset: {value:""},
            bytopic: {value:"all"},
            topic: {value:"topic", required:true,
                    label:RED._("node-red:trigger.label.topic")},
            outputs: {value:1}
        },
        inputs:1,
        outputs:1,
        icon: "trigger.svg",
        label: function() {
            if (this.duration > 0) {
                return this.name|| this._("trigger.label.trigger")+" "+this.duration+this.units;
            }
            if (this.duration < 0) {
                return this.name|| this._("trigger.label.trigger-loop")+" "+(this.duration * -1)+this.units;
            }
            else {
                return this.name|| this._("trigger.label.trigger-block");
            }
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var that = this;
            if (this.topic === undefined) { $("#node-input-topic").val("topic"); }
            $("#node-input-topic").typedInput({default:'msg',types:['msg']});
            $("#node-input-bytopic").on("change", function() {
                if ($("#node-input-bytopic").val() === "all") {
                    $("#node-stream-topic").hide();
                } else {
                    $("#node-stream-topic").show();
                }
            });

            if (this.outputs == 2) { $("#node-input-second").prop('checked', true) }
            else { $("#node-input-second").prop('checked', false) }

            $("#node-input-second").change(function() {
                if ($("#node-input-second").is(":checked")) {
                    $("#node-input-outputs").val(2);
                }
                else  {
                    $("#node-input-outputs").val(1);
                }
            });
            $("#node-then-type").on("change", function() {
                if ($(this).val() == "block") {
                    $(".node-type-wait").hide();
                    $(".node-type-override").hide();
                    $(".node-type-duration").hide();
                    $("#node-second-output").hide();
                    $("#node-input-second").prop('checked', false);
                    $("#node-input-outputs").val(1);
                }
                else if ($(this).val() == "loop") {
                    if ($("#node-input-duration").val() == 0) { $("#node-input-duration").val(250); }
                    $(".node-type-wait").hide();
                    $(".node-type-override").show();
                    $(".node-type-duration").show();
                    $("#node-second-output").hide();
                    $("#node-input-second").prop('checked', false);
                    $("#node-input-outputs").val(1);
                } else {
                    if ($("#node-input-duration").val() == 0) { $("#node-input-duration").val(250); }
                    $(".node-type-wait").show();
                    $(".node-type-override").show();
                    $(".node-type-duration").show();
                    $("#node-second-output").show();
                }
            });

            if (this.op1type === 'val') {
                $("#node-input-op1type").val('str');
            }
            if (this.op2type === 'val') {
                $("#node-input-op2type").val('str');
            }

            var optionNothing = {value:"nul",label:this._("trigger.output.nothing"),hasValue:false};
            var optionPayload = {value:"pay",label:this._("trigger.output.existing"),hasValue:false};
            var optionOriginalPayload = {value:"pay",label:this._("trigger.output.original"),hasValue:false};
            var optionLatestPayload = {value:"payl",label:this._("trigger.output.latest"),hasValue:false};

            $("#node-input-op1").typedInput({
                default: 'str',
                typeField: $("#node-input-op1type"),
                types:['flow','global','str','num','bool','json','bin','date','env',
                    optionPayload,
                    optionNothing
                ]
            });
            $("#node-input-op2").typedInput({
                default: 'str',
                typeField: $("#node-input-op2type"),
                types:['flow','global','str','num','bool','json','bin','date','env',
                    optionOriginalPayload,
                    optionLatestPayload,
                    optionNothing
                ]
            });

            if (this.bytopic === undefined) {
                $("#node-input-bytopic").val("all");
            }

            if (this.duration == "0") {
                $("#node-then-type").val("block");
            }
            else if ((this.duration * 1) < 0) {
                $("#node-then-type").val("loop");
                $("#node-input-duration").val(this.duration*-1);
            } else {
                $("#node-then-type").val("wait");
            }
            $("#node-then-type").trigger("change");

            if (this.extend === "true" || this.extend === true) {
                $("#node-input-extend").prop("checked",true);
            } else {
                $("#node-input-extend").prop("checked",false);
            }
            if (this.overrideDelay === "true" || this.overrideDelay === true) {
                $("#node-input-overrideDelay").prop("checked",true);
            } else {
                $("#node-input-overrideDelay").prop("checked",false);
            }
        },
        oneditsave: function() {
            if ($("#node-then-type").val() == "block") {
                $("#node-input-duration").val("0");
            }
            if ($("#node-then-type").val() == "loop") {
                $("#node-input-duration").val($("#node-input-duration").val() * -1);
            }
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="trigger">
    <p>When triggered, can send a message, and then optionally a second message, unless extended or reset.</p>

    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt class="optional">delay <span class="property-type">number</span></dt>
        <dd>Sets the delay, in milliseconds, to be applied to the message. This option only applies if the node is configured to allow the message to override the configured default delay interval.</dd>
        <dt class="optional">reset</dt>
        <dd>If a message is received with this property, any timeout or repeat
        currently in progress will be cleared and no message triggered.</dd>
    </dl>

    <h3>Details</h3>
    <p>This node can be used to create a timeout within a flow. By default, when
    it receives a message, it sends on a message with a <code>payload</code> of <code>1</code>.
    It then waits 250ms before sending a second message with a <code>payload</code> of <code>0</code>.
    This could be used, for example, to blink an LED attached to a Raspberry Pi GPIO pin.</p>
    <p>The payloads of each message sent can be configured to a variety of values, including
    the option to not send anything. For example, setting the initial message to <i>nothing</i> and
    selecting the option to extend the timer with each received message, the node will
    act as a watchdog timer; only sending a message if nothing is received within the
    set interval.</p>
    <p>If set to a <i>string</i> type, the node supports the mustache template syntax.</p>
    <p>The delay between sending messages can be overridden by <code>msg.delay</code> if that option is enabled in the node. The value must be provided in milliseconds.</p>
    <p>If the node receives a message with a <code>reset</code> property, or a <code>payload</code>
    that matches that configured in the node, any timeout or repeat currently in
    progress will be cleared and no message triggered.</p>
    <p>The node can be configured to resend a message at a regular interval until it
    is reset by a received message.</p>
    <p>Optionally, the node can be configured to treat messages as if they are separate streams,
    using a msg property to identify each stream. Default <code>msg.topic</code>.</p>
    <p>The status indicates the node is currently active. If multiple streams are used the status
    indicates the number of streams being held.</p>
</script>

<!-- --- [red-module:node-red/exec] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="exec">
    <div class="form-row">
        <label for="node-input-command"><i class="fa fa-file"></i> <span data-i18n="exec.label.command"></span></label>
        <input type="text" id="node-input-command" data-i18n="[placeholder]exec.label.command">
    </div>
    <div class="form-row">
        <label><i class="fa fa-plus"></i> <span data-i18n="exec.label.append"></span></label>
        <input type="checkbox" id="node-input-addpay-cb" style="display:inline-block; width:auto;">
        <input type="text" id="node-input-addpay" style="margin-left: 5px; width:160px;">
    </div>
    <div class="form-row">
        <label for="node-input-append"> </label>
        <input type="text" id="node-input-append" data-i18n="[placeholder]exec.placeholder.extraparams">
    </div>
    <div class="form-row">
        <label><i class="fa fa-sign-out"></i> <span data-i18n="exec.label.return"></span></label>
        <select type="text" id="node-input-useSpawn" style="width:70%">
            <option value="false" data-i18n="exec.opt.exec"></option>
            <option value="true" data-i18n="exec.opt.spawn"></option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-timer"><i class="fa fa-clock-o"></i> <span data-i18n="exec.label.timeout"></span></label>
        <input type="text" id="node-input-timer" style="width:65px;" data-i18n="[placeholder]exec.label.timeoutplace">
        <span data-i18n="exec.label.seconds"></span>
    </div>
    <div class="form-row">
        <label for="node-input-winHide" style="width: auto !important; padding-right:10px"><i class="fa fa-windows"></i> <span data-i18n="exec.label.winHide"></span></label>
        <input type="checkbox" id="node-input-winHide" style="margin-top: 0; display:inline-block; width:auto;">
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('exec',{
        category: 'function',
        color:"darksalmon",
        defaults: {
            command: {value:""},
            addpay: {value:""},
            append: {value:""},
            useSpawn: {value:"false"},
            timer: {value:""},
            winHide: {value:false},
            oldrc: {value:false},
            name: {value:""}
        },
        inputs:1,
        outputs:3,
        outputLabels: function(i) {
            return [
                this._("exec.label.stdout"),
                this._("exec.label.stderr"),
                this._("exec.label.retcode")
            ][i];
        },
        icon: "cog.svg",
        label: function() {
            return this.name||this.command.replace(/\\n /g,"\\\\n ")||(this.useSpawn=="true"?this._("exec.spawn"):this._("exec.exec"));
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            if ($("#node-input-useSpawn").val() === null) {
                $("#node-input-useSpawn").val(this.useSpawn.toString());
            }
            $("#node-input-addpay-cb").prop("checked", this.addpay === true || (this.addpay !== false && this.addpay !== ""))
            var addpayValue = (this.addpay === true)?"payload":((this.addpay === false || this.addpay === "")?"payload":this.addpay);
            $("#node-input-addpay-cb").on("change", function(evt) {
                $("#node-input-addpay").typedInput("disable",!$("#node-input-addpay-cb").prop("checked"));
            });

            $("#node-input-addpay").val(addpayValue);
            $("#node-input-addpay").typedInput({
                default: "msg",
                types: ["msg"]
            });

            $("#node-input-addpay-cb").trigger("change")

            if (this.winHide === "true" || this.winHide === true) {
                $("#node-input-winHide").prop("checked",true);
            } else {
                $("#node-input-winHide").prop("checked",false);
            }
        },
        oneditsave: function() {
            if (!$("#node-input-addpay-cb").prop("checked")) {
                $("#node-input-addpay").val("");
            }
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="exec">
    <p>Runs a system command and returns its output.</p>
    <p>The node can be configured to either wait until the command completes, or to
    send its output as the command generates it.</p>
    <p>The command that is run can be configured in the node or provided by the received
    message.</p>

    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt class="optional">payload <span class="property-type">string</span></dt>
        <dd>if configured to do so, will be appended to the executed command.</dd>
        <dt class="optional">kill <span class="property-type">string</span></dt>
        <dd>the type of kill signal to send an existing exec node process.</dd>
        <dt class="optional">pid <span class="property-type">number|string</span></dt>
        <dd>the process ID of an existing exec node process to kill.</dd>
    </dl>

    <h3>Outputs</h3>
    <ol class="node-ports">
        <li>Standard output
            <dl class="message-properties">
                <dt>payload <span class="property-type">string</span></dt>
                <dd>the standard output of the command.</dd>
            </dl>
            <dl class="message-properties">
                <dt>rc <span class="property-type">object</span></dt>
                <dd>exec mode only, a copy of the return code object (also available on port 3)</dd>
            </dl>
        </li>
        <li>Standard error
            <dl class="message-properties">
                <dt>payload <span class="property-type">string</span></dt>
                <dd>the standard error of the command.</dd>
            </dl>
            <dl class="message-properties">
                <dt>rc <span class="property-type">object</span></dt>
                <dd>exec mode only, a copy of the return code object (also available on port 3)</dd>
            </dl>
        </li>
        <li>Return code
            <dl class="message-properties">
                <dt>payload <span class="property-type">object</span></dt>
                <dd>an object containing the return code, and possibly <code>message</code>, <code>signal</code> properties.</dd>
            </dl>
        </li>
    </ol>
    <h3>Details</h3>
    <p>By default uses the <code>exec</code> system call which calls the command, waits for it to complete, and then
    returns the output. For example a successful command should have a return code of <code>{ code: 0 }</code>.</p>
    <p>Optionally can use <code>spawn</code> instead, which returns the output from stdout and stderr
    as the command runs, usually one line at a time. On completion it then returns an object
    on the 3rd port. For example, a successful command should return <code>{ code: 0 }</code>.</p>
    <p>Errors may return extra information on the 3rd port <code>msg.payload</code>, such as a <code>message</code> string,
    <code>signal</code> string.</p>
    <p>The command that is run is defined within the node, with an option to append <code>msg.payload</code> and a further set of parameters.</p>
    <p>Commands or parameters with spaces should be enclosed in quotes - <code>"This is a single parameter"</code></p>
    <p>The returned <code>payload</code> is usually a <i>string</i>, unless non-UTF8 characters are detected, in which
    case it is a <i>buffer</i>.</p>
    <p>The node&apos;s status icon and PID will be visible while the node is active. Changes to this can be read by the <code>Status</code> node.</p>
    <p>The <code>Hide console</code> option will hide the process console normally shown on Windows systems.</p>
    <h4>Killing processes</h4>
    <p>Sending <code>msg.kill</code> will kill a single active process. <code>msg.kill</code> should be a string containing
    the type of signal to be sent, for example, <code>SIGINT</code>, <code>SIGQUIT</code> or <code>SIGHUP</code>.
    Defaults to <code>SIGTERM</code> if set to an empty string.</p>
    <p>If the node has more than one process running then <code>msg.pid</code> must also be set with the value of the PID to be killed.</p>
    <p>If a value is provided in the <code>Timeout</code> field then, if the process has not completed when the specified number of seconds has elapsed, the process will be killed automatically</p>
    <p>Tip: if running a Python app you may need to use the <code>-u</code> parameter to stop the output being buffered.</p>
</script>

<!-- --- [red-module:node-red/rbe] --- -->

<script type="text/html" data-template-name="rbe">
    <div class="form-row">
        <label for="node-input-func"><i class="fa fa-wrench"></i> <span data-i18n="rbe.label.func"></span></label>
        <select type="text" id="node-input-func" style="width:70%;">
            <option value="rbe" data-i18n="rbe.opts.rbe"></option>
            <option value="rbei" data-i18n="rbe.opts.rbei"></option>
            <option value="deadbandEq" data-i18n="rbe.opts.deadbandEq"></option>
            <option value="deadband" data-i18n="rbe.opts.deadband"></option>
            <option value="narrowbandEq" data-i18n="rbe.opts.narrowbandEq"></option>
            <option value="narrowband" data-i18n="rbe.opts.narrowband"></option>
        </select>
    </div>
    <div class="form-row" id="node-bandgap">
        <label for="node-input-gap">&nbsp;</label>
        <input type="text" id="node-input-gap" data-i18n="[placeholder]rbe.placeholder.bandgap" style="width:95px;">
        <select type="text" id="node-input-inout" style="width:54%;">
            <option value="out" data-i18n="rbe.opts.out"></option>
            <option value="in" data-i18n="rbe.opts.in"></option>
        </select>
    </div>
    <div class="form-row" id="node-startvalue">
        <label for="node-input-start"><i class="fa fa-thumb-tack"></i> <span data-i18n="rbe.label.start"></span></label>
        <input type="text" id="node-input-start" data-i18n="[placeholder]rbe.placeholder.start" style="width:70%;">
    </div>
    <div class="form-row">
        <label for="node-input-property"><i class="fa fa-ellipsis-h"></i> <span data-i18n="node-red:common.label.property"></span></label>
        <input type="text" id="node-input-property" style="width:70%;"/>
    </div>
    <div class="form-row" style="margin-bottom: 0px;">
        <label> </label>
        <input type="checkbox" id="node-input-septopics" style="display:inline-block; width:20px; vertical-align:baseline;">
        <label style="width: auto" for="node-input-septopics" data-i18n="rbe.label.septopics"></label>
    </div>
    <div class="form-row">
        <label> </label>
        <input type="text" id="node-input-topi"  style="width:70%;"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="rbe.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]rbe.label.name" style="width:70%;">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType("rbe", {
        color:"#E2D96E",
        category: 'function',
        defaults: {
            name: {value:""},
            func: {value:"rbe"},
            gap: {value:"",
                  label: RED._("node-red:rbe.label.gap"),
                  validate:RED.validators.regex(/^(\d*[.]*\d*|)(%|)$/)},
            start: {value:""},
            inout: {value:"out"},
            septopics: {value:true},
            property: {value:"payload", required:true,
                       label:RED._("node-red:rbe.label.property")},
            topi: {value:"topic", required:true,
                   label:RED._("node-red:rbe.label.topic")}
        },
        inputs:1,
        outputs:1,
        icon: "rbe.png",
        paletteLabel: "filter",
        label: function() {
            var ll = (this.func||"").replace("Eq","").replace("rbei",this._("rbe.rbe")).replace("rbe",this._("rbe.rbe"))||this._("rbe.rbe");
            return this.name||ll||this._("rbe.rbe");
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            if (this.property === undefined) {
                $("#node-input-property").val("payload");
            }
            if (this.septopics === undefined) {
                $("#node-input-septopics").prop('checked', true);
            }
            if (this.topi === undefined) {
                $("#node-input-topi").val("topic");
            }

            $("#node-input-property").typedInput({default:'msg',types:['msg']});
            $("#node-input-topi").typedInput({default:'msg',types:['msg']});
            //$( "#node-input-gap" ).spinner({min:0});
            if ($("#node-input-inout").val() === null) {
                $("#node-input-inout").val("out");
            }
            $("#node-input-func").on("change",function() {
                if (($("#node-input-func").val() === "rbe")||($("#node-input-func").val() === "rbei")) {
                    $("#node-bandgap").hide();
                } else {
                    $("#node-bandgap").show();
                }
                if (($("#node-input-func").val() === "narrowband")||($("#node-input-func").val() === "narrowbandEq")) {
                    $("#node-startvalue").show();
                } else {
                    $("#node-startvalue").hide();
                }
            });
            $("#node-input-septopics").on("change", function() {
                $("#node-input-topi").typedInput("disable",!this.checked);
            })
            $("#node-input-topi").typedInput("disable",!!!this.septopics);

        }
    });
</script>
<script type="text/html" data-help-name="rbe">
    <p>Report by Exception (RBE) node - only passes on data if the payload has changed.
       It can also block unless, or ignore if the value changes by a specified amount (Dead- and Narrowband mode).</p>
    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt>payload
            <span class="property-type">number | string | (object)</span>
        </dt>
        <dd>RBE mode will accept numbers, strings, and simple objects.
            Other modes must provide a parseable number.</dd>
        <dt class="optional">topic <span class="property-type">string</span>
        </dt>
        <dd>if specified the function will work on a per topic basis. This property can be set by configuration.</dd>
        <dt class="optional">reset<span class="property-type">any</span></dt>
        <dd>if set clears the stored value for the specified msg.topic, or
            all topics if msg.topic is not specified.</dd>
    </dl>
    <h3>Outputs</h3>
    <dl class="message-properties">
        <dt>payload
            <span class="property-type">as per input</span>
        </dt>
        <dd>If triggered the output will be the same as the input.</dd>
    </dl>
    <h3>Details</h3>
    <p>In RBE mode this node will block until the <code>msg.payload</code>,
       (or selected property) value is different to the previous one.
       If required it can ignore the initial value, so as not to send anything at start.</p>
    <p>The <a href="https://en.wikipedia.org/wiki/Deadband" target="_blank">Deadband</a> modes will block the incoming value
       <i>unless</i> its change is greater or greater-equal than &plusmn; the band gap away from a previous value.</p>
    <p>The Narrowband modes will block the incoming value,
       <i>if</i> its change is greater or greater-equal than &plusmn; the band gap away from the previous value.
       It is useful for ignoring outliers from a faulty sensor for example.</p>
    <p>Both in Deadband and Narrowband modes the incoming value must contain a parseable number and
       both also supports % - only sends if/unless the input differs by more than x% of the original value.</p>
    <p>Both Deadband and Narrowband allow comparison against either the previous valid output value, thus
    ignoring any values out of range, or the previous input value, which resets the set point, thus allowing
    gradual drift (deadband), or a step change (narrowband).</p>
    <p><b>Note:</b> This works on a per <code>msg.topic</code> basis, though this can be changed to another property if desired.
       This means that a single filter node can handle multiple different topics at the same time.</p>
</script>

<!-- --- [red-module:node-red/tls] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="tls-config">
    <div class="form-row" class="hide" id="node-config-row-uselocalfiles">
        <input type="checkbox" id="node-config-input-uselocalfiles" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-config-input-uselocalfiles" style="width: 70%;"><span data-i18n="tls.label.use-local-files"></label>
    </div>
    <div class="form-row">
        <label style="width: 120px;"><i class="fa fa-file-text-o"></i> <span data-i18n="tls.label.cert"></span></label>
        <span class="tls-config-input-data">
            <label class="red-ui-button" for="node-config-input-certfile"><i class="fa fa-upload"></i> <span data-i18n="tls.label.upload"></span></label>
            <input class="hide" type="file" id="node-config-input-certfile">
            <span id="tls-config-certname" style="width: calc(100% - 280px); overflow: hidden; line-height:34px; height:34px; text-overflow: ellipsis; white-space: nowrap; display: inline-block; vertical-align: middle;"> </span>
            <button class="red-ui-button red-ui-button-small" id="tls-config-button-cert-clear" style="margin-left: 10px"><i class="fa fa-times"></i></button>
        </span>
        <input type="hidden" id="node-config-input-certname">
        <input type="hidden" id="node-config-input-certdata">
        <input class="hide tls-config-input-path" style="width: calc(100% - 170px);" type="text" id="node-config-input-cert" data-i18n="[placeholder]tls.placeholder.cert">
    </div>
    <div class="form-row">
        <label style="width: 120px;" for="node-config-input-key"><i class="fa fa-file-text-o"></i> <span data-i18n="tls.label.key"></span></label>
        <span class="tls-config-input-data">
            <label class="red-ui-button" for="node-config-input-keyfile"><i class="fa fa-upload"></i> <span data-i18n="tls.label.upload"></span></label>
            <input class="hide" type="file" id="node-config-input-keyfile">
            <span id="tls-config-keyname" style="width: calc(100% - 280px); overflow: hidden; line-height:34px; height:34px; text-overflow: ellipsis; white-space: nowrap; display: inline-block; vertical-align: middle;"> </span>
            <button class="red-ui-button red-ui-button-small" id="tls-config-button-key-clear" style="margin-left: 10px"><i class="fa fa-times"></i></button>
        </span>
        <input type="hidden" id="node-config-input-keyname">
        <input type="hidden" id="node-config-input-keydata">
        <input class="hide tls-config-input-path" style="width: calc(100% - 170px);" type="text" id="node-config-input-key" data-i18n="[placeholder]tls.placeholder.key">
    </div>
    <div class="form-row">
        <label style="width: 100px; margin-left: 20px;" for="node-config-input-passphrase"> <span data-i18n="tls.label.passphrase"></span></label>
        <input type="password" style="width: calc(100% - 170px);" id="node-config-input-passphrase" data-i18n="[placeholder]tls.placeholder.passphrase">
    </div>
    <div class="form-row">
        <label style="width: 120px;" for="node-config-input-ca"><i class="fa fa-file-text-o"></i> <span data-i18n="tls.label.ca"></span></label>
        <span class="tls-config-input-data">
            <label class="red-ui-button" for="node-config-input-cafile"><i class="fa fa-upload"></i> <span data-i18n="tls.label.upload"></span></label>
            <input class="hide" type="file" title=" " id="node-config-input-cafile">
            <span id="tls-config-caname" style="width: calc(100% - 280px); overflow: hidden; line-height:34px; height:34px; text-overflow: ellipsis; white-space: nowrap; display: inline-block; vertical-align: middle;"> </span>
            <button class="red-ui-button red-ui-button-small" id="tls-config-button-ca-clear" style="margin-left: 10px"><i class="fa fa-times"></i></button>
        </span>
        <input type="hidden" id="node-config-input-caname">
        <input type="hidden" id="node-config-input-cadata">
        <input class="hide tls-config-input-path" style="width: calc(100% - 170px);" type="text" id="node-config-input-ca" data-i18n="[placeholder]tls.placeholder.ca">
    </div>
    <div class="form-row">
        <input type="checkbox" id="node-config-input-verifyservercert" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-config-input-verifyservercert" style="width: calc(100% - 170px);" data-i18n="tls.label.verify-server-cert"></label>
    </div>
    <div class="form-row">
        <label style="width: 126px;" for="node-config-input-servername"><i class="fa fa-server"></i> <span data-i18n="tls.label.servername"></span></label>
        <input style="width: calc(100% - 176px);" type="text" id="node-config-input-servername" data-i18n="[placeholder]tls.placeholder.servername">
    </div>
    <div class="form-row">
        <label style="width: 126px;" for="node-config-input-alpnprotocol"><i class="fa fa-cogs"></i> <span data-i18n="tls.label.alpnprotocol"></span></label>
        <input style="width: calc(100% - 176px);" type="text" id="node-config-input-alpnprotocol" data-i18n="[placeholder]tls.placeholder.alpnprotocol">
    </div>
    <hr>
    <div class="form-row">
        <label style="width: 120px;" for="node-config-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input style="width: calc(100% - 170px);" type="text" id="node-config-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('tls-config',{
        category: 'config',
        defaults: {
            name: {value:""},
            cert: {value:"", validate: function(v,opt) {
                var currentKey = $("#node-config-input-key").val();
                if (currentKey === undefined) {
                    currentKey = this.key;
                }
                if (currentKey === '' || v != '') {
                    return true;
                }
                return RED._("node-red:tls.error.invalid-cert");
            }},
            key: {value:"", validate: function(v,opt) {
                var currentCert = $("#node-config-input-cert").val();
                if (currentCert === undefined) {
                    currentCert = this.cert;
                }
                if (currentCert === '' || v != '') {
                    return true;
                }
                return RED._("node-red:tls.error.invalid-key");
            }},
            ca: {value:""},
            certname: {value:""},
            keyname: {value:""},
            caname: {value:""},
            servername: {value:""},
            verifyservercert: {value: true},
            alpnprotocol: {value: ""}
        },
        credentials: {
            certdata: {type:"text"},
            keydata: {type:"text"},
            cadata: {type:"text"},
            passphrase: {type:"password"}
        },
        label: function() {
            return this.name || this._("tls.tls");
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            function updateFileUpload() {
                if ($("#node-config-input-uselocalfiles").is(':checked')) {
                    $(".tls-config-input-path").show();
                    $(".tls-config-input-data").hide();
                } else {
                    $(".tls-config-input-data").show();
                    $(".tls-config-input-path").hide();
                }
            }
            $("#node-config-input-uselocalfiles").on("click",function() {
                updateFileUpload();
            });

            function saveFile(property, file) {
                var dataInputId = "#node-config-input-"+property+"data";
                var filenameInputId = "#node-config-input-"+property+"name";
                var filename = file.name;
                var reader = new FileReader();
                reader.onload = function(event) {
                    $("#tls-config-"+property+"name").text(filename);
                    $(filenameInputId).val(filename);
                    $(dataInputId).val(event.target.result);
                }
                reader.readAsText(file,"UTF-8");
            }
            $("#node-config-input-certfile" ).on("change", function() {
                saveFile("cert", this.files[0]);
            });
            $("#node-config-input-keyfile" ).on("change", function() {
                saveFile("key", this.files[0]);
            });
            $("#node-config-input-cafile" ).on("change", function() {
                saveFile("ca", this.files[0]);
            });

            function clearNameData(prop) {
                $("#tls-config-"+prop+"name").text("");
                $("#node-config-input-"+prop+"data").val("");
                $("#node-config-input-"+prop+"name").val("");
            }
            $("#tls-config-button-cert-clear").on("click", function() {
                clearNameData("cert");
            });
            $("#tls-config-button-key-clear").on("click", function() {
                clearNameData("key");
            });
            $("#tls-config-button-ca-clear").on("click", function() {
                clearNameData("ca");
            });

            if (RED.settings.tlsConfigDisableLocalFiles) {
                $("#node-config-row-uselocalfiles").hide();
            } else {
                $("#node-config-row-uselocalfiles").show();
            }
            // in case paths were set from old TLS config
            if(this.cert || this.key || this.ca) {
                $("#node-config-input-uselocalfiles").prop('checked',true);
            }
            $("#tls-config-certname").text(this.certname);
            $("#tls-config-keyname").text(this.keyname);
            $("#tls-config-caname").text(this.caname);
            updateFileUpload();
        },
        oneditsave: function() {
            if ($("#node-config-input-uselocalfiles").is(':checked')) {
                clearNameData("ca");
                clearNameData("cert");
                clearNameData("key");
            } else {
                $("#node-config-input-ca").val("");
                $("#node-config-input-cert").val("");
                $("#node-config-input-key").val("");
            }
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="tls-config">
    <p>Configuration options for TLS connections.</p>
</script>

<!-- --- [red-module:node-red/httpproxy] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="http proxy">
    <div class="form-row">
        <label for="node-config-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-config-input-name">
    </div>
    <div class="form-row">
        <label for="node-config-input-url"><i class="fa fa-globe"></i> <span data-i18n="httpin.label.url"></span></label>
        <input type="text" id="node-config-input-url" placeholder="http://hostname:port">
    </div>
    <div class="form-row">
        <input type="checkbox" id="node-config-input-useAuth" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-config-input-useAuth" style="width: 70%;"><span data-i18n="httpin.use-proxyauth"></span></label>
        <div style="margin-left: 20px" class="node-config-input-useAuth-row hide">
            <div class="form-row">
                <label for="node-config-input-username"><i class="fa fa-user"></i> <span data-i18n="common.label.username"></span></label>
                <input type="text" id="node-config-input-username">
            </div>
            <div class="form-row">
                <label for="node-config-input-password"><i class="fa fa-lock"></i> <span data-i18n="common.label.password"></span></label>
                <input type="password" id="node-config-input-password">
            </div>
        </div>
    </div>
    <div class="form-row" style="margin-bottom:0;">
        <label><i class="fa fa-list"></i> <span data-i18n="httpin.noproxy-hosts"></span></label>
    </div>
    <div class="form-row node-config-input-noproxy-container-row">
        <ol id="node-config-input-noproxy-container"></ol>
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('http proxy', {
        category: 'config',
        defaults: {
            name: {value:''},
            url: {
                value:'',
                validate:function(v, opt) {
                    if ((v && (v.indexOf('://') !== -1) &&
                         (v.trim().indexOf('http') === 0))) {
                        return true;
                    }
                    return RED._("node-red:httpin.errors.invalid-url");
                }
            },
            noproxy: {value:[]}
        },
        credentials: {
            username: {type:'text'},
            password: {type:'password'}
        },
        label: function() {
            return this.name || this.url || ('http proxy:' + this.id);
        },
        oneditprepare: function() {
            $('#node-config-input-useAuth').on("change", function() {
                if ($(this).is(":checked")) {
                    $('.node-config-input-useAuth-row').show();
                } else {
                    $('.node-config-input-useAuth-row').hide();
                    $('#node-config-input-username').val('');
                    $('#node-config-input-password').val('');
                }
            });
            if (this.credentials.username || this.credentials.has_password) {
                $('#node-config-input-useAuth').prop('checked', true);
            } else {
                $('#node-config-input-useAuth').prop('checked', false);
            }
            $('#node-config-input-useAuth').change();

            var hostList = $('#node-config-input-noproxy-container')
                .css({'min-height':'150px','min-width':'450px'})
                .editableList({
                    addItem: function(container, index, data) {
                        var row = $('<div/>')
                            .css({overflow: 'hidden',whiteSpace: 'nowrap'})
                            .appendTo(container);

                        var hostField = $('<input/>',{class:'node-config-input-host',type:'text',placeholder:'hostname'})
                            .css({width:'100%'})
                            .appendTo(row);
                        if (data.host) {
                            hostField.val(data.host);
                        }
                    },
                    removable: true
                });
            if (this.noproxy) {
                for (var i in this.noproxy) {
                    hostList.editableList('addItem', {host:this.noproxy[i]});
                }
            }
            if (hostList.editableList('items').length == 0) {
                hostList.editableList('addItem', {host:''});
            }
        },
        oneditsave: function() {
            var hosts = $('#node-config-input-noproxy-container').editableList('items');
            var node = this;
            node.noproxy = [];
            hosts.each(function(i) {
                var host = $(this).find('.node-config-input-host').val().trim();
                if (host) {
                    node.noproxy.push(host);
                }
            });
        },
        oneditresize: function(size) {
            var rows = $('#node-config-dialog-edit-form>div:not(.node-config-input-noproxy-container-row)');
            var height = size.height;
            for (var i = 0; i < rows.length; i++) {
                height -= $(rows[i]).outerHeight(true);
            }

            var editorRow = $('#node-config-dialog-edit-form>div.node-config-input-noproxy-container-row');
            height -= (parseInt(editorRow.css('margin-top')) + parseInt(editorRow.css('margin-bottom')));
            $('#node-config-input-noproxy-container').editableList('height',height);
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="http proxy">
    <p>Configuration options for HTTP proxy.</p>

    <h3>Details</h3>
    <p>When accessing to the host in the ignored host list, no proxy will be used.</p>
</script>

<!-- --- [red-module:node-red/mqtt] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<style>

    .mqtt-form-row-cols2 > input.mqtt-form-row-col1 {
        width: calc(35% - 75px);
    }
    .mqtt-form-row-cols2 > select.mqtt-form-row-col1 {
        width: calc(35% - 75px);
    }

    .mqtt-form-row-cols2 > label.mqtt-form-row-col2 {
        width: 100px;
        margin-left: 42px;
        display: inline-block;
    }
    .mqtt-form-row-cols2 > input.mqtt-form-row-col2 {
        width: calc(35% - 75px);
        display: inline-block;
    }
    .mqtt-form-row-cols2 > select.mqtt-form-row-col2 {
        width: calc(35% - 75px);
        display: inline-block;
    }
    .form-row.mqtt5-out > label {
        width: 130px;
    }
    .form-row.mqtt-flags-row > label {
        vertical-align: top;
    }
    .form-row.mqtt-flags-row > .mqtt-flags {
        display: inline-block;
        width: 70%
    }

    .form-row.mqtt-flags-row > .mqtt-flags > .mqtt-flag > label {
        display: block;
        width: 100%;
    }
    .form-row.mqtt-flags-row > .mqtt-flags > .mqtt-flag > label > input {
        position: relative;
        vertical-align: bottom;
        top: -2px;
        width: 15px;
        height: 15px;
    }
    .form-row-mqtt5 {
        display: none;
    }
    .form-row-mqtt5.form-row-mqtt5-active:not(.form-row-mqtt-static-disabled) {
        display: block
    }
    .form-row-mqtt-static-disabled {
        display: none;
        /* opacity: 0.3;
        pointer-events: none; */
    }
    .form-row.form-row-mqtt-datatype-tip > .form-tips {
        width: calc(70% - 18px);
        display: inline-block;
        margin-top: -8px;
    }

</style>

<script type="text/html" data-template-name="mqtt in">
    <div class="form-row">
        <label for="node-input-broker"><i class="fa fa-globe"></i> <span data-i18n="mqtt.label.broker"></span></label>
        <input type="text" id="node-input-broker">
    </div>
    <div class="form-row">
        <label for="node-input-topicType" data-i18n="mqtt.label.action"></label>
        <select id="node-input-topicType" style="width: 70%">
            <option value="topic" data-i18n="mqtt.label.staticTopic"></option>
            <option value="dynamic" data-i18n="mqtt.label.dynamicTopic"></option>
        </select>
        <input type="hidden" id="node-input-inputs">
    </div>
    <div class="form-row form-row-mqtt-static">
        <label for="node-input-topic"><i class="fa fa-tasks"></i> <span data-i18n="common.label.topic"></span></label>
        <input type="text" id="node-input-topic" data-i18n="[placeholder]common.label.topic">
    </div>
    <div class="form-row form-row-mqtt-static">
        <label for="node-input-qos"><i class="fa fa-empire"></i> <span data-i18n="mqtt.label.qos"></span></label>
        <select id="node-input-qos" style="width:125px !important">
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
        </select>
    </div>
    <div class="form-row mqtt-flags-row form-row-mqtt5 form-row-mqtt-static">
        <label for="node-input-nl" ><i class="fa fa-flag"></i> <span data-i18n="mqtt.label.flags">Flags</span></label>
        <div class="mqtt-flags">
            <div class="mqtt-flag">
                <label for="node-input-nl">
                    <input type="checkbox" id="node-input-nl">
                    <span data-i18n="mqtt.label.nl"></span>
                </label>
            </div>
            <div class="mqtt-flag">
                <label for="node-input-rap">
                    <input type="checkbox" id="node-input-rap">
                    <span data-i18n="mqtt.label.rap"></span>
                </label>
            </div>
        </div>
    </div>
    <div class="form-row form-row-mqtt5 form-row-mqtt-static">
        <label for="node-input-rh" style="width:100%"><i class="fa fa-tag"></i> <span data-i18n="mqtt.label.rh"></span></label>
        <select id="node-input-rh" style="margin-left: 104px; width: 70%">
            <option value="0" data-i18n="mqtt.label.rh0"></option>
            <option value="1" data-i18n="mqtt.label.rh1"></option>
            <option value="2" data-i18n="mqtt.label.rh2"></option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-datatype"><i class="fa fa-sign-out"></i> <span data-i18n="mqtt.label.output"></span></label>
        <select id="node-input-datatype" style="width:70%;">
            <option value="auto-detect" data-i18n="mqtt.output.auto-detect"></option>
            <option value="auto" data-i18n="mqtt.output.auto"></option>
            <option value="buffer" data-i18n="mqtt.output.buffer"></option>
            <option value="utf8" data-i18n="mqtt.output.string"></option>
            <option value="json" data-i18n="mqtt.output.json"></option>
            <option value="base64" data-i18n="mqtt.output.base64"></option>
        </select>
    </div>
    <div class="form-row form-row-mqtt-datatype-tip">
        <label> &nbsp; </label>
        <div class="form-tips" id="mqtt-in-datatype-depreciated-tip"><span data-i18n="mqtt.label.auto-mode-depreciated"></span></div>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/html" data-template-name="mqtt out">
    <div class="form-row">
        <label for="node-input-broker"><i class="fa fa-globe"></i> <span data-i18n="mqtt.label.broker"></span></label>
        <input type="text" id="node-input-broker">
    </div>
    <div class="form-row">
        <label for="node-input-topic"><i class="fa fa-tasks"></i> <span data-i18n="common.label.topic"></span></label>
        <input type="text" id="node-input-topic" data-i18n="[placeholder]common.label.topic">
    </div>

    <div class="form-row mqtt-form-row-cols2">
        <label for="node-input-qos" class="mqtt-form-row-col1"><i class="fa fa-empire"></i> <span data-i18n="mqtt.label.qos"></span></label>
        <select id="node-input-qos" class="mqtt-form-row-col1">
            <option value=""></option>
            <option value="0">0</option>
            <option value="1">1</option>
            <option value="2">2</option>
        </select>

        <label for="node-input-retain" class="mqtt-form-row-col2"><i class="fa fa-history"></i> <span data-i18n="mqtt.retain"></span></label>
        <select id="node-input-retain" class="mqtt-form-row-col2" >
            <option value=""></option>
            <option value="false" data-i18n="mqtt.false"></option>
            <option value="true" data-i18n="mqtt.true"></option>
        </select>
    </div>
    <div class="form-row mqtt5 mqtt5-out">
        <label for="node-input-userProps"><span data-i18n="mqtt.label.userProperties"></span></label>
        <input type="text" id="node-input-userProps" style="width: calc(100% - 166px);">
    </div>
    <div class="form-row mqtt5 mqtt5-out">
        <label for="node-input-respTopic"><span data-i18n="mqtt.label.responseTopic"></span></label>
        <input type="text" id="node-input-respTopic" style="width: calc(100% - 166px);">
    </div>
    <div class="form-row mqtt5 mqtt5-out">
        <label for="node-input-correl"><span data-i18n="mqtt.label.correlationData"></span></label>
        <input type="text" id="node-input-correl" style="width: calc(100% - 166px);">
    </div>
    <div class="form-row mqtt5 mqtt5-out">
        <label for="node-input-contentType"><span data-i18n="mqtt.label.contentType"></span></label>
        <input type="text" id="node-input-contentType" style="width: calc(100% - 166px);">
    </div>

    <div class="form-row mqtt-form-row-cols2 mqtt5 mqtt5-out">
        <label for="node-input-expiry" class="mqtt-form-row-col1"><span data-i18n="mqtt.label.expiry"></span></label>
        <input id="node-input-expiry"  style="width: calc(100% - 166px);" class="mqtt-form-row-col1" >
    </div>

    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-tips"><span data-i18n="mqtt.tip"></span></div>
</script>

<script type="text/html" data-template-name="mqtt-broker">
    <div class="form-row">
        <label for="node-config-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-config-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-row">
        <ul style="min-width: 600px; margin-bottom: 20px;" id="node-config-mqtt-broker-tabs"></ul>
    </div>
    <div id="node-config-mqtt-broker-tabs-content" style="min-height:150px;">
        <div id="mqtt-broker-tab-connection" style="display:none">
            <div class="form-row node-input-broker">
                <label for="node-config-input-broker"><i class="fa fa-globe"></i> <span data-i18n="mqtt.label.broker"></span></label>
                <input type="text" id="node-config-input-broker" style="width: calc(100% - 300px);" data-i18n="[placeholder]mqtt.label.example">
                <label for="node-config-input-port" style="margin-left:20px; width:43px; "> <span data-i18n="mqtt.label.port"></span></label>
                <input type="text" id="node-config-input-port" data-i18n="[placeholder]mqtt.label.port" style="width:55px">
            </div>
            <div class="form-row" style="margin-bottom:0">
                <input type="checkbox" id="node-config-input-autoConnect" style="margin: 0 5px 0 104px; display: inline-block; width: auto;">
                <label for="node-config-input-autoConnect" style="width: auto"><span data-i18n="mqtt.label.auto-connect"></span></label>
            </div>
            <div class="form-row" style="height: 34px;">
                <input type="checkbox" id="node-config-input-usetls" style="height: 34px; margin: 0 5px 0 104px; display: inline-block; width: auto; vertical-align: top;">
                <label for="node-config-input-usetls" style="width: 100px; line-height: 34px;"><span data-i18n="mqtt.label.use-tls"></span></label>
                <span id="node-config-row-tls" class="hide"><input style="width: 320px;" type="text" id="node-config-input-tls"></span>
            </div>
            <div class="form-row">
                <label for="node-config-input-protocolVersion"><i class="fa fa-cog"></i> <span data-i18n="mqtt.label.protocolVersion"></span></label>
                <select id="node-config-input-protocolVersion" style="width:70%;">
                    <option value="3" data-i18n="mqtt.label.protocolVersion3"></option>
                    <option value="4" data-i18n="mqtt.label.protocolVersion4"></option>
                    <option value="5" data-i18n="mqtt.label.protocolVersion5"></option>
                </select>
            </div>
            <div class="form-row">
                <label for="node-config-input-clientid"><i class="fa fa-tag"></i> <span data-i18n="mqtt.label.clientid"></span></label>
                <input type="text" id="node-config-input-clientid" data-i18n="[placeholder]mqtt.placeholder.clientid">
            </div>
            <div class="form-row">
                <label for="node-config-input-keepalive"><i class="fa fa-heartbeat"></i> <span data-i18n="mqtt.label.keepalive"></span></label>
                <input type="number" min="0" id="node-config-input-keepalive" style="width: 100px">
            </div>
            <div class="form-row" style="margin-bottom:0">
                <label style="vertical-align:top;"><i class="fa fa-info"></i> <span data-i18n="mqtt.label.session"></span></label>
                <div style="display: inline-block; width:calc(100% - 110px)">
                    <div class="form-row">
                        <label for="node-config-input-cleansession" style="width: auto;">
                            <input type="checkbox" id="node-config-input-cleansession" style="position: relative;vertical-align: bottom; top: -2px; width: 15px;height: 15px;">
                            <span id="node-config-input-cleansession-label" data-i18n="mqtt.label.cleansession"></span>
                        </label>
                    </div>
                    <div class="form-row mqtt5">
                        <label style="width:auto" for="node-config-input-sessionExpiry"><span data-i18n="mqtt.label.sessionExpiry"></span></label>
                        <input type="number" min="0" id="node-config-input-sessionExpiry" style="width: 100px" >
                    </div>
                </div>
            </div>
            <div class="form-row mqtt5">
                <label style="width: 125px;" for="node-config-input-userProps"><span data-i18n="mqtt.label.userProperties"></span></label>
                <input type="text" id="node-config-input-userProps" style="width: calc(100% - 166px);">
            </div>
            <br>
        </div>
        <div id="mqtt-broker-tab-security" style="display:none">
            <div class="form-row">
                <label for="node-config-input-user"><i class="fa fa-user"></i> <span data-i18n="common.label.username"></span></label>
                <input type="text" id="node-config-input-user">
            </div>
            <div class="form-row">
                <label for="node-config-input-password"><i class="fa fa-lock"></i> <span data-i18n="common.label.password"></span></label>
                <input type="password" id="node-config-input-password">
            </div>
        </div>
        <div id="mqtt-broker-tab-messages" style="display:none">
            <div id="mqtt-broker-section-birth">
                <div class="red-ui-palette-header">
                    <i class="fa fa-angle-down"></i><span data-i18n="mqtt.sections-label.birth-message"></span>
                </div>
                <div class="section-content" style="padding:10px 0 0 10px">
                    <div class="form-row">
                        <label style="width: 100px !important;" for="node-config-input-birthTopic"><i class="fa fa-tasks"></i> <span data-i18n="common.label.topic"></span></label>
                        <input style="width: calc(100% - 300px) !important" type="text" id="node-config-input-birthTopic" data-i18n="[placeholder]mqtt.placeholder.birth-topic">
                        <label style="margin-left: 10px; width: 90px !important;" for="node-config-input-birthRetain"><i class="fa fa-history"></i> <span data-i18n="mqtt.label.retain"></span></label>
                        <select id="node-config-input-birthRetain" style="width:75px !important">
                            <option value="false" data-i18n="mqtt.false"></option>
                            <option value="true" data-i18n="mqtt.true"></option>
                        </select>
                    </div>
                    <div class="form-row">
                        <label style="width: 100px !important;" for="node-config-input-birthPayload"><i class="fa fa-envelope"></i> <span data-i18n="common.label.payload"></span></label>
                        <input style="width: calc(100% - 300px) !important" type="text" id="node-config-input-birthPayload" style="width:300px" data-i18n="[placeholder]common.label.payload">
                        <label style="margin-left: 10px; width: 90px !important;" for="node-config-input-birthQos"><i class="fa fa-empire"></i> <span data-i18n="mqtt.label.qos"></span></label>
                        <select id="node-config-input-birthQos" style="width:75px !important">
                            <option value="0">0</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                        </select>
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-birth-contentType" data-i18n="mqtt.label.contentType"></label>
                        <input type="text" style="width:calc(100% - 200px);" id="node-config-input-birth-contentType">
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-birth-props" data-i18n="mqtt.label.userProperties"></label>
                        <input type="text" style="width:calc(100% - 200px);" id="node-config-input-birth-props">
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-birth-respTopic"><span data-i18n="mqtt.label.responseTopic"></span></label>
                        <input type="text" id="node-config-input-birth-respTopic" style="width: calc(100% - 200px);">
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-birth-correl"><span data-i18n="mqtt.label.correlationData"></span></label>
                        <input type="text" id="node-config-input-birth-correl" style="width: calc(100% - 200px);">
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-birth-expiry"><span data-i18n="mqtt.label.expiry"></span></label>
                        <input id="node-config-input-birth-expiry"  style="width: calc(100% - 200px);">
                    </div>
                </div>
            </div>
            <div id="mqtt-broker-section-close">
                <div class="red-ui-palette-header">
                    <i class="fa fa-angle-down"></i><span data-i18n="mqtt.sections-label.close-message"></span>
                </div>
                <div class="section-content" style="padding:10px 0 0 10px">
                    <div class="form-row">
                        <label style="width: 100px !important;" for="node-config-input-closeTopic"><i class="fa fa-tasks"></i> <span data-i18n="common.label.topic"></span></label>
                        <input style="width: calc(100% - 300px) !important" type="text" id="node-config-input-closeTopic" style="width:300px" data-i18n="[placeholder]mqtt.placeholder.close-topic">
                        <label style="margin-left: 10px; width: 90px !important;" for="node-config-input-closeRetain"><i class="fa fa-history"></i> <span data-i18n="mqtt.label.retain"></span></label>
                        <select id="node-config-input-closeRetain" style="width:75px !important">
                            <option value="false" data-i18n="mqtt.false"></option>
                            <option value="true" data-i18n="mqtt.true"></option>
                        </select>
                    </div>
                    <div class="form-row">
                        <label style="width: 100px !important;" for="node-config-input-closePayload"><i class="fa fa-envelope"></i> <span data-i18n="common.label.payload"></span></label>
                        <input style="width: calc(100% - 300px) !important" type="text" id="node-config-input-closePayload" style="width:300px" data-i18n="[placeholder]common.label.payload">
                        <label style="margin-left: 10px; width: 90px !important;" for="node-config-input-closeQos"><i class="fa fa-empire"></i> <span data-i18n="mqtt.label.qos"></span></label>
                        <select id="node-config-input-closeQos" style="width:75px !important">
                            <option value="0">0</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                        </select>
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-close-contentType" data-i18n="mqtt.label.contentType"></label>
                        <input type="text" style="width:calc(100% - 200px);" id="node-config-input-close-contentType">
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-close-props" data-i18n="mqtt.label.userProperties"></label>
                        <input type="text" style="width:calc(100% - 200px);" id="node-config-input-close-props">
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-close-respTopic"><span data-i18n="mqtt.label.responseTopic"></span></label>
                        <input type="text" id="node-config-input-close-respTopic" style="width: calc(100% - 200px);">
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-close-correl"><span data-i18n="mqtt.label.correlationData"></span></label>
                        <input type="text" id="node-config-input-close-correl" style="width: calc(100% - 200px);">
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-close-expiry"><span data-i18n="mqtt.label.expiry"></span></label>
                        <input id="node-config-input-close-expiry"  style="width: calc(100% - 200px);">
                    </div>
                </div>
            </div>
            <div id="mqtt-broker-section-will">
                <div class="red-ui-palette-header">
                    <i class="fa fa-angle-down"></i><span data-i18n="mqtt.sections-label.will-message"></span>
                </div>
                <div class="section-content" style="padding:10px 0 0 10px">
                    <div class="form-row">
                        <label style="width: 100px !important;" for="node-config-input-willTopic"><i class="fa fa-tasks"></i> <span data-i18n="common.label.topic"></span></label>
                        <input style="width: calc(100% - 300px) !important" type="text" id="node-config-input-willTopic" style="width:300px" data-i18n="[placeholder]mqtt.placeholder.will-topic">
                        <label style="margin-left: 10px; width: 90px !important;" for="node-config-input-willRetain"><i class="fa fa-history"></i> <span data-i18n="mqtt.label.retain"></span></label>
                        <select id="node-config-input-willRetain" style="width:75px !important">
                            <option value="false" data-i18n="mqtt.false"></option>
                            <option value="true" data-i18n="mqtt.true"></option>
                        </select>
                    </div>
                    <div class="form-row">
                        <label style="width: 100px !important;" for="node-config-input-willPayload"><i class="fa fa-envelope"></i> <span data-i18n="common.label.payload"></span></label>
                        <input style="width: calc(100% - 300px) !important" type="text" id="node-config-input-willPayload" style="width:300px" data-i18n="[placeholder]common.label.payload">
                        <label style="margin-left: 10px; width: 90px !important;" for="node-config-input-willQos"><i class="fa fa-empire"></i> <span data-i18n="mqtt.label.qos"></span></label>
                        <select id="node-config-input-willQos" style="width:75px !important">
                            <option value="0">0</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                        </select>
                    </div>
                    <div class="form-row mqtt5">
                        <label><span data-i18n="mqtt.label.delay"></span></label>
                        <input type="number" min="0" id="node-config-input-will-delay" style="width: 100px" >
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-will-contentType" data-i18n="mqtt.label.contentType"></label>
                        <input type="text" style="width:calc(100% - 200px);" id="node-config-input-will-contentType">
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-will-props" data-i18n="mqtt.label.userProperties"></label>
                        <input type="text" style="width:calc(100% - 200px);" id="node-config-input-will-props">
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-will-respTopic"><span data-i18n="mqtt.label.responseTopic"></span></label>
                        <input type="text" id="node-config-input-will-respTopic" style="width: calc(100% - 200px);">
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-will-correl"><span data-i18n="mqtt.label.correlationData"></span></label>
                        <input type="text" id="node-config-input-will-correl" style="width: calc(100% - 200px);">
                    </div>
                    <div class="form-row mqtt5 mqtt5-out">
                        <label for="node-config-input-will-expiry"><span data-i18n="mqtt.label.expiry"></span></label>
                        <input id="node-config-input-will-expiry"  style="width: calc(100% - 200px);">
                    </div>
                </div>
            </div>
        </div>
    </div>
</script>

<script type="text/javascript">
(function() {

    var typedInputNoneOpt = { value: 'none', label: '', hasValue: false };
    var makeTypedInputOpt = function(value){
        return {
            value: value,
            label:value,
            hasValue: false
        }
    }
    var contentTypeOpts = [
        typedInputNoneOpt,
        makeTypedInputOpt("application/json"),
        makeTypedInputOpt("application/octet-stream"),
        makeTypedInputOpt("text/csv"),
        makeTypedInputOpt("text/html"),
        makeTypedInputOpt("text/plain"),
        {value:"other", label:""}
    ];

    function getDefaultContentType(value) {
        var defaultContentType;
        var matchedContentType = contentTypeOpts.filter(function(v) {
            return v.value === value;
        })
        if (matchedContentType.length > 0) {
            defaultContentType = matchedContentType[0].value;
        }
        if (value && !defaultContentType) {
            defaultContentType = 'other';
        }
        return defaultContentType || 'none'
    }
    /**
     * Test a topic string is valid for publishing
     * @param {string} topic
     * @returns `true` if it is a valid topic
     */
    function validateMQTTPublishTopic(topic, opts) {
        if(!topic || topic == "" || !/[\+#\b\f\n\r\t\v\0]/.test(topic)) {
            return true;
        }
        return RED._("node-red:mqtt.errors.invalid-topic");
    }
    RED.nodes.registerType('mqtt-broker',{
        category: 'config',
        defaults: {
            name: {value:""},
            broker: {value:"",required:true},
            port: {
                value:1883,required:false,
                label: RED._("node-red:mqtt.label.port"),
                validate:RED.validators.number(true)},
            tls: {type:"tls-config",required: false,
                  label:RED._("node-red:mqtt.label.use-tls") },
            clientid: {value:"", validate: function(v, opt) {
                var ok = false;
                if ($("#node-config-input-clientid").length) {
                    // Currently editing the node
                    ok = $("#node-config-input-cleansession").is(":checked") || (v||"").length > 0;
                } else {
                    ok = (this.cleansession===undefined || this.cleansession) || (v||"").length > 0;
                }
                if (ok) {
                    return ok;
                }
                return RED._("node-red:mqtt.errors.invalid-client-id");
            }},
            autoConnect: {value: true},
            usetls: {value: false},
            verifyservercert: { value: false},
            compatmode: { value: false},
            protocolVersion: { value: 4},
            keepalive: {
                value:60,
                label: RED._("node-red:mqtt.label.keepalive"),
                validate:RED.validators.number(false)},
            cleansession: {value: true},
            birthTopic: {value:"", validate:validateMQTTPublishTopic},
            birthQos: {value:"0"},
            birthRetain: {value:false},
            birthPayload: {value:""},
            birthMsg: { value: {}},
            closeTopic: {value:"", validate:validateMQTTPublishTopic},
            closeQos: {value:"0"},
            closeRetain: {value:false},
            closePayload: {value:""},
            closeMsg: { value: {}},
            willTopic: {value:"", validate:validateMQTTPublishTopic},
            willQos: {value:"0"},
            willRetain: {value:false},
            willPayload: {value:""},
            willMsg: { value: {}},
            userProps: { value: ""},
            sessionExpiry: {value:0}
        },
        credentials: {
            user: {type:"text"},
            password: {type: "password"}
        },
        label: function() {
            if (this.name) {
                return this.name;
            }
            var b = this.broker;
            if (!b) { b = "undefined"; }
            var lab = "";
            lab = (this.clientid?this.clientid+"@":"")+b;
            if (b.indexOf("://") === -1){
                if (!this.port){ lab = lab + ":1883"; }
                else { lab = lab + ":" + this.port; }
            }
            return lab;
        },
        oneditprepare: function () {
            var tabs = RED.tabs.create({
                id: "node-config-mqtt-broker-tabs",
                onchange: function(tab) {
                    $("#node-config-mqtt-broker-tabs-content").children().hide();
                    $("#" + tab.id).show();
                }
            });
            tabs.addTab({
                id: "mqtt-broker-tab-connection",
                label: this._("mqtt.tabs-label.connection")
            });
            tabs.addTab({
                id: "mqtt-broker-tab-security",
                label: this._("mqtt.tabs-label.security")
            });

            tabs.addTab({
                id: "mqtt-broker-tab-messages",
                label: this._("mqtt.tabs-label.messages")
            });

            function setUpSection(sectionId, v5Opts, isExpanded) {
                var birthMessageSection = $("#mqtt-broker-section-"+sectionId);
                var paletteHeader = birthMessageSection.find('.red-ui-palette-header');
                var twistie = paletteHeader.find('i');
                var sectionContent = birthMessageSection.find('.section-content');

                function toggleSection(expanded) {
                    twistie.toggleClass('expanded', expanded);
                    sectionContent.toggle(expanded);
                }
                paletteHeader.on("click", function(e) {
                    e.preventDefault();
                    var isExpanded = twistie.hasClass('expanded');
                    toggleSection(!isExpanded);
                });
                toggleSection(isExpanded);
                $("#node-config-input-"+sectionId+"-contentType").val(v5Opts?v5Opts.contentType:"").typedInput({
                    default: getDefaultContentType(v5Opts?v5Opts.contentType:""),
                    types: contentTypeOpts,
                });

                $("#node-config-input-"+sectionId+"-props").val(v5Opts?v5Opts.userProps:"").typedInput({
                    default:  !(v5Opts?v5Opts.userProps:null)? 'none':'json',
                    types: [typedInputNoneOpt, 'json'],
                });
                $("#node-config-input-"+sectionId+"-respTopic").val(v5Opts?v5Opts.respTopic:"").typedInput({
                    default:  !(v5Opts?v5Opts.respTopic:null)? 'none':'str',
                    types: [typedInputNoneOpt, 'str'],
                });
                $("#node-config-input-"+sectionId+"-correl").val(v5Opts?v5Opts.correl:"").typedInput({
                    default:  !(v5Opts?v5Opts.correl:null)? 'none':'str',
                    types: [typedInputNoneOpt, 'str'],
                });
                $("#node-config-input-"+sectionId+"-expiry").val(v5Opts?v5Opts.expiry:"").typedInput({
                    default:  !(v5Opts?v5Opts.expiry:null)? 'none':'num',
                    types: [typedInputNoneOpt, 'num'],
                });
            }

            // show first section if none are set so the user gets the idea
            var showBirthSection = this.birthTopic !== ""
                || this.willTopic === ""
                && this.birthTopic === ""
                && this.closeTopic == "";
            setUpSection('birth', this.birthMsg, showBirthSection);
            setUpSection('close', this.closeMsg, this.closeTopic !== "");
            setUpSection('will', this.willMsg, this.willTopic !== "");

            if (this.willMsg) {
                $("#node-config-input-will-delay").val(this.willMsg.delay);
            }

            setTimeout(function() { tabs.resize(); },0);
            if (typeof this.cleansession === 'undefined') {
                this.cleansession = true;
                $("#node-config-input-cleansession").prop("checked",true);
            }
            if (typeof this.usetls === 'undefined') {
                this.usetls = false;
                $("#node-config-input-usetls").prop("checked",false);
            }
            if (typeof this.autoConnect === 'undefined') {
                this.autoConnect = true;
                $("#node-config-input-autoConnect").prop("checked",true);
            }
            if (this.compatmode === 'true' || this.compatmode === true) {
                delete this.compatmode;
                this.protocolVersion = 4;
            }
            if (typeof this.protocolVersion === 'undefined') {
                this.protocolVersion = 4;
            }
            $("#node-config-input-protocolVersion").on("change", function() {
                var v5 = $("#node-config-input-protocolVersion").val() == "5";
                if(v5) {
                    $("#node-config-input-cleansession-label").text(RED._("node-red:mqtt.label.cleanstart"))
                    $("div.form-row.mqtt5").show();
                } else {
                    $("#node-config-input-cleansession-label").text(RED._("node-red:mqtt.label.cleansession"))
                    $("div.form-row.mqtt5").hide();
                }
            });
            $("#node-config-input-protocolVersion").val(this.protocolVersion);
            $("#node-config-input-userProps").typedInput({
                default:  !this.userProps ? 'none':'json',
                types: [typedInputNoneOpt, 'json']
            });
            $("#node-config-input-userProps").typedInput('value',this.userProps);
            if (typeof this.keepalive === 'undefined') {
                this.keepalive = 15;
                $("#node-config-input-keepalive").val(this.keepalive);
            }
            if (typeof this.birthQos === 'undefined') {
                this.birthQos = "0";
                $("#node-config-input-birthQos").val("0");
            }
            if (typeof this.closeQos === 'undefined') {
                this.willQos = "0";
                $("#node-config-input-willQos").val("0");
            }
            if (typeof this.willQos === 'undefined') {
                this.willQos = "0";
                $("#node-config-input-willQos").val("0");
            }


            function updateTLSOptions() {
                if ($("#node-config-input-usetls").is(':checked')) {
                    $("#node-config-row-tls").show();
                } else {
                    $("#node-config-row-tls").hide();
                }
            }
            updateTLSOptions();
            $("#node-config-input-usetls").on("click",function() {
                updateTLSOptions();
            });
            var node = this;
            function updateClientId() {
                if ($("#node-config-input-cleansession").is(":checked")) {
                    $("#node-config-input-clientid").attr("placeholder",node._("mqtt.placeholder.clientid"));
                } else {
                    $("#node-config-input-clientid").attr("placeholder",node._("mqtt.placeholder.clientid-nonclean"));
                }
                $("#node-config-input-clientid").trigger("change");
            }
            setTimeout(updateClientId,0);
            $("#node-config-input-cleansession").on("click",function() {
                updateClientId();
            });

            function updatePortEntry(){
                var disabled = $("#node-config-input-port").prop("disabled");
                if ($("#node-config-input-broker").val().indexOf("://") === -1){
                    if (disabled){
                        $("#node-config-input-port").prop("disabled", false);
                    }
                }
                else {
                    if (!disabled){
                        $("#node-config-input-port").prop("disabled", true);
                    }
                }
            }
            $("#node-config-input-broker").on("change", function() {
                updatePortEntry();
            });
            $("#node-config-input-broker").on( "keyup", function() {
                updatePortEntry();
            });
            setTimeout(updatePortEntry,50);
            setTimeout(function() {
                $("#node-config-input-protocolVersion").trigger("change");
            },50);

        },
        oneditsave: function() {
            if (!$("#node-config-input-usetls").is(':checked')) {
                $("#node-config-input-tls").val("");
            }

            var v5 = $("#node-config-input-protocolVersion").val() == "5";

            function saveV5Message(section) {
                var msg = {};
                if ($("#node-config-input-"+section+"Topic").val().trim().length > 0) {
                    var contentType = $("#node-config-input-"+section+"-contentType").val().trim();
                    if (contentType === '') {
                        contentType = $("#node-config-input-"+section+"-contentType").typedInput('type');
                        if (contentType === 'none' || contentType === 'other') {
                            contentType = "";
                        }
                    }
                    if (contentType) {
                        msg.contentType = contentType;
                    }
                    var props = $("#node-config-input-"+section+"-props").val().trim();
                    if (props) {
                        msg.userProps = props;
                    }
                    var resp = $("#node-config-input-"+section+"-respTopic").val().trim();
                    if (props) {
                        msg.respTopic = resp;
                    }
                    var correl = $("#node-config-input-"+section+"-correl").val().trim();
                    if (correl) {
                        msg.correl = correl;
                    }
                    var expiry = $("#node-config-input-"+section+"-expiry").val().trim();
                    if (expiry) {
                        msg.expiry = expiry;
                    }
                }
                return msg;
            }

            if (v5) {
                this.userProps = "";
                const userPropsType = $("#node-config-input-userProps").typedInput("type");
                if(userPropsType == "json") {
                    const userProps = $("#node-config-input-userProps").val();
                    if (userProps && typeof userProps === "string") {
                        this.userProps = userProps.trim();
                    }
                }
                this.birthMsg = saveV5Message("birth");
                this.closeMsg = saveV5Message("close");
                this.willMsg = saveV5Message("will");
                var willDelay = $("#node-config-input-will-delay").val();
                if (willDelay) {
                    this.willMsg.delay = willDelay;
                }
            } else {
                this.willMsg = {};
                this.birthMsg = {};
                this.closeMsg = {};
            }

        }
    });

    RED.nodes.registerType('mqtt in',{
        category: 'network',
        defaults: {
            name: {value:""},
            topic: {
                value:"",
                validate: function(v, opt) {
                    var isDynamic = this.inputs === 1;
                    var topicTypeSelect = $("#node-input-topicType");
                    if (topicTypeSelect.length) {
                        isDynamic = topicTypeSelect.val()==='dynamic'
                    }
                    if (isDynamic || ((!!v) && RED.validators.regex(/^(#$|(\+|[^+#]*)(\/(\+|[^+#]*))*(\/(\+|#|[^+#]*))?$)/)(v))) {
                        return true;
                    }
                    return RED._("node-red:mqtt.errors.invalid-topic");
                }
            },
            qos: {value: "2"},
            datatype: {value:"auto-detect",required:true},
            broker: {type:"mqtt-broker", required:true, label:RED._("node-red:mqtt.label.broker")},
            // subscriptionIdentifier: {value:0},
            nl: {value:false},
            rap: {value:true},
            rh: {value:0},
            inputs: {value:0},
        },
        color:"#d8bfd8",
        inputs:0,
        outputs:1,
        icon: "bridge.svg",
        label: function() {
            var label = "mqtt";
            if(this.topicType !== "dynamic" && this.topic) {
                label = this.topic;
            }
            return this.name || label;
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            const node = this;
            const isV5Broker = function() {
                var confNode = RED.nodes.node($("#node-input-broker").val());
                return confNode && confNode.protocolVersion === "5";
            }
            const isDynamic = function() {
                return $('#node-input-topicType').val() === "dynamic";
            }
            const updateVisibility = function() {
                var v5 = isV5Broker();
                var dynamic = isDynamic();
                $("div.form-row-mqtt5").toggleClass("form-row-mqtt5-active",!!v5);
                $("div.form-row.form-row-mqtt-static").toggleClass("form-row-mqtt-static-disabled", !!dynamic)
            }

            $("#node-input-datatype").on("change", function() {
                if($(this).val() === "auto") {
                    $(".form-row.form-row-mqtt-datatype-tip").show();
                } else {
                    $(".form-row.form-row-mqtt-datatype-tip").hide();
                }
            })
            $("#node-input-datatype").trigger("change");

            $("#node-input-broker").on("change",function(d){
                updateVisibility();
            });

            $('#node-input-topicType').on("change", function () {
                $("#node-input-inputs").val(isDynamic() ? 1 : 0);
                updateVisibility();
            });

            if (this.inputs === 1) {
                $('#node-input-topicType').val('dynamic')
            } else {
                $('#node-input-topicType').val('topic')
            }
            $('#node-input-topicType').trigger("change");

            if (this.qos === undefined) {
                $("#node-input-qos").val("2");
            }
            if (this.datatype === undefined) {
                $("#node-input-datatype").val("auto-detect");
            }
        },
        oneditsave: function() {
            if ($('#node-input-topicType').val() === "dynamic") {
                $('#node-input-topic').val("");
            }
        }
    });

    RED.nodes.registerType('mqtt out',{
        category: 'network',
        defaults: {
            name: {value:""},
            topic: {value:"", validate:validateMQTTPublishTopic},
            qos: {value:""},
            retain: {value:""},
            respTopic: {value:""},
            contentType: {value:""},
            userProps: {value:''},
            correl: {value:''},
            expiry: {value:''},
            broker: {type:"mqtt-broker", required:true,
                     label:RED._("node-red:mqtt.label.broker") }
        },
        color:"#d8bfd8",
        inputs:1,
        outputs:0,
        icon: "bridge.svg",
        align: "right",
        label: function() {
            return this.name||this.topic||"mqtt";
        },
        oneditprepare: function() {
            var that = this;

            function showHideDynamicFields() {
                var confNode = RED.nodes.node($("#node-input-broker").val());
                var v5 = confNode && confNode.protocolVersion == "5";
                if(v5) {
                    $("div.form-row.mqtt5").show();
                    var t = $("#node-input-respTopic").typedInput("type");
                    if (t == 'none') {
                        $("#node-input-correl").parent().hide();
                    } else {
                        $("#node-input-correl").parent().show();
                    }
                } else {
                    $("div.form-row.mqtt5").hide();
                }
            }

            $("#node-input-broker").on("change",function(d){
                showHideDynamicFields();
            });

            var respTopicTI = $("#node-input-respTopic").typedInput({
                default: !this.respTopic ? 'none':'str',
                types: [typedInputNoneOpt,  'str'],
            });

            var correlTI = $("#node-input-correl").typedInput({
                default: !this.correl ? 'none':'str',
                types: [typedInputNoneOpt,  'str']
            });
            //show / hide correlation data depending on respTopic
            respTopicTI.on("change", showHideDynamicFields);
            respTopicTI.triggerHandler("change");

            $("#node-input-userProps").typedInput({
                default:  !this.userProps ? 'none':'json',
                types: [typedInputNoneOpt, 'json'],
            });
            $("#node-input-expiry").typedInput({
                default: !this.expiry ? 'none':'num',
                types: [typedInputNoneOpt,  'num']
            });
            $("#node-input-contentType").typedInput({
                default: getDefaultContentType(this.contentType),
                types: contentTypeOpts
            })
        },
        oneditsave: function() {

            var contentType = $("#node-input-contentType").val().trim();
            if (contentType === '') {
                contentType = $("#node-input-contentType").typedInput('type');
                if (contentType === 'none' || contentType === 'other') {
                    contentType = "";
                }
            }
            $("#node-input-contentType").val(contentType)

        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        }
    });
})();
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="mqtt in">
<p>Connects to a MQTT broker and subscribes to messages from the specified topic.</p>
    <h3>Outputs</h3>
    <dl class="message-properties">
       <dt>payload <span class="property-type">string | buffer</span></dt>
       <dd>a string unless detected as a binary buffer.</dd>
       <dt>topic <span class="property-type">string</span></dt>
       <dd>the MQTT topic, uses / as a hierarchy separator.</dd>
       <dt>qos <span class="property-type">number</span> </dt>
       <dd>0, fire and forget - 1, at least once - 2, once and once only.</dd>
       <dt>retain <span class="property-type">boolean</span></dt>
       <dd>true indicates the message was retained and may be old.</dd>

       <dt class="optional">responseTopic <span class="property-type">string</span></dt>
       <dd><b>MQTTv5</b>: the MQTT response topic for the message</dd>
       <dt class="optional">correlationData <span class="property-type">Buffer</span></dt>
       <dd><b>MQTTv5</b>: the correlation data for the message</dd>
       <dt class="optional">contentType <span class="property-type">string</span></dt>
       <dd><b>MQTTv5</b>: the content-type of the payload</dd>
       <dt class="optional">userProperties <span class="property-type">object</span></dt>
       <dd><b>MQTTv5</b>: any user properties of the message</dd>
       <dt class="optional">messageExpiryInterval <span class="property-type">number</span></dt>
       <dd><b>MQTTv5</b>: the expiry time, in seconds, of the message</dd>
    </dl>
    <h3>Details</h3>
    The subscription topic can include MQTT wildcards, + for one level, # for multiple levels.</p>
    <p>This node requires a connection to a MQTT broker to be configured. This is configured by clicking
    the pencil icon.</p>
    <p>Several MQTT nodes (in or out) can share the same broker connection if required.</p>
    <h4>Dynamic Subscription</h4>
    The node can be configured to dynamically control the MQTT connection and its subscriptions. When
    enabled, the node will have an input and can be controlled by passing it messages.
    <h3>Inputs</h3>
    <p>These only apply when the node has been configured for dynamic subscriptions.</p>
    <dl class="message-properties">
       <dt>action <span class="property-type">string</span></dt>
       <dd>the name of the action the node should perform. Available actions are: <code>"connect"</code>,
       <code>"disconnect"</code>, <code>"subscribe"</code> and <code>"unsubscribe"</code>.</dd>
       <dt class="optional">topic <span class="property-type">string|object|array</span></dt>
       <dd>For the <code>"subscribe"</code> and <code>"unsubscribe"</code> actions, this property
           provides the topic. It can be set as either:<ul>
           <li>a String containing the topic filter</li>
           <li>an Object containing <code>topic</code> and <code>qos</code> properties</li>
           <li>an array of either strings or objects to handle multiple topics in one</li>
            </ul>
        </dd>
       <dt class="optional">broker <span class="property-type">broker</span> </dt>
       <dd>For the <code>"connect"</code> action, this property can override any
           of the individual broker configuration settings, including: <ul>
               <li><code>broker</code></li>
               <li><code>port</code></li>
               <li><code>url</code> - overrides broker/port to provide a complete connection url</li>
               <li><code>username</code></li>
               <li><code>password</code></li>
           </ul>
           <p>If this property is set and the broker is already connected an error
              will be logged unless it has the <code>force</code> property set - in which case it will
              disconnect from the broker, apply the new settings and reconnect.</p>
       </dd>
    </dl>

</script>

<script type="text/html" data-help-name="mqtt out">
    <p>Connects to a MQTT broker and publishes messages.</p>
    <h3>Inputs</h3>
    <dl class="message-properties">
       <dt>payload <span class="property-type">string | buffer</span></dt>
       <dd> the payload to publish. If this property is not set, no message will be sent. To send a blank message, set this property to an empty String.</dd>
       <dt class="optional">topic <span class="property-type">string</span></dt>
       <dd> the MQTT topic to publish to.</dd>
       <dt class="optional">qos <span class="property-type">number</span></dt>
       <dd>0, fire and forget - 1, at least once - 2, once and once only. Default 0.</dd>
       <dt class="optional">retain <span class="property-type">boolean</span></dt>
       <dd>set to true to retain the message on the broker. Default false.</dd>
       <dt class="optional">responseTopic <span class="property-type">string</span></dt>
       <dd><b>MQTTv5</b>: the MQTT response topic for the message</dd>
       <dt class="optional">correlationData <span class="property-type">Buffer</span></dt>
       <dd><b>MQTTv5</b>: the correlation data for the message</dd>
       <dt class="optional">contentType <span class="property-type">string</span></dt>
       <dd><b>MQTTv5</b>: the content-type of the payload</dd>
       <dt class="optional">userProperties <span class="property-type">object</span></dt>
       <dd><b>MQTTv5</b>: any user properties of the message</dd>
       <dt class="optional">messageExpiryInterval <span class="property-type">number</span></dt>
       <dd><b>MQTTv5</b>: the expiry time, in seconds, of the message</dd>
       <dt class="optional">topicAlias <span class="property-type">number</span></dt>
       <dd><b>MQTTv5</b>: the MQTT topic alias to use</dd>
    </dl>
    <h3>Details</h3>
    <code>msg.payload</code> is used as the payload of the published message.
    If it contains an Object it will be converted to a JSON string before being sent.
    If it contains a binary Buffer the message will be published as-is.</p>
    <p>The topic used can be configured in the node or, if left blank, can be set by <code>msg.topic</code>.</p>
    <p>Likewise the QoS and retain values can be configured in the node or, if left
    blank, set by <code>msg.qos</code> and <code>msg.retain</code> respectively. To clear a previously
    retained topic from the broker, send a blank message to that topic with the retain flag set.</p>
    <p>This node requires a connection to a MQTT broker to be configured. This is configured by clicking
    the pencil icon.</p>
    <p>Several MQTT nodes (in or out) can share the same broker connection if required.</p>

    <h4>Dynamic Control</h4>
    The connection shared by the node can be controlled dynamically. If the node receives
    one of the following control messages, it will not publish the message payload as well.
    <h3>Inputs</h3>
    <dl class="message-properties">
       <dt>action <span class="property-type">string</span></dt>
       <dd>the name of the action the node should perform. Available actions are: <code>"connect"</code>,
       and <code>"disconnect"</code>.</dd>
       <dt class="optional">broker <span class="property-type">broker</span> </dt>
       <dd>For the <code>"connect"</code> action, this property can override any
           of the individual broker configuration settings, including: <ul>
               <li><code>broker</code></li>
               <li><code>port</code></li>
               <li><code>url</code> - overrides broker/port to provide a complete connection url</li>
               <li><code>username</code></li>
               <li><code>password</code></li>
           </ul>
           <p>If this property is set and the broker is already connected an error
              will be logged unless it has the <code>force</code> property set - in which case it will
              disconnect from the broker, apply the new settings and reconnect.</p>
       </dd>
    </dl>

</script>

<script type="text/html" data-help-name="mqtt-broker">
    <p>Configuration for a connection to an MQTT broker.</p>
    <p>This configuration will create a single connection to the broker which can
       then be reused by <code>MQTT In</code> and <code>MQTT Out</code> nodes.</p>
    <p>The node will generate a random Client ID if one is not set and the
       node is configured to use a Clean Session connection. If a Client ID is set,
       it must be unique to the broker you are connecting to.</p>
    <h4>Birth Message</h4>
    <p>This is a message that will be published on the configured topic whenever the
       connection is established.</p>
    <h4>Close Message</h4>
    <p>This is a message that will be published on the configured topic before the
       connection is closed normally, either by re-deploying the node, or by shutting down.</p>
    <h4>Will Message</h4>
    <p>This is a message that will be published by the broker in the event the node
       unexpectedly loses its connection.</p>
    <h4>WebSockets</h4>
    <p>The node can be configured to use a WebSocket connection. To do so, the Server
       field should be configured with a full URI for the connection. For example:</p>
    <pre>ws://example.com:4000/mqtt</pre>

</script>

<!-- --- [red-module:node-red/httpin] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="http in">
    <div class="form-row">
        <label for="node-input-method"><i class="fa fa-tasks"></i> <span data-i18n="httpin.label.method"></span></label>
        <select type="text" id="node-input-method" style="width:70%;">
        <option value="get">GET</option>
        <option value="post">POST</option>
        <option value="put">PUT</option>
        <option value="delete">DELETE</option>
        <option value="patch">PATCH</option>
        </select>
    </div>
    <div class="form-row form-row-http-in-upload hide">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-upload" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-upload" style="width: 70%;" data-i18n="httpin.label.upload"></label>
    </div>
    <div class="form-row">
        <label for="node-input-url"><i class="fa fa-globe"></i> <span data-i18n="httpin.label.url"></span></label>
        <input id="node-input-url" type="text" placeholder="/url">
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-row row-swagger-doc">
        <label for="node-input-swaggerDoc"><i class="fa fa-file-text-o"></i> <span data-i18n="httpin.label.doc"></span></label>
        <input type="text" id="node-input-swaggerDoc">
    </div>
    <div id="node-input-tip" class="form-tips"><span data-i18n="httpin.tip.in"></span><code><span id="node-input-path"></span></code>.</div>
</script>

<script type="text/html" data-template-name="http response">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-row">
        <label for="node-input-statusCode"><i class="fa fa-long-arrow-left"></i> <span data-i18n="httpin.label.status"></span></label>
        <input type="text" id="node-input-statusCode" placeholder="msg.statusCode">
    </div>
    <div class="form-row" style="margin-bottom:0;">
        <label><i class="fa fa-list"></i> <span data-i18n="httpin.label.headers"></span></label>
    </div>
    <div class="form-row node-input-headers-container-row">
        <ol id="node-input-headers-container"></ol>
    </div>
    <div class="form-tips"><span data-i18n="[html]httpin.tip.res"></span></div>
</script>

<script type="text/javascript">
(function() {
    RED.nodes.registerType('http in',{
        category: 'network',
        color:"rgb(231, 231, 174)",
        defaults: {
            name: {value:""},
            url: {value:"", required:true,
                  label:RED._("node-red:httpin.label.url")},
            method: {value:"get",required:true},
            upload: {value:false},
            swaggerDoc: {type:"swagger-doc", required:false}
        },
        inputs:0,
        outputs:1,
        icon: "white-globe.svg",
        label: function() {
            if (this.name) {
                return this.name;
            } else if (this.url) {
                var root = RED.settings.httpNodeRoot;
                if (root.slice(-1) != "/") {
                    root = root+"/";
                }
                if (this.url.charAt(0) == "/") {
                    root += this.url.slice(1);
                } else {
                    root += this.url;
                }
                return "["+this.method+"] "+root;
            } else {
                return "http";
            }
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var root = RED.settings.httpNodeRoot;
            if (root.slice(-1) == "/") {
                root = root.slice(0,-1);
            }
            if (root == "") {
                $("#node-input-tip").hide();
            } else {
                $("#node-input-path").html(root);
                $("#node-input-tip").show();
            }
            if(!RED.nodes.getType("swagger-doc")){
                $('.row-swagger-doc').hide();
            }
            $("#node-input-method").on("change", function() {
                if ($(this).val() === "post") {
                    $(".form-row-http-in-upload").show();
                } else {
                    $(".form-row-http-in-upload").hide();
                }
            }).change();


        }

    });
    var headerTypes = [
        {value:"content-type",label:"Content-Type",hasValue: false},
        {value:"location",label:"Location",hasValue: false},
        {value:"other",label:RED._("node-red:httpin.label.other"),icon:"red/images/typedInput/az.svg"}
       ]
    var contentTypes = [
        {value:"application/json",label:"application/json",hasValue: false},
        {value:"application/xml",label:"application/xml",hasValue: false},
        {value:"text/css",label:"text/css",hasValue: false},
        {value:"text/html",label:"text/html",hasValue: false},
        {value:"text/plain",label:"text/plain",hasValue: false},
        {value:"image/gif",label:"image/gif",hasValue: false},
        {value:"image/png",label:"image/png",hasValue: false},
        {value:"other",label:RED._("node-red:httpin.label.other"),icon:"red/images/typedInput/az.svg"}
    ];

    RED.nodes.registerType('http response',{
        category: 'network',
        color:"rgb(231, 231, 174)",
        defaults: {
            name: {value:""},
            statusCode: {
                value:"",
                label: RED._("node-red:httpin.label.status"),
                validate: RED.validators.number(true)},
            headers: {value:{}}
        },
        inputs:1,
        outputs:0,
        align: "right",
        icon: "white-globe.svg",
        label: function() {
            return this.name||("http"+(this.statusCode?" ("+this.statusCode+")":""));
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var headerList = $("#node-input-headers-container").css('min-height','150px').css('min-width','450px').editableList({
                addItem: function(container,i,header) {
                    var row = $('<div/>').css({
                        overflow: 'hidden',
                        whiteSpace: 'nowrap',
                        display: 'flex'
                    }).appendTo(container);
                    var propertNameCell = $('<div/>').css({'flex-grow':1}).appendTo(row);
                    var propertyName = $('<input/>',{class:"node-input-header-name",type:"text", style:"width: 100%"})
                        .appendTo(propertNameCell)
                        .typedInput({types:headerTypes});

                    var propertyValueCell = $('<div/>').css({'flex-grow':1,'margin-left':'10px'}).appendTo(row);
                    var propertyValue = $('<input/>',{class:"node-input-header-value",type:"text",style:"width: 100%"})
                        .appendTo(propertyValueCell)
                        .typedInput({types:
                            header.h === 'content-type'?contentTypes:[{value:"other",label:"other",icon:"red/images/typedInput/az.svg"}]
                        });

                    var matchedType = headerTypes.filter(function(ht) {
                        return ht.value === header.h
                    });
                    if (matchedType.length === 0) {
                        propertyName.typedInput('type','other');
                        propertyName.typedInput('value',header.h);
                        propertyValue.typedInput('value',header.v);
                    } else {
                        propertyName.typedInput('type',header.h);

                        if (header.h === "content-type") {
                            matchedType = contentTypes.filter(function(ct) {
                                return ct.value === header.v;
                            });
                            if (matchedType.length === 0) {
                                propertyValue.typedInput('type','other');
                                propertyValue.typedInput('value',header.v);
                            } else {
                                propertyValue.typedInput('type',header.v);
                            }
                        } else {
                            propertyValue.typedInput('value',header.v);
                        }
                    }

                    matchedType = headerTypes.filter(function(ht) {
                        return ht.value === header.h
                    });
                    if (matchedType.length === 0) {
                        propertyName.typedInput('type','other');
                        propertyName.typedInput('value',header.h);
                    } else {
                        propertyName.typedInput('type',header.h);
                    }

                    propertyName.on('change',function(event) {
                        var type = propertyName.typedInput('type');
                        if (type === 'content-type') {
                            propertyValue.typedInput('types',contentTypes);
                        } else {
                            propertyValue.typedInput('types',[{value:"other",label:"other",icon:"red/images/typedInput/az.svg"}]);
                        }
                    });
                },
                removable: true
            });

            if (this.headers) {
                for (var key in this.headers) {
                    if (this.headers.hasOwnProperty(key)) {
                        headerList.editableList('addItem',{h:key,v:this.headers[key]});
                    }
                }
            }
        },
        oneditsave: function() {
            var headers = $("#node-input-headers-container").editableList('items');
            var node = this;
            node.headers = {};
            headers.each(function(i) {
                var header = $(this);
                var keyType = header.find(".node-input-header-name").typedInput('type');
                var keyValue = header.find(".node-input-header-name").typedInput('value');
                var valueType = header.find(".node-input-header-value").typedInput('type');
                var valueValue = header.find(".node-input-header-value").typedInput('value');
                var key = keyType;
                var value = valueType;
                if (keyType === 'other') {
                    key = keyValue;
                }
                if (valueType === 'other') {
                    value = valueValue;
                }
                if (key !== '') {
                    node.headers[key] = value;
                }
            });
        },
        oneditresize: function(size) {
            var rows = $("#dialog-form>div:not(.node-input-headers-container-row)");
            var height = size.height;
            for (var i=0; i<rows.length; i++) {
                height -= $(rows[i]).outerHeight(true);
            }
            var editorRow = $("#dialog-form>div.node-input-headers-container-row");
            height -= (parseInt(editorRow.css("marginTop"))+parseInt(editorRow.css("marginBottom")));

            $("#node-input-headers-container").editableList('height',height);
        }
    });
})();
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="http in">
    <p>Creates an HTTP end-point for creating web services.</p>
    <h3>Outputs</h3>
    <dl class="message-properties">
        <dt>payload</dt>
        <dd>For a GET request, contains an object of any query string parameters.
            Otherwise, contains the body of the HTTP request.</dd>
        <dt>req<span class="property-type">object</span></dt>
        <dd>An HTTP request object. This object contains multiple properties that
            provide information about the request.
            <ul>
             <li><code>body</code> - the body of the incoming request. The format
                 will depend on the request.</li>
             <li><code>headers</code> - an object containing the HTTP request headers.</li>
             <li><code>query</code> - an object containing any query string parameters.</li>
             <li><code>params</code> - an object containing any route parameters.</li>
             <li><code>cookies</code> - an object containing the cookies for the request.</li>
             <li><code>files</code> - if enabled within the node, an object containing
                 any files uploaded as part of a POST request.</li>
            </ul>
        </dd>
        <dt>res<span class="property-type">object</span></dt>
        <dd>An HTTP response object. This property should not be used directly;
            the <code>HTTP Response</code> node documents how to respond to a request.
            This property must remain attached to the message passed to the response node.</dd>
    </dl>
    <h3>Details</h3>
    <p>The node will listen on the configured path for requests of a particular type.
       The path can be fully specified, such as <code>/user</code>, or include
       named parameters that accept any value, such as <code>/user/:name</code>.
       When named parameters are used, their actual value in a request can be accessed under <code>msg.req.params</code>.</p>
    <p>For requests that include a body, such as a POST or PUT, the contents of
       the request is made available as <code>msg.payload</code>.</p>
    <p>If the content type of the request can be determined, the body will be parsed to
       any appropriate type. For example, <code>application/json</code> will be parsed to
       its JavaScript object representation.</p>
    <p><b>Note:</b> this node does not send any response to the request. The flow
       must include an HTTP Response node to complete the request.</p>
</script>

<script type="text/html" data-help-name="http response">
    <p>Sends responses back to requests received from an HTTP Input node.</p>

    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt>payload <span class="property-type">string</span></dt>
        <dd>The body of the response.</dd>
        <dt class="optional">statusCode <span class="property-type">number</span></dt>
        <dd>If set, this is used as the response status code. Default: 200.</dd>
        <dt class="optional">headers <span class="property-type">object</span></dt>
        <dd>If set, provides HTTP headers to include in the response.</dd>
        <dt class="optional">cookies <span class="property-type">object</span></dt>
        <dd>If set, can be used to set or delete cookies.</dd>
    </dl>
    <h3>Details</h3>
    <p>The <code>statusCode</code> and <code>headers</code> can also be set within
    the node itself. If a property is set within the node, it cannot be overridden
    by the corresponding message property.</p>
    <h4>Cookie handling</h4>
    <p>The <code>cookies</code> property must be an object of name/value pairs.
    The value can be either a string to set the value of the cookie with default
    options, or it can be an object of options.</p>
    <p>The following example sets two cookies - one called <code>name</code> with
    a value of <code>nick</code>, the other called <code>session</code> with a
    value of <code>1234</code> and an expiry set to 15 minutes.</p>
    <pre>
msg.cookies = {
    name: 'nick',
    session: {
        value: '1234',
        maxAge: 900000
    }
}</pre>
    <p>The valid options include:</p>
    <ul>
    <li><code>domain</code> - (String) domain name for the cookie</li>
    <li><code>expires</code> - (Date) expiry date in GMT. If not specified or set to 0, creates a session cookie</li>
    <li><code>maxAge</code> - (String) expiry date as relative to the current time in milliseconds</li>
    <li><code>path</code> - (String) path for the cookie. Defaults to /</li>
    <li><code>value</code> - (String) the value to use for the cookie</li>
    </ul>
    <p>To delete a cookie, set its <code>value</code> to <code>null</code>.</p>

</script>

<!-- --- [red-module:node-red/httprequest] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="http request">
    <div class="form-row">
        <label for="node-input-method"><i class="fa fa-tasks"></i> <span data-i18n="httpin.label.method"></span></label>
        <select type="text" id="node-input-method" style="width:70%;">
        <option value="GET">GET</option>
        <option value="POST">POST</option>
        <option value="PUT">PUT</option>
        <option value="DELETE">DELETE</option>
        <option value="HEAD">HEAD</option>
        <option value="use" data-i18n="httpin.setby"></option>
        </select>
    </div>

    <div class="form-row">
        <label for="node-input-url"><i class="fa fa-globe"></i> <span data-i18n="httpin.label.url"></span></label>
        <input id="node-input-url" type="text" placeholder="http://">
    </div>

    <div class="form-row node-input-paytoqs-row">
        <label for="node-input-paytoqs"><span data-i18n="common.label.payload"></span></label>
        <select id="node-input-paytoqs" style="width: 70%;">
            <option value="ignore" data-i18n="httpin.label.paytoqs.ignore"></option>
            <option value="query" data-i18n="httpin.label.paytoqs.query"></option>
            <option value="body" data-i18n="httpin.label.paytoqs.body"></option>
        </select>
    </div>

    <div class="form-row">
        <input type="checkbox" id="node-input-usetls" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-usetls" style="width: auto" data-i18n="httpin.use-tls"></label>
        <div id="node-row-tls" class="hide">
            <label style="width: auto; margin-left: 20px; margin-right: 10px;" for="node-input-tls"><span data-i18n="httpin.tls-config"></span></label><input type="text" style="width: 300px" id="node-input-tls">
        </div>
    </div>

    <div class="form-row">
        <input type="checkbox" id="node-input-useAuth" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-useAuth" style="width: 70%;"><span data-i18n="httpin.basicauth"></span></label>
        <div style="margin-left: 20px" class="node-input-useAuth-row hide">
            <div class="form-row">
                <label for="node-input-authType-select"><i class="fa fa-user-secret "></i> <span data-i18n="httpin.label.authType"></span></label>
                <select type="text" id="node-input-authType-select" style="width:70%;">
                    <option value="basic"  data-i18n="httpin.basic"></option>
                    <option value="digest" data-i18n="httpin.digest"></option>
                    <option value="bearer" data-i18n="httpin.bearer"></option>
                </select>
                <input type="hidden" id="node-input-authType">
            </div>
            <div class="form-row node-input-basic-row">
                <label for="node-input-user"><i class="fa fa-user"></i> <span data-i18n="common.label.username"></span></label>
                <input type="text" id="node-input-user">
            </div>
            <div class="form-row">
                <label for="node-input-password"> <i class="fa fa-lock"></i> <span data-i18n="common.label.password" id="node-span-password"></span><span data-i18n="httpin.label.bearerToken" id="node-span-token" style="display:none"></span></label>
                <input type="password" id="node-input-password">
            </div>
        </div>
    </div>

    <div class="form-row">
        <input type="checkbox" id="node-input-persist" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-persist" style="width: auto" data-i18n="httpin.persist"></label>
    </div>

    <div class="form-row">
        <input type="checkbox" id="node-input-useProxy" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-useProxy" style="width: auto;"><span data-i18n="httpin.use-proxy"></span></label>
        <div id="node-input-useProxy-row" class="hide">
            <label style="width: auto; margin-left: 20px; margin-right: 10px;" for="node-input-proxy"><i class="fa fa-globe"></i> <span data-i18n="httpin.proxy-config"></span></label><input type="text" style="width: 270px" id="node-input-proxy">
        </div>
    </div>

    <div class="form-row">
        <input type="checkbox" id="node-input-senderr" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-senderr" style="width: auto" data-i18n="httpin.senderr"></label>
    </div>

    <div class="form-row">
        <input type="checkbox" id="node-input-insecureHTTPParser" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-insecureHTTPParser", style="width: auto;" data-i18n="httpin.insecureHTTPParser"></label>
    </div>


    <div class="form-row">
        <label for="node-input-ret"><i class="fa fa-arrow-left"></i> <span data-i18n="httpin.label.return"></span></label>
        <select type="text" id="node-input-ret" style="width:70%;">
        <option value="txt" data-i18n="httpin.utf8"></option>
        <option value="bin" data-i18n="httpin.binary"></option>
        <option value="obj" data-i18n="httpin.json"></option>
        </select>
    </div>

    <div class="form-row form-tips" id="tip-json" hidden><span data-i18n="httpin.tip.req"></span></div>

    <div class="form-row" style="margin-bottom:0;">
        <label><i class="fa fa-list"></i> <span data-i18n="httpin.label.headers"></span></label>
    </div>
    <div class="form-row node-input-headers-container-row">
        <ol id="node-input-headers-container"></ol>
    </div>

    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/javascript">
(function() {
    const headerTypes = [
        { value: "Accept", label: "Accept", hasValue: false },
        { value: "Accept-Encoding", label: "Accept-Encoding", hasValue: false },
        { value: "Accept-Language", label: "Accept-Language", hasValue: false },
        { value: "Authorization", label: "Authorization", hasValue: false },
        { value: "Content-Type", label: "Content-Type", hasValue: false },
        { value: "Cache-Control", label: "Cache-Control", hasValue: false },
        { value: "User-Agent", label: "User-Agent", hasValue: false },
        { value: "Location", label: "Location", hasValue: false },
        { value: "other", label: RED._("node-red:httpin.label.other"),
          hasValue: true, icon: "red/images/typedInput/az.svg" },
        { value: "msg", label: "msg.", hasValue: true },
    ]
    const headerOptions = {};
    const defaultOptions = [
        { value: "other", label: RED._("node-red:httpin.label.other"),
          hasValue: true, icon: "red/images/typedInput/az.svg" },
        { value: "msg", label: "msg.", hasValue: true },
    ];
    headerOptions["accept"] = [
        { value: "text/plain", label: "text/plain", hasValue: false },
        { value: "text/html", label: "text/html", hasValue: false },
        { value: "application/json", label: "application/json", hasValue: false },
        { value: "application/xml", label: "application/xml", hasValue: false },
        ...defaultOptions,
    ];
    headerOptions["accept-encoding"] = [
        { value: "gzip", label: "gzip", hasValue: false },
        { value: "deflate", label: "deflate", hasValue: false },
        { value: "compress", label: "compress", hasValue: false },
        { value: "br", label: "br", hasValue: false },
        { value: "gzip, deflate", label: "gzip, deflate", hasValue: false },
        { value: "gzip, deflate, br", label: "gzip, deflate, br", hasValue: false },
        ...defaultOptions,
    ];
    headerOptions["accept-language"] = [
        { value: "*", label: "*", hasValue: false },
        { value: "en-GB, en-US, en;q=0.9", label: "en-GB, en-US, en;q=0.9", hasValue: false },
        { value: "de-AT, de-DE;q=0.9, en;q=0.5", label: "de-AT, de-DE;q=0.9, en;q=0.5", hasValue: false },
        { value: "es-mx,es,en;q=0.5", label: "es-mx,es,en;q=0.5", hasValue: false },
        { value: "fr-CH, fr;q=0.9, en;q=0.8", label: "fr-CH, fr;q=0.9, en;q=0.8", hasValue: false },
        { value: "zh-CN, zh-TW; q = 0.9, zh-HK; q = 0.8, zh; q = 0.7, en; q = 0.6", label: "zh-CN, zh-TW; q = 0.9, zh-HK; q = 0.8, zh; q = 0.7, en; q = 0.6", hasValue: false },
        { value: "ja-JP, jp", label: "ja-JP, jp", hasValue: false },
        ...defaultOptions,
    ];
    headerOptions["content-type"] = [
        { value: "text/css", label: "text/css", hasValue: false },
        { value: "text/plain", label: "text/plain", hasValue: false },
        { value: "text/html", label: "text/html", hasValue: false },
        { value: "application/json", label: "application/json", hasValue: false },
        { value: "application/octet-stream", label: "application/octet-stream", hasValue: false },
        { value: "application/pdf", label: "application/pdf", hasValue: false },
        { value: "application/xml", label: "application/xml", hasValue: false },
        { value: "application/zip", label: "application/zip", hasValue: false },
        { value: "multipart/form-data", label: "multipart/form-data", hasValue: false },
        { value: "audio/aac", label: "audio/aac", hasValue: false },
        { value: "audio/ac3", label: "audio/ac3", hasValue: false },
        { value: "audio/basic", label: "audio/basic", hasValue: false },
        { value: "audio/mp4", label: "audio/mp4", hasValue: false },
        { value: "audio/ogg", label: "audio/ogg", hasValue: false },
        { value: "image/bmp", label: "image/bmp", hasValue: false },
        { value: "image/gif", label: "image/gif", hasValue: false },
        { value: "image/jpeg", label: "image/jpeg", hasValue: false },
        { value: "image/png", label: "image/png", hasValue: false },
        { value: "image/tiff", label: "image/tiff", hasValue: false },
        ...defaultOptions,
    ];
    headerOptions["cache-control"] = [
        { value: "max-age=0", label: "max-age=0", hasValue: false },
        { value: "max-age=86400", label: "max-age=86400", hasValue: false },
        { value: "no-cache", label: "no-cache", hasValue: false },
        ...defaultOptions,
    ];

    headerOptions["user-agent"] = [
        { value: "Mozilla/5.0", label: "Mozilla/5.0", hasValue: false },
        ...defaultOptions,
    ];

    function getHeaderOptions(headerName) {
        const lc = (headerName || "").toLowerCase();
        let opts = headerOptions[lc];
        return opts || defaultOptions;
    }

    RED.nodes.registerType('http request',{
        category: 'network',
        color:"rgb(231, 231, 174)",
        defaults: {
            name: {value:""},
            method:{value:"GET"},
            ret: {value:"txt"},
            paytoqs: {value: false},
            url:{
                value:"",
                validate: function(v, opt) {
                    if ((v.trim().length === 0) ||
                        (v.indexOf("://") === -1) ||
                        (v.trim().indexOf("http") === 0)) {
                        return true;
                    }
                    return RED._("node-red:httpin.errors.invalid-url");
                }
            },
            tls: {type:"tls-config",required: false,
                  label:RED._("node-red:httpin.tls-config") },
            persist: {value:false},
            proxy: {type:"http proxy",required: false,
                    label:RED._("node-red:httpin.proxy-config") },
            insecureHTTPParser: {value: false},
            authType: {value: ""},
            senderr: {value: false},
            headers: { value: [] }
        },
        credentials: {
            user: {type:"text"},
            password: {type: "password"}
        },
        inputs:1,
        outputs:1,
        outputLabels: function(i) {
            return ({
                txt: this._("httpin.label.utf8String"),
                bin: this._("httpin.label.binaryBuffer"),
                obj: this._("httpin.label.jsonObject")
            }[this.ret]);
        },
        icon: "white-globe.svg",
        label: function() {
            return this.name||this._("httpin.httpreq");
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            const node = this;
            $("#node-input-useAuth").on("change", function() {
                if ($(this).is(":checked")) {
                    $(".node-input-useAuth-row").show();
                    // Nodes (< version 0.20.x) with credentials but without authentication type, need type 'basic'
                    if (!$('#node-input-authType').val()) {
                        $("#node-input-authType-select").val('basic').trigger("change");
                    }
                } else {
                    $(".node-input-useAuth-row").hide();
                    $('#node-input-authType').val('');
                    $('#node-input-user').val('');
                    $('#node-input-password').val('');
                }
                RED.tray.resize();
            });
            $("#node-input-authType-select").on("change", function() {
                const val = $(this).val();
                $("#node-input-authType").val(val);
                if (val === "basic" || val === "digest") {
                    $(".node-input-basic-row").show();
                    $('#node-span-password').show();
                    $('#node-span-token').hide();
                } else if (val === "bearer") {
                    $(".node-input-basic-row").hide();
                    $('#node-span-password').hide();
                    $('#node-span-token').show();
                    $('#node-input-user').val('');
                }
                RED.tray.resize();
            });
            $("#node-input-method").on("change", function() {
                if ($(this).val() == "GET") {
                    $(".node-input-paytoqs-row").show();
                } else {
                    $(".node-input-paytoqs-row").hide();
                }
                RED.tray.resize();
            });
            if (node.paytoqs === true || node.paytoqs == "query") {
                $("#node-input-paytoqs").val("query");
            } else if (node.paytoqs === "body") {
                $("#node-input-paytoqs").val("body");
            } else {
                $("#node-input-paytoqs").val("ignore");
            }
            if (node.authType) {
                $('#node-input-useAuth').prop('checked', true);
                $("#node-input-authType-select").val(node.authType);
                $("#node-input-authType-select").change();
            } else {
                $('#node-input-useAuth').prop('checked', false);
            }
            $("#node-input-useAuth").change();

            function updateTLSOptions() {
                if ($("#node-input-usetls").is(':checked')) {
                    $("#node-row-tls").show();
                } else {
                    $("#node-row-tls").hide();
                }
                RED.tray.resize();
            }
            if (node.tls) {
                $('#node-input-usetls').prop('checked', true);
            } else {
                $('#node-input-usetls').prop('checked', false);
            }
            updateTLSOptions();
            $("#node-input-usetls").on("click",function() {
                updateTLSOptions();
            });

            function updateProxyOptions() {
                if ($("#node-input-useProxy").is(":checked")) {
                    $("#node-input-useProxy-row").show();
                } else {
                    $("#node-input-useProxy-row").hide();
                }
                RED.tray.resize();
            }
            if (node.proxy) {
                $("#node-input-useProxy").prop("checked", true);
            } else {
                $("#node-input-useProxy").prop("checked", false);
            }

            if (node.insecureHTTPParser) {
                $("node-intput-insecureHTTPParser").prop("checked", true)
            } else {
                $("node-intput-insecureHTTPParser").prop("checked", false)
            }
            updateProxyOptions();
            $("#node-input-useProxy").on("click", function() {
                updateProxyOptions();
            });

            $("#node-input-ret").on("change", function() {
                if ($("#node-input-ret").val() === "obj") {
                    $("#tip-json").show();
                } else {
                    $("#tip-json").hide();
                }
                RED.tray.resize();
            });
            const hasMatch = function (arr, value) {
                return arr.some(function (ht) {
                    return ht.value === value
                });
            }
            const headerList = $("#node-input-headers-container").css('min-height', '150px').css('min-width', '450px').editableList({
                addItem: function (container, i, header) {
                    const row = $('<div/>').css({
                        overflow: 'hidden',
                        whiteSpace: 'nowrap',
                        display: 'flex'
                    }).appendTo(container);
                    const propertNameCell = $('<div/>').css({ 'flex-grow': 1 }).appendTo(row);
                    const propertyName = $('<input/>', { class: "node-input-header-name", type: "text", style: "width: 100%" })
                        .appendTo(propertNameCell)
                        .typedInput({ types: headerTypes });

                    const propertyValueCell = $('<div/>').css({ 'flex-grow': 1, 'margin-left': '10px' }).appendTo(row);
                    const propertyValue = $('<input/>', { class: "node-input-header-value", type: "text", style: "width: 100%" })
                        .appendTo(propertyValueCell)
                        .typedInput({
                            types: getHeaderOptions(header.keyType)
                        });

                    const setup = function(_header) {
                        const headerTypeIsAPreset = function(h) {return hasMatch(headerTypes, h) };
                        const headerValueIsAPreset = function(h, v) {return hasMatch(getHeaderOptions(h), v) };
                        const {keyType, keyValue, valueType, valueValue} = header;
                        if(keyType == "msg" || keyType == "other") {
                            propertyName.typedInput('type', keyType);
                            propertyName.typedInput('value', keyValue);
                        } else if (headerTypeIsAPreset(keyType)) {
                            propertyName.typedInput('type', keyType);
                        } else {
                            propertyName.typedInput('type', "other");
                            propertyName.typedInput('value', keyValue);
                        }
                        if(valueType == "msg" || valueType == "other") {
                            propertyValue.typedInput('type', valueType);
                            propertyValue.typedInput('value', valueValue);
                        } else if (headerValueIsAPreset(propertyName.typedInput('type'), valueType)) {
                            propertyValue.typedInput('type', valueType);
                        } else {
                            propertyValue.typedInput('type', "other");
                            propertyValue.typedInput('value', valueValue);
                        }
                    }
                    setup(header);

                    propertyName.on('change', function (event) {
                        propertyValue.typedInput('types', getHeaderOptions(propertyName.typedInput('type')));
                    });

                },
                removable: true
            });
            if (node.headers) {
                for (let index = 0; index < node.headers.length; index++) {
                    const element = node.headers[index];
                    headerList.editableList('addItem', node.headers[index]);
                }
            }
        },
        oneditsave: function() {
            if (!$("#node-input-usetls").is(':checked')) {
                $("#node-input-tls").val("_ADD_");
            }
            if (!$("#node-input-useProxy").is(":checked")) {
                $("#node-input-proxy").val("_ADD_");
            }
            const headers = $("#node-input-headers-container").editableList('items');
            const node = this;
            node.headers = [];
            headers.each(function(i) {
                const header = $(this);
                const keyType = header.find(".node-input-header-name").typedInput('type');
                const keyValue = header.find(".node-input-header-name").typedInput('value');
                const valueType = header.find(".node-input-header-value").typedInput('type');
                const valueValue = header.find(".node-input-header-value").typedInput('value');
                if (keyType !== '' || keyType === 'other' || keyType === 'msg') {
                    node.headers.push({
                        keyType, keyValue, valueType, valueValue
                    })
                }
            });
        },
        oneditresize: function(size) {
            const dlg = $("#dialog-form");
            const expandRow = dlg.find('.node-input-headers-container-row');
            let height = dlg.height() - 5;
            if(expandRow && expandRow.length){
                const siblingRows = dlg.find('> .form-row:not(.node-input-headers-container-row)');
                for (let i = 0; i < siblingRows.size(); i++) {
                    const cr = $(siblingRows[i]);
                    if(cr.is(":visible"))
                        height -= cr.outerHeight(true);
                }
                $("#node-input-headers-container").editableList('height',height);
            } 
        }
    });
})();    
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="http request">
    <p>Sends HTTP requests and returns the response.</p>

    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt class="optional">url <span class="property-type">string</span></dt>
        <dd>If not configured in the node, this optional property sets the url of the request.</dd>
        <dt class="optional">method <span class="property-type">string</span></dt>
        <dd>If not configured in the node, this optional property sets the HTTP method of the request.
            Must be one of <code>GET</code>, <code>PUT</code>, <code>POST</code>, <code>PATCH</code> or <code>DELETE</code>.</dd>
        <dt class="optional">headers <span class="property-type">object</span></dt>
        <dd>Sets the HTTP headers of the request. NOTE: Any headers set in the node configuration will overwrite any matching headers in <code>msg.headers</code> </dd>
        <dt class="optional">cookies <span class="property-type">object</span></dt>
        <dd>If set, can be used to send cookies with the request.</dd>
        <dt class="optional">payload</dt>
        <dd>Sent as the body of the request.</dd>
        <dt class="optional">rejectUnauthorized</dt>
        <dd>If set to <code>false</code>, allows requests to be made to https sites that use
            self signed certificates.</dd>
        <dt class="optional">followRedirects</dt>
        <dd>If set to <code>false</code> prevent following Redirect (HTTP 301).<code>true</code> by default</dd>
        <dt class="optional">requestTimeout</dt>
        <dd>If set to a positive number of milliseconds, will override the globally set <code>httpRequestTimeout</code> parameter.</dd>
    </dl>
    <h3>Outputs</h3>
    <dl class="message-properties">
        <dt>payload <span class="property-type">string | object | buffer</span></dt>
        <dd>The body of the response. The node can be configured to return the body
             as a string, attempt to parse it as a JSON string or leave it as a
             binary buffer.</dd>
        <dt>statusCode <span class="property-type">number</span></dt>
        <dd>The status code of the response, or the error code if the request could not be completed.</dd>
        <dt>headers <span class="property-type">object</span></dt>
        <dd>An object containing the response headers.</dd>
        <dt>responseUrl <span class="property-type">string</span></dt>
        <dd>In case any redirects occurred while processing the request, this property is the final redirected url.
            Otherwise, the url of the original request.</dd>
        <dt>responseCookies <span class="property-type">object</span></dt>
        <dd>If the response includes cookies, this property is an object of name/value pairs for each cookie.</dd>
        <dt>redirectList <span class="property-type">array</span></dt>
        <dd>If the request was redirected one or more times, the accumulated information will be added to this property. `location` is the next redirect destination. `cookies` is the cookies returned from the redirect source.</dd>
    </dl>
    <h3>Details</h3>
    <p>When configured within the node, the URL property can contain <a href="http://mustache.github.io/mustache.5.html" target="_blank">mustache-style</a> tags. These allow the
    url to be constructed using values of the incoming message. For example, if the url is set to
    <code>example.com/{{{topic}}}</code>, it will have the value of <code>msg.topic</code> automatically inserted.
    Using {{{...}}} prevents mustache from escaping characters like / & etc.</p>
    <p>The node can optionally automatically encode <code>msg.payload</code> as query string parameters for a GET request, in which case <code>msg.payload</code> has to be an object.</p>
    <p><b>Note</b>: If running behind a proxy, the standard <code>http_proxy=...</code> environment variable should be set and Node-RED restarted, or use Proxy Configuration. If Proxy Configuration was set, the configuration take precedence over environment variable.</p>
    <h4>Using multiple HTTP Request nodes</h4>
    <p>In order to use more than one of these nodes in the same flow, care must be taken with
    the <code>msg.headers</code> property. The first node will set this property with
    the response headers. The next node will then use those headers for its request - this
    is not usually the right thing to do. If <code>msg.headers</code> property is left unchanged
    between nodes, it will be ignored by the second node. To set custom headers, <code>msg.headers</code>
    should first be deleted or reset to an empty object: <code>{}</code>.
    <h4>Cookie handling</h4>
    <p>The <code>cookies</code> property passed to the node must be an object of name/value pairs.
    The value can be either a string to set the value of the cookie or it can be an
    object with a single <code>value</code> property.<p>
    <p>Any cookies returned by the request are passed back under the <code>responseCookies</code> property.</p>
    <h4>Content type handling</h4>
    <p>If <code>msg.payload</code> is an Object, the node will automatically set the content type
    of the request to <code>application/json</code> and encode the body as such.</p>
    <p>To encode the request as form data, <code>msg.headers["content-type"]</code> should be set to <code>application/x-www-form-urlencoded</code>.</p>
    <h4>File Upload</h4>
    <p>To perform a file upload, <code>msg.headers["content-type"]</code> should be set to <code>multipart/form-data</code>
        and the <code>msg.payload</code> passed to the node must be an object with the following structure:</p>
    <pre><code>{
    "KEY": {
        "value": FILE_CONTENTS,
        "options": {
            "filename": "FILENAME"
        }
    }
}</code></pre>
    <p>The values of <code>KEY</code>, <code>FILE_CONTENTS</code> and <code>FILENAME</code>
    should be set to the appropriate values.</p>

</script>

<!-- --- [red-module:node-red/websocket] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!-- WebSocket Input Node -->
<script type="text/html" data-template-name="websocket in">
    <div class="form-row">
        <label for="node-input-mode"><i class="fa fa-dot-circle-o"></i> <span data-i18n="websocket.label.type"></span></label>
        <select id="node-input-mode">
            <option value="server" data-i18n="websocket.listenon"></option>
            <option value="client" data-i18n="websocket.connectto"></option>
        </select>
    </div>
    <div class="form-row" id="websocket-server-row">
        <label for="node-input-server"><i class="fa fa-bookmark"></i> <span data-i18n="websocket.label.path"></span></label>
        <input type="text" id="node-input-server">
    </div>
    <div class="form-row" id="websocket-client-row">
        <label for="node-input-client"><i class="fa fa-bookmark"></i> <span data-i18n="websocket.label.url"></span></label>
        <input type="text" id="node-input-client">
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/javascript">

(function() {

    function ws_oneditprepare() {
        $("#websocket-client-row").hide();
        $("#node-input-mode").on("change", function() {
            if ( $("#node-input-mode").val() === 'client') {
                $("#websocket-server-row").hide();
                $("#websocket-client-row").show();
            }
            else {
                $("#websocket-server-row").show();
                $("#websocket-client-row").hide();
            }
        });

        if (this.client) {
            $("#node-input-mode").val('client').change();
        }
        else {
            $("#node-input-mode").val('server').change();
        }
    }

    function ws_oneditsave() {
        if ($("#node-input-mode").val() === 'client') {
            $("#node-input-server").append('<option value="">Dummy</option>');
            $("#node-input-server").val('');
        }
        else {
            $("#node-input-client").append('<option value="">Dummy</option>');
            $("#node-input-client").val('');
        }
    }

    function ws_label() {
        var nodeid = (this.client)?this.client:this.server;
        var wsNode = RED.nodes.node(nodeid);
        return this.name||(wsNode?"[ws] "+wsNode.label():"websocket");
    }

    function ws_validateserver() {
        if ($("#node-input-mode").val() === 'client' || (this.client && !this.server)) {
            return true;
        }
        else {
            if (RED.nodes.node(this.server) != null) {
                return true;
            }
            return RED._("node-red:websocket.errors.missing-server");
        }
    }

    function ws_validateclient() {
        if ($("#node-input-mode").val() === 'client' || (this.client && !this.server)) {
            if (RED.nodes.node(this.client) != null) {
                return true;
            }
            return RED._("node-red:websocket.errors.missing-client");
        }
        else {
            return true;
        }
    }

    RED.nodes.registerType('websocket in',{
        category: 'network',
        defaults: {
            name: {value:""},
            server: {type:"websocket-listener", validate: ws_validateserver},
            client: {type:"websocket-client", validate: ws_validateclient}
        },
        color:"rgb(215, 215, 160)",
        inputs:0,
        outputs:1,
        icon: "white-globe.svg",
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        label: ws_label,
        oneditsave: ws_oneditsave,
        oneditprepare: ws_oneditprepare
    });

    RED.nodes.registerType('websocket out',{
        category: 'network',
        defaults: {
            name: {value:""},
            server: {type:"websocket-listener", validate: ws_validateserver},
            client: {type:"websocket-client", validate: ws_validateclient}
        },
        color:"rgb(215, 215, 160)",
        inputs:1,
        outputs:0,
        icon: "white-globe.svg",
        align: "right",
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        label: ws_label,
        oneditsave: ws_oneditsave,
        oneditprepare: ws_oneditprepare
    });

    RED.nodes.registerType('websocket-listener',{
        category: 'config',
        defaults: {
            path: {value:"",required:true,
                   label:RED._("node-red:websocket.label.path"),
                   validate:RED.validators.regex(/^((?!\/debug\/ws).)*$/)},
            wholemsg: {value:"false"}
        },
        inputs:0,
        outputs:0,
        label: function() {
            var root = RED.settings.httpNodeRoot;
            if (root.slice(-1) != "/") {
                root = root+"/";
            }
            if (this.path) {
                if (this.path.charAt(0) == "/") {
                    root += this.path.slice(1);
                } else {
                    root += this.path;
                }
            }
            return root;
        },
        oneditprepare: function() {
            var root = RED.settings.httpNodeRoot;
            if (root.slice(-1) == "/") {
                root = root.slice(0,-1);
            }
            if (root === "") {
                $("#node-config-ws-tip").hide();
            } else {
                $("#node-config-ws-path").html(RED._("node-red:websocket.tip.path2", { path: root }));
                $("#node-config-ws-tip").show();
            }
        }
    });

    RED.nodes.registerType('websocket-client',{
        category: 'config',
        defaults: {
            path: {
                value:"",required:true,
                label:RED._("node-red:websocket.label.path"),
                validate:RED.validators.regex(/^((?!\/debug\/ws).)*$/)},
            tls: {type:"tls-config",required: false},
            wholemsg: {value:"false"},
            hb: {
                value: "",
                label:RED._("node-red:websocket.sendheartbeat"),
                validate: RED.validators.number(/*blank allowed*/true) },
            subprotocol: {value:"",required: false}
        },
        inputs:0,
        outputs:0,
        label: function() {
            return this.path;
        },
        oneditprepare: function() {
            $("#node-config-input-path").on("change keyup paste",function() {
                $(".node-config-row-tls").toggle(/^wss:/i.test($(this).val()))
            });
            $("#node-config-input-path").change();

            var heartbeatActive = (this.hb && this.hb != "0");
            $("#node-config-input-hb-cb").prop("checked",heartbeatActive);
            $("#node-config-input-hb-cb").on("change", function(evt) {
                $("#node-config-input-hb-row").toggle(this.checked);
            })
            $("#node-config-input-hb-cb").trigger("change");
            if (!heartbeatActive) {
                $("#node-config-input-hb").val("");
            }
        },
        oneditsave: function() {
            if (!/^wss:/i.test($("#node-config-input-path").val())) {
                $("#node-config-input-tls").val("_ADD_");
            }
            if (!$("#node-config-input-hb-cb").prop("checked")) {
                $("#node-config-input-hb").val("0");
            }
        }
    });

})();
</script>

<!-- WebSocket out Node -->
<script type="text/html" data-template-name="websocket out">
    <div class="form-row">
        <label for="node-input-mode"><i class="fa fa-dot-circle-o"></i> <span data-i18n="websocket.label.type"></span></label>
        <select id="node-input-mode">
            <option value="server" data-i18n="websocket.listenon"></option>
            <option value="client" data-i18n="websocket.connectto"></option>
        </select>
    </div>
    <div class="form-row" id="websocket-server-row">
        <label for="node-input-server"><i class="fa fa-bookmark"></i> <span data-i18n="websocket.label.path"></span></label>
        <input type="text" id="node-input-server">
    </div>
    <div class="form-row" id="websocket-client-row">
        <label for="node-input-client"><i class="fa fa-bookmark"></i> <span data-i18n="websocket.label.url"></span></label>
        <input type="text" id="node-input-client">
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<!-- WebSocket Server configuration node -->
<script type="text/html" data-template-name="websocket-listener">
    <div class="form-row">
        <label for="node-config-input-path"><i class="fa fa-bookmark"></i> <span data-i18n="websocket.label.path"></span></label>
        <input id="node-config-input-path" type="text" placeholder="/ws/example">
    </div>
    <div class="form-row">
        <label for="node-config-input-wholemsg" data-i18n="websocket.sendrec"></label>
        <select type="text" id="node-config-input-wholemsg" style="width: 70%;">
            <option value="false" data-i18n="websocket.payload"></option>
            <option value="true" data-i18n="websocket.message"></option>
        </select>
    </div>
    <div class="form-tips">
        <span data-i18n="[html]websocket.tip.path1"></span>
        <p id="node-config-ws-tip"><span id="node-config-ws-path"></span></p>
    </div>
</script>

<!-- WebSocket Client configuration node -->
<script type="text/html" data-template-name="websocket-client">
    <div class="form-row">
        <label for="node-config-input-path"><i class="fa fa-bookmark"></i> <span data-i18n="websocket.label.url"></span></label>
        <input id="node-config-input-path" type="text" placeholder="ws://example.com/ws">
    </div>
    <div class="form-row node-config-row-tls hide">
        <label for="node-config-input-tls" data-i18n="httpin.tls-config"></label>
        <input type="text" id="node-config-input-tls">
    </div>
    <div class="form-row">
        <label for="node-config-input-subprotocol"><i class="fa fa-tag"></i> <span data-i18n="websocket.label.subprotocol"></span></label>
        <input type="text" id="node-config-input-subprotocol">
    </div>
    <div class="form-row">
        <label for="node-config-input-wholemsg" data-i18n="websocket.sendrec"></label>
        <select type="text" id="node-config-input-wholemsg" style="width: 70%;">
            <option value="false" data-i18n="websocket.payload"></option>
            <option value="true" data-i18n="websocket.message"></option>
        </select>
    </div>
    <div class="form-row" style="display: flex; align-items: center; min-height: 34px">
        <label for="node-config-input-hb-cb" data-i18n="websocket.sendheartbeat"></label>
        <input type="checkbox" style="margin: 0 8px; width:auto" id="node-config-input-hb-cb">
        <span id="node-config-input-hb-row" class="hide" >
            <input type="text" style="width: 70px; margin-right: 3px" id="node-config-input-hb">
            <span  data-i18n="inject.seconds"></span>
        </span>
    </div>
    <div class="form-tips">
        <p><span data-i18n="[html]websocket.tip.url1"></span></p>
        <span data-i18n="[html]websocket.tip.url2"></span>
    </div>
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="websocket in">
    <p>WebSocket input node.</p>
    <p>By default, the data received from the WebSocket will be in <code>msg.payload</code>.
    The socket can be configured to expect a properly formed JSON string, in which
    case it will parse the JSON and send on the resulting object as the entire message.</p>
</script>

<script type="text/html" data-help-name="websocket out">
    <p>WebSocket out node.</p>
    <p>By default, <code>msg.payload</code> will be sent over the WebSocket. The socket
    can be configured to encode the entire <code>msg</code> object as a JSON string and send that
    over the WebSocket.</p>

    <p>If the message arriving at this node started at a WebSocket In node, the message
    will be sent back to the client that triggered the flow. Otherwise, the message
    will be broadcast to all connected clients.</p>
    <p>If you want to broadcast a message that started at a WebSocket In node, you
    should delete the <code>msg._session</code> property within the flow.</p>
</script>

<script type="text/html" data-help-name="websocket-listener">
   <p>This configuration node creates a WebSocket Server endpoint using the specified path.</p>
</script>

<script type="text/html" data-help-name="websocket-client">
   <p>This configuration node connects a WebSocket client to the specified URL.</p>
</script>

<!-- --- [red-module:node-red/tcpin] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="tcp in">
    <div class="form-row">
        <label for="node-input-server"><i class="fa fa-dot-circle-o"></i> <span data-i18n="tcpin.label.type"></span></label>
        <select id="node-input-server" style="width:120px; margin-right:5px;">
            <option value="server" data-i18n="tcpin.type.listen"></option>
            <option value="client" data-i18n="tcpin.type.connect"></option>
        </select>
        <span data-i18n="tcpin.label.port"></span> <input type="text" id="node-input-port" style="width:65px">
    </div>
    <div class="form-row hidden" id="node-input-host-row" style="padding-left:110px;">
        <span data-i18n="tcpin.label.host"></span> <input type="text" id="node-input-host" placeholder="localhost" style="width: 60%;">
    </div>
    <div class="form-row" id="node-input-tls-enable">
        <label> </label>
        <input type="checkbox" id="node-input-usetls" style="display: inline-block; width:auto; vertical-align:top;">
        <label for="node-input-usetls" style="width:auto" data-i18n="httpin.use-tls"></label>
        <div id="node-row-tls" class="hide">
            <label style="width:auto; margin-left:20px; margin-right:10px;" for="node-input-tls"><span data-i18n="httpin.tls-config"></span></label><input type="text" style="width: 300px" id="node-input-tls">
        </div>
    </div>

    <div class="form-row">
        <label><i class="fa fa-sign-out"></i> <span data-i18n="tcpin.label.output"></span></label>
        <select id="node-input-datamode" style="width:110px;">
            <option value="stream" data-i18n="tcpin.output.stream"></option>
            <option value="single" data-i18n="tcpin.output.single"></option>
        </select>
        <select id="node-input-datatype" style="width:140px;">
            <option value="buffer" data-i18n="tcpin.output.buffer"></option>
            <option value="utf8" data-i18n="tcpin.output.string"></option>
            <option value="base64" data-i18n="tcpin.output.base64"></option>
        </select>
        <span data-i18n="tcpin.label.payload"></span>
    </div>

    <div id="node-row-newline" class="form-row hidden" style="padding-left:110px;">
        <span data-i18n="tcpin.label.delimited"></span> <input type="text" id="node-input-newline" style="width:110px;" data-i18n="[placeholder]tcpin.label.optional"><br/>
        <input type="checkbox" id="node-input-trim" style="display:inline-block; width:auto; vertical-align:top;"> <span data-i18n="tcpin.label.reattach"></span>
    </div>

    <div class="form-row">
        <label for="node-input-topic"><i class="fa fa-tasks"></i> <span data-i18n="common.label.topic"></span></label>
        <input type="text" id="node-input-topic" data-i18n="[placeholder]common.label.topic">
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('tcp in',{
        category: 'network',
        color: "Silver",
        defaults: {
            name: {value:""},
            server: {value:"server", required:true},
            host: {
                value:"",
                validate:function(v, opt) {
                    if ((this.server == "server")||v.length > 0) {
                        return true;
                    }
                    return RED._("node-red:tcpin.errors.invalid-host");
                }
            },
            port: {
                value:"", required:true,
                label:RED._("node-red:tcpin.label.port"),
                validate:RED.validators.number(false)},
            datamode:{value:"stream"},
            datatype:{value:"buffer"},
            newline:{value:""},
            topic: {value:""},
            trim: {value:false},
            base64: {/*deprecated*/ value:false, required:true},
            tls: {type:"tls-config", value:'', required:false,
                  label:RED._("node-red:httpin.tls-config") }
        },
        inputs:0,
        outputs:1,
        icon: "bridge-dash.svg",
        label: function() {
            return this.name || "tcp:"+(this.host?this.host+":":"")+this.port;
        },
        labelStyle: function() {
            return this.name ? "node_label_italic" : "";
        },
        oneditprepare: function() {
            var updateOptions = function() {
                var sockettype = $("#node-input-server").val();
                if (sockettype == "client") {
                    $("#node-input-host-row").show();
                } else {
                    $("#node-input-host-row").hide();
                }
                var datamode = $("#node-input-datamode").val();
                var datatype = $("#node-input-datatype").val();
                if (datamode == "stream") {
                    if (datatype == "utf8") {
                        $("#node-row-newline").show();
                    } else {
                        $("#node-row-newline").hide();
                    }
                } else {
                    $("#node-row-newline").hide();
                }
            };
            updateOptions();
            $("#node-input-server").change(updateOptions);
            $("#node-input-datatype").change(updateOptions);
            $("#node-input-datamode").change(updateOptions);
            function updateTLSOptions() {
                if ($("#node-input-usetls").is(':checked')) {
                    $("#node-row-tls").show();
                } else {
                    $("#node-row-tls").hide();
                }
            }
            if (this.tls) {
                $('#node-input-usetls').prop('checked', true);
            } else {
                $('#node-input-usetls').prop('checked', false);
            }
            updateTLSOptions();
            $("#node-input-usetls").on("click",function() {
                updateTLSOptions();
            });
        },
        oneditsave: function() {
            if (!$("#node-input-usetls").is(':checked')) {
                $("#node-input-tls").val("_ADD_");
            }
        }
    });
</script>


<script type="text/html" data-template-name="tcp out">
    <div class="form-row">
        <label for="node-input-beserver"><i class="fa fa-dot-circle-o"></i> <span data-i18n="tcpin.label.type"></span></label>
        <select id="node-input-beserver" style="width:150px; margin-right:5px;">
            <option value="server" data-i18n="tcpin.type.listen"></option>
            <option value="client" data-i18n="tcpin.type.connect"></option>
            <option value="reply" data-i18n="tcpin.type.reply"></option>
        </select>
        <span id="node-input-port-row"><span data-i18n="tcpin.label.port"></span> <input type="text" id="node-input-port" style="width: 65px"></span>
    </div>

    <div class="form-row hidden" id="node-input-host-row" style="padding-left: 110px;">
        <span data-i18n="tcpin.label.host"></span> <input type="text" id="node-input-host" style="width: 60%;">
    </div>

    <div class="form-row" id="node-input-tls-enable">
        <label> </label>
        <input type="checkbox" id="node-input-usetls" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-usetls" style="width: auto" data-i18n="httpin.use-tls"></label>
        <div id="node-row-tls" class="hide">
            <label style="width: auto; margin-left: 20px; margin-right: 10px;" for="node-input-tls"><span data-i18n="httpin.tls-config"></span></label><input type="text" style="width: 300px" id="node-input-tls">
        </div>
    </div>

    <div class="form-row hidden" id="node-input-end-row">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-end" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-end" style="width: 70%;"><span data-i18n="tcpin.label.close-connection"></span></label>
    </div>

    <div class="form-row">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-base64" placeholder="base64" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-base64" style="width: 70%;"><span data-i18n="tcpin.label.decode-base64"></span></label>
    </div>

    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('tcp out',{
        category: 'network',
        color: "Silver",
        defaults: {
            name: {value:""},
            host: {
                value:"",
                validate:function(v, opt) {
                    if ((this.beserver != "client")||v.length > 0) {
                        return true;
                    }
                    return RED._("node-red:tcpin.errors.invalid-host");
                }
            },
            port: {
                value:"",
                validate:function(v) {
                    if ((this.beserver == "reply")||RED.validators.number()(v)) {
                        return true;
                    }
                    return RED._("node-red:tcpin.errors.invalid-port");
                }
            },
            beserver: {value:"client", required:true},
            base64: {value:false, required:true},
            end: {value:false, required:true},
            tls: {type:"tls-config", value:'', required:false,
                  label:RED._("node-red:httpin.tls-config") }
        },
        inputs:1,
        outputs:0,
        icon: "bridge-dash.svg",
        align: "right",
        label: function() {
            return this.name || "tcp:"+(this.host?this.host+":":"")+this.port;
        },
        labelStyle: function() {
            return (this.name)?"node_label_italic":"";
        },
        oneditprepare: function() {
            var updateOptions = function() {
                var sockettype = $("#node-input-beserver").val();
                if (sockettype == "reply") {
                    $("#node-input-port-row").hide();
                    $("#node-input-host-row").hide();
                    $("#node-input-end-row").hide();
                    $("#node-input-tls-enable").hide();
                } else if (sockettype == "client"){
                    $("#node-input-port-row").show();
                    $("#node-input-host-row").show();
                    $("#node-input-end-row").show();
                    $("#node-input-tls-enable").show();
                } else {
                    $("#node-input-port-row").show();
                    $("#node-input-host-row").hide();
                    $("#node-input-end-row").show();
                    $("#node-input-tls-enable").show();
                }
            };
            updateOptions();
            $("#node-input-beserver").change(updateOptions);
            function updateTLSOptions() {
                if ($("#node-input-usetls").is(':checked')) {
                    $("#node-row-tls").show();
                } else {
                    $("#node-row-tls").hide();
                }
            }
            if (this.tls) {
                $('#node-input-usetls').prop('checked', true);
            } else {
                $('#node-input-usetls').prop('checked', false);
            }
            updateTLSOptions();
            $("#node-input-usetls").on("click",function() {
                updateTLSOptions();
            });
        },
        oneditsave: function() {
            if (!$("#node-input-usetls").is(':checked')) {
                $("#node-input-tls").val("_ADD_");
            }
        }
    });
</script>


<script type="text/html" data-template-name="tcp request">
    <div class="form-row">
        <label for="node-input-server"><i class="fa fa-globe"></i> <span data-i18n="tcpin.label.server"></span></label>
        <input type="text" id="node-input-server" placeholder="ip.address" style="width:45%">
        <span data-i18n="tcpin.label.port"></span>
        <input type="text" id="node-input-port" style="width:60px">
    </div>
    <div class="form-row" id="node-input-tls-enable">
        <label> </label>
        <input type="checkbox" id="node-input-usetls" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-usetls" style="width: auto" data-i18n="httpin.use-tls"></label>
        <div id="node-row-tls" class="hide">
            <label style="width: auto; margin-left: 20px; margin-right: 10px;" for="node-input-tls"><span data-i18n="httpin.tls-config"></span></label><input type="text" style="width: 300px" id="node-input-tls">
        </div>
    </div>
    <div class="form-row">
        <label for="node-input-ret"><i class="fa fa-sign-out"></i> <span data-i18n="tcpin.label.return"></span></label>
        <select type="text" id="node-input-ret" style="width:54%;">
            <option value="buffer" data-i18n="tcpin.output.buffer"></option>
            <option value="string" data-i18n="tcpin.output.string"></option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-out"><i class="fa fa-sign-out fa-rotate-90"></i> <span data-i18n="tcpin.label.close"></span></label>
        <select type="text" id="node-input-out" style="width:54%;">
            <option value="time" data-i18n="tcpin.return.timeout"></option>
            <option value="char" data-i18n="tcpin.return.character"></option>
            <option value="count" data-i18n="tcpin.return.number"></option>
            <option value="sit" data-i18n="tcpin.return.never"></option>
            <option value="immed" data-i18n="tcpin.return.immed"></option>
        </select>
        <input type="text" id="node-input-splitc" style="width:50px;">
        <span id="node-units"></span>
    </div>
    <div id="node-row-newline" class="form-row hidden" style="padding-left:162px;">
        <span data-i18n="tcpin.label.delimited"></span> <input type="text" id="node-input-newline" style="width:110px;" data-i18n="[placeholder]tcpin.label.optional"><br/>
        <input type="checkbox" id="node-input-trim" style="display:inline-block; width:auto; vertical-align:top;"> <span data-i18n="tcpin.label.reattach"></span>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('tcp request',{
        category: 'network',
        color: "Silver",
        defaults: {
            name: {value:""},
            server: {value:""},
            port: {
                value:"",
                label: RED._("node-red:tcpin.label.port"),
                validate:RED.validators.regex(/^(\d*|)$/)
            },
            out: {value:"time", required:true},
            ret: {value:"buffer"},
            splitc: {value:"0", required:true},
            newline: {value:""},
            trim: {value:false},
            tls: {type:"tls-config", value:'', required:false, label:RED._("node-red:httpin.tls-config")}
        },
        inputs:1,
        outputs:1,
        icon: "bridge-dash.svg",
        label: function() {
            return this.name || "tcp:"+(this.server?this.server+":":"")+this.port;
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var previous = null;
            if ($("#node-input-ret").val() == undefined) {
                $("#node-input-ret").val("buffer");
                this.ret = "buffer";
            }
            $("#node-input-ret").on("change", function() {
                if ($("#node-input-ret").val() === "string" && $("#node-input-out").val() === "sit") { $("#node-row-newline").show(); }
                else { $("#node-row-newline").hide(); }
            });
            $("#node-input-out").on("change", function() {
                if ($("#node-input-ret").val() === "string" && $("#node-input-out").val() === "sit") { $("#node-row-newline").show(); }
                else { $("#node-row-newline").hide(); }
            });
            $("#node-input-out").on('focus', function () { previous = this.value; }).on("change", function() {
                $("#node-input-splitc").show();
                if (previous === null) { previous = $("#node-input-out").val(); }
                if ($("#node-input-out").val() == "char") {
                    if (previous != "char") { $("#node-input-splitc").val("\\n"); }
                    $("#node-units").text("");
                }
                else if ($("#node-input-out").val() == "time") {
                    if (previous != "time") { $("#node-input-splitc").val("0"); }
                    $("#node-units").text(RED._("node-red:tcpin.label.ms"));
                }
                else if ($("#node-input-out").val() == "immed") {
                    if (previous != "immed") { $("#node-input-splitc").val(" "); }
                    $("#node-units").text("");
                    $("#node-input-splitc").hide();
                }
                else if ($("#node-input-out").val() == "count") {
                    if (previous != "count") { $("#node-input-splitc").val("12"); }
                    $("#node-units").text(RED._("node-red:tcpin.label.chars"));
                }
                else {
                    if (previous != "sit") { $("#node-input-splitc").val(" "); }
                    $("#node-units").text("");
                    $("#node-input-splitc").hide();
                }
            });
            function updateTLSOptions() {
                if ($("#node-input-usetls").is(':checked')) {
                    $("#node-row-tls").show();
                } else {
                    $("#node-row-tls").hide();
                }
            }
            if (this.tls) {
                $('#node-input-usetls').prop('checked', true);
            } else {
                $('#node-input-usetls').prop('checked', false);
            }
            updateTLSOptions();
            $("#node-input-usetls").on("click",function() {
                updateTLSOptions();
            });
        },
        oneditsave: function() {
            if (!$("#node-input-usetls").is(':checked')) {
                $("#node-input-tls").val("_ADD_");
            }
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="tcp in">
    <p>Provides a choice of TCP inputs. Can either connect to a remote TCP port,
       or accept incoming connections.</p>
    <p><b>Note: </b>On some systems you may need root or administrator access
    to access ports below 1024.</p>
</script>

<script type="text/html" data-help-name="tcp out">
    <p>Provides a choice of TCP outputs. Can either connect to a remote TCP port,
    accept incoming connections, or reply to messages received from a TCP In node.</p>
    <p>Only the <code>msg.payload</code> is sent.</p>
    <p>If <code>msg.payload</code> is a string containing a Base64 encoding of binary
    data, the Base64 decoding option will cause it to be converted back to binary
    before being sent.</p>
    <p>If <code>msg._session</code> is not present the payload is
    sent to <b>all</b> connected clients.</p>
    <p><b>Note: </b>On some systems you may need root or administrator access
    to access ports below 1024.</p>
</script>

<script type="text/html" data-help-name="tcp request">
    <p>A simple TCP request node - sends the <code>msg.payload</code> to a server tcp port and expects a response.</p>
    <p>Connects, sends the "request", and reads the "response". It can either count a number of
    returned characters into a fixed buffer, match a specified character before returning,
    wait a fixed timeout from first reply and then return, sit and wait for data, or send then close the connection
    immediately, without waiting for a reply.</p>
    <p>The response will be output in <code>msg.payload</code> as a buffer, so you may want to .toString() it.</p>
    <p>If you leave tcp host or port blank they must be set by using the <code>msg.host</code> and <code>msg.port</code> properties in every message sent to the node.</p>
</script>

<!-- --- [red-module:node-red/udp] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!--  The Input Node  -->
<script type="text/html" data-template-name="udp in">
    <div class="form-row">
        <label for="node-input-port"><i class="fa fa-sign-in"></i> <span data-i18n="udp.label.listen"></span></label>
        <select id="node-input-multicast" style='width:70%'>
          <option value="false" data-i18n="udp.udpmsgs"></option>
          <option value="true" data-i18n="udp.mcmsgs"></option>
        </select>
    </div>
    <div class="form-row node-input-group">
        <label for="node-input-group"><i class="fa fa-list"></i> <span data-i18n="udp.label.group"></span></label>
        <input type="text" id="node-input-group" placeholder="225.0.18.83">
    </div>
    <div class="form-row node-input-iface">
        <label for="node-input-iface"><i class="fa fa-random"></i> <span data-i18n="udp.label.interface"></span></label>
        <input type="text" id="node-input-iface" data-i18n="[placeholder]udp.placeholder.interfaceprompt">
    </div>
    <div class="form-row">
        <label for="node-input-port"><i class="fa fa-sign-in"></i> <span data-i18n="udp.label.onport"></span></label>
        <input type="text" id="node-input-port" style="width:80px">
        &nbsp;&nbsp;<span data-i18n="udp.label.using"></span> <select id="node-input-ipv" style="width:80px">
          <option value="udp4">ipv4</option>
          <option value="udp6">ipv6</option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-datatype"><i class="fa fa-sign-out"></i> <span data-i18n="udp.label.output"></span></label>
        <select id="node-input-datatype" style="width:70%;">
            <option value="buffer" data-i18n="udp.output.buffer"></option>
            <option value="utf8" data-i18n="udp.output.string"></option>
            <option value="base64" data-i18n="udp.output.base64"></option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-tips"><span data-i18n="udp.tip.in"></span></div>
    <div class="form-tips" id="udpporttip"><span data-i18n="[html]udp.tip.port"></span></div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('udp in',{
        category: 'network',
        color:"Silver",
        defaults: {
            name: {value:""},
            iface: {value:""},
            port: {
                value:"", required:true,
                label:RED._("node-red:udp.label.port"),
                validate:RED.validators.number(false)
            },
            ipv: {value:"udp4"},
            multicast: {value:"false"},
            group: {
                value:"",
                validate:function(v,opt) {
                    if ((this.multicast !== "true")||v.length > 0) {
                        return true;
                    }
                    return RED._("node-red:udp.errors.invalid-group");
                }
            },
            datatype: {value:"buffer",required:true}
        },
        inputs:0,
        outputs:1,
        icon: "bridge-dash.svg",
        label: function() {
            if (this.multicast=="false") {
                return this.name||"udp "+this.port;
            }
            else {
                return this.name||"udp "+(this.group+":"+this.port);
            }
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            $("#node-input-multicast").on("change", function() {
                var id = $("#node-input-multicast").val();
                if (id == "false") {
                    $(".node-input-group").hide();
                    $(".node-input-iface").hide();
                }
                else {
                    $(".node-input-group").show();
                    $(".node-input-iface").show();
                }
            });
            $("#node-input-multicast").change();

            var porttip = this._("udp.tip.port");
            var alreadyused = this._("udp.errors.alreadyused");
            var portsInUse = {};
            $.getJSON('udp-ports/'+this.id,function(data) {
                portsInUse = data || {};
                $('#udpporttip').html(porttip + data);
            });
            $("#node-input-port").on("change", function() {
                var portnew = $("#node-input-port").val();
                if (portsInUse.hasOwnProperty($("#node-input-port").val())) {
                    RED.notify(alreadyused+" "+$("#node-input-port").val(),"warn");
                }
            });
        }
    });
</script>


<!--  The Output Node  -->
<script type="text/html" data-template-name="udp out">
    <div class="form-row">
        <label for="node-input-port"><i class="fa fa-envelope"></i> <span data-i18n="udp.label.send"></span></label>
        <select id="node-input-multicast" style="width:40%">
          <option value="false" data-i18n="udp.udpmsg"></option>
          <option value="broad" data-i18n="udp.bcmsg"></option>
          <option value="multi" data-i18n="udp.mcmsg"></option>
        </select>
        <span data-i18n="udp.label.toport"></span> <input type="text" id="node-input-port" style="width:70px">
    </div>
    <div class="form-row node-input-addr">
        <label for="node-input-addr" id="node-input-addr-label"><i class="fa fa-list"></i> <span data-i18n="udp.label.address"></span></label>
        <input type="text" id="node-input-addr" data-i18n="[placeholder]udp.placeholder.address" style="width:50%;">
        <select id="node-input-ipv" style="width:70px">
          <option value="udp4">ipv4</option>
          <option value="udp6">ipv6</option>
        </select>
    </div>
    <div class="form-row node-input-iface">
        <label for="node-input-iface"><i class="fa fa-random"></i> <span data-i18n="udp.label.interface"></span></label>
        <input type="text" id="node-input-iface" data-i18n="[placeholder]udp.placeholder.interface">
    </div>
    <div class="form-row">
        <label for="node-input-outport-type">&nbsp;</label>
        <select id="node-input-outport-type">
          <option id="node-input-outport-type-random" value="random" data-i18n="udp.bind.random"></option>
          <option value="fixed" data-i18n="udp.bind.local"></option>
        </select>
        <input type="text" id="node-input-outport" style="width:70px;">
    </div>
    <div class="form-row">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-base64" style="display:inline-block; width:auto; vertical-align:top;">
        <label for="node-input-base64" style="width:70%;"><span data-i18n="udp.label.decode-base64"></span></label>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-tips"><span data-i18n="[html]udp.tip.out"></span></div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('udp out',{
        category: 'network',
        color:"Silver",
        defaults: {
            name: {value:""},
            addr: {value:""},
            iface: {value:""},
            port: {value:""},
            ipv: {value:"udp4"},
            outport: {value:""},
            base64: {value:false,required:true},
            multicast: {value:"false"}
        },
        inputs:1,
        outputs:0,
        icon: "bridge-dash.svg",
        align: "right",
        label: function() {
            return this.name||"udp "+(this.addr+":"+this.port);
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var addresslabel = this._("udp.label.address");
            var addressph = this._("udp.placeholder.address");
            var grouplabel = this._("udp.label.group");
            var bindrandom = this._("udp.bind.random");
            var bindtarget = this._("udp.bind.target");

            var type = this.outport===""?"random":"fixed";
            $("#node-input-outport-type").val(type);

            $("#node-input-outport-type").on("change", function() {
                var type = $(this).val();
                if (type == "random") {
                    $("#node-input-outport").val("").hide();
                } else {
                    $("#node-input-outport").show();
                }
            });
            $("#node-input-outport-type").change();

            $("#node-input-multicast").on("change", function() {
                var id = $("#node-input-multicast").val();
                if (id === "multi") {
                    $(".node-input-iface").show();
                    $("#node-input-addr-label").html('<i class="fa fa-list"></i> ' + grouplabel);
                    $("#node-input-addr")[0].placeholder = '225.0.18.83';
                }
                else if (id === "broad") {
                    $(".node-input-iface").hide();
                    $("#node-input-addr-label").html('<i class="fa fa-list"></i> ' + addresslabel);
                    $("#node-input-addr")[0].placeholder = '255.255.255.255';
                }
                else {
                    $(".node-input-iface").hide();
                    $("#node-input-addr-label").html('<i class="fa fa-list"></i> ' + addresslabel);
                    $("#node-input-addr")[0].placeholder = addressph;
                }
                var type = $(this).val();
                if (type == "false") {
                    $("#node-input-outport-type-random").html(bindrandom);
                } else {
                    $("#node-input-outport-type-random").html(bindtarget);
                }
            });
            $("#node-input-multicast").change();
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="udp in">
    <p>A UDP input node, that produces a <code>msg.payload</code> containing a
    Buffer, string, or base64 encoded string. Supports multicast.</p>
    <p>It also provides <code>msg.ip</code> and <code>msg.port</code> set to the
    ip address and port from which the message was received.</p>
    <p><b>Note</b>: On some systems you may need root or administrator access to use
    ports below 1024 and/or broadcast.</p>
</script>

<script type="text/html" data-help-name="udp out">
    <p>This node sends <code>msg.payload</code> to the designated UDP host and port. Supports multicast.</p>
    <p>You may also use <code>msg.ip</code> and <code>msg.port</code> to set the destination values, but the statically configured values have precedence.</p>
    <p>If you select broadcast either set the address to the local broadcast ip address, or maybe try 255.255.255.255, which is the global broadcast address.</p>
    <p><b>Note</b>: On some systems you may need to be root to use ports below 1024 and/or broadcast.</p>
</script>

<!-- --- [red-module:node-red/CSV] --- -->

<script type="text/html" data-template-name="csv">
    <div class="form-row">
        <label for="node-input-temp"><i class="fa fa-list"></i> <span data-i18n="csv.label.columns"></span></label>
        <input type="text" id="node-input-temp" data-i18n="[placeholder]csv.placeholder.columns">
    </div>
    <div class="form-row">
        <label for="node-input-select-sep"><i class="fa fa-text-width"></i> <span data-i18n="csv.label.separator"></span></label>
            <select style="width:150px" id="node-input-select-sep">
                <option value="," data-i18n="csv.separator.comma"></option>
                <option value="\t" data-i18n="csv.separator.tab"></option>
                <option value=" " data-i18n="csv.separator.space"></option>
                <option value=";" data-i18n="csv.separator.semicolon"></option>
                <option value=":" data-i18n="csv.separator.colon"></option>
                <option value="#" data-i18n="csv.separator.hashtag"></option>
                <option value="" data-i18n="csv.separator.other"></option>
           </select>
           <input style="width:40px;" type="text" id="node-input-sep" pattern=".">
    </div>

    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <hr align="middle"/>
    <div class="form-row">
        <label style="width:100%;"><span data-i18n="csv.label.c2o"></span></label>
    </div>
    <div class="form-row" style="padding-left:20px;">
        <label><i class="fa fa-sign-in"></i> <span data-i18n="csv.label.input"></span></label>
        <span data-i18n="csv.label.skip-s"></span>&nbsp;<input type="text" id="node-input-skip" style="width:40px; height:25px;"/>&nbsp;<span data-i18n="csv.label.skip-e"></span><br/>
        <label>&nbsp;</label>
        <input style="width:20px; vertical-align:baseline; margin-right:5px;" type="checkbox" id="node-input-hdrin"><label style="width:auto; margin-top:7px;" for="node-input-hdrin"><span data-i18n="csv.label.firstrow"></span></label><br/>
        <label>&nbsp;</label>
        <input style="width:20px; vertical-align:baseline; margin-right:5px;" type="checkbox" id="node-input-strings"><label style="width:auto; margin-top:7px;" for="node-input-strings"><span data-i18n="csv.label.usestrings"></span></label><br/>
        <label>&nbsp;</label>
        <input style="width:20px; vertical-align:baseline; margin-right:5px;" type="checkbox" id="node-input-include_empty_strings"><label style="width:auto; margin-top:7px;" for="node-input-include_empty_strings"><span data-i18n="csv.label.include_empty_strings"></span></label><br/>
        <label>&nbsp;</label>
        <input style="width:20px; vertical-align:baseline; margin-right:5px;" type="checkbox" id="node-input-include_null_values"><label style="width:auto; margin-top:7px;" for="node-input-include_null_values"><span data-i18n="csv.label.include_null_values"></span></label><br/>
    </div>
    <div class="form-row" style="padding-left:20px;">
        <label><i class="fa fa-sign-out"></i> <span data-i18n="csv.label.output"></span></label>
        <select type="text" id="node-input-multi" style="width:250px;">
            <option value="one" data-i18n="csv.output.row"></option>
            <option value="mult" data-i18n="csv.output.array"></option>
        </select>
    </div>
    <div class="form-row" style="margin-top:20px">
        <label style="width:100%;"><span data-i18n="csv.label.o2c"></span></label>
    </div>
    <div class="form-row" style="padding-left:20px;">
        <label><i class="fa fa-sign-out"></i> <span data-i18n="csv.label.output"></span></label>
        <!-- <input style="width:20px; vertical-align:top; margin-right:5px;" type="checkbox" id="node-input-hdrout"><label style="width:auto;" for="node-input-hdrout"><span data-i18n="csv.label.includerow"></span></span> -->
        <select style="width:60%" id="node-input-hdrout">
            <option value="none" data-i18n="csv.hdrout.none"></option>
            <option value="all" data-i18n="csv.hdrout.all"></option>
            <option value="once" data-i18n="csv.hdrout.once"></option>
        </select>
    </div>
    <div class="form-row" style="padding-left:20px;">
        <label></label>
        <label style="width:auto; margin-right:10px;" for="node-input-ret"><span data-i18n="csv.label.newline"></span></label>
        <select style="width:150px;" id="node-input-ret">
            <option value='\n' data-i18n="csv.newline.linux"></option>
            <option value='\r' data-i18n="csv.newline.mac"></option>
            <option value='\r\n' data-i18n="csv.newline.windows"></option>
       </select>
    </div>
</script>


<script type="text/javascript">
    RED.nodes.registerType('csv',{
        category: 'parser',
        color:"#DEBD5C",
        defaults: {
            name: {value:""},
            sep: {
                value:',', required:true,
                label:RED._("node-red:csv.label.separator"),
                validate:RED.validators.regex(/^.{1,2}$/)},
            //quo: {value:'"',required:true},
            hdrin: {value:""},
            hdrout: {value:"none"},
            multi: {value:"one",required:true},
            ret: {value:'\\n'},
            temp: {value:""},
            skip: {value:"0"},
            strings: {value:true},
            include_empty_strings: {value:""},
            include_null_values: {value:""}
        },
        inputs:1,
        outputs:1,
        icon: "parser-csv.svg",
        label: function() {
            return this.name||"csv";
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            if (this.hdrout === false) { this.hdrout = "none"; $("#node-input-hdrout").val("none"); }
            if (this.hdrout === true) { this.hdrout = "all"; $("#node-input-hdrout").val("all");}
            if (this.strings === undefined) { this.strings = true; $("#node-input-strings").prop('checked', true); }
            if (this.skip === undefined) { this.skip = 0; $("#node-input-skip").val("0");}
            $("#node-input-skip").spinner({ min:0 });
            if (this.sep == "," || this.sep == "\\t" || this.sep == ";" || this.sep == ":" || this.sep == " " || this.sep == "#") {
                $("#node-input-select-sep").val(this.sep);
                $("#node-input-sep").hide();
            } else {
                $("#node-input-select-sep").val("");
                $("#node-input-sep").val(this.sep);
                $("#node-input-sep").show();
            }
            $("#node-input-select-sep").on("change", function() {
                var v = $("#node-input-select-sep").val();
                $("#node-input-sep").val(v);
                if (v == "") {
                    $("#node-input-sep").val("");
                    $("#node-input-sep").show().focus();
                } else {
                    $("#node-input-sep").hide();
                }
            });
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="csv">
    <p>Converts between a CSV formatted string and its JavaScript object representation, in either direction.</p>
    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt>payload<span class="property-type">object | array | string</span></dt>
        <dd>A JavaScript object, array or CSV string.</dd>
    </dl>
    <h3>Outputs</h3>
    <dl class="message-properties">
        <dt>payload<span class="property-type">object | array | string</span></dt>
        <dd>
        <ul>
            <li>If the input is a string it tries to parse it as CSV and creates a JavaScript object of key/value pairs for each line.
                The node will then either send a message for each line, or a single message containing an array of objects.</li>
            <li>If the input is a JavaScript object it tries to build a CSV string.</li>
            <li>If the input is an array of simple values, it builds a single line CSV string.</li>
            <li>If the input is an array of arrays, or an array of objects, a multiple-line CSV string is created.</li>
        </ul>
        </dd>
    </dl>
    <h3>Details</h3>
    <p>The column template can contain an ordered list of column names. When converting CSV to an object, the column names
    will be used as the property names. Alternatively, the column names can be taken from the first row of the CSV.</p>
    <p>When converting to CSV, the columns template is used to identify which properties to extract from the object and in what order.</p>
    <p>If the columns template is blank then you can use a simple comma separated list of properties supplied in <code>msg.columns</code> to
    determine what to extract and in what order. If neither are present then all the object properties are output in the order
    in which the properties are found in the first row.</p>
    <p>If the input is an array then the columns template is only used to optionally generate a row of column titles.</p>
    <p>If 'parse numerical values' option is checked, string numerical values will be returned as numbers, ie. middle value '1,"1.5",2'.</p>
    <p>If 'include empty strings' option is checked, empty strings will be returned in result, ie. middle value '"1","",3'.</p>
    <p>If 'include null values' option is checked, null values will be returned in result, ie. middle value '"1",,3'.</p>
    <p>The node can accept a multi-part input as long as the <code>parts</code> property is set correctly, for example from a file-in node or split node.</p>
    <p>If outputting multiple messages they will have their <code>parts</code> property set and form a complete message sequence.</p>
    <p><b>Note:</b> the column template must be comma separated - even if a different separator is chosen for the data.</p>
</script>

<!-- --- [red-module:node-red/HTML] --- -->

<script type="text/html" data-template-name="html">
    <div class="form-row">
        <label for="node-input-property"><i class="fa fa-ellipsis-h"></i> <span data-i18n="common.label.property"></span></label>
        <input type="text" id="node-input-property" style="width:70%">
    </div>
    <div class="form-row">
        <label for="node-input-tag"><i class="fa fa-filter"></i> <span data-i18n="html.label.select"></span></label>
        <input type="text" id="node-input-tag" placeholder="h1">
    </div>
    <div class="form-row">
        <label for="node-input-ret"><i class="fa fa-sign-out"></i> <span data-i18n="html.label.output"></span></label>
        <select id="node-input-ret" style="width:70%">
            <option value="html" data-i18n="html.output.html"></option>
            <option value="text" data-i18n="html.output.text"></option>
            <option value="attr" data-i18n="html.output.attr"></option>
            <!-- <option value="val">return the value from a form element</option> -->
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-as">&nbsp;</label>
        <select id="node-input-as" style="width:70%">
            <option value="single" data-i18n="html.format.single"></option>
            <option value="multi" data-i18n="html.format.multi"></option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-outproperty">&nbsp;</label>
        <span data-i18n="html.label.in" style="padding-left:8px; padding-right:2px; vertical-align:-1px;"></span> <input type="text" id="node-input-outproperty" style="width:64%">
    </div>
    <br/>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" style="width:70%" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('html',{
        category: 'parser',
        color:"#DEBD5C",
        defaults: {
            name: {value:""},
            property: {value:"payload"},
            outproperty: {value:"payload"},
            tag: {value:""},
            ret: {value:"html"},
            as: {value:"single"}
        },
        inputs:1,
        outputs:1,
        icon: "parser-html.svg",
        label: function() {
            return this.name||this.tag||"html";
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            $("#node-input-property").typedInput({default:'msg',types:['msg']});
            $("#node-input-outproperty").typedInput({default:'msg',types:['msg']});
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="html">
    <p>Extracts elements from an html document held in <code>msg.payload</code> using a CSS selector.</p>
    <h3>Inputs</h3>
    <dl class="message-properties">
    <dt>payload <span class="property-type">string</span></dt>
    <dd>the html string from which to extract elements.</dd>
    <dt class="optional">select <span class="property-type">string</span></dt>
    <dd>if not configured in the edit panel the selector can be set as a property of msg.</dd>
</dl>
    <h3>Output</h3>
    <dl class="message-properties">
        <dt>payload <span class="property-type">array | string</span></dt>
        <dd>the result can be either a single message with a payload containing an array of the matched elements, or multiple
           messages that each contain a matched element. If multiple messages are sent they will also have <code>parts</code> set.</dd>
    </dl>
    <h3>Details</h3>
    <p>This node supports a combination of CSS and jQuery selectors. See the
    <a href="https://github.com/fb55/CSSselect#user-content-supported-selectors" target="_blank">css-select documentation</a> for more information
    on the supported syntax.</p>
</script>

<!-- --- [red-module:node-red/JSON] --- -->

<script type="text/html" data-template-name="json">
    <div class="form-row">
        <label for="node-input-action"><i class="fa fa-dot-circle-o"></i> <span data-i18n="json.label.action"></span></label>
        <select style="width:70%" id="node-input-action">
            <option value=""    data-i18n="json.label.actions.toggle"></option>
            <option value="str" data-i18n="json.label.actions.str"></option>
            <option value="obj" data-i18n="json.label.actions.obj"></option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-property"><i class="fa fa-ellipsis-h"></i> <span data-i18n="json.label.property"></span></label>
        <input type="text" id="node-input-property" style="width:70%;"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <hr align="middle"/>
    <div class="form-row node-json-to-json-options">
        <label style="width:100%;"><span data-i18n="json.label.o2j"></span></label>
    </div>
    <div class="form-row node-json-to-json-options" style="padding-left: 20px;">
        <input style="width:20px; vertical-align:top; margin-right: 5px;" type="checkbox" id="node-input-pretty"><label style="width: auto;" for="node-input-pretty" data-i18n="json.label.pretty"></label>
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('json',{
        category: 'parser',
        color:"#DEBD5C",
        defaults: {
            name: {value:""},
            property: {value:"payload",required:true,
                       label:RED._("node-red:json.label.property")},
            action: {value:""},
            pretty: {value:false}
        },
        inputs:1,
        outputs:1,
        icon: "parser-json.svg",
        label: function() {
            return this.name||"json";
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            if (this.property === undefined) {
                $("#node-input-property").val("payload");
            }
            $("#node-input-property").typedInput({default:'msg',types:['msg']});
            $("#node-input-action").on("change", function() {
                if (this.value === "" || this.value === "str") {
                    $(".node-json-to-json-options").show();
                } else {
                    $(".node-json-to-json-options").hide();
                }
            });
            $("#node-input-action").change();
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="json">
    <p>Converts between a JSON string and its JavaScript object representation, in either direction.</p>
    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt>payload<span class="property-type">object | string</span></dt>
        <dd>A JavaScript object or JSON string.</dd>
        <dt>schema<span class="property-type">object</span></dt>
        <dd>An optional JSON Schema object to validate the payload against.
        The property will be deleted before the <code>msg</code> is sent to the next node.</dd>
    </dl>
    <h3>Outputs</h3>
    <dl class="message-properties">
        <dt>payload<span class="property-type">object | string</span></dt>
        <dd>
            <ul>
                <li>If the input is a JSON string it tries to parse it to a JavaScript object.</li>
                <li>If the input is a JavaScript object it creates a JSON string. The string can optionally be well-formatted.</li>
            </ul>
        </dd>
        <dt>schemaError<span class="property-type">array</span></dt>
        <dd>If JSON schema validation fails, the catch node will have a <code>schemaError</code> property
            containing an array of errors.</dd>
    </dl>
    <h3>Details</h3>
    <p>By default, the node operates on <code>msg.payload</code>, but can be configured
       to convert any message property.</p>
    <p>The node can also be configured to ensure a particular encoding instead of toggling
       between the two. This can be used, for example, with the <code>HTTP In</code>
       node to ensure the payload is a parsed object even if an incoming request
       did not set its content-type correctly for the HTTP In node to do the conversion.</p>
    <p>If the node is configured to ensure the property is encoded as a String and it
       receives a String, no further checks will be made of the property. It will
       not check the String is valid JSON nor will it reformat it if the format option
       is selected.</p>
    <p>For more details about JSON Schema you can consult the specification
    <a href="http://json-schema.org/latest/json-schema-validation.html">here</a>.</p>
</script>

<!-- --- [red-module:node-red/XML] --- -->

<script type="text/html" data-template-name="xml">
    <div class="form-row">
        <label for="node-input-property"><i class="fa fa-ellipsis-h"></i> <span data-i18n="common.label.property"></span></label>
        <input type="text" id="node-input-property" style="width:70%;"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <hr align="middle"/>
    <div class="form-row">
        <label style="width:100%;"><span data-i18n="xml.label.x2o"></span></label>
    </div>
    <div class="form-row" style="padding-left: 20px;">
        <label style="width:250px;" for="node-input-attr" data-i18n="xml.label.represent"></label> <input type="text" id="node-input-attr" style="text-align:center; width:40px" placeholder="$">
    </div>
    <div class="form-row" style="padding-left: 20px;">
        <label style="width:250px;" for="node-input-chr" data-i18n="xml.label.prefix"></label> <input type="text" id="node-input-chr" style="text-align:center; width:40px" placeholder="_">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('xml',{
        category: 'parser',
        color:"#DEBD5C",
        defaults: {
            name: {value:""},
            property: {value:"payload",required:true,
                       label:RED._("node-red:common.label.property")},
            attr: {value:""},
            chr: {value:""}
        },
        inputs:1,
        outputs:1,
        icon: "parser-xml.svg",
        label: function() {
            return this.name||"xml";
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            if (this.property === undefined) {
                $("#node-input-property").val("payload");
            }
            $("#node-input-property").typedInput({default:'msg',types:['msg']});
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="xml">
    <p>Converts between an XML string and its JavaScript object representation, in either direction.</p>
    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt>payload<span class="property-type">object | string</span></dt>
        <dd>A JavaScript object or XML string.</dd>
        <dt class="optional">options <span class="property-type">object</span></dt>
        <dd>This optional property can be used to pass in any of the options supported by the underlying
            library used to convert to and from XML. See <a href="https://github.com/Leonidas-from-XIV/node-xml2js/blob/master/README.md#options" target="_blank">the xml2js docs</a>
            for more information.</dd>
    </dl>
    <h3>Outputs</h3>
    <dl class="message-properties">
        <dt>payload<span class="property-type">object | string</span></dt>
        <dd>
            <ul>
                <li>If the input is a string it tries to parse it as XML and creates a JavaScript object.</li>
                <li>If the input is a JavaScript object it tries to build an XML string.</li>
            </ul>
        </dd>
    </dl>
    <h3>Details</h3>
    <p>When converting between XML and an object, any XML attributes are added as a property named <code>$</code> by default.
    Any text content is added as a property named <code>_</code>. These property names can be specified in the node configuration.</p>
    <p>For example, the following XML will be converted as shown:</p>
    <pre>&lt;p class="tag"&gt;Hello World&lt;/p&gt;</pre>
    <pre>{
  "p": {
    "$": {
      "class": "tag"
    },
    "_": "Hello World"
  }
}</pre>
</script>

<!-- --- [red-module:node-red/YAML] --- -->

<script type="text/html" data-template-name="yaml">
    <div class="form-row">
        <label for="node-input-property"><i class="fa fa-ellipsis-h"></i> <span data-i18n="common.label.property"></span></label>
        <input type="text" id="node-input-property" style="width:70%;"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('yaml',{
        category: 'parser',
        color:"#DEBD5C",
        defaults: {
            property: {value:"payload",required:true,
                       label:RED._("node-red:common.label.property")},
            name: {value:""}
        },
        inputs:1,
        outputs:1,
        icon: "parser-yaml.svg",
        label: function() {
            return this.name||"yaml";
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            if (this.property === undefined) {
                $("#node-input-property").val("payload");
            }
            $("#node-input-property").typedInput({default:'msg',types:['msg']});
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="yaml">
    <p>Converts between a YAML formatted string and its JavaScript object representation, in either direction.</p>
    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt>payload<span class="property-type">object | string</span></dt>
        <dd>A JavaScript object or YAML string.</dd>
    </dl>
    <h3>Outputs</h3>
    <dl class="message-properties">
        <dt>payload<span class="property-type">object | string</span></dt>
        <dd>
            <ul>
                <li>If the input is a YAML string it tries to parse it to a JavaScript object.</li>
                <li>If the input is a JavaScript object it creates a YAML string.</li>
            </ul>
        </dd>
    </dl>
</script>

<!-- --- [red-module:node-red/split] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="split">
    <div class="form-row"><span data-i18n="[html]split.intro"></span></div>
    <div class="form-row"><span data-i18n="[html]split.strBuff"></span></div>
    <div class="form-row">
        <label for="node-input-splt" style="padding-left:10px; margin-right:-10px;" data-i18n="split.splitUsing"></label>
        <input type="text" id="node-input-splt" style="width:70%">
        <input type="hidden" id="node-input-spltType">
    </div>
    <div class="form-row">
        <input type="checkbox" id="node-input-stream" style="margin-left:10px; vertical-align:top; width:auto;">
        <label for="node-input-stream" style="width:auto;" data-i18n="split.stream"></label>
    </div>
    <div class="form-row"><span data-i18n="[html]split.array"></span></div>
    <div class="form-row">
        <label for="node-input-arraySplt" style="padding-left:10px; margin-right:-10px;" data-i18n="split.splitUsing"></label>
        <input type="text" id="node-input-arraySplt" style="width:70%">
        <input type="hidden" id="node-input-arraySpltType">
    </div>
    <div class="form-row"><span data-i18n="[html]split.object"></span></div>
    <div class="form-row" style="padding-left: 10px"><span data-i18n="[html]split.objectSend"></span></div>
    <div class="form-row">
        <input type="checkbox" id="node-input-addname-cb" style="margin-left:10px; vertical-align:baseline; width:auto;">
        <label for="node-input-addname-cb" style="width:auto;" data-i18n="split.addname"></label>
        <input type="text" id="node-input-addname" style="width:70%">
    </div>
    <hr/>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('split',{
        category: 'sequence',
        color:"#E2D96E",
        defaults: {
            name: {value:""},
            splt: {value:"\\n"},
            spltType: {value:"str"},
            arraySplt: {value:1},
            arraySpltType: {value:"len"},
            stream: {value:false},
            addname: {value:""}
        },
        inputs:1,
        outputs:1,
        icon: "split.svg",
        label: function() {
            return this.name||this._("split.split");
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            $("#node-input-splt").typedInput({
                default: 'str',
                typeField: $("#node-input-spltType"),
                types:[
                    'str',
                    'bin',
                    {value:"len", label:RED._("node-red:split.splitLength"),validate:/^\d+$/}
                ]
            });
            if (this.arraySplt === undefined) {
                $("#node-input-arraySplt").val(1);
            }
            $("#node-input-arraySplt").typedInput({
                default: 'len',
                typeField: $("#node-input-arraySpltType"),
                types:[
                    {value:"len", label:RED._("node-red:split.splitLength"),validate:/^\d+$/}
                ]
            });
            $("#node-input-addname").typedInput({
                typeField: $("#node-input-fnameType"),
                types:['msg']
            });

            $("#node-input-addname-cb").on("change", function() {
                $("#node-input-addname").prop('disabled',!this.checked);
            })
            if (this.addname === "") {
                $("#node-input-addname-cb").prop('checked',false);
                $("#node-input-addname").val('topic');
            } else {
                $("#node-input-addname-cb").prop('checked',true);
            }
            $("#node-input-addname-cb").change();
        },
        oneditsave: function() {
            if (!$("#node-input-addname-cb").prop('checked')) {
                $("#node-input-addname").val('');
            }
        }
    });
</script>


<script type="text/html" data-template-name="join">
    <div class="form-row">
        <label data-i18n="join.mode.mode"></label>
        <select id="node-input-mode" style="width:200px;">
            <option value="auto" data-i18n="join.mode.auto"></option>
            <option value="custom" data-i18n="join.mode.custom"></option>
            <option value="reduce" data-i18n="join.mode.reduce"></option>
        </select>
    </div>
    <div class="node-row-custom">
        <div class="form-row node-row-property">
            <label data-i18n="join.combine"> </label>
            <input type="text" id="node-input-property" style="width:70%;">
            <input type="hidden" id="node-input-propertyType">
        </div>
        <div class="form-row">
            <label data-i18n="join.create"></label>
            <select id="node-input-build" style="width:70%;">
                <option value="string" data-i18n="join.type.string"></option>
                <option value="buffer" data-i18n="join.type.buffer"></option>
                <option value="array" data-i18n="join.type.array"></option>
                <option value="object" data-i18n="join.type.object"></option>
                <option value="merged" data-i18n="join.type.merged"></option>
            </select>
        </div>
        <div class="form-row node-row-key">
            <label style="vertical-align:top; margin-top:7px; width:auto; margin-right: 5px;" data-i18n="join.using"></label>
            <div style="display:inline-block">
                <input type="text" id="node-input-key" style="width:220px;"> <span data-i18n="join.key"></span>
            </div>
        </div>
        <div class="form-row node-row-joiner">
            <label for="node-input-joiner" data-i18n="join.joinedUsing"></label>
            <input type="text" id="node-input-joiner" style="width:70%">
            <input type="hidden" id="node-input-joinerType">
        </div>
        <div class="form-row node-row-trigger" id="trigger-row">
            <label style="width:auto;" data-i18n="join.send"></label>
            <ul>
                <li>
                    <label style="width:280px;" for="node-input-count" data-i18n="join.afterCount"></label> <input id="node-input-count" data-i18n="[placeholder]join.count" type="text" style="width:75px;">
                </li>
                <li class="node-row-accumulate" style="list-style-type:none;">
                    <input type="checkbox" id="node-input-accumulate" style="display:inline-block; width:20px; margin-left:20px; vertical-align:top;">  <label style="width: auto" for="node-input-accumulate" data-i18n="join.subsequent"></label>
                </li>
                <li>
                    <label style="width:280px;" for="node-input-timeout" data-i18n="join.afterTimeout"></label> <input id="node-input-timeout" data-i18n="[placeholder]join.seconds" type="text" style="width:75px;">
                </li>
                <li>
                    <label style="width:auto; padding-top:6px;" data-i18n="[html]join.complete"></label>
                </li>
            </ul>
        </div>
    </div>
    <div class="node-row-reduce">
        <div class="form-row">
            <label for="node-input-reduceExp" data-i18n="join.reduce.exp" style="margin-left:10px;"></label>
            <input type="text" id="node-input-reduceExp" data-i18n="[placeholder]join.reduce.exp-value" style="width:65%">
        </div>
        <div class="form-row">
            <label for="node-input-reduceInit" data-i18n="join.reduce.init" style="margin-left:10px;"></label>
            <input type="text" id="node-input-reduceInit" data-i18n="[placeholder]join.reduce.init" style="width:65%">
            <input type="hidden" id="node-input-reduceInitType">
        </div>
        <div class="form-row">
            <label for="node-input-reduceFixup" data-i18n="join.reduce.fixup" style="margin-left:10px;"></label>
            <input type="text" id="node-input-reduceFixup" data-i18n="[placeholder]join.reduce.exp-value" style="width:65%">
        </div>
        <div class="form-row">
            <label>&nbsp;</label>
            <input type="checkbox" id="node-input-reduceRight" style="display:inline-block; width:auto; vertical-align:top; margin-left:10px;">
            <label for="node-input-reduceRight" style="width:70%;" data-i18n="join.reduce.right" style="margin-left:10px;"/>
        </div>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
    <div class="form-tips form-tips-auto hide" data-i18n="[html]join.tip"></div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('join',{
        category: 'sequence',
        color:"#E2D96E",
        defaults: {
            name: {value:""},
            mode: {value:"auto"},
            build: { value:"object"},
            property: {
                value:"payload",
                label: RED._("node-red:join.message-prop"),
                validate:RED.validators.typedInput("propertyType", false)
            },
            propertyType: { value:"msg"},
            key: {value:"topic"},
            joiner: { value:"\\n"},
            joinerType: { value:"str"},
            accumulate: { value:"false" },
            timeout: {value:""},
            count: {value:""},
            reduceRight: {value:false},
            reduceExp: {value:undefined},
            reduceInit: {value:undefined},
            reduceInitType: {value:undefined},
            reduceFixup: {value:undefined}
        },
        inputs:1,
        outputs:1,
        icon: "join.svg",
        label: function() {
            return this.name||this._("join.join");
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var node = this;

            $("#node-input-mode").on("change", function(e) {
                var val = $(this).val();
                $(".node-row-custom").toggle(val==='custom');
                $(".node-row-reduce").toggle(val==='reduce');
                $(".form-tips-auto").toggle((val==='auto') || (val==='reduce'));
                if (val === "auto") {
                    $("#node-input-accumulate").attr('checked', false);
                }
                else if (val === "custom") {
                    $("#node-input-build").change();
                }
                else if (val === "reduce") {
                    var jsonata_or_empty = {
                        value: "jsonata",
                        label: "expression",
                        icon: "red/images/typedInput/expr.svg",
                        validate: function(v) {
                            try{
                                if(v !== "") {
                                    jsonata(v);
                                }
                                return true;
                            }
                            catch(e){
                                return false;
                            }
                        },
                        expand:function() {
                            var that = this;
                            RED.editor.editExpression({
                                value: this.value().replace(/\t/g,"\n"),
                                complete: function(v) {
                                    that.value(v.replace(/\n/g,"\t"));
                                }
                            })
                        }
                    };
                    $("#node-input-reduceExp").typedInput({types:[jsonata_or_empty]});
                    $("#node-input-reduceInit").typedInput({
                        default: 'num',
                        types:['flow','global','str','num','bool','json','bin','date','jsonata','env'],
                        typeField: $("#node-input-reduceInitType")
                    });
                    $("#node-input-reduceFixup").typedInput({types:[jsonata_or_empty]});
                }
            });

            $("#node-input-build").on("change", function(e) {
                var val = $(this).val();
                $(".node-row-key").toggle(val==='object');
                $(".node-row-accumulate").toggle(val==='object' || val==='merged');
                $(".node-row-joiner").toggle(val==='string' || val==='buffer');
                $(".node-row-trigger").toggle(val!=='auto');
                if (val === 'string' || val==='buffer') {
                    $("#node-input-property").typedInput('types',['msg']);
                    $("#node-input-joiner").typedInput("show");
                } else {
                    $("#node-input-property").typedInput('types', ['msg', {
                        value: "full",
                        label: RED._("node-red:join.completeMessage"),
                        hasValue: false
                    }]);
                }
            });

            $("#node-input-joiner").typedInput({
                default: 'str',
                typeField: $("#node-input-joinerType"),
                types:['str', 'bin']
            });

            $("#node-input-property").typedInput({
                typeField: $("#node-input-propertyType"),
                types: ['msg', {
                    value: "full",
                    label: RED._("node-red:join.completeMessage"),
                    hasValue: false
                }]
            });

            $("#node-input-key").typedInput({
                types:['msg']
            });

            $("#node-input-build").change();
            $("#node-input-mode").change();
        },
        oneditsave: function() {
            var build = $("#node-input-build").val();
            if (build !== 'object' && build !== 'merged') {
                $("#node-input-accumulate").prop("checked",false);
            }
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="split">
    <p>Splits a message into a sequence of messages.</p>

    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt>payload<span class="property-type">object | string | array | buffer</span></dt>
        <dd>The behaviour of the node is determined by the type of <code>msg.payload</code>:
            <ul>
                <li><b>string</b>/<b>buffer</b> - the message is split using the specified character (default: <code>\n</code>), buffer sequence or into fixed lengths.</li>
                <li><b>array</b> - the message is split into either individual array elements, or arrays of a fixed-length.</li>
                <li><b>object</b> - a message is sent for each key/value pair of the object.</li>
            </ul>
        </dd>
    </dl>
    <h3>Outputs</h3>
    <dl class="message-properties">
        <dt>parts<span class="property-type">object</span></dt>
        <dd>This property contains information about how the message was split from
        the original message. If passed to the <b>join</b> node, the sequence can be
        reassembled into a single message. The property has the following properties:
        <ul>
            <li><code>id</code> - an identifier for the group of messages</li>
            <li><code>index</code> - the position within the group</li>
            <li><code>count</code> - if known, the total number of messages in the group. See 'streaming mode' below.</li>
            <li><code>type</code> - the type of message - string/array/object/buffer</li>
            <li><code>ch</code> - for a string or buffer, the data used to the split the message as either the string or an array of bytes</li>
            <li><code>key</code> - for an object, the key of the property this message was created from. The node can be configured to also copy this value to another message properties, such as <code>msg.topic</code>.</li>
            <li><code>len</code> - the length of each message when split using a fixed length value</li>
        </ul>
        </dd>
    </dl>
    <h3>Details</h3>
    <p>This node makes it easy to create a flow that performs common actions across
    a sequence of messages before, using the <b>join</b> node, recombining the
    sequence into a single message.</p>
    <p>It uses the <code>msg.parts</code> property to track the individual parts
    of a sequence.</p>
    <h4>Streaming mode</h4>
    <p>The node can also be used to reflow a stream of messages. For example, a
    serial device that sends newline-terminated commands may deliver a single message
    with a partial command at its end. In 'streaming mode', this node will split
    a message and send each complete segment. If there is a partial segment at the end,
    the node will hold on to it and prepend it to the next message that is received.
    </p>
    <p>When operating in this mode, the node will not set the <code>msg.parts.count</code>
    property as it does not know how many messages to expect in the stream. This
    means it cannot be used with the <b>join</b> node in its automatic mode.</p>
</script>

<script type="text/html" data-help-name="join">
    <p>Joins sequences of messages into a single message.</p>
    <p>There are three modes available:</p>
    <dl>
        <dt>automatic</dt>
        <dd>When paired with the <b>split</b> node, it will automatically join the messages to reverse the split that was performed.</dd>
        <dt>manual</dt>
        <dd>Join sequences of messages in a variety of ways.</dd>
        <dt>reduce sequence</dt>
        <dd>Apply an expression against all messages in a sequence to reduce it to a single message.</dd>
    </dl>
    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt class="optional">parts<span class="property-type">object</span></dt>
        <dd>To automatically join a sequence of messages, they should all have
        this property set. The <b>split</b> node generates this property but it
        can be manually created. It has the following properties:
        <ul>
            <li><code>id</code> - an identifier for the group of messages</li>
            <li><code>index</code> - the position within the group</li>
            <li><code>count</code> - the total number of messages in the group</li>
            <li><code>type</code> - the type of message - string/array/object/buffer</li>
            <li><code>ch</code> - for a string or buffer, the data used to the split the message as either the string or an array of bytes</li>
            <li><code>key</code> - for an object, the key of the property this message was created from</li>
            <li><code>len</code> - the length of each message when split using a fixed length value</li>
        </ul>
        </dd>
        <dt class="optional">complete</dt>
        <dd>If set, the node will append the payload, and then send the output message in its current state.
            If you don't wish to append the payload, delete it from the msg.</dd>
        <dt class="optional">reset</dt>
        <dd>If set, the node will clear any partially complete message and not send it.</dd>
        <dt class="optional">restartTimeout</dt>
        <dd>If set, and the node has a timeout configured, that timeout will be restarted.</dd>
    </dl>
    <h3>Details</h3>

    <h4>Automatic mode</h4>
    <p>Automatic mode uses the <code>parts</code> property of incoming messages to
       determine how the sequence should be joined. This allows it to automatically
       reverse the action of a <b>split</b> node.

    <h4>Manual mode</h4>
    <p>When configured to join in manual mode, the node is able to join sequences
     of messages into a number of different results:</p>
    <ul>
        <li>a <b>string</b> or <b>buffer</b> - created by joining the selected property of each message with the specified join characters or buffer.</li>
        <li>an <b>array</b> - created by adding each selected property, or entire message, to the output array.</li>
        <li>a <b>key/value object</b> - created by using a property of each message to determine the key under which
        the required value is stored.</li>
        <li>a <b>merged object</b> - created by merging the property of each message under a single object.</li>
    </ul>
    <p>The other properties of the output message are taken from the last message received before the result is sent.</p>
    <p>A <i>count</i> can be set for how many messages should be received before generating the output message.
    For object outputs, once this count has been reached, the node can be configured to send a message for each subsequent message
    received.</p>
    <p>A <i>timeout</i> can be set to trigger sending the new message using whatever has been received so far.
     This timeout can be restarted by sending a message with the <code>msg.restartTimeout</code> property set.</p>
    <p>If a message is received with the <code>msg.complete</code> property set, the output message is finalised and sent.
    This resets any part counts.</p>
    <p>If a message is received with the <code>msg.reset</code> property set, the partly complete message is deleted and not sent.
    This resets any part counts.</p>

    <h4>Reduce Sequence mode</h4>
    <p>When configured to join in reduce mode, an expression is applied to each
       message in a sequence and the result accumulated to produce a single message.</p>

    <dl class="message-properties">
        <dt>Initial value</dt>
        <dd>The initial value of the accumulated value (<code>$A</code>).</dd>
        <dt>Reduce expression</dt>
        <dd>A JSONata expression that is called for each message in the sequence.
            The result is passed to the next call of the expression as the accumulated value.
            In the expression, the following special variables can be used:
            <ul>
                <li><code>$A</code>: the accumulated value, </li>
                <li><code>$I</code>: index of the message in the sequence, </li>
                <li><code>$N</code>: number of messages in the sequence.</li>
            </ul>
        </dd>
        <dt>Fix-up expression</dt>
        <dd>An optional JSONata expression that is applied after the reduce expression
            has been applied to all messages in the sequence.
            In the expression, following special variables can be used:
            <ul>
                <li><code>$A</code>: the accumulated value, </li>
                <li><code>$N</code>: number of messages in the sequence.</li>
            </ul>
        </dd>
        <p>By default, the reduce expression is applied in order, from the first
           to the last message of the sequence. It can optionally be applied in
           reverse order.</p>
        <p>$N is the number of messages that arrive - even if they are identical.</p>
    </dl>
    <p><b>Example:</b> the following settings, given a sequence of numeric values,
       calculates the average value:
        <ul>
            <li><b>Reduce expression</b>: <code>$A+payload</code></li>
            <li><b>Initial value</b>: <code>0</code></li>
            <li><b>Fix-up expression</b>: <code>$A/$N</code></li>
        </ul>
    </p>
    <h4>Storing messages</h4>
    <p>This node will buffer messages internally in order to work across sequences. The
       runtime setting <code>nodeMessageBufferMaxLength</code> can be used to limit how many messages nodes
       will buffer.</p>
</script>

<!-- --- [red-module:node-red/sort] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="sort">

    <div class="form-row">
        <label for="node-input-target"><i class="fa fa-dot-circle-o"></i> <span data-i18n="sort.target"></span></label>
        <input type="text" id="node-input-target" style="width:70%;">
        <input type="hidden" id="node-input-targetType">
    </div>

    <div class="node-row-sort-msg-key">
        <div class="form-row">
            <label for="node-input-msgKey"><i class="fa fa-filter"></i> <span data-i18n="sort.key"></span></label>
            <input type="text" id="node-input-msgKey" style="width:70%;">
            <input type="hidden" id="node-input-msgKeyType">
        </div>
    </div>

    <div class="node-row-sort-seq-key">
        <div class="form-row">
            <label for="node-input-seqKey"><i class="fa fa-filter"></i> <span data-i18n="sort.key"></span></label>
            <input type="text" id="node-input-seqKey" style="width:70%;">
            <input type="hidden" id="node-input-seqKeyType">
        </div>
    </div>

    <div class="form-row">
        <label><i class="fa fa-random"></i>  <span data-i18n="sort.order"></span></label>
        <select id="node-input-order" style="width:200px;">
            <option value="ascending" data-i18n="sort.ascending"></option>
            <option value="descending" data-i18n="sort.descending"></option>
        </select>
    </div>

    <div class="form-row" id="node-as_num">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-as_num" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-as_num" style="width: 70%;" data-i18n="sort.as-number"></label>
    </div>

    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('sort',{
        category: 'sequence',
        color:"#E2D96E",
        defaults: {
            name: { value:"" },
            order: { value:"ascending" },
            as_num: { value:false },
            target: { value:"payload" },
            targetType: { value:"msg" },
            msgKey: { value:"payload" },
            msgKeyType: { value:"elem" },
            seqKey: { value:"payload" },
            seqKeyType: { value:"msg" }
        },
        inputs:1,
        outputs:1,
        icon: "sort.svg",
        label: function() {
            return this.name||this._("sort.sort");
        },
        labelStyle: function() {
            return this.name ? "node_label_italic" : "";
        },
        oneditprepare: function() {
            var seq = {
                value: "seq",
                label: RED._("node-red:sort.seq"),
                hasValue: false
            };
            var elem = {
                value: "elem",
                label: RED._("node-red:sort.elem"),
                hasValue: false
            };
            $("#node-input-target").typedInput({
                default:'msg',
                typeField: $("#node-input-targetType"),
                types:['msg', seq]
            });
            $("#node-input-msgKey").typedInput({
                default:'elem',
                typeField: $("#node-input-msgKeyType"),
                types:[elem, 'jsonata']
            });
            $("#node-input-seqKey").typedInput({
                default:'msg',
                typeField: $("#node-input-seqKeyType"),
                types:['msg', 'jsonata']
            });
            $("#node-input-target").on("change", function(e) {
                var val = $("#node-input-target").typedInput('type');
                $(".node-row-sort-msg-key").toggle(val === "msg");
                $(".node-row-sort-seq-key").toggle(val === "seq");
            });
            $("#node-input-target").change();
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="sort">
    <p>A function that sorts message property or a sequence of messages.</p>
    <p>When configured to sort message property, the node sorts array data pointed to by specified message property.</p>
    <p>When configured to sort a sequence of messages, it will reorder the messages.</p>
    <p>The sorting order can be:</p>
    <ul>
        <li><b>ascending</b>,</li>
        <li><b>descending</b>.</li>
    </ul>
    <p>For numbers, numerical ordering can be specified by a checkbox.</p>
    <p>Sort key can be element value or JSONata expression for sorting property value, or message property or JSONata expression for sorting a message sequence.<p>
    <p>When sorting a message sequence, the sort node relies on the received messages to have <code>msg.parts</code> set.  The split node generates this property, but can be manually created.  It has the following properties:</p>
    <p>
        <ul>
            <li><code>id</code> - an identifier for the group of messages</li>
            <li><code>index</code> - the position within the group</li>
            <li><code>count</code> - the total number of messages in the group</li>
        </ul>
    </p>
    <p><b>Note:</b> This node internally keeps messages for its operation.  In order to prevent unexpected memory usage, maximum number of messages kept can be specified.  Default is no limit on number of messages.
        <ul>
            <li><code>nodeMessageBufferMaxLength</code> property set in <b>settings.js</b>.</li>
        </ul>
    </p>
</script>

<!-- --- [red-module:node-red/batch] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="batch">
    <div class="form-row">
        <label for="node-input-mode"><span data-i18n="batch.mode.label"></span></label>
        <select type="text" id="node-input-mode" style="width: 300px;">
            <option value="count" data-i18n="batch.mode.num-msgs"></option>
            <option value="interval" data-i18n="batch.mode.interval"></option>
            <option value="concat" data-i18n="batch.mode.concat"></option>
        </select>
    </div>

    <div class="node-row-msg-count">
        <div class="form-row node-row-count">
            <label style="margin-left: 10px; width: 175px;" for="node-input-count" data-i18n="batch.count.label"></label>
            <input type="text" id="node-input-count" style="width: 50px;">
        </div>
    </div>

    <div class="node-row-msg-overlap">
        <div class="form-row node-row-overlap">
            <label style="margin-left: 10px; width: 175px;" for="node-input-overlap" data-i18n="batch.count.overlap"></label>
            <input type="text" id="node-input-overlap" style="width: 50px;">
        </div>
    </div>

    <div class="node-row-msg-interval">
        <div class="form-row node-row-interval">
            <label style="margin-left: 10px; width: 175px;" for="node-input-interval"> <span data-i18n="batch.interval.label"></span></label>
            <input type="text" id="node-input-interval" style="width: 50px;">
            <span data-i18n="batch.interval.seconds"></span>
        </div>
        <div class="form-row">
            <input type="checkbox" id="node-input-allowEmptySequence" style="margin-left:20px; margin-right: 10px; vertical-align:top; width:auto;">
            <label for="node-input-allowEmptySequence" style="width:auto;" data-i18n="batch.interval.empty"></label>
        </div>
    </div>

    <div class="node-row-msg-concat">
        <div class="form-row">
            <label data-i18n="batch.concat.topics-label"></label>
            <div class="form-row node-input-topics-container-row">
                <ol id="node-input-topics-container"></ol>
            </div>
        </div>
    </div>

    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>

</script>

<script type="text/javascript">
    RED.nodes.registerType("batch",{
        category: "sequence",
        color:"#E2D96E",
        defaults: {
            name: {value:""},
            mode: {value:"count"},
            count: {
                value:10,
                validate:function(v, opt) {
                    if (RED.validators.number(v) && (v >= 1)) {
                        return true;
                    }
                    return RED._("node-red:batch.error.invalid-count");
                }
            },
            overlap: {
                value:0,
                validate:function(v, opt) {
                    if (RED.validators.number(v) && (v >= 0)) {
                        return true;
                    }
                    return RED._("node-red:batch.error.invalid-overlap");
                }
            },
            interval: {
                value:10,
                validate:function(v, opt) {
                    if (RED.validators.number(v) && (v >= 1)) {
                        return true;
                    }
                    return RED._("node-red:batch.error.invalid-interval");
                }
            },
            allowEmptySequence: {value:false},
            topics: {value:[{topic:""}]}
        },
        inputs:1,
        outputs:1,
        icon: "batch.svg",
        label: function() {
            return this.name||this._("batch.batch");;
        },
        labelStyle: function() {
            return this.name ? "node_label_italic" : "";
        },
        oneditprepare: function() {
            var node = this;
            var topic_str = node._("batch.concat.topic");

            function resizeTopics(topic) {
                var newWidth = topic.width();
                topic.find('.red-ui-typedInput')
                     .typedInput("width",newWidth-15);
            }

            $("#node-input-topics-container")
                .css('min-height','150px').css('min-width','430px')
                .editableList({
                    addItem: function(container, i, opt) {
                        if (!opt.hasOwnProperty('topic')) {
                            opt.topic = "";
                        }
                        var row = $('<div/>').appendTo(container);
                        var valueField = $('<input/>',{
                            class:"node-input-topic-value",
                            type:"text",
                            style:"margin-left: 5px;"
                        }).appendTo(row)
                        .typedInput({default:'str', types:['str']});
                        valueField.typedInput('value', opt.topic);
                        valueField.typedInput('type', 'str');
                        valueField.attr('placeholder', topic_str);
                        resizeTopics(container);
                    },
                    resizeItem: resizeTopics,
                    sortable: true,
                    removable: true
                });

            $("#node-input-count").spinner({min:1});
            $("#node-input-overlap").spinner({min:0});
            $("#node-input-interval").spinner({min:1});
            $("#node-input-mode").on("change", function(e) {
                var val = $(this).val();
                $(".node-row-msg-count").toggle(val==="count");
                $(".node-row-msg-overlap").toggle(val==="count");
                $(".node-row-msg-interval").toggle(val==="interval");
                $(".node-row-msg-concat").toggle(val==="concat");
                if (val==="concat") {
                    var topics = node.topics;
                    var container = $("#node-input-topics-container");
                    container.editableList('empty');
                    for (var i = 0; i < topics.length; i++) {
                        var topic = topics[i];
                        container.editableList('addItem', topic);
                    }
                }
            });
        },
        oneditsave: function() {
            var topics = $("#node-input-topics-container").editableList('items');
            var node = this;
            node.topics = [];
            topics.each(function(i) {
                var topicData = $(this).data('data');
                var topic = $(this);
                var vf = topic.find(".node-input-topic-value");
                var value = vf.typedInput('value');
                var type = vf.typedInput('type');
                var r = {topic:value};
                node.topics.push(r);
            });
        },
        oneditresize: function(size) {
            var rows = $("#dialog-form>div:not(.node-input-topics-container-row)");
            var height = size.height;
            for (var i = 0; i < rows.length; i++) {
                height -= $(rows[i]).outerHeight(true);
            }
            var editorRow = $("#dialog-form>div.node-input-topics-container-row");
            height -= (parseInt(editorRow.css("marginTop"))+parseInt(editorRow.css("marginBottom")));
            $("#node-input-topics-container").editableList('height',height);
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="batch">
    <p>Creates sequences of messages based on various rules.</p>
    <h3>Details</h3>
    <p>There are three modes for creating message sequences:</p>
    <dl>
        <dt>Number of messages</dt>
        <dd>groups messages into sequences of a given length. The <b>overlap</b>
        option specifies how many messages at the end of one sequence should be
        repeated at the start of the next sequence.</dd>

        <dt>Time interval</dt>
        <dd>groups messages that arrive within the specified interval. If no messages
            arrive within the interval, the node can optionally send on an empty message.</dd>

        <dt>Concatenate Sequences</dt>
        <dd>creates a message sequence by concatenating incoming sequences. Each message
            must have a <code>msg.topic</code> property and a <code>msg.parts</code> property
            identifying its sequence. The node is configured with a list of <code>topic</code>
            values to identify the order sequences are concatenated.
        </dd>
    </dl>
    <h4>Storing messages</h4>
    <p>This node will buffer messages internally in order to work across sequences. The
       runtime setting <code>nodeMessageBufferMaxLength</code> can be used to limit how many messages nodes
       will buffer.</p>
    <p>If a message is received with the <code>msg.reset</code> property set, the buffered messages are deleted and not sent.</p>
</script>

<!-- --- [red-module:node-red/file] --- -->

<script type="text/html" data-template-name="file">
    <div class="form-row node-input-filename">
         <label for="node-input-filename"><i class="fa fa-file"></i> <span data-i18n="file.label.filename"></span></label>
         <input id="node-input-filename" type="text">
         <input type="hidden" id="node-input-filenameType">
    </div>
    <div class="form-row">
        <label for="node-input-overwriteFile"><i class="fa fa-random"></i> <span data-i18n="file.label.action"></span></label>
        <select type="text" id="node-input-overwriteFile" style="width: 250px;">
            <option value="false" data-i18n="file.action.append"></option>
            <option value="true" data-i18n="file.action.overwrite"></option>
            <option value="delete" data-i18n="file.action.delete"></option>
        </select>
    </div>
    <div class="form-row form-row-file-write-options">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-appendNewline" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-appendNewline" style="width: 70%;"><span data-i18n="file.label.addnewline"></span></label>
    </div>
    <div class="form-row form-row-file-write-options">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-createDir" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-createDir" style="width: 70%;"><span data-i18n="file.label.createdir"></span></label>
    </div>
    <div class="form-row form-row-file-encoding">
        <label for="node-input-encoding"><i class="fa fa-flag"></i> <span data-i18n="file.label.encoding"></span></label>
        <select type="text" id="node-input-encoding" style="width: 250px;">
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name">
    </div>
    <div class="form-tips"><span data-i18n="file.tip"></span></div>
</script>

<script type="text/html" data-template-name="file in">
    <div class="form-row">
         <label for="node-input-filename"><i class="fa fa-file"></i> <span data-i18n="file.label.filename"></span></label>
         <input id="node-input-filename" type="text">
         <input type="hidden" id="node-input-filenameType">
    </div>
    <div class="form-row">
        <label for="node-input-format"><i class="fa fa-sign-out"></i> <span data-i18n="file.label.outputas"></span></label>
        <select id="node-input-format" style="width: 250px;">
            <option value="utf8" data-i18n="file.output.utf8"></option>
            <option value="lines" data-i18n="file.output.lines"></option>
            <option value="" data-i18n="file.output.buffer"></option>
            <option value="stream" data-i18n="file.output.stream"></option>
        </select>
    </div>
    <div class="form-row" id="file-allprops">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-allProps" style="display:inline-block; width:auto; vertical-align:top;">
        <label for="node-input-allProps" style="width: 70%;"><span data-i18n="file.label.allProps"></span></label>
    </div>
    <div class="form-row" id="encoding-spec">
        <label for="node-input-encoding"><i class="fa fa-flag"></i> <span data-i18n="file.label.encoding"></span></label>
        <select type="text" id="node-input-encoding" style="width:250px;">
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name">
    </div>
    <div class="form-tips"><span data-i18n="file.tip"></span></div>
</script>

<script type="text/javascript">
(function(){
    var encodings = [
        [ "file.encoding.native",
          "utf8",
          "ucs2",
          "utf-16le",
          "ascii",
          "binary",
          "base64",
          "hex"
        ],
        [ "file.encoding.unicode",
          "utf-16be",
        ],
        [ "file.encoding.japanese",
          "Shift_JIS",
          "Windows-31j",
          "Windows932",
          "EUC-JP"
        ],
        [ "file.encoding.chinese",
          "GB2312",
          "GBK",
          "GB18030",
          "Windows936",
          "EUC-CN"
        ],
        [ "file.encoding.korean",
          "KS_C_5601",
          "Windows949",
          "EUC-KR"
        ],
        [ "file.encoding.taiwan",
          "Big5",
          "Big5-HKSCS",
          "Windows950"
        ],
        [ "file.encoding.windows",
          "cp874",
          "cp1250",
          "cp1251",
          "cp1252",
          "cp1253",
          "cp1254",
          "cp1255",
          "cp1256",
          "cp1257",
          "cp1258"
        ],
        [ "file.encoding.iso",
          "ISO-8859-1",
          "ISO-8859-2",
          "ISO-8859-3",
          "ISO-8859-4",
          "ISO-8859-5",
          "ISO-8859-6",
          "ISO-8859-7",
          "ISO-8859-8",
          "ISO-8859-9",
          "ISO-8859-10",
          "ISO-8859-11",
          "ISO-8859-12",
          "ISO-8859-13",
          "ISO-8859-14",
          "ISO-8859-15",
          "ISO-8859-16"
        ],
        [ "file.encoding.ibm",
          "cp437",
          "cp737",
          "cp775",
          "cp808",
          "cp850",
          "cp852",
          "cp855",
          "cp856",
          "cp857",
          "cp858",
          "cp860",
          "cp861",
          "cp866",
          "cp869",
          "cp922",
          "cp1046",
          "cp1124",
          "cp1125",
          "cp1129",
          "cp1133",
          "cp1161",
          "cp1162",
          "cp1163"
        ],
        [ "file.encoding.mac",
          "maccroatian",
          "maccyrillic",
          "macgreek",
          "maciceland",
          "macroman",
          "macromania",
          "macthai",
          "macturkish",
          "macukraine",
          "maccenteuro",
          "macintosh"
        ],
        [ "file.encoding.koi8",
          "koi8-r",
          "koi8-u",
          "koi8-ru",
          "koi8-t"
        ],
        [ "file.encoding.misc",
          "armscii8",
          "rk1048",
          "tcvn",
          "georgianacademy",
          "georgianps",
          "pt154",
          "viscii",
          "iso646cn",
          "iso646jp",
          "hproman8",
          "tis620"
        ]
    ];

    RED.nodes.registerType('file',{
        category: 'storage',
        defaults: {
            name: {value:""},
            filename: {value:""},
            filenameType: {value:"str"},
            appendNewline: {value:true},
            createDir: {value:false},
            overwriteFile: {value:"false"},
            encoding: {value:"none"}
        },
        color:"BurlyWood",
        inputs:1,
        outputs:1,
        icon: "file-out.svg",
        label: function() {
            var fn = this.filename;
            if(this.filenameType != "str" && this.filenameType != "env" ) { fn = ""; }
            if(this.filenameType === "env") { fn = "env."+fn; }
            if (this.overwriteFile === "delete") {
                return this.name||this._("file.label.deletelabel",{file:fn});
            } else {
                return this.name||fn||this._("file.label.write");
            }
        },
        paletteLabel: RED._("node-red:file.label.write"),
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var node = this;
            var encSel = $("#node-input-encoding");
            var label = node._("file.encoding.none");
            $("<option/>", {
                value: "none",
                label: label
            }).text(label).appendTo(encSel);
            $("<option/>", {
                value: "setbymsg",
                label: node._("file.encoding.setbymsg")
            }).text(label).appendTo(encSel);
            $("#node-input-filename").typedInput({
                default: "str",
                types: [{label:RED._("node-red:file.label.path"), value:"str", icon:""}, "msg", "jsonata", "env"],
                typeField: $("#node-input-filenameType")
            });
            if(typeof node.filenameType == 'undefined') {
                //existing node AND filenameType is not set - inplace (compatible) upgrade to new typedInput
                if(node.filename == "") { //was using empty value to denote msg.filename - set typedInput to match
                    node.filename = "filename";
                    node.filenameType = "msg";
                    $("#node-input-filename").typedInput("type", node.filenameType);
                    $("#node-input-filename").typedInput("value", node.filename);
                } else if(/^\${[^}]+}$/.test(node.filename)) { //was using an ${ENV_VAR}
                    node.filenameType = "env";
                    node.filename = node.filename.replace(/\${([^}]+)}/g, function(match, name) {
                        return (name === undefined)?"":name;
                    });
                    $("#node-input-filename").typedInput("type", node.filenameType);
                    $("#node-input-filename").typedInput("value", node.filename);
                } else { //was using a static filename - set typedInput type to str
                    node.filenameType = "str";
                    $("#node-input-filename").typedInput("type", node.filenameType);
                    $("#node-input-filename").typedInput("value", node.filename);
                }
            }
            encodings.forEach(function(item) {
                if(Array.isArray(item)) {
                    var group = $("<optgroup/>", {
                        label: node._(item[0])
                    }).appendTo(encSel);
                    for (var i = 1; i < item.length; i++) {
                        var enc = item[i];
                        $("<option/>", {
                            value: enc,
                            label: enc
                        }).text(enc).appendTo(group);
                    }
                }
                else {
                    $("<option/>", {
                        value: item,
                        label: item
                    }).text(item).appendTo(encSel);
                }
            });
            encSel.val(node.encoding);
            $("#node-input-overwriteFile").on("change",function() {
                if (this.value === "delete") {
                    $(".form-row-file-write-options").hide();
                    $(".form-row-file-encoding").hide();
                } else {
                    $(".form-row-file-write-options").show();
                    $(".form-row-file-encoding").show();
                }
            });
        }
    });

    RED.nodes.registerType('file in',{
        category: 'storage',
        defaults: {
            name: {value:""},
            filename: {value:""},
            filenameType: {value:"str"},
            format: {value:"utf8"},
            chunk: {value:false},
            sendError: {value: false},
            encoding: {value: "none"},
            allProps: {value: false}
        },
        color:"BurlyWood",
        inputs:1,
        outputs:1,
        outputLabels: function(i) {
            var l;
            if (this.format === "utf8") {
                l = "file.label.utf8String";
            } else if (this.format === "lines") {
                l = "file.label.utf8String_plural";
            } else if (this.format === "stream") {
                l = "file.label.binaryBuffer_plural";
            } else {
                l = "file.label.binaryBuffer";
            }
            return this._(l);
        },
        icon: "file-in.svg",
        label: function() {
            var fn = this.filename;
            if(this.filenameType != "str" && this.filenameType != "env" ) { fn = ""; }
            if(this.filenameType === "env") { fn = "env."+fn; }
            return this.name||fn||this._("file.label.read");
        },
        paletteLabel: RED._("node-red:file.label.read"),
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function() {
            var node = this;
            var encSel = $("#node-input-encoding");
            var label = node._("file.encoding.none");
            $("<option/>", {
                value: "none",
                label: label
            }).text(label).appendTo(encSel);
            $("#node-input-filename").typedInput({
                default: "str",
                types: [{label:RED._("node-red:file.label.path"), value:"str", icon:""}, "msg", "jsonata", "env"],
                typeField: $("#node-input-filenameType")
            });
            if(typeof node.filenameType == 'undefined') {
                //existing node AND filenameType is not set - inplace (compatible) upgrade to new typedInput
                if(node.filename == "") { //was using empty value to denote msg.filename - set typedInput to match
                    node.filename = "filename";
                    node.filenameType = "msg";
                    $("#node-input-filename").typedInput("type", node.filenameType);
                    $("#node-input-filename").typedInput("value", node.filename);
                } else if(/^\${[^}]+}$/.test(node.filename)) { //was using an ${ENV_VAR}
                    node.filenameType = "env";
                    node.filename = node.filename.replace(/\${([^}]+)}/g, function(match, name) {
                        return (name === undefined)?"":name;
                    });
                    $("#node-input-filename").typedInput("type", node.filenameType);
                    $("#node-input-filename").typedInput("value", node.filename);
                } else { //was using a static filename - set typedInput type to str
                    node.filenameType = "str";
                    $("#node-input-filename").typedInput("type", node.filenameType);
                    $("#node-input-filename").typedInput("value", node.filename);
                }
            }
            encodings.forEach(function(item) {
                if(Array.isArray(item)) {
                    var group = $("<optgroup/>", {
                        label: node._(item[0])
                    }).appendTo(encSel);
                    for (var i = 1; i < item.length; i++) {
                        var enc = item[i];
                        $("<option/>", {
                            value: enc,
                            label: enc
                        }).text(enc).appendTo(group);
                    }
                }
                else {
                    $("<option/>", {
                        value: item,
                        label: item
                    }).text(item).appendTo(encSel);
                }
            });
            encSel.val(node.encoding);
            $("#node-input-format").on("change",function() {
                var format = $("#node-input-format").val();
                if ((format === "utf8") || (format === "lines")) {
                    $("#encoding-spec").show();
                }
                else {
                    $("#encoding-spec").hide();
                }
                if ((format === "lines") || (format === "stream")) {
                    $("#file-allprops").show();
                }
                else {
                    $("#file-allprops").hide();
                }
            });
        }
    });
})();
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="file">
    <p>Writes <code>msg.payload</code> to a file, either adding to the end or replacing the existing content.
       Alternatively, it can delete the file.</p>
    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt class="optional">filename <span class="property-type">string</span></dt>
        <dd>The name of the file to be updated can be provided in the node configuration, or as a message property. 
            By default it will use <code>msg.filename</code> but this can be customised in the node.
        </dd>
        <dt class="optional">encoding <span class="property-type">string</span></dt>
        <dd>If encoding is configured to be set by msg, then this optional property can set the encoding.</dt>
    </dl>
    <h3>Output</h3>
    <p>On completion of write, input message is sent to output port.</p>
    <h3>Details</h3>
    <p>Each message payload will be added to the end of the file, optionally appending
    a newline (\n) character between each one.</p>
    <p>If <code>msg.filename</code> is used the file will be closed after every write.
    For best performance use a fixed filename.</p>
    <p>It can be configured to overwrite the entire file rather than append. For example,
    when writing binary data to a file, such as an image, this option should be used
    and the option to append a newline should be disabled.</p>
    <p>Encoding of data written to a file can be specified from list of encodings.</p>
    <p>Alternatively, this node can be configured to delete the file.</p>
</script>

<script type="text/html" data-help-name="file in">
    <p>Reads the contents of a file as either a string or binary buffer.</p>
    <h3>Inputs</h3>
    <dl class="message-properties">
        <dt class="optional">filename <span class="property-type">string</span></dt>
        <dd>The name of the file to be read can be provided in the node configuration, or as a message property. 
            By default it will use <code>msg.filename</code> but this can be customised in the node.
        </dd>
    </dl>
    <h3>Outputs</h3>
    <dl class="message-properties">
        <dt>payload <span class="property-type">string | buffer</span></dt>
        <dd>The contents of the file as either a string or binary buffer.</dd>
        <dt class="optional">filename <span class="property-type">string</span></dt>
        <dd>If not configured in the node, this optional property sets the name of the file to be read.</dd>
    </dl>
    <h3>Details</h3>
    <p>The filename should be an absolute path, otherwise it will be relative to
    the working directory of the Node-RED process.</p>
    <p>On Windows, path separators may need to be escaped, for example: <code>\\Users\\myUser</code>.</p>
    <p>Optionally, a text file can be split into lines, outputting one message per line, or a binary file
    split into smaller buffer chunks - the chunk size being operating system dependant, but typically 64k (Linux/Mac) or 41k (Windows).</p>
    <p>When split into multiple messages, each message will have a <code>parts</code>
    property set, forming a complete message sequence.</p>
    <p>Encoding of input data can be specified from list of encodings if output format is string.</p>
    <p>Errors should be caught and handled using a Catch node.</p>
</script>

<!-- --- [red-module:node-red/watch] --- -->
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-template-name="watch">
    <div class="form-row node-input-filename">
         <label for="node-input-files"><i class="fa fa-file"></i> <span data-i18n="watch.label.files"></span></label>
         <input id="node-input-files" type="text" tabindex="1" data-i18n="[placeholder]watch.placeholder.files">
    </div>
    <div class="form-row">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-recursive" style="display:inline-block; width:auto; vertical-align:top;">
        <label for="node-input-recursive" style="width:70%;"> <span data-i18n="watch.label.recursive"></span></label>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]common.label.name">
    </div>
     <div id="node-input-tip" class="form-tips"><span data-i18n="watch.tip"></span></div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('watch',{
        category: 'storage',
        defaults: {
            name: {value:""},
            files: {value:"",required:true,
                    label:RED._("node-red:watch.label.files")},
            recursive: {value:""}
        },
        color:"BurlyWood",
        inputs:0,
        outputs:1,
        icon: "watch.svg",
        label: function() {
            return this.name||this.files||this._("watch.watch");
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        }
    });
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/html" data-help-name="watch">
    <p>Watches a directory or file for changes.</p>
    <p>You can enter a list of comma separated directories and/or files. You will
    need to put quotes "..." around any that have spaces in.</p>
    <p>On Windows you must use double back-slashes \\ in any directory names.</p>
    <p>The full filename of the file that actually changed is put into <code>msg.payload</code> and <code>msg.filename</code>,
    while a stringified version of the watch list is returned in <code>msg.topic</code>.</p>
    <p><code>msg.file</code> contains just the short filename of the file that changed.
    <code>msg.type</code> has the type of thing changed, usually <i>file</i> or <i>directory</i>,
    while <code>msg.size</code> holds the file size in bytes.</p>
    <p>Of course in Linux, <i>everything</i> is a file and thus can be watched...</p>
    <p><b>Note: </b>The directory or file must exist in order to be watched. If the file
    or directory gets deleted it may no longer be monitored even if it gets re-created.</p>
</script>

<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Connector] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Connector', {
    category: 'config',
    defaults: {
      discoveryUrl: {value: ''},
      endpoint: {value: "opc.tcp://localhost:55388/", required: true},
      endpointMustExist: {value: false},
      keepSessionAlive: {value: true},
      loginEnabled: {value: false},
      name: {value: "LOCAL SERVER"},
      showErrors: {value: false},
      securityPolicy: {value: 'None', required: true},
      securityMode: {value: 'None', required: true},
      individualCerts: {value: false},
      publicCertificateFile: {value: ''},
      privateKeyFile: {value: ''},
      defaultSecureTokenLifetime: {value: ''},
      autoSelectRightEndpoint: {value: false},
      strategyMaxRetry: {value: ''},
      strategyInitialDelay: {value: ''},
      strategyMaxDelay: {value: ''},
      strategyRandomisationFactor: {value: ''},
      requestedSessionTimeout: {value: ''},
      connectionStartDelay: {value: ''},
      //connectionStopDelay: {value: ''}, //Todo: check missing default assignment for constants.
      reconnectDelay: {value: ''},
      maxBadSessionRequests: {value: 10}
    },
    credentials: {
      user: {type: "text"},
      password: {type: "password"}
    },
    label: function () {
      return this.name || this.endpoint;
    },
    oneditprepare: function () {
      let node = this
      node.lookupItems = []

      let tabs = RED.tabs.create({
        id: "node-input-connector-tabs",
        onchange: function (tab) {
          $("#node-input-connector-tabs-content").children().hide()
          $("#" + tab.id).show()
        }
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-settings",
        label: this._("opcua-iiot-contrib.tabs-label.settings")
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-security",
        label: this._("opcua-iiot-contrib.tabs-label.security")
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-strategy",
        label: this._("opcua-iiot-contrib.tabs-label.strategy")
      })


      // Security Management
      try {
        let loginCheckbox = $("#node-config-input-loginEnabled");
        let loginFields = $("#node-config-login");

        if (this.loginEnabled) {
          loginCheckbox.prop('checked', true);
          loginFields.show();
        } else {
          loginCheckbox.prop('checked', false);
          loginFields.hide();
        }

        loginCheckbox.change(function () {
          if ($(this).is(":checked")) {
            loginFields.show();
          } else {
            loginFields.hide();
            $('#node-config-input-user').val('');
            $('#node-config-input-password').val('');
          }
        });

      } catch (err) {
        this.error(err);
      }

      // Certificate Management
      try {
        let certsCheckbox = $("#node-config-input-individualCerts");
        let configCertFields = $("#node-config-certFiles");

        if (this.individualCerts) {
          certsCheckbox.prop('checked', true);
          configCertFields.show();
        } else {
          certsCheckbox.prop('checked', false);
          configCertFields.hide();
        }

        certsCheckbox.change(function () {
          if ($(this).is(":checked")) {
            configCertFields.show();
          } else {
            configCertFields.hide();
            $('#node-config-input-publicCertificateFile').val('');
            $('#node-config-input-privateKeyFile').val('');
          }
        });

      } catch (err) {
        this.error(err);
      }

      let discoveryLookupButton = $("#node-config-lookup-discovery")
      let discoveryUrlField = $("#node-config-input-discoveryUrl")

      discoveryLookupButton.on("click", function () {
        discoveryLookupButton.addClass('disabled')
        $.getJSON('/opcuaIIoT/client/discover/' + node.id + '/' + encodeURIComponent(discoveryUrlField.val()), function (data) {
          discoveryLookupButton.removeClass('disabled')
          node.lookupItems = []
          let security = null
          $.each(data, function (i, entry) {
            node.lookupItems.push({
              value: entry,
              label: entry
            })
          })

          endpointField.autocomplete({
            source: node.lookupItems,
            minLength: 0,
            focus: function (event, ui) {
              endpointField.val(ui.item.value);
              return false;
            },
            select: function (event, ui) {
              endpointField.val(ui.item.value)
              return false;
            },
            close: function (event, ui) {
              endpointField.autocomplete("destroy")
            }
          }).autocomplete("search", "")
        })
      })

      let endpointsLookupButton = $("#node-config-lookup-endpoint")
      let endpointField = $("#node-config-input-endpoint")
      let securityPolicyField = $("#node-config-input-securityPolicy")
      let securityModeField = $("#node-config-input-securityMode")

      endpointsLookupButton.on("click", function () {
        endpointsLookupButton.addClass('disabled')
        $.getJSON('/opcuaIIoT/client/endpoints/' + node.id + '/' + encodeURIComponent(endpointField.val()), function (data) {
          endpointsLookupButton.removeClass('disabled')
          node.lookupItems = []
          let security = null
          $.each(data, function (i, entry) {
            security = entry.securityPolicyUri.split('#')
            node.lookupItems.push({
              value: entry.endpointUrl,
              label: entry.endpointUrl + ' (' + entry.securityMode + ' ' + security[1] + ')',
              securityPolicy: security[1],
              securityMode: entry.securityMode
            })
          })

          endpointField.autocomplete({
            source: node.lookupItems,
            minLength: 0,
            focus: function (event, ui) {
              endpointField.val(ui.item.value);
              securityPolicyField.val(ui.item.securityPolicy);
              securityModeField.val(ui.item.securityMode);
              return false;
            },
            select: function (event, ui) {
              endpointField.val(ui.item.value)
              securityPolicyField.val(ui.item.securityPolicy);
              securityModeField.val(ui.item.securityMode);
              return false;
            },
            close: function (event, ui) {
              endpointField.autocomplete("destroy")
            }
          }).autocomplete("search", "")
        })
      })
    }
  }); </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Connector'>
 <div class='form-row'> <ul style='background:#fff;min-width:600px;margin-bottom:20px' id='node-input-connector-tabs'>
</ul> </div> <div id='node-input-connector-tabs-content' style='min-height:170px'> <div 
id='opcuaiiot-server-tab-settings' style='display:none'> <div class='form-row'> <label 
for='node-config-input-discoveryUrl'><i class='fa fa-external-link'></i> <span 
data-i18n='opcua-iiot-contrib.label.discoveryUrl'></span></label> <input type='text' 
id='node-config-input-discoveryUrl' , palceholder='opc.tcp://server.local:4840/'> <a id='node-config-lookup-discovery' 
class='btn'><i id='node-lookup-topic-icon' class='fa fa-search'></i></a> </div> <div class='form-row'> <label 
for='node-config-input-endpoint'><i class='fa fa-external-link'></i> <span 
data-i18n='opcua-iiot-contrib.label.endpoint'></span></label> <input type='text' id='node-config-input-endpoint'> <a 
id='node-config-lookup-endpoint' class='btn'><i id='node-lookup-topic-icon' class='fa fa-search'></i></a> </div> <div 
class='form-row'> <label style='min-width:160px' for='node-config-input-endpointMustExist'><i class='fa fa-cc-discover'>
</i> <span data-i18n='opcua-iiot-contrib.label.endpointMustExist'></span></label> <input type='checkbox' 
id='node-config-input-endpointMustExist' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-config-input-autoSelectRightEndpoint'><i class='fa fa-magic'></i> <span 
data-i18n='opcua-iiot-contrib.label.autoSelectRightEndpoint'></span></label> <input type='checkbox' 
id='node-config-input-autoSelectRightEndpoint' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-config-input-keepSessionAlive'><i class='fa fa-heart-o'></i> <span 
data-i18n='opcua-iiot-contrib.label.keepSessionAlive'></span></label> <input type='checkbox' 
id='node-config-input-keepSessionAlive' style='max-width:30px'> </div> <div class='form-row'> <label 
for='node-config-input-name'><i class='icon-tag'></i> <span data-i18n='node-red:common.label.name'></span></label> 
<input type='text' id='node-config-input-name' placeholder='Name'> </div> <hr> <div class='form-row'> <label 
style='min-width:160px' for='node-config-input-showErrors'><i class='fa fa-exclamation-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input type='checkbox' 
id='node-config-input-showErrors' style='max-width:30px'> </div> </div> <div id='opcuaiiot-server-tab-security' 
style='display:none'> <div class='form-row'> <!-- SecurityPolicy enum via REST --> <label 
for='node-config-input-securityPolicy' style='min-width:140px'><i class='fa fa-certificate'></i> <span 
data-i18n='opcua-iiot-contrib.label.securityPolicy'></span></label> <select type='text' 
id='node-config-input-securityPolicy'> <option value='None'>None</option> <option value='Basic128'>Basic128</option> 
<option value='Basic192'>Basic192</option> <option value='Basic192Rsa15'>Basic192Rsa15</option> <option 
value='Basic256Rsa15'>Basic256Rsa15</option> <option value='Basic256Sha256'>Basic256Sha256</option> <option 
value='Aes128_Sha256_RsaOaep'>Aes128_Sha256_RsaOaep</option> <option value='Aes256_Sha256_RsaPss'>Aes256_Sha256_RsaPss
</option> <option value='PubSub_Aes128_CTR'>PubSub_Aes128_CTR</option> <option value='PubSub_Aes256_CTR'>
PubSub_Aes256_CTR</option> </select> </div> <div class='form-row'> <!-- MessageSecurityMode enum via REST --> <label 
for='node-config-input-securityMode' style='min-width:140px'><i class='fa fa-key'></i> <span 
data-i18n='opcua-iiot-contrib.label.securityMode'></span></label> <select type='text' 
id='node-config-input-securityMode'> <option value='None'>None</option> <option value='Sign'>Sign</option> <option 
value='SignAndEncrypt'>Sign&Encrypt</option> </select> </div> <div class='form-row'> <label style='min-width:140px'> <i 
class='fa fa-certificate'></i> <span data-i18n='opcua-iiot-contrib.label.certificateFiles'></span> </label> </div> <div 
class='form-row'> <label style='min-width:240px'> <i class='fa fa-file'></i> <span 
data-i18n='opcua-iiot-contrib.label.individualCerts'></span> <input type='checkbox' 
id='node-config-input-individualCerts' style='max-width:30px'> </label> </div> <div id='node-config-certFiles'> <hr> 
<div class='form-row'> <label for='node-config-input-publicCertificateFile'><i class='fa fa-file'></i> <span 
data-i18n='opcua-iiot-contrib.label.publicCertificateFile'></span></label> <input type='text' 
id='node-config-input-publicCertificateFile' placeholder='./certificates/client_selfsigned_cert_1024.pem' 
style='min-width:480px'> </div> <div class='form-row'> <label for='node-config-input-privateKeyFile'><i 
class='fa fa-file'></i> <span data-i18n='opcua-iiot-contrib.label.privateKeyFile'></span></label> <input type='text' 
id='node-config-input-privateKeyFile' placeholder='./certificates/PKI/own/private/private_key.pem' 
style='min-width:480px'> </div> <hr> </div> <div class='form-row'> <label 
for='node-config-input-defaultSecureTokenLifetime'><i class='fa fa-file'></i> <span 
data-i18n='opcua-iiot-contrib.label.defaultSecureTokenLifetime'></span></label> <input type='text' 
id='node-config-input-defaultSecureTokenLifetime' placeholder='120000'> &nbsp; msec. </div> <div class='form-row'> 
<label for='node-config-input-loginEnabled'><i class='icon-lock'></i> <span 
data-i18n='opcua-iiot-contrib.label.credentials'></span></label> <input type='checkbox' 
id='node-config-input-loginEnabled' style='max-width:30px'> </div> <div id='node-config-login'> <div class='form-row'> 
<label for='node-config-input-user'><i class='icon-user'></i> <span data-i18n='opcua-iiot-contrib.label.user'></span>
</label> <input type='text' id='node-config-input-user'> </div> <div class='form-row'> <label 
for='node-config-input-password'><i class='icon-asterisk'></i> <span data-i18n='opcua-iiot-contrib.label.password'>
</span></label> <input type='password' id='node-config-input-password'> </div> </div> </div> <div 
id='opcuaiiot-server-tab-strategy' style='display:none'> <div class='form-row'> <label 
for='node-config-input-strategyMaxRetry'><i class='fa fa-repeat'></i> <span 
data-i18n='opcua-iiot-contrib.label.strategyMaxRetry'></span></label> <input type='text' 
id='node-config-input-strategyMaxRetry' placeholder='10000' style='width:80px'> </div> <div class='form-row'> <label 
for='node-config-input-strategyInitialDelay'><i class='fa fa-clock-o'></i> <span 
data-i18n='opcua-iiot-contrib.label.strategyInitialDelay'></span></label> <input type='text' 
id='node-config-input-strategyInitialDelay' placeholder='500' style='width:80px'> &nbsp; msec. </div> <div 
class='form-row'> <label for='node-config-input-strategyMaxDelay'><i class='fa fa-clock-o'></i> <span 
data-i18n='opcua-iiot-contrib.label.strategyMaxDelay'></span></label> <input type='text' 
id='node-config-input-strategyMaxDelay' placeholder='30000' style='width:80px'> &nbsp; msec. </div> <div 
class='form-row'> <label for='node-config-input-strategyRandomisationFactor'><i class='fa fa-random'></i> <span 
data-i18n='opcua-iiot-contrib.label.strategyRandomisationFactor'></span></label> <input type='text' 
id='node-config-input-strategyRandomisationFactor' placeholder='0.2' style='width:80px'> </div> <hr> <h4>Session</h4> 
<div class='form-row'> <label for='node-config-input-requestedSessionTimeout'><i class='fa fa-clock-o'></i> <span 
data-i18n='opcua-iiot-contrib.label.requestedSessionTimeout'></span></label> <input type='text' 
id='node-config-input-requestedSessionTimeout' placeholder='60000' style='width:80px'> &nbsp; msec. </div> <div 
class='form-row'> <label for='node-config-input-maxBadSessionRequests'><i class='fa fa-power-off'></i> <span 
data-i18n='opcua-iiot-contrib.label.maxBadSessionRequests'></span></label> <input type='text' 
id='node-config-input-maxBadSessionRequests' placeholder='10' style='width:80px'> &nbsp; times </div> <hr> <h4><span 
data-i18n='opcua-iiot-contrib.label.serverConnectionDelays'></span></h4> <div class='form-row'> <label 
for='node-config-input-connectionStartDelay'><i class='fa fa-clock-o'></i> <span 
data-i18n='opcua-iiot-contrib.label.connectionStartDelay'></span></label> <input type='text' 
id='node-config-input-connectionStartDelay' placeholder='2000' style='width:80px'> &nbsp; msec. </div> <div 
class='form-row'> <label for='node-config-input-connectionStopDelay'><i class='fa fa-clock-o'></i> <span 
data-i18n='opcua-iiot-contrib.label.connectionStopDelay'></span></label> <input type='text' 
id='node-config-input-connectionStopDelay' placeholder='2000' style='width:80px'> &nbsp; msec. </div> <div 
class='form-row'> <label for='node-config-input-reconnectDelay'><i class='fa fa-clock-o'></i> <span 
data-i18n='opcua-iiot-contrib.label.reconnectDelay'></span></label> <input type='text' 
id='node-config-input-reconnectDelay' placeholder='1000' style='width:80px'> &nbsp; msec. </div> </div> </div> </script>
  <script type='text/x-red' data-help-name='OPCUA-IIoT-Connector'> <h2>OPC UA IIoT Connector</h2> <p>
The Connector is a pure configuration node and starts connecting to the OPC UA server with an OPC UA client instantly after 'Deploy' or start/restart.
</p> <p>The default for config nodes is 'On all flows' - set it to the flow to get all deleted if you delete the flow.
</p> <p>
The Connector is one connection to your OPC UA server, which handles the session. If you need multiple connections use as many Connector nodes as you need. With that you can build your idea of OPC UA in IIoT or IoT connectivity.
</p> <h3>Configuration</h3> <strong>Discovery (optional lookup)</strong> <p>
Some servers providing a discovery port, which is different from the endpoint port. To discover that port set it to opc.tcp://myopcuaserver.local:4840/ 
</p> <p><a href='https://opcfoundation.org/wp-content/uploads/2014/08/12_UA_Discovery.pdf' target='_blank'>
OPC UA Discovery and Endpoints</a></p> <p>
Discovery is just to provide some lookup. The connector uses just the endpoint to open the connection to server.</p> 
<strong>Endpoint</strong> <p>
The endpoint address (URI) to the OPC UA server like opc.tcp://localhost:55388/ or opc.tcp://mypcname.local:55388/</p> 
<p>The endpoint must exist as named if that option is activated. That gives you more integrity in connecting devices.
</p> <p>
Auto selecting for the right endpoint is optional and tries to find the correct endpoint to your security settings.</p> 
<strong>Keep Session Alive</strong> <p>
If the sessions should stay alive, then set that option to checked. Otherwise, it will close at session timeout and the first request will restart the session, but you will not succeed with the first request. With the keep alive option the session will survive and every request succeeds.
</p> <h3>Security</h3> <p>The Security tab provides some security settings and the user login option.</p> <p>
Protect your data with the OPC UA included security options!</p> <div> <ul style='margin-left:80px'> <li>None </li><li>
Basic256Sha256 </li><li>Basic256Rsa15 </li><li>Basic256 </li><li>Basic192Rsa15 </li><li>Basic128Rsa15 </li><li>
Aes256_Sha256_RsaPss </li><li>Aes128_Sha256_RsaOaep </li></ul> </div> <div> <ul style='margin-left:80px'> <li>None </li>
<li>Sign </li><li>Sign&Encrypt </li></ul> </div> <h3>Certificates</h3> <p>
Use the node-opcua-pki package or other tools to build your individual key pair and set the path to file here. Otherwise, you get pre-installed keys from node-opcua for secured communication. 
</p> <p>You could set up your own certificate and private key files. This is optional.</p> <p>
With None/NONE mode the keys are not in use.</p> <h3>User Login</h3> <p>
The user login is for user authentication to the server. It is stored with Node-RED credentials best practice.</p> 
<strong>Name</strong> <p>Name in the selection of the endpoint configuration.</p> <p>
Set showErrors to get errors from node-opcua on browse.</p> <h3>Strategy</h3> <p>
The strategy is based on the node-opcua API strategy parameters.</p> </script>
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Flex-Connector] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Flex-Connector', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      name: {value: ''},
      showStatusActivities: {value: false},
      showErrors: {value: false},
      connector: {type: 'OPCUA-IIoT-Connector', required: true}
    },
    inputs: 1,
    outputs: 1,
    align: 'left',
    icon: 'icon.png',
    label: function () {
      return this.name || 'Flex Connector'
    },
    labelStyle: function () {
      return this.name ? 'node_label_italic' : ''
    },
    oneditprepare: function () {
      let node = this
    }
  }) </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Flex-Connector'>
 <div class='form-row'> <label for='node-input-connector'><i class='icon-globe'></i> <span 
data-i18n='opcua-iiot-contrib.label.connector'></span></label> <input type='text' id='node-input-connector' 
placeholder='opc.tcp://localhost:4334'> </div> <div class='form-row'> <label for='node-input-name'><i class='fa fa-tag'>
</i> <span data-i18n='node-red:common.label.name'></span></label> <input type='text' id='node-input-name' 
placeholder=''> </div> <hr> <div class='form-row'> <label style='min-width:160px' for='node-input-showStatusActivities'>
<i class='fa fa-bolt'></i> <span data-i18n='opcua-iiot-contrib.label.showActivities'></span></label> <input 
type='checkbox' id='node-input-showStatusActivities' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showErrors'><i class='fa fa-exclamation-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input type='checkbox' id='node-input-showErrors' 
style='max-width:30px'> </div> </script>  <script type='text/x-red' data-help-name='OPCUA-IIoT-Flex-Connector'>
 <h2>OPC UA IIoT Flex Connector</h2> <p>
 The Flex Connector node is to set up an event listener with parameters to change the linked connector settings and restart the connection. It is to trigger by an Inject of Node-RED or by the IIoT OPC UA Inject. It could also get a trigger with incoming events from other nodes. 
</p> <h3>Input</h3> <p>
The node takes the parameters from the msg object or from the node setting as default. That means - an empty msg object will just reset the connection and is like a command to just restart the connector with the node parameters.
</p> <p>msg with connector parameters</p> <ul> <li>endpoint (string with opc.tcp://) </li><li>
keepSessionAlive (boolean) </li><li>securityPolicy (string) </li><li>securityMode (string) </li><li>name (string) </li>
<li>showErrors (boolean) </li><li>publicCertificateFile (path string) </li><li>privateKeyFile (path string) </li><li>
defaultSecureTokenLifetime (number) </li><li>endpointMustExist (boolean) </li><li>autoSelectRightEndpoint (boolean) 
</li><li>strategyMaxRetry (number) </li><li>strategyInitialDelay (number) </li><li>strategyMaxDelay (number) </li><li>
strategyRandomisationFactor (float from 0 .. 1) </li><li>requestedSessionTimeout (number) </li><li>
connectionStartDelay (number) </li><li>reconnectDelay (number) </li></ul> <h3>Output</h3> <p>
A msg object with connector parameters and a result if the restart with new settings was done.</p> <strong>Name</strong>
 <p>Name in the flow of Node-RED.</p> </script>
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Inject] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 Copyright 2013, 2016 IBM Corp. (node-red)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <style>
.opcuaiiotinject-time-row{padding-left:110px}.opcuaiiotinject-time-row select{margin:3px 0}.opcuaiiotinject-time-days label{-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;vertical-align:top;width:100px}.opcuaiiotinject-time-days input{width:auto}.opcuaiiotinject-time-times{width:90px}#opcuaiiotinject-time-time{width:75px}.opcuaiiotinject-time-count{width:40px!important}
</style> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Inject', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      injectType: {value: 'inject'},
      payload: {
        value: '', validate: function (v) {
          let ptype = $('#node-input-payloadType').val() || this.payloadType
          if (ptype === 'json') {
            try {
              JSON.parse(v)
              return true
            } catch (err) {
              return false
            }
          } else if (ptype === 'flow' || ptype === 'global') {
            return /^[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]+)*/i.test(v)
          } else if (ptype === 'num') {
            return /^[+-]?[0-9]*\.?[0-9]*([eE][-+]?[0-9]+)?$/.test(v)
          }
          return true
        }
      },
      payloadType: {value: 'date'},
      topic: {value: ''},
      repeat: {value: ''},
      crontab: {value: ''},
      once: {value: false},
      startDelay: {value: ''},
      name: {value: ''},
      addressSpaceItems: {value: []}
    },
    inputs: 0,
    outputs: 1,
    align: 'left',
    icon: 'icon.png'
  })

  let injectNode = RED.nodes.registry.getNodeType('OPCUA-IIoT-Inject')
  injectNode.button = {
    onclick: function () {
      let label = (this.name || this.payload).replace(/&/g, '&amp').replace(/</g, '&lt').replace(/>/g, '&gt')

      if (this.payloadType === 'date') {
        label = this._('opcuaiiotinject.timestamp')
      }

      if (this.payloadType === 'none') {
        label = this._('opcuaiiotinject.blank')
      }

      let node = this

      $.ajax({
        url: 'opcuaIIoT/inject/' + this.id,
        type: 'POST',
        success: function (resp) {
          RED.notify(node._('opcuaiiotinject.success', {label: label}), 'success')
        },
        error: function (jqXHR, textStatus, errorThrown) {
          if (jqXHR.status === 404) {
            RED.notify(node._('common.notification.error', {message: node._('common.notification.errors.not-deployed')}), 'error')
          } else if (jqXHR.status === 500) {
            RED.notify(node._('common.notification.error', {message: node._('opcuaiiotinject.errors.failed')}), 'error')
          } else if (jqXHR.status === 0) {
            RED.notify(node._('common.notification.error', {message: node._('common.notification.errors.no-response')}), 'error')
          } else {
            RED.notify(node._('common.notification.error', {
              message: node._('common.notification.errors.unexpected', {
                status: jqXHR.status,
                message: textStatus
              })
            }), 'error')
          }
        }
      })
    }
  }
  injectNode.oneditprepare = function () {
    let node = this
    let fieldPayloadType = $('#node-input-payloadType')

    if (this.payloadType === null) {
      if (this.payload === '') {
        this.payloadType = 'date'
      } else {
        this.payloadType = 'str'
      }
    } else if (this.payloadType === 'string' || this.payloadType === 'none') {
      this.payloadType = 'str'
    }

    fieldPayloadType.val(this.payloadType)

    $('#node-input-payload').typedInput({
      default: 'str',
      typeField: fieldPayloadType,
      types: ['flow', 'global', 'str', 'num', 'bool', 'json', 'date']
    })

    $('#opcuaiiotinject-time-type-select').change(function () {
      $('#node-input-crontab').val('')
      let id = $('#opcuaiiotinject-time-type-select').val()

      $('.opcuaiiotinject-time-row').hide()
      $('#opcuaiiotinject-time-row-' + id).show()

      if ((id === 'none') || (id === 'interval')) {
        $('#node-once').show()
        $('#node-delay').show()
      }
      else {
        $('#node-once').hide()
        $('#node-delay').hide()
        $('#node-input-once').prop('checked', false)
      }
    })

    $('.opcuaiiotinject-time-times').each(function () {
      for (let i = 0; i < 24; i++) {
        let l = (i < 10 ? '0' : '') + i + ':00'
        $(this).append($('<option></option>').val(i).text(l))
      }
    })
    $('<option></option>').val(24).text('00:00').appendTo('#opcuaiiotinject-time-interval-time-end')

    $('#opcuaiiotinject-time-interval-time-start').change(function () {
      let start = Number($('#opcuaiiotinject-time-interval-time-start').val())
      let end = Number($('#opcuaiiotinject-time-interval-time-end').val())

      $('#opcuaiiotinject-time-interval-time-end option').remove()

      for (let i = start + 1; i < 25; i++) {
        let l = (i < 10 ? '0' : '') + i + ':00'
        if (i === 24) {
          l = '00:00'
        }
        let opt = $('<option></option>').val(i).text(l).appendTo('#opcuaiiotinject-time-interval-time-end')
        if (i === end) {
          opt.attr('selected', 'selected')
        }
      }
    })

    $('.opcuaiiotinject-time-count').spinner({
      min: 1
    })

    $.widget('ui.injecttimespinner', $.ui.spinner, {
      options: {
        // seconds
        step: 60 * 1000,
        // hours
        page: 60
      },
      _parse: function (value) {
        if (typeof value === 'string') {
          // already a timestamp
          if (Number(value) === value) {
            return Number(value)
          }
          let p = value.split(':')
          let offset = new Date().getTimezoneOffset()
          return ((Number(p[0]) * 60) + Number(p[1]) + offset) * 60 * 1000
        }
        return value
      },
      _format: function (value) {
        let d = new Date(value)
        let h = d.getHours()
        let m = d.getMinutes()
        return ((h < 10) ? '0' : '') + h + ':' + ((m < 10) ? '0' : '') + m
      }
    })

    $('#opcuaiiotinject-time-time').injecttimespinner()

    let repeattype = 'none'

    if (this.repeat !== '') {
      repeattype = 'interval'

      let units = 's'
      let timeRange = this.repeat

      if (this.repeat % 60 === 0) {
        units = 'm'
        timeRange = timeRange / 60
      }

      if (this.repeat % 1440 === 0) {
        units = 'h'
        timeRange = timeRange / 60
      }

      $('#opcuaiiotinject-time-interval-count').val(timeRange)
      $('#opcuaiiotinject-time-interval-units').val(units)
      $('#opcuaiiotinject-time-interval-days').prop('disabled', 'disabled')

    } else if (this.crontab !== '') {
      let cronparts = this.crontab.split(' ')
      let days = cronparts[4]

      if (!isNaN(cronparts[0]) && !isNaN(cronparts[1])) {
        repeattype = 'time'
        // Fixed time
        let time = cronparts[1] + ':' + cronparts[0]

        $('#opcuaiiotinject-time-time').val(time)
        $('#opcuaiiotinject-time-type-select').val('s')

        if (days === '*') {
          $('#opcuaiiotinject-time-time-days input[type=checkbox]').prop('checked', true)
        } else {
          $('#opcuaiiotinject-time-time-days input[type=checkbox]').removeAttr('checked')
          days.split(',').forEach(function (v) {
            $('#opcuaiiotinject-time-time-days [value=' + v + ']').prop('checked', true)
          })
        }
      } else {
        repeattype = 'interval-time'
        // interval - time period
        let minutes = cronparts[0].slice(2)

        if (minutes === '') {
          minutes = '0'
        }

        $('#opcuaiiotinject-time-interval-time-units').val(minutes)

        if (days === '*') {
          $('#opcuaiiotinject-time-interval-time-days input[type=checkbox]').prop('checked', true)
        } else {
          $('#opcuaiiotinject-time-interval-time-days input[type=checkbox]').removeAttr('checked')

          days.split(',').forEach(function (v) {
            $('#opcuaiiotinject-time-interval-time-days [value=' + v + ']').prop('checked', true)
          })
        }

        let time = cronparts[1]
        let timeparts = time.split(',')
        let start
        let end

        if (timeparts.length === 1) {
          // 0 or 0-10
          let hours = timeparts[0].split('-')

          if (hours.length === 1) {
            if (hours[0] === '') {
              start = '0'
              end = '0'
            }
            else {
              start = hours[0]
              end = Number(hours[0]) + 1
            }
          } else {
            start = hours[0]
            end = Number(hours[1]) + 1
          }
        } else {
          // 23,0 or 17-23,0-10 or 23,0-2 or 17-23,0
          let startparts = timeparts[0].split('-')
          start = startparts[0]

          let endparts = timeparts[1].split('-')
          if (endparts.length === 1) {
            end = Number(endparts[0]) + 1
          } else {
            end = Number(endparts[1]) + 1
          }
        }

        $('#opcuaiiotinject-time-interval-time-end').val(end)
        $('#opcuaiiotinject-time-interval-time-start').val(start)
      }
    } else {
      repeattype = 'none'
    }

    $('.opcuaiiotinject-time-row').hide()
    $('#opcuaiiotinject-time-type-select').val(repeattype)
    $('#opcuaiiotinject-time-row-' + repeattype).show()

    $('#node-input-payload').typedInput('type', this.payloadType)

    $('#opcuaiiotinject-time-type-select').change()
    $('#opcuaiiotinject-time-interval-time-start').change()

    $('#node-input-injectType').change(function () {
      if ($(this).val() === 'listen') {
        $('#input-label-listener').show()
        $('#input-label-payload').hide()

        if(fieldPayloadType.val() !== 'num' && fieldPayloadType.val() !== 'json') {
            $('#node-input-payload').typedInput('type', 'num')
            $('#node-input-payload').val('1000')
        }
      } else {
        $('#input-label-payload').show()
        $('#input-label-listener').hide()
      }
    })

    $('#node-input-once').change(function () {

      if ($(this).is(':checked') || $('#opcuaiiotinject-time-type-select').val() !== 'none') {
        $('#node-delay').show()
      } else {
        $('#node-delay').hide()
      }
    })

    let tabs = RED.tabs.create({
      id: 'node-input-inject-tabs',
      onchange: function (tab) {
        $('#node-input-inject-tabs-content').children().hide()
        $('#' + tab.id).show()
      }
    })

    tabs.addTab({
      id: 'opcuaiiotinject-tab-settings',
      label: this._('opcuaiiotinject.tabs-label.settings')
    })

    tabs.addTab({
      id: 'opcuaiiotinject-tab-addressSpaceItems',
      label: this._('opcuaiiotinject.tabs-label.addressSpaceItems')
    })

    let cacheItemCount = 0
    if (node.addressSpaceItems && node.addressSpaceItems.length > 0) {
      cacheItemCount = node.addressSpaceItems.length
      node.addressSpaceItems.forEach(function (element, index, array) {
        generateItemsEntry(element, index)
      })
    }

    function generateItemsEntry (opcuaItem, id) {
      let container = $('<li/>', {
        style:
          'background: #fefefe; margin:0; padding:8px 0px; border-bottom: 1px solid #ccc;'
      })
      let row = $('<div class="row" id="row' + id + '" />').appendTo(container)

      $('<i style="color: #eee; cursor: move;" class="node-input-addressSpaceItems-handle fa fa-bars"></i>').appendTo(row)

      let itemNameField = $('<input/>', {
        class: 'addressSpaceItemName',
        id: 'node-input-addressSpaceItems-name' + id,
        type: 'text',
        style: 'margin: 0 auto;width:20%;min-width:60px;margin-left:5px',
        placeholder: 'Name'
      }).appendTo(row)

      let itemNodIdField = $('<input/>', {
        class: 'addressSpaceItemNodeId',
        id: 'node-input-addressSpaceItems-nodeId' + id,
        type: 'text',
        style: 'margin: 0 auto;width:43%;min-width:60px;margin-left:5px',
        placeholder: 'ns=0;i=85'
      }).appendTo(row)

      let itemDatatypeField = $('<input/>', {
        class: 'addressSpaceItemDatatype',
        id: 'node-input-addressSpaceItems-datatype' + id,
        type: 'text',
        style: 'margin: 0 auto;width:18%;min-width:60px;margin-left:5px',
        placeholder: 'optional'
      }).appendTo(row)

      itemNameField.val(opcuaItem.name)
      itemNodIdField.val(opcuaItem.nodeId)
      itemDatatypeField.val(opcuaItem.datatypeName)

      let finalspan = $('<span/>', {style: 'float: right;margin-right: 10px;'}).appendTo(row)

      let lookupItemButton = $('<a/>', {
        href: '#',
        id: 'node-button-inject-datatypes' + id,
        class: 'editor-button editor-button-small listButton',
        style: 'margin-top: 7px; margin-left: 5px;'
      }).appendTo(finalspan)

      lookupItemButton.click(function () {
        let datatypesLookupButton = $('#node-button-inject-datatypes' + id)
        let datatypeLookupField = $('#row' + id + ' #node-input-addressSpaceItems-datatype'  + id)

        datatypesLookupButton.addClass('disabled')

        $.getJSON('/opcuaIIoT/plain/DataTypeIds', function (data) {
          datatypesLookupButton.removeClass('disabled')
          node.datatypeNames = []

          $.each(data, function (i, datatypeName) {
            node.datatypeNames.push(datatypeName)
          })

          datatypeLookupField.autocomplete({
            source: node.datatypeNames,
            minLength: 0,
            close: function (event, ui) {
              datatypeLookupField.autocomplete('destroy')
            }
          }).autocomplete('search', '')
        })
      })

      $('<i/>', {class: 'fa fa-search'}).appendTo(lookupItemButton)

      let removeItemButton = $('<a/>', {
        href: '#',
        id: 'node-button-inject-remove' + id,
        class: 'editor-button editor-button-small listButton',
        style: 'margin-top: 7px; margin-left: 5px;'
      }).appendTo(finalspan)

      $('<i/>', {class: 'fa fa-remove'}).appendTo(removeItemButton)

      removeItemButton.click(function () {
        container.fadeOut(300, function () {
          $(this).remove()
        })
      })

      $('#node-input-addressSpaceItems-container').append(container)
    }

    $('#node-input-addressSpaceItems-container').sortable({
      axis: 'y',
      handle: '.node-input-addressSpaceItems-handle',
      cursor: 'move'
    })

    $('#node-input-addressSpaceItems-container .node-input-addressSpaceItems-handle').disableSelection()

    $('#node-input-addressSpaceItems-add').click(function () {
      if(!cacheItemCount || cacheItemCount < 0) {
        cacheItemCount = 0
      }
      generateItemsEntry({name: '', nodeId: '', datatypeName: ''}, cacheItemCount++) // length is every time one more than index
      $('#node-input-addressSpaceItems-container-div').scrollTop($('#node-input-addressSpaceItems-container-div').get(0).scrollHeight)
    })

    function switchDialogResize () {
      let rows = $('#dialog-form>div:not(.node-input-addressSpaceItems-container-row)')
      let height = $('#dialog-form').height()

      rows.each(function (index, row) {
        height -= row.outerHeight(true)
      })

      let editorRow = $('#dialog-form>div.node-input-addressSpaceItems-container-row')
      height -= (parseInt(editorRow.css('marginTop')) + parseInt(editorRow.css('marginBottom')))
      $('#node-input-addressSpaceItems-container-div').css('height', height + 'px')
    }

    $('#dialog').on('dialogresize', switchDialogResize)

    $('#dialog').on('dialogopen', function (ev) {
      let size = $('#dialog').dialog('option', 'sizeCache-switch')
      if (size) {
        $('#dialog').dialog('option', 'width', size.width)
        $('#dialog').dialog('option', 'height', size.height)
        switchDialogResize()
      } else {
        setTimeout(switchDialogResize, 10)
      }
    })

    $('#dialog').on('dialogclose', function (ev, ui) {
      $('#dialog').off('dialogresize', switchDialogResize)
    })

    // console.log('well done editprepare ...')
  }
  injectNode.oneditsave = function () {
    let node = this
    let repeat = ''
    let crontab = ''
    let type = $('#opcuaiiotinject-time-type-select').val()

    if (type === 'interval') {
      crontab = ''
      let count = $('#opcuaiiotinject-time-interval-count').val()
      let units = $('#opcuaiiotinject-time-interval-units').val()

      if (units === 's') {
        repeat = count
      } else {
        if (units === 'n') {
          repeat = count / 1000
        } else if (units === 'm') {
          repeat = count * 60
        } else if (units === 'h') {
          repeat = count * 60 * 60
        }
      }
    } else if (type === 'interval-time') {
      repeat = ''
      let count = $('#opcuaiiotinject-time-interval-time-units').val()
      let startTime = Number($('#opcuaiiotinject-time-interval-time-start').val())
      let endTime = Number($('#opcuaiiotinject-time-interval-time-end').val())

      let days = $('#opcuaiiotinject-time-interval-time-days  input[type=checkbox]:checked').map(function (_, el) {
        return $(el).val()
      }).get()

      if (days.length === 0) {
        crontab = ''
      } else {
        if (days.length === 7) {
          days = '*'
        } else {
          days = days.join(',')
        }

        let timerange = ''

        if (endTime === 0) {
          timerange = startTime + '-23'
        } else if (startTime + 1 < endTime) {
          timerange = startTime + '-' + (endTime - 1)
        } else if (startTime + 1 === endTime) {
          timerange = startTime
        } else {
          let startpart = ''
          let endpart = ''

          if (startTime === 23) {
            startpart = '23'
          } else {
            startpart = startTime + '-23'
          }

          if (endTime === 1) {
            endpart = '0'
          } else {
            endpart = '0-' + (endTime - 1)
          }

          timerange = startpart + ',' + endpart
        }

        if (count === '0') {
          crontab = count + ' ' + timerange + ' * * ' + days
        } else {
          crontab = '*/' + count + ' ' + timerange + ' * * ' + days
        }
      }
    } else if (type === 'time') {
      let time = $('#opcuaiiotinject-time-time').val()
      let days = $('#opcuaiiotinject-time-time-days  input[type=checkbox]:checked').map(function (_, el) {
        return $(el).val()
      }).get()

      if (days.length === 0) {
        crontab = ''
      } else {
        if (days.length === 7) {
          days = '*'
        } else {
          days = days.join(',')
        }

        let parts = time.split(':')
        repeat = ''
        crontab = parts[1] + ' ' + parts[0] + ' * * ' + days
      }
    }

    $('#node-input-repeat').val(repeat)
    $('#node-input-crontab').val(crontab)

    let cacheItems = $('#node-input-addressSpaceItems-container').children()
    node.addressSpaceItems = []

    cacheItems.each(function () {
        node.addressSpaceItems.push({
          name: $(this).find('.addressSpaceItemName').val(),
          nodeId: $(this).find('.addressSpaceItemNodeId').val(),
          datatypeName: $(this).find('.addressSpaceItemDatatype').val()
        })
    })

    // console.log('well done editsave ...')
  }
  injectNode.label = function () {
    let suffix = ''

    if (this.once) {
      suffix = ' ¹'
    }

    let hasRepeat = ( this.repeat && this.repeat !== 'none' )
    if (hasRepeat || this.crontab) {
      suffix = suffix + ' ↻'
    }

    if (this.name) {
      return this.name + suffix
    }

    switch (this.payloadType) {
      case 'string':
      case 'str':
      case 'num':
      case 'bool':
      case 'json':
        if (this.topic !== '' && (this.topic.length + this.payload.length) <= 32) {
          return this.topic + ':' + this.payload + suffix
        } else if (this.payload.length > 0 && this.payload.length < 24) {
          return this.payload + suffix
        }
        return this._('opcuaiiotinject.inject') + suffix
      case 'date':
        if (this.topic !== '' && this.topic.length <= 16) {
          return this.topic + ':' + this._('opcuaiiotinject.timestamp') + suffix
        }
        return this._('opcuaiiotinject.timestamp') + suffix
      default:
        if (this.payloadType === 'flow' && this.payload.length < 19) {
          return 'flow.' + this.payload + suffix
        } else if (this.payloadType === 'global' && this.payload.length < 17) {
          return 'global.' + this.payload + suffix
        }
        return this._('opcuaiiotinject.inject') + suffix
    }
  }

  injectNode.labelStyle = function () {
    return this.name ? 'node_label_italic' : ''
  } </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Inject'>
 <div class='form-row'> <ul style='background:#fff;min-width:600px;margin-bottom:20px' id='node-input-inject-tabs'></ul>
 </div> <div id='node-input-inject-tabs-content' style='min-height:170px'> <div id='opcuaiiotinject-tab-settings' 
style='display:none'> <div class='form-row' id='node-inject-type'> <label for=''><i class='fa fa-list'></i> <span 
data-i18n='opcuaiiotinject.label.injectType'></span></label> <select id='node-input-injectType' type='text' 
style='width:140px'> <option value='inject' data-i18n='opcuaiiotinject.type-label.inject'></option> <option 
value='read' data-i18n='opcuaiiotinject.type-label.read'></option> <option value='write' 
data-i18n='opcuaiiotinject.type-label.write'></option> <option value='listen' 
data-i18n='opcuaiiotinject.type-label.listen'></option> </select> </div> <div class='form-row' id='input-payload-row'> 
<label for='node-input-payload'><i class='fa fa-envelope'></i> <span id='input-label-payload' 
data-i18n='opcuaiiotinject.label.payload'></span> <span id='input-label-listener' 
data-i18n='opcuaiiotinject.label.interval'></span> </label> <input type='text' id='node-input-payload' 
style='width:70%'> <input type='hidden' id='node-input-payloadType'> </div> <div class='form-row'> <label 
for='node-input-topic'><i class='icon-tag'></i> <span data-i18n='node-red:common.label.topic'></span></label> <input 
type='text' id='node-input-topic'> </div> <div class='form-row' id='node-delay'> <label for='node-input-startDelay'><i 
class='fa fa-clock-o'></i> <span data-i18n='opcuaiiotinject.startDelay'></span></label> <input type='text' 
id='node-input-startDelay' placeholder='10' style='width:60px'> <span data-i18n='opcuaiiotinject.startDelayAddon'>
</span> </div> <div class='form-row' id='node-once'> <label for='node-input-once' style='width:160px'> <i 
class='fa fa-power-off'></i> <span data-i18n='opcuaiiotinject.onstart'></span></label> <input type='checkbox' 
id='node-input-once' style='width:40px'> </div> <div class='form-row'> <label for=''><i class='fa fa-repeat'></i> <span 
data-i18n='opcuaiiotinject.label.repeat'></span></label> <select id='opcuaiiotinject-time-type-select'> <option 
value='none' data-i18n='opcuaiiotinject.none'></option> <option value='interval' data-i18n='opcuaiiotinject.interval'>
</option> <option value='interval-time' data-i18n='opcuaiiotinject.interval-time'></option> <option value='time' 
data-i18n='opcuaiiotinject.time'></option> </select> <input type='hidden' id='node-input-repeat'> <input type='hidden' 
id='node-input-crontab'> </div> <div class='form-row opcuaiiotinject-time-row hidden' 
id='opcuaiiotinject-time-row-interval'> <span data-i18n='opcuaiiotinject.every'></span> <input 
id='opcuaiiotinject-time-interval-count' class='opcuaiiotinject-time-count' value='500'> <select style='width:140px' 
id='opcuaiiotinject-time-interval-units'> <option value='n' data-i18n='opcuaiiotinject.milliseconds'></option> <option 
value='s' data-i18n='opcuaiiotinject.seconds'></option> <option value='m' data-i18n='opcuaiiotinject.minutes'></option> 
<option value='h' data-i18n='opcuaiiotinject.hours'></option> </select><br> </div> <div 
class='form-row opcuaiiotinject-time-row hidden' id='opcuaiiotinject-time-row-interval-time'> <span 
data-i18n='opcuaiiotinject.every'></span> <select style='width:90px' id='opcuaiiotinject-time-interval-time-units' 
class='opcuaiiotinject-time-int-count' value='1'> <option value='1'>1</option> <option value='2'>2</option> <option 
value='3'>3</option> <option value='4'>4</option> <option value='5'>5</option> <option value='6'>6</option> <option 
value='10'>10</option> <option value='12'>12</option> <option value='15'>15</option> <option value='20'>20</option> 
<option value='30'>30</option> <option value='0'>60</option> </select> <span data-i18n='opcuaiiotinject.minutes'></span>
<br> <span data-i18n='opcuaiiotinject.between'></span> <select id='opcuaiiotinject-time-interval-time-start' 
class='opcuaiiotinject-time-times'></select> <span data-i18n='opcuaiiotinject.and'></span> <select 
id='opcuaiiotinject-time-interval-time-end' class='opcuaiiotinject-time-times'></select><br> <div 
id='opcuaiiotinject-time-interval-time-days' class='opcuaiiotinject-time-days'> <div 
style='display:inline-block vertical-align: topmargin-right:5px' data-i18n='opcuaiiotinject.on'>on</div> <div 
style='display:inline-block'> <div> <label><input type='checkbox' checked='checked' value='1'> <span 
data-i18n='opcuaiiotinject.days.0'></span></label> <label><input type='checkbox' checked='checked' value='2'> <span 
data-i18n='opcuaiiotinject.days.1'></span></label> <label><input type='checkbox' checked='checked' value='3'> <span 
data-i18n='opcuaiiotinject.days.2'></span></label> </div> <div> <label><input type='checkbox' checked='checked' 
value='4'> <span data-i18n='opcuaiiotinject.days.3'></span></label> <label><input type='checkbox' checked='checked' 
value='5'> <span data-i18n='opcuaiiotinject.days.4'></span></label> <label><input type='checkbox' checked='checked' 
value='6'> <span data-i18n='opcuaiiotinject.days.5'></span></label> </div> <div> <label><input type='checkbox' 
checked='checked' value='0'> <span data-i18n='opcuaiiotinject.days.6'></span></label> </div> </div> </div> </div> <div 
class='form-row opcuaiiotinject-time-row hidden' id='opcuaiiotinject-time-row-time'> <span 
data-i18n='opcuaiiotinject.at'></span> <input id='opcuaiiotinject-time-time' value='12:00'><br> <div 
id='opcuaiiotinject-time-time-days' class='opcuaiiotinject-time-days'> <div 
style='display:inline-block vertical-align: topmargin-right: 5px'>on </div> <div style='display:inline-block'> <div> 
<label><input type='checkbox' checked='checked' value='1'> <span data-i18n='opcuaiiotinject.days.0'></span></label> 
<label><input type='checkbox' checked='checked' value='2'> <span data-i18n='opcuaiiotinject.days.1'></span></label> 
<label><input type='checkbox' checked='checked' value='3'> <span data-i18n='opcuaiiotinject.days.2'></span></label> 
</div> <div> <label><input type='checkbox' checked='checked' value='4'> <span data-i18n='opcuaiiotinject.days.3'></span>
</label> <label><input type='checkbox' checked='checked' value='5'> <span data-i18n='opcuaiiotinject.days.4'></span>
</label> <label><input type='checkbox' checked='checked' value='6'> <span data-i18n='opcuaiiotinject.days.5'></span>
</label> </div> <div> <label><input type='checkbox' checked='checked' value='0'> <span 
data-i18n='opcuaiiotinject.days.6'></span></label> </div> </div> </div> </div> <div class='form-row'> <label 
for='node-input-name'><i class='fa fa-tag'></i> <span data-i18n='node-red:common.label.name'></span></label> <input 
type='text' id='node-input-name' data-i18n='[placeholder]node-red:common.label.name'> </div> <div class='form-tips' 
data-i18n='[html]opcuaiiotinject.tip'></div> </div> <div id='opcuaiiotinject-tab-addressSpaceItems' 
style='display:none'> <div class='form-row node-input-addressSpaceItems-container-row' style='margin-bottom:0'> <div 
id='node-input-addressSpaceItems-container-div' 
style='box-sizing:border-box;border-radius:5px;height:480px;padding:5px;border:1px solid #ccc;overflow-y:scroll'> <ol 
id='node-input-addressSpaceItems-container' style='list-style-type:none;margin:0 auto;width:95%;margin-left:20px'></ol> 
</div> </div> <div class='form-row'> <a href='#' class='editor-button editor-button-small' 
id='node-input-addressSpaceItems-add' style='margin-top:4px'><i class='fa fa-plus'></i> <span 
data-i18n='opcuaiiotinject.label.addButton'></span></a> </div> </div> </div> </script> <script type='text/x-red' 
data-help-name='OPCUA-IIoT-Inject'> <h2>OPC UA IIoT Inject</h2> <p>
The modified Inject node is designed to provide some unique features you need to create beautiful flows.</p> <p>
Pressing the button on the left side of the node builds an inject object to read, browse, listen or write by the OPC UA IIoT nodes.
</p> <h2>Configuration</h2> <h3>Tab Settings</h3> <strong>Type</strong> <p>
Set that type to prepare the correct value for injects.</p> <strong>Payload/Interval</strong> <p>
There is an option to send a JSON payload inject into the Listener.</p> <p>Example:</p> <p><pre>
{ "interval": 500, "queueSize": 10 }</pre></p> <div> <h5>msg.payload.options<h5> <strong>
event subscription parameters default: <pre>
        msg.payload.options = {
            requestedPublishingInterval: 100,
            requestedLifetimeCount: 60,
            requestedMaxKeepAliveCount: 10,
            maxNotificationsPerPublish: 4,
            publishingEnabled: true,
            priority: 3
        }
        </pre> <strong>subscription parameters default: <pre>
        msg.payload.options = {
            requestedPublishingInterval: 100,
            requestedLifetimeCount: 1000,
            requestedMaxKeepAliveCount: 12,
            maxNotificationsPerPublish: 100,
            publishingEnabled: true,
            priority: 6
        }
        </pre> </strong></strong></h5></h5></div> <p>
If the Inject-Type is set to read/write, then the value is a standard payload to transport your data.</p> <strong>Topic
</strong> <p>The topic is to group for queues or protocols like MQTT.</p> <strong>Repeat</strong> <p>
With the repeat settings you can set a cron configuration.</p> <p>
The interval settings needs a short delay on start. This is equal to the once option but without any inject at to start working.
</p> <strong>Inject once at start</strong> <p>
The 'Delay sec. at start' has to be set to a minimum for starting injects toward the OPC UA server.</p> <p>
All activities will start ever <strong>after</strong> the start inject is done.</p> <p>
I did a contribute to Node-RED to provide that delay at start from Node-RED 0.18 inject too.</p> <strong>Name</strong> 
<p>Name in the flow of Node-RED.</p> <h3>Tab OPC UA Items</h3> <strong>Name (optional)</strong> <p>
A short human readable name for long or numeric nodeId's.</p> <strong>Node-Id (mandatory)</strong> <p>
The Node-Id has to be an OPC UA valid Node-Id like ns=0;i=85 (root->Objects)</p> <p>
You can use our Browser node for OPC UA to find the correct Node-Id.</p> <strong>Data Type (mandatory/optional)</strong>
 <p>The Data Type setting is needed to do the converts of the node-opcua Variant type result(s).</p> <p>
It is mandatory to write data otherwise it is optional!</p> <p>
In best practice do transformations with the Result Filter node.</p> <div> <strong>Content of an inject:</strong> <ul> 
<li>payload (value or options for listener) </li><li>topic </li><li>nodetype (inject, read, write, listen) </li><li>
injectType (inject) </li><li>addressSpaceItems (Array of nodeId's) </li></ul> </div> </script> 
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Node] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Node', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      injectType: {value: "", required: true},
      nodeId: {value: "", required: true},
      datatype: {value: ""},
      value: {value: ""},
      name: {value: ""},
      topic: {value: ""},
      showErrors: {value: false}
    },
    inputs: 1,
    outputs: 1,
    align: "left",
    icon: "icon.png",
    label: function () {
      return this.name || "Node";
    },
    labelStyle: function () {
      return this.name ? "node_label_italic" : "";
    },
    oneditprepare: function () {
      let node = this
      node.lookupItems = []

      let datatypeLookupButton = $("#node-lookup-datatype")
      let datatypeField = $("#node-input-datatype")

      datatypeLookupButton.on("click", function () {
        datatypeLookupButton.addClass('disabled')
        $.getJSON('/opcuaIIoT/list/DataTypeIds', function (data) {
          datatypeLookupButton.removeClass('disabled')
          node.lookupItems = []

          $.each(data, function (i, entry) {
            node.lookupItems.push({value: entry.nodeId, label: entry.label})
          })

          datatypeField.autocomplete({
            source: node.lookupItems,
            minLength: 0,
            focus: function (event, ui) {
              datatypeField.val(ui.item.label);
              return false;
            },
            select: function (event, ui) {
              datatypeField.val(ui.item.label)
              return false;
            },
            close: function (event, ui) {
              datatypeField.autocomplete("destroy")
            }
          }).autocomplete("search", "")
        })
      })

      $('#node-input-injectType').change(function () {
        if ($(this).val() !== 'write') {
          $('node-input-value').hide()
        } else {
          $('node-input-value').show()
        }
      })
    }
  }); </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Node'>
 <div class='form-row' id='node-inject-type'> <label for=''><i class='fa fa-repeat'></i> <span 
data-i18n='opcua-iiot-contrib.label.injectType'></span></label> <select id='node-input-injectType' type='text' 
style='width:140px'> <option value='inject' data-i18n='opcua-iiot-contrib.type-label.inject'></option> <option 
value='read' data-i18n='opcua-iiot-contrib.type-label.read'></option> <option value='write' 
data-i18n='opcua-iiot-contrib.type-label.write'></option> <option value='listen' 
data-i18n='opcua-iiot-contrib.type-label.listen'></option> </select> </div> <div class='form-row'> <label 
for='node-input-nodeId'><i class='icon-tasks'></i> <span data-i18n='opcua-iiot-contrib.label.nodeId'></span></label> 
<input type='text' id='node-input-nodeId' placeholder='ns=1;s=MySwitch or ns=1;i=1234'> </div> <div class='form-row'> 
<label for='node-input-datatype'><i class='icon-search'></i> <span data-i18n='opcua-iiot-contrib.label.datatype'></span>
</label> <input type='text' id='node-input-datatype' style='width:40%' placeholder='i=2041'> <a 
id='node-lookup-datatype' class='btn'><i id='node-lookup-topic-icon' class='fa fa-search'></i></a> </div> <div 
class='form-row'> <label for='node-input-value'><i class='icon-tag'></i> <span 
data-i18n='opcua-iiot-contrib.label.value'></span></label> <input type='text' id='node-input-value' placeholder=''> 
</div> <div class='form-row'> <label for='node-input-topic'><i class='icon-tag'></i> <span 
data-i18n='node-red:common.label.topic'></span></label> <input type='text' id='node-input-topic' placeholder=''> </div> 
<div class='form-row'> <label for='node-input-name'><i class='fa fa-tag'></i> <span 
data-i18n='node-red:common.label.name'></span></label> <input type='text' id='node-input-name' placeholder=''> </div> 
<hr> <div class='form-row'> <label style='min-width:160px' for='node-input-showErrors'><i 
class='fa fa-exclamation-circle'></i> <span data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input 
type='checkbox' id='node-input-showErrors' style='max-width:30px'> </div> </script> <script type='text/x-red' 
data-help-name='OPCUA-IIoT-Node'> <h2>OPC UA IIoT Node</h2> <p>
The Node is to set up a flow with the Node-RED Inject node to give the OPC UA injectType, nodeId, and parameters.</p> 
<h3>Input</h3> <div> <strong>Event message:</strong> <ul> <li>payload (Value) </li><li>topic (Node-Id) </li></ul> </div>
 <h3>Output</h3> <div> <strong>Event message:</strong> <ul> <li>payload (payload or value) </li><li>topic (Node-Id) 
</li><li>datatype (node-opcua/OPC UA data type string) </li><li>nodetype (node) </li></ul> </div> <strong>Value</strong>
 <p>
The value input is for writing a fixed value to the given OPC UA Node-Id. It overrides the given payload if it is not null. The value has to be in the ring of the data type.
</p> <strong>Name</strong> <p>Name in the flow of Node-RED.</p> </script> 
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Event] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Event', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      eventType: {value: 'i=2041', required: true},
      eventTypeLabel: {value: 'BaseTypeEvent'},
      resultType: {value: 'basic'},
      queueSize: {value: 1, required: true, validate: RED.validators.number()},
      usingListener: {value: false},
      name: {value: ''},
      showStatusActivities: {value: false},
      showErrors: {value: false}
    },
    inputs: 1,
    outputs: 1,
    align: 'left',
    icon: 'icon.png',
    label: function () {
      return this.name || 'Event'
    },
    labelStyle: function () {
      return this.name ? 'node_label_italic' : ''
    },
    oneditprepare: function () {
      let node = this
      node.lookupItems = []

      let eventTypeLookupField = $("#node-lookup-eventType")
      let eventTypeField = $("#node-input-eventType")
      let eventTypeLabelField = $("#node-input-eventTypeLabel")

      eventTypeLookupField.click(function () {
        eventTypeLookupField.addClass('disabled')
        $.getJSON('/opcuaIIoT/list/EventTypeIds', function (data) {
          eventTypeLookupField.removeClass('disabled')
          node.lookupItems = []

          $.each(data, function (i, entry) {
            node.lookupItems.push({value: entry.nodeId, label: entry.label})
          })

          eventTypeField.autocomplete({
            source: node.lookupItems,
            minLength: 0,
            focus: function (event, ui) {
              eventTypeField.val(ui.item.label);
              return false;
            },
            select: function (event, ui) {
              eventTypeField.val(ui.item.label)
              eventTypeLabelField.val(ui.item.label + ' (' + ui.item.value + ')')
              return false;
            },
            close: function (event, ui) {
              eventTypeField.autocomplete("destroy")
            }
          }).autocomplete("search", "")
        })
      })
    }
  }) </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Event'>
 <div class='form-row'> <label for='node-input-eventType'><i class='icon-search'></i> <span 
data-i18n='opcua-iiot-contrib.label.eventType'></span></label> <input type='text' id='node-input-eventType' 
style='width:40%' placeholder='i=2041'> <a id='node-lookup-eventType' class='btn'><i id='node-lookup-topic-icon' 
class='fa fa-search'></i></a> <div style='margin:20px auto;margin-left:103px'> <p><input type='text' 
id='node-input-eventTypeLabel' style='width:80%' readonly='readonly'></p> <p><span 
data-i18n='opcua-iiot-contrib.label.lookupUseHint'></span></p> </div> </div> <div class='form-row' 
id='node-inject-resultType'> <label for=''><i class='fa fa-list'></i> <span 
data-i18n='opcua-iiot-contrib.label.resultType'></span></label> <select id='node-input-resultType' type='text' 
style='width:140px'> <option value='basic' data-i18n='opcua-iiot-contrib.resulttype.label.basic'></option> <option 
value='condition' data-i18n='opcua-iiot-contrib.resulttype.label.condition'></option> <option value='state' 
data-i18n='opcua-iiot-contrib.resulttype.label.state'></option> <option value='all' 
data-i18n='opcua-iiot-contrib.resulttype.label.all'></option> </select> </div> <div class='form-row'> <label 
for='node-input-queueSize'><i class='icon-time'></i> <span data-i18n='opcua-iiot-contrib.label.queueSize'></span>
</label> <input type='number' id='node-input-queueSize' placeholder=''> </div> <div class='form-row'> <label 
for='node-input-name'><i class='fa fa-tag'></i> <span data-i18n='node-red:common.label.name'></span></label> <input 
type='text' id='node-input-name' placeholder=''> </div> <hr> <div class='form-row'> <label style='min-width:160px' 
for='node-input-usingListener'><i class='fa fa-assistive-listening-systems'></i> <span 
data-i18n='opcua-iiot-contrib.label.usingListener'></span></label> <input type='checkbox' id='node-input-usingListener' 
style='max-width:30px'> </div> <hr> <div class='form-row'> <label style='min-width:160px' 
for='node-input-showStatusActivities'><i class='fa fa-bolt'></i> <span 
data-i18n='opcua-iiot-contrib.label.showActivities'></span></label> <input type='checkbox' 
id='node-input-showStatusActivities' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showErrors'><i class='fa fa-exclamation-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input type='checkbox' id='node-input-showErrors' 
style='max-width:30px'> </div> </script>  <script type='text/x-red' data-help-name='OPCUA-IIoT-Event'>
 <h2>OPC UA IIoT Event</h2> <p>
 The Event node is to set up an event listener with parameters. It is to trigger by an Inject of Node-RED or by the OPC UA IIoT Inject. It could also trigger with incoming events from other nodes. 
</p> <h3>Input</h3> <p>msg with addressSpaceItems</p> <h3>Output</h3> <div> <strong>Event message:</strong> <ul> <li>
payload (number/Object) <ul> <li>eventType (ObjectTypeId) </li><li>eventFilter (Array of conditions or events) <ul> <li>
selectClause (Array) </li><li>whereClause (Object) </li></ul> </li><li>eventFields (Array) </li><li>queueSize (counter) 
</li><li>interval (number msec.) <ul> <li>topic </li><li>nodetype (events) </li></ul> </li></ul></li></ul></div> 
<strong>Name</strong> <p>Name in the flow of Node-RED.</p> </script>
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Listener] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Listener', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      connector: {type: 'OPCUA-IIoT-Connector', required: true},
      action: {value: 'subscribe', required: true},
      queueSize: {value: 10, required: true, validate: RED.validators.number()},
      name: {value: ''},
      topic: {value: ''},
      justValue: {value: true},
      useGroupItems: {value: false},
      showStatusActivities: {value: false},
      showErrors: {value: false}
    },
    inputs: 1,
    outputs: 1,
    align: 'left',
    icon: 'icon.png',
    label: function () {
      return this.name || 'Listener'
    },
    labelStyle: function () {
      return this.name ? 'node_label_italic' : ''
    }
  }) </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Listener'>
 <div class='form-row'> <label for='node-input-connector'><i class='icon-globe'></i> <span 
data-i18n='opcua-iiot-contrib.label.connector'></span></label> <input type='text' id='node-input-connector' 
placeholder='opc.tcp://localhost:4334'> </div> <div class='form-row'> <label for='node-input-action'><i 
class='fa fa-list'></i> <span data-i18n='opcua-iiot-contrib.label.actiontype'></span></label> <select type='text' 
id='node-input-action' style='width:72%'> <option value='subscribe' selected='selected'>Monitoring</option> <option 
value='events'>Alarm&amp;Events</option> </select> </div> <div class='form-row'> <label for='node-input-queueSize'><i 
class='icon-list'></i> <span data-i18n='opcua-iiot-contrib.label.queueSize'></span></label> <input type='number' 
id='node-input-queueSize' placeholder=''> </div> <div class='form-row'> <label for='node-input-name'><i 
class='fa fa-tag'></i> <span data-i18n='node-red:common.label.name'></span></label> <input type='text' 
id='node-input-name' placeholder=''> </div> <div class='form-row'> <label for='node-input-topic'><i class='fa fa-tag'>
</i> <span data-i18n='node-red:common.label.topic'></span></label> <input type='text' id='node-input-topic'> </div> <hr>
 <div class='form-row'> <label style='min-width:160px' for='node-input-useGroupItems'><i class='fa fa-object-group'></i>
 <span data-i18n='opcua-iiot-contrib.label.useGroupItems'></span></label> <input type='checkbox' 
id='node-input-useGroupItems' style='max-width:30px'> </div> <div class='form-row'> <label style='min-width:160px' 
for='node-input-justValue'><i class='fa fa-simplybuilt'></i> <span data-i18n='opcua-iiot-contrib.label.justValue'>
</span></label> <input type='checkbox' id='node-input-justValue' style='max-width:30px'> </div> <hr> <div 
class='form-row'> <label style='min-width:160px' for='node-input-showStatusActivities'><i class='fa fa-bolt'></i> <span 
data-i18n='opcua-iiot-contrib.label.showActivities'></span></label> <input type='checkbox' 
id='node-input-showStatusActivities' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showErrors'><i class='fa fa-exclamation-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input type='checkbox' id='node-input-showErrors' 
style='max-width:30px'> </div> </script>  <script type='text/x-red' data-help-name='OPCUA-IIoT-Listener'>
 <h2>OPC UA IIoT Listener</h2> <p>
The Listener node is to set up monitoring to the address space or Alarm&amp;Events of your OPC UA server. It needs only one inject to set up start monitoring. For every inject, it works like flip-flop - subscribe-unsubscribe monitoring or Alarm&amp;Events.
</p> <h3>Input</h3> <div> <strong>Input:</strong> <ul> <li>payload (number*/Object) <ul> <li>interval (number*) </li>
<li>queueSize (number) </li><li>options (Object) </li></ul> </li><li>topic </li><li>nodetype (inject) </li><li>
injectType (listen/browse*) </li><li>addressSpaceItems or addressItemsToRead* (Array of Objects) </li></ul> </div> <h4>
Inject payload JSON</h4> <p>There is an option to send a JSON payload inject into the Listener.</p> <p>Example:</p> <p>
<pre>      {
        "interval": 500,
        "queueSize": 10,
        "options": {
            "requestedPublishingInterval": 5000,
            "requestedLifetimeCount": 60,
            "requestedMaxKeepAliveCount": 10,
            "maxNotificationsPerPublish": 5,
            "publishingEnabled": true,
            "priority": 8
      }
    }
    </pre></p> <p>
The option interval means the sampling interval. If you want to set the publishing interval you have to send a bit more options.
</p> <div> <h5>msg.payload.options<h5> <strong>event subscription parameters default: <pre>
        msg.payload.options = {
            requestedPublishingInterval: 100,
            requestedLifetimeCount: 60,
            requestedMaxKeepAliveCount: 10,
            maxNotificationsPerPublish: 4,
            publishingEnabled: true,
            priority: 3
        }
        </pre> <strong>subscription parameters default: <pre>
        msg.payload.options = {
            requestedPublishingInterval: 100,
            requestedLifetimeCount: 1000,
            requestedMaxKeepAliveCount: 12,
            maxNotificationsPerPublish: 100,
            publishingEnabled: true,
            priority: 6
        }
        </pre> </strong></strong></h5></h5></div> <p>
The sampling interval and the publishing interval is to tell you want to sample every n interval in msec. and it should publish every n msec.
</p> <p>
Example: interval: 200, queueSize: 5, and requestedPublishingInterval: 1000 samples every 200 msec. and publishing changes every second (1000 msec.) with max. 5 values
</p> <h3>Output 1</h3> <h4>All Mode</h4> <div> <strong>Result in message:</strong> <ul> <li>payload (object) </li><li>
topic </li><li>addressSpaceItems (Array) </li><li>nodetype </li><li>injectType </li><li>readtype </li><li>
result (origin from node-opcua) </li><li>mode (all/value) </li></ul> </div> <h4>Value Mode</h4> <div> <strong>
Result in subscribe message:</strong> <ul> <li>payload <ul> <li>name </li><li>nodeId </li><li>value </li></ul> </li><li>
topic </li><li>addressSpaceItems (Array) </li><li>injectType </li><li>readtype </li><li>mode (all/value) </li></ul> 
</div> <h3>Output 2</h3> <p>That output provides the origin from node-opcua as JSON.</p> <strong>Name</strong> <p>
Name in the flow of Node-RED.</p> <p>Set showErrors to get errors from node-opcua on browse.</p> </script>
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Read] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Read', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      attributeId: {value: 0, required: true, validate: RED.validators.number()},
      maxAge: {value: 1, validate: RED.validators.number()},
      depth: {value: 1, validate: RED.validators.number()},
      connector: {type: 'OPCUA-IIoT-Connector', required: true},
      name: {value: ''},
      justValue: {value: true},
      showStatusActivities: {value: false},
      showErrors: {value: false},
      parseStrings: {value: false},
      historyDays: {value: 1}
    },
    inputs: 1,
    outputs: 1,
    align: 'left',
    icon: 'icon.png',
    label: function () {
      return this.name || 'Read'
    },
    labelStyle: function () {
      return this.name ? 'node_label_italic' : ''
    },
    oneditprepare: function () {
      try {
        let depthRow = $("#node-input-depth-row")
        let historyRow = $("#node-input-history-row")

        if (parseInt(this.attributeId) === 99) {
          depthRow.show();
        } else {
          depthRow.hide();
        }

        let attributeIdCheckbox = $("#node-input-attributeId")

        attributeIdCheckbox.change(function () {
          if ($(this).val() === "99") {
            depthRow.show()
          } else {
            depthRow.hide()
          }

          if ($(this).val() === "130") {
            historyRow.show()
          } else {
            historyRow.hide()
          }
        })
      } catch
        (err) {
        this.error(err);
      }
    }
  }) </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Read'>
 <div class='form-row' style='min-width:640px'> <label for='node-input-connector'><i class='icon-globe'></i> <span 
data-i18n='opcua-iiot-contrib.label.connector'></span></label> <input type='text' id='node-input-connector'> </div> <div
 class='form-row'> <!-- AttributeId via REST --> <label for='node-input-attributeId'><i class='fa fa-tasks'></i> <span 
data-i18n='opcua-iiot-contrib.label.attributeId'></span></label> <select type='text' id='node-input-attributeId'> 
<option value='0'>All</option> <option value='1'>Node-ID</option> <option value='2'>Node-Class</option> <option 
value='3'>Browse-Name</option> <option value='4'>Display-Name</option> <option value='13'>Value</option> <option 
value='130'>History</option> </select> </div> <div id='node-input-history-row'> <div class='form-row'> <label 
for='node-input-historyDays'><i class='icon-calendar'></i> <span data-i18n='opcua-iiot-contrib.label.historyDays'>
</span></label> <input type='text' id='node-input-historyDays' placeholder='1'> </div> </div> <div class='form-row'> 
<label for='node-input-maxAge'><i class='fa fa-clock-o'></i> <span data-i18n='opcua-iiot-contrib.label.maxAge'></span>
</label> <input type='text' id='node-input-maxAge' placeholder='1'> </div> <div class='form-row' 
id='node-input-depth-row'> <label for='node-input-depth'><i class='icon-random'></i> <span 
data-i18n='opcua-iiot-contrib.label.depth'></span></label> <input type='text' id='node-input-depth' placeholder='1'> 
</div> <div class='form-row'> <label for='node-input-name'><i class='fa fa-tag'></i> <span 
data-i18n='node-red:common.label.name'></span></label> <input type='text' id='node-input-name' placeholder='Name'> 
</div> <hr> <div class='form-row'> <label style='min-width:160px' for='node-input-parseStrings'><i class='fa fa-th'></i>
 <span data-i18n='opcua-iiot-contrib.label.parseStrings'></span></label> <input type='checkbox' 
id='node-input-parseStrings' style='max-width:30px'> </div> <div class='form-row'> <label style='min-width:160px' 
for='node-input-justValue'><i class='fa fa-simplybuilt'></i> <span data-i18n='opcua-iiot-contrib.label.justValue'>
</span></label> <input type='checkbox' id='node-input-justValue' style='max-width:30px'> </div> <hr> <div 
class='form-row'> <label style='min-width:160px' for='node-input-showStatusActivities'><i class='fa fa-bolt'></i> <span 
data-i18n='opcua-iiot-contrib.label.showActivities'></span></label> <input type='checkbox' 
id='node-input-showStatusActivities' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showErrors'><i class='fa fa-exclamation-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input type='checkbox' id='node-input-showErrors' 
style='max-width:30px'> </div> </script>  <script type='text/x-red' data-help-name='OPCUA-IIoT-Read'>
 <h2>OPC UA IIoT Read</h2> <p>
The Read node is for polling data from the OPC UA server. It handles a single data request and multiple data requests. The multiple Node-Id inject will request and produce an array of address space data. An individual Node-Id inject reads just a value and sends it via payload.
</p> <h3>Input read</h3> <div> <ul> <li>nodesToRead or addressSpaceItems (Array of Objects with property nodeId) </li>
<li>payload (optional) <ul> <li>maxAge (number) </li><li>historyStart (date) </li><li>historyEnd (date) </li></ul> </li>
</ul> </div> <p>OPC UA results containing nodesToRead and Injects sending addressSpaceItems.</p> <h3>Output</h3> <p>
Please use the Result Filter node to handle the output of the Read node.</p> <div> <p>Results of request in message:</p>
 <ul> <li>payload (Array/Object or String if not to parse) <ul> <li>results </li><li>nodesToRead </li></ul> </li><li>
topic </li><li>nodetype </li><li>readtype </li><li>attributeId </li><li>
resultsConverted (Array/Object of results or null if not to parse) </li></ul> </div> <strong> <span 
data-i18n='opcua-iiot-contrib.label.maxAge'></span> </strong> <p>
 Maximum age of the value to be read in milliseconds. (see <a 
href='http://node-opcua.github.io/api_doc/classes/ReadRequest.html' target='_blank'>node-opcua API</a>) </p> <strong> 
<span data-i18n='opcua-iiot-contrib.label.depth'></span> </strong> <p>
The depth to read for example components. (see node-opcua API)</p> <strong>Name</strong> <p>
Name in the flow of Node-RED.</p> <strong> <span data-i18n='opcua-iiot-contrib.label.justValue'></span> </strong> <p>
With that option, the node does not send an object on out two for less CPU load.</p> <p>
Set showErrors to get errors from node-opcua on browse.</p> </script>
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Write] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Write', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      connector: {type: "OPCUA-IIoT-Connector", required: true},
      name: {value: ""},
      justValue: {value: true},
      showStatusActivities: {value: false},
      showErrors: {value: false}
    },
    inputs: 1,
    outputs: 1,
    align: "right",
    icon: "icon.png",
    label: function () {
      return this.name || "Write";
    },
    labelStyle: function () {
      return this.name ? "node_label_italic" : "";
    }
  }); </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Write'>
 <div class='form-row' style='min-width:640px'> <label for='node-input-connector'><i class='icon-globe'></i> <span 
data-i18n='opcua-iiot-contrib.label.connector'></span></label> <input type='text' id='node-input-connector'> </div> <div
 class='form-row'> <label for='node-input-name'><i class='fa fa-tag'></i> <span data-i18n='node-red:common.label.name'>
</span></label> <input type='text' id='node-input-name' placeholder='Name'> </div> <hr> <div class='form-row'> <label 
style='min-width:160px' for='node-input-justValue'><i class='fa fa-simplybuilt'></i> <span 
data-i18n='opcua-iiot-contrib.label.justValue'></span></label> <input type='checkbox' id='node-input-justValue' 
style='max-width:30px'> </div> <hr> <div class='form-row'> <label style='min-width:160px' 
for='node-input-showStatusActivities'><i class='fa fa-bolt'></i> <span 
data-i18n='opcua-iiot-contrib.label.showActivities'></span></label> <input type='checkbox' 
id='node-input-showStatusActivities' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showErrors'><i class='fa fa-exclamation-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input type='checkbox' id='node-input-showErrors' 
style='max-width:30px'> </div> </script>  <script type='text/x-red' data-help-name='OPCUA-IIoT-Write'>
 <h2>OPC UA IIoT Write</h2> <p>
The Write node is for sending data to the OPC UA server. It handles a single data request and multiple data requests. All write requests will produce an array of StatusCodes for writing in amount as applied for and responded.
</p> <p>It needs a <pre>msg.valuesToWrite</pre>
 to write values and datatypeName in the addressSpaceItems objects is required.</p> <p>
Every entry in the addressSpaceItems corresponding to each array place in msg.valuesToWrite. That means addressSpaceItem[0] will write the data from msg.valuesToWrite[0]!
</p> <p>
It is important to have the injectType write in the msg object! That is to protect your flow in event based flows.</p> 
<h3>Input</h3> <ul> <li>payload (value to write one or all)</li> <li>topic</li> <li>
addressSpaceItems or nodesToWrite (Array of Node-Ids) </li><li>nodetype (inject)</li> <li>injectType (write) </li><li>
valuesToWrite (Array of values or objects to write individual)</li> </ul> <h3>Output</h3> <p>Results in message:</p> 
<ul> <li>payload</li> <ul> <li>statusCodes (Array of Status Codes) </li><li>nodesToWrite (Array of Node-Id)</li> </ul> 
<li>topic </li><li>nodetype (write)</li> <li>resultsConverted (Array) </li></ul> <p>
Set showErrors to get errors from node-opcua on browse.</p> </script>
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Response] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Response', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      name: {value: ""},
      compressStructure: {value: true},
      showStatusActivities: {value: false},
      showErrors: {value: false},
      activateUnsetFilter: {value: false},
      activateFilters: {value: false},
      negateFilter: {value: false},
      filters: {value: []},
    },
    inputs: 1,
    outputs: 1,
    align: "left",
    icon: "icon.png",
    label: function () {
      let suffix = ''
      if (this.compressStructure) {
        suffix += ' ☇'
      }
      if (this.activateUnsetFilter) {
        suffix += ' ø'
      }
      if (this.activateFilters) {
        suffix += (this.negateFilter) ? ' ⊄' : ' ⊂'
      }
      return (this.name) ? this.name + suffix : "Response" + suffix;
    },
    labelStyle: function () {
      return this.name ? "node_label_italic" : "";
    },
    oneditprepare: function () {
      let node = this
      let cacheItemCount = 0

      let tabs = RED.tabs.create({
        id: "node-input-response-tabs",
        onchange: function (tab) {
          $("#node-input-response-tabs-content").children().hide()
          $("#" + tab.id).show()
        }
      })

      tabs.addTab({
        id: "opcuaiiot-response-tab-settings",
        label: this._("opcua-iiot-contrib.tabs-label.settings")
      })

      tabs.addTab({
        id: "opcuaiiot-response-tab-filter",
        label: this._("opcua-iiot-contrib.tabs-label.filter")
      })

      // Filter Management
      if(node.filters && node.filters.length > 0) {
        cacheItemCount = node.filters.length
        node.filters.forEach(function(element, index, array) {
          generateFilterEntry(element, index);
        })
      }

      function generateFilterEntry(filter, id) {
        let container = $('<li/>', {
          style:
            'background: #fefefe; margin:0; padding:8px 0px; border-bottom: 1px solid #ccc;'
        })
        let row = $('<div class="row" id="row' + id + '" />').appendTo(container)

        $('<i style="color: #eee; cursor: move;" class="node-input-addressSpaceItems-handle fa fa-bars"></i>').appendTo(row)

        let filterNameField = $('<input/>', {
          id: "node-input-response-filter-name" + id,
          class: 'opcuaFilterName',
          type: "text",
          style: "margin-left:5px;width:240px;",
          placeholder: 'nodeId'
        }).appendTo(row)

        let filterValueField = $('<input/>', {
          id: "node-input-response-filter-value" + id,
          class: 'opcuaFilterValue',
          type: "text",
          style: "margin: 0 auto;width:45%;min-width:60px;margin-left:5px",
          placeholder: 'ns=0*'
        }).appendTo(row)

        filterNameField.val(filter.name)
        filterValueField.val(filter.value)

        let finalspan = $('<span/>', {style: 'float: right;margin-right: 10px;'}).appendTo(row)

        let lookupItemButton = $('<a/>', {
          href: '#',
          id: 'node-button-response-filter-types' + id,
          class: 'editor-button editor-button-small listButton',
          style: 'margin-top: 7px; margin-left: 5px;'
        }).appendTo(finalspan)

        lookupItemButton.click(function () {
          let filterLookupButton = $('#node-button-response-filter-types' + id)
          let filterNameLookupField = $('#row' + id + ' #node-input-response-filter-name'  + id)

          filterLookupButton.addClass('disabled')

          $.getJSON('/opcuaIIoT/list/FilterTypes', function (data) {
            filterLookupButton.removeClass('disabled')
            node.lookupItems = []

            $.each(data, function (i, entry) {
              node.lookupItems.push({name: entry.name, label: entry.label})
            })

            filterNameLookupField.autocomplete({
              source: node.lookupItems,
              minLength: 0,
              focus: function (event, ui) {
                filterNameLookupField.val(ui.item.name)
                return false;
              },
              select: function (event, ui) {
                filterNameLookupField.val(ui.item.name)
                return false;
              },
              close: function (event, ui) {
                filterNameLookupField.autocomplete("destroy")
              }
            }).autocomplete("search", "")
          })
        })

        $('<i/>', {class: 'fa fa-search'}).appendTo(lookupItemButton)

        let removeItemButton = $('<a/>', {
          href: '#',
          id: 'node-button-response-filter-remove' + id,
          class: 'editor-button editor-button-small listButton',
          style: 'margin-top: 7px; margin-left: 5px;'
        }).appendTo(finalspan)

        $('<i/>', {class: 'fa fa-remove'}).appendTo(removeItemButton)

        removeItemButton.click(function () {
          container.fadeOut(300, function () {
            $(this).remove()
          })
        })

        $('#node-input-response-filter-container').append(container)
      }

      $("#node-input-response-filter-container").sortable({
        axis: "y",
        handle: ".node-input-response-filter-handle",
        cursor: "move"
      });

      $("#node-input-response-filter-container .node-input-response-filter-handle").disableSelection()

      $("#node-input-response-filter-add").click(function () {
        if(!cacheItemCount || cacheItemCount < 0) {
          cacheItemCount = 0
        }
        generateFilterEntry({ name: '', value: '' }, cacheItemCount++) // length is every time one more than index
        let responseContainerDiv = $("#node-input-response-filter-container-div")
        responseContainerDiv.scrollTop(responseContainerDiv.get(0).scrollHeight)
      })

      function switchDialogResize() {
        switchFilterDialogResize()
      }

      // dialog Filter handling
      function switchFilterDialogResize() {
        let rows = $("#dialog-form>div:not(.node-input-response-filter-container-row)")
        let height = $("#dialog-form").height()

        rows.each(function (index, row) {
          height -= row.outerHeight(true)
        })

        let editorRow = $("#dialog-form>div.node-input-response-filter-container-row")
        height -= (parseInt(editorRow.css("marginTop")) + parseInt(editorRow.css("marginBottom")))
        $("#node-input-response-filter-container-div").css("height", height + "px")
      }

      let dialogHandle = $("#dialog")
      dialogHandle.on("dialogresize", switchDialogResize)

      dialogHandle.on("dialogopen", function (ev) {
        let size = dialogHandle.dialog('option', 'sizeCache-switch')
        if (size) {
          dialogHandle.dialog('option', 'width', size.width)
          dialogHandle.dialog('option', 'height', size.height)
          switchDialogResize()
        } else {
          setTimeout(switchDialogResize, 10)
        }
      })

      dialogHandle.on("dialogclose", function (ev, ui) {
        dialogHandle.off("dialogresize", switchDialogResize)
      })
    },
    oneditsave: function () {
      let node = this

      let cacheFilters = $("#node-input-response-filter-container").children()
      node.filters = []
      cacheFilters.each(function () {
        node.filters.push({
          name: $(this).find('.opcuaFilterName').val(),
          value: $(this).find('.opcuaFilterValue').val(),
        })
      })
    }
  }); </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Response'>
 <div class='form-row'> <ul style='background:#fff;min-width:600px;margin-bottom:20px' id='node-input-response-tabs'>
</ul> </div> <div id='node-input-response-tabs-content' style='min-height:170px'> <div 
id='opcuaiiot-response-tab-settings' style='display:none'> <div class='form-row' style='min-width:640px'> <label 
for='node-input-name'><i class='fa fa-tag'></i> <span data-i18n='node-red:common.label.name'></span></label> <input 
type='text' id='node-input-name' placeholder=''> </div> <div class='form-row'> <label style='min-width:160px' 
for='node-input-compressStructure'><i class='fa fa-simplybuilt'></i> <span 
data-i18n='opcua-iiot-contrib.label.compressStructure'></span></label> <input type='checkbox' 
id='node-input-compressStructure' style='max-width:30px'> </div> 
<!-- StatusCodes to add and remove to filter for in a second output --> <hr> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showStatusActivities'><i class='fa fa-bolt'></i> <span 
data-i18n='opcua-iiot-contrib.label.showActivities'></span></label> <input type='checkbox' 
id='node-input-showStatusActivities' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showErrors'><i class='fa fa-exclamation-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input type='checkbox' id='node-input-showErrors' 
style='max-width:30px'> </div> </div> <div id='opcuaiiot-response-tab-filter' style='display:none'> <h4><span 
data-i18n='opcua-iiot-contrib.label.filters'></span></h4> <div class='form-row'> <label style='min-width:160px' 
for='node-input-activateUnsetFilter'><i class='fa fa-filter'></i> <span 
data-i18n='opcua-iiot-contrib.label.activateUnsetFilter'></span></label> <input type='checkbox' 
id='node-input-activateUnsetFilter' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-activateFilters'><i class='fa fa-check-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.activateFilters'></span></label> <input type='checkbox' 
id='node-input-activateFilters' style='max-width:30px'> </div> <div class='form-row'> <label style='min-width:160px' 
for='node-input-negateFilter'><i class='fa fa-minus-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.negateFilter'></span></label> <input type='checkbox' id='node-input-negateFilter' 
style='max-width:30px'> </div> <div class='form-row node-input-response-filter-container-row' style='margin-bottom:0'> 
<div id='node-input-response-filter-container-div' 
style='box-sizing:border-box;border-radius:5px;height:480px;padding:5px;border:1px solid #ccc;overflow-y:scroll'> <ol 
id='node-input-response-filter-container' style='list-style-type:none;margin:0'></ol> </div> </div> <div 
class='form-row'> <a href='#' class='editor-button editor-button-small' id='node-input-response-filter-add' 
style='margin-top:4px'><i class='fa fa-plus'></i> <span data-i18n='opcua-iiot-contrib.label.addButton'></span></a> 
</div> </div> </div></script>  <script type='text/x-red' data-help-name='OPCUA-IIoT-Response'>
 <h2>OPC UA IIoT Response</h2> <p>
There is a compress option to get compressed data with less optional data in msg objects.</p> <p>
The Response node shows you the response data from your request in categories of Good, Bad, and Other.</p> <h3>Input
</h3> <p>Output message from client nodes like Read, Write, Listener, and Browser</p> <h3>Output</h3> <p>
The output is the input message including the entry status Array ( msg.entryStatus [Good, Bad, Other]).</p> <p>
Set showErrors to get errors from node-opcua on browse.</p> </script>
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Browser] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Browser', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      nodeId: {value: ""},
      name: {value: ""},
      justValue: {value: true},
      sendNodesToRead: {value: false},
      sendNodesToBrowser: {value: false},
      sendNodesToListener: {value: false},
      multipleOutputs: {value: false},
      showStatusActivities: {value: false},
      showErrors: {value: false},
      recursiveBrowse: {value: false},
      recursiveDepth: {value: 1},
      delayPerMessage: {value: 0.2},

      connector: {type: "OPCUA-IIoT-Connector", required: true}
    },
    inputs: 1,
    outputs: 1,
    align: "left",
    icon: "icon.png",
    label: function () {
      return this.name || "Browser";
    },
    labelStyle: function () {
      return this.item ? "node_label_italic" : "";
    },
    oneditprepare: function () {
      let node = this
      node.lookupItems = []
      let nodeIdLookupButton = $("#node-lookup-nodeId")
      let nodeIdField = $("#node-input-nodeId")

      nodeIdLookupButton.on("click", function () {
        nodeIdLookupButton.addClass('disabled')
        let rootid = nodeIdField.val() || 'ns=0;i=84' // root
        $.getJSON('/opcuaIIoT/browse/'+ node.id + '/' + encodeURIComponent(rootid), function (data) {
          nodeIdLookupButton.removeClass('disabled')
          node.lookupItems = []

          $.each(data, function (i, entry) {
            node.lookupItems.push({value: entry.nodeId, label: entry.displayName.text})
          })

          nodeIdField.autocomplete({
            source: node.lookupItems,
            minLength: 0,
            focus: function (event, ui) {
              nodeIdField.val(ui.item.label);
              return false;
            },
            select: function (event, ui) {
              nodeIdField.val(ui.item.value)
              return false;
            },
            close: function (event, ui) {
              nodeIdField.autocomplete("destroy")
            }
          }).autocomplete("search", "")
        })
      })

      let tabs = RED.tabs.create({
        id: "node-input-browser-tabs",
        onchange: function (tab) {
          $("#node-input-browser-tabs-content").children().hide()
          $("#" + tab.id).show()
        }
      })

      tabs.addTab({
        id: "opcuaiiot-browser-tab-settings",
        label: this._("opcua-iiot-contrib.tabs-label.settings")
      })

      tabs.addTab({
        id: "opcuaiiot-browser-tab-browse",
        label: this._("opcua-iiot-contrib.tabs-label.browser")
      })
    }
  }); </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Browser'>
 <div class='form-row'> <ul style='background:#fff;min-width:600px;margin-bottom:20px' id='node-input-browser-tabs'>
</ul> </div> <div id='node-input-browser-tabs-content' style='min-height:170px'> <div 
id='opcuaiiot-browser-tab-settings' style='display:none'> <div class='form-row' style='min-width:640px'> <label 
for='node-input-connector'><i class='icon-globe'></i> <span data-i18n='opcua-iiot-contrib.label.connector'></span>
</label> <input type='text' id='node-input-connector'> </div> <div class='form-row'> <label for='node-input-name'><i 
class='fa fa-tag'></i> <span data-i18n='node-red:common.label.name'></span></label> <input type='text' 
id='node-input-name' placeholder='Name'> </div> <hr> <div class='form-row'> <label style='min-width:160px' 
for='node-input-justValue'><i class='fa fa-simplybuilt'></i> <span data-i18n='opcua-iiot-contrib.label.justValue'>
</span></label> <input type='checkbox' id='node-input-justValue' style='max-width:30px'> </div> <div class='form-row'> 
<label style='min-width:160px' for='node-input-sendNodesToRead'><i class='fa fa-th'></i> <span 
data-i18n='opcua-iiot-contrib.label.sendNodesToRead'></span></label> <input type='checkbox' 
id='node-input-sendNodesToRead' style='max-width:30px'> </div> <div class='form-row'> <label style='min-width:160px' 
for='node-input-sendNodesToListener'><i class='fa fa-th'></i> <span 
data-i18n='opcua-iiot-contrib.label.sendNodesToListener'></span></label> <input type='checkbox' 
id='node-input-sendNodesToListener' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-sendNodesToBrowser'><i class='fa fa-th'></i> <span 
data-i18n='opcua-iiot-contrib.label.sendNodesToBrowser'></span></label> <input type='checkbox' 
id='node-input-sendNodesToBrowser' style='max-width:30px'> </div> <div class='form-row'> <label style='min-width:160px' 
for='node-input-multipleOutputs'><i class='fa fa-object-group'></i> <span 
data-i18n='opcua-iiot-contrib.label.multipleOutputs'></span></label> <input type='checkbox' 
id='node-input-multipleOutputs' style='max-width:30px'> </div> <hr> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showStatusActivities'><i class='fa fa-bolt'></i> <span 
data-i18n='opcua-iiot-contrib.label.showActivities'></span></label> <input type='checkbox' 
id='node-input-showStatusActivities' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showErrors'><i class='fa fa-exclamation-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input type='checkbox' id='node-input-showErrors' 
style='max-width:30px'> </div> </div> <div id='opcuaiiot-browser-tab-browse' style='display:none'> <div 
class='form-row'> <div style='margin:15px'> <span data-i18n='opcua-iiot-contrib.label.lookupUseHint'></span> </div> 
</div> <div class='form-row'> <label for='node-input-nodeId'><i class='icon-search'></i> <span 
data-i18n='opcua-iiot-contrib.label.nodeId'></span></label> <input type='text' id='node-input-nodeId' style='width:40%' 
placeholder='ns=0;i=84'> <a id='node-lookup-nodeId' class='btn'><i id='node-lookup-topic-icon' class='fa fa-search'></i>
</a> </div> <div class='form-row'> <label for='node-input-recursiveBrowse'><i class='icon-repeat'></i> <span 
data-i18n='opcua-iiot-contrib.label.recursiveBrowse'></span></label> <input type='checkbox' 
id='node-input-recursiveBrowse' style='max-width:30px'> </div> <div class='form-row'> <label 
for='node-input-recursiveDepth'><i class='icon-tag'></i> <span data-i18n='opcua-iiot-contrib.label.recursiveDepth'>
</span></label> <input type='text' id='node-input-recursiveDepth' placeholder='1' style='max-width:80px'> </div> <div 
class='form-row'> <label for='node-input-delayPerMessage'><i class='icon-time'></i> <span 
data-i18n='opcua-iiot-contrib.label.delayPerMessage'></span></label> <input type='text' id='node-input-delayPerMessage' 
placeholder='0.2' style='max-width:80px'> sec. </div> </div> </div> 
<!-- TODO: ReferenceTypeIds List to add or remove reference types to browse for --> </script> <script type='text/x-red' 
data-help-name='OPCUA-IIoT-Browser'> @browser-data-help <h2>OPC UA IIoT Browser</h2> <p>
Use the Browser to browse OPC UA address spaces. It normally starts with the root folder or object by using an OPC UA Node-Id like ns=0;i=85 (root->Objects). It also can get a state to start at any desired Node-Id as a root within the address space.
</p> <h3>Configuration</h3> <p>
The browser tab inside the configuration section is used to set a default starting OPC UA Node-Id.</p><p> </p><p>
Use the lookup button to browse for Node-Id's. (needs a deploy first) Empty the input text box to start from root again.
</p> <h3>Examples</h3> <a href='https://github.com/biancode/node-red-contrib-iiot-opcua/blob/master/examples/' 
target='_blank'>GitHub Browser example flow</a> <p>
You'll find the examples under Node-RED menu > Import > Examples > iiot opcua</p> <h3>Input</h3> <p>
The input could be empty or should hold addressSpaceItems (Array of objects) to browse for. A datatype is not required here - it just requires the nodeId in the addressSpaceItems objects here.
</p> <p>
With the multiple outputs option, the output gets spilt into one message per addressSpaceItem sent from the previous node and an extra message if a Node-Id is configured in the Browser tab. The delay per msg option helps to get some time between every msg outputs.
</p> <h3>Recursive Browse</h3> <p>
Sometime you need to browse into structure and the crawler gets too much data. In that case you could try to work with the recursive browse if the server allows that operation. It does not work in any case, but it helps to build some better results for you.
</p> <h3>Output</h3> <p>
The output returns either a structured JSON object with the requested data or the error messages from node-opcua.</p> 
<div> <strong>Content of a browse result:</strong> <ul> <li>payload (value) <ul> <li>rootNodeId </li><li>
browserResults (Array of Objects) </li><li>browserResultsCount </li><li>recursiveBrowse </li><li>recursiveDepth </li>
<li>recursiveDepthMax </li><li>listenerParameters </li><li>browseTopic (node browse root) </li><li>
addressSpaceItems (input) </li></ul> </li><li>justValue </li><li>topic </li><li>nodetype (browse) </li><li>
injectType (inject) </li><li>addressSpaceItems (Array of Objects to browse) </li><li>optional <ul> <li>
nodesToRead (Array of String resluts to read) </li><li>nodesToReadCount </li><li>
addressItemsToRead (Array of Object results to listen) </li><li>addressItemsToReadCount </li><li>
addressItemsToBrowse (Array of Object results to browse) </li><li>addressItemsToBrowseCount </li></ul> </li></ul> </div>
 <h3> Defaults </h3> <p> </p> <strong>Name</strong> <p>Name in the flow of Node-RED.</p> <p>
Set showErrors to get errors from node-opcua on browse.</p> </script> 
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Crawler] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Crawler', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      connector: {type: "OPCUA-IIoT-Connector", required: true},
      name: {value: ""},
      justValue: {value: true},
      singleResult: {value: false},
      showStatusActivities: {value: false},
      showErrors: {value: false},
      activateUnsetFilter: {value: false},
      activateFilters: {value: false},
      negateFilter: {value: false},
      filters: {value: []},
      delayPerMessage: {value: 0.2},
      timeout: {value: 30},
    },
    inputs: 1,
    outputs: 1,
    align: "left",
    icon: "icon.png",
    label: function () {
      return this.name || "Crawler";
    },
    labelStyle: function () {
      return this.item ? "node_label_italic" : "";
    },
    oneditprepare: function () {
      let node = this
      let cacheItemCount = 0

      let tabs = RED.tabs.create({
        id: "node-input-crawler-tabs",
        onchange: function (tab) {
          $("#node-input-crawler-tabs-content").children().hide()
          $("#" + tab.id).show()
        }
      })

      tabs.addTab({
        id: "opcuaiiot-crawler-tab-settings",
        label: this._("opcua-iiot-contrib.tabs-label.settings")
      })

      tabs.addTab({
        id: "opcuaiiot-crawler-tab-filter",
        label: this._("opcua-iiot-contrib.tabs-label.filter")
      })

      // Filter Management
      if(node.filters && node.filters.length > 0) {
        cacheItemCount = node.filters.length
        node.filters.forEach(function(element, index, array) {
          generateFilterEntry(element, index);
        })
      }

      function generateFilterEntry(filter, id) {
        let container = $('<li/>', {
          style:
            'background: #fefefe; margin:0; padding:8px 0px; border-bottom: 1px solid #ccc;'
        })
        let row = $('<div class="row" id="row' + id + '" />').appendTo(container)

        $('<i style="color: #eee; cursor: move;" class="node-input-addressSpaceItems-handle fa fa-bars"></i>').appendTo(row)

        let filterNameField = $('<input/>', {
          id: "node-input-crawler-filter-name" + id,
          class: 'opcuaFilterName',
          type: "text",
          style: "margin-left:5px;width:240px;",
          placeholder: 'nodeClass'
        }).appendTo(row)

        let filterValueField = $('<input/>', {
          id: "node-input-crawler-filter-value" + id,
          class: 'opcuaFilterValue',
          type: "text",
          style: "margin: 0 auto;width:45%;min-width:60px;margin-left:5px",
          placeholder: 'Object*'
        }).appendTo(row)

        filterNameField.val(filter.name)
        filterValueField.val(filter.value)

        let finalspan = $('<span/>', {style: 'float: right;margin-right: 10px;'}).appendTo(row)

        let lookupItemButton = $('<a/>', {
          href: '#',
          id: 'node-button-crawler-filter-types' + id,
          class: 'editor-button editor-button-small listButton',
          style: 'margin-top: 7px; margin-left: 5px;'
        }).appendTo(finalspan)

        lookupItemButton.click(function () {
          let filterLookupButton = $('#node-button-crawler-filter-types' + id)
          let filterNameLookupField = $('#row' + id + ' #node-input-crawler-filter-name'  + id)

          filterLookupButton.addClass('disabled')

          $.getJSON('/opcuaIIoT/list/FilterTypes', function (data) {
            filterLookupButton.removeClass('disabled')
            node.lookupItems = []

            $.each(data, function (i, entry) {
              node.lookupItems.push({name: entry.name, label: entry.label})
            })

            filterNameLookupField.autocomplete({
              source: node.lookupItems,
              minLength: 0,
              focus: function (event, ui) {
                filterNameLookupField.val(ui.item.name)
                return false;
              },
              select: function (event, ui) {
                filterNameLookupField.val(ui.item.name)
                return false;
              },
              close: function (event, ui) {
                filterNameLookupField.autocomplete("destroy")
              }
            }).autocomplete("search", "")
          })
        })

        $('<i/>', {class: 'fa fa-search'}).appendTo(lookupItemButton)

        let removeItemButton = $('<a/>', {
          href: '#',
          id: 'node-button-crawler-filter-remove' + id,
          class: 'editor-button editor-button-small listButton',
          style: 'margin-top: 7px; margin-left: 5px;'
        }).appendTo(finalspan)

        $('<i/>', {class: 'fa fa-remove'}).appendTo(removeItemButton)

        removeItemButton.click(function () {
          container.fadeOut(300, function () {
            $(this).remove()
          })
        })

        $('#node-input-crawler-filter-container').append(container)
      }

      $("#node-input-crawler-filter-container").sortable({
        axis: "y",
        handle: ".node-input-crawler-filter-handle",
        cursor: "move"
      });

      $("#node-input-crawler-filter-container .node-input-crawler-filter-handle").disableSelection()

      $("#node-input-crawler-filter-add").click(function () {
        if(!cacheItemCount || cacheItemCount < 0) {
          cacheItemCount = 0
        }
        generateFilterEntry({ name: '', value: '' }, cacheItemCount++) // length is every time one more than index
        let crawlerContainerDiv = $("#node-input-crawler-filter-container-div")
        crawlerContainerDiv.scrollTop(crawlerContainerDiv.get(0).scrollHeight)
      })

      function switchDialogResize() {
        switchFilterDialogResize()
      }

      // dialog Filter handling
      function switchFilterDialogResize() {
        let rows = $("#dialog-form>div:not(.node-input-crawler-filter-container-row)")
        let height = $("#dialog-form").height()

        rows.each(function (index, row) {
          height -= row.outerHeight(true)
        })

        let editorRow = $("#dialog-form>div.node-input-crawler-filter-container-row")
        height -= (parseInt(editorRow.css("marginTop")) + parseInt(editorRow.css("marginBottom")))
        $("#node-input-crawler-filter-container-div").css("height", height + "px")
      }

      let dialogHandle = $("#dialog")
      dialogHandle.on("dialogresize", switchDialogResize)

      dialogHandle.on("dialogopen", function (ev) {
        let size = dialogHandle.dialog('option', 'sizeCache-switch')
        if (size) {
          dialogHandle.dialog('option', 'width', size.width)
          dialogHandle.dialog('option', 'height', size.height)
          switchDialogResize()
        } else {
          setTimeout(switchDialogResize, 10)
        }
      })

      dialogHandle.on("dialogclose", function (ev, ui) {
        dialogHandle.off("dialogresize", switchDialogResize)
      })
    },
    oneditsave: function () {
      let node = this

      let cacheFilters = $("#node-input-crawler-filter-container").children()
      node.filters = []
      cacheFilters.each(function () {
        node.filters.push({
          name: $(this).find('.opcuaFilterName').val(),
          value: $(this).find('.opcuaFilterValue').val(),
        })
      })
    }
  }); </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Crawler'>
 <div class='form-row'> <ul style='background:#fff;min-width:600px;margin-bottom:20px' id='node-input-crawler-tabs'>
</ul> </div> <div id='node-input-crawler-tabs-content' style='min-height:170px'> <div 
id='opcuaiiot-crawler-tab-settings' style='display:none'> <div class='form-row' style='min-width:640px'> <label 
for='node-input-connector'><i class='icon-globe'></i> <span data-i18n='opcua-iiot-contrib.label.connector'></span>
</label> <input type='text' id='node-input-connector'> </div> <div class='form-row'> <label for='node-input-name'><i 
class='fa fa-tag'></i> <span data-i18n='node-red:common.label.name'></span></label> <input type='text' 
id='node-input-name' placeholder='Name'> </div> <div class='form-row'> <label for='node-input-delayPerMessage'><i 
class='icon-time'></i> <span data-i18n='opcua-iiot-contrib.label.delayPerMessage'></span></label> <input type='text' 
id='node-input-delayPerMessage' placeholder='0.2' style='max-width:80px'> sec. </div> <div class='form-row'> <label 
for='node-input-timeout'><i class='icon-time'></i> <span data-i18n='opcua-iiot-contrib.label.timeout'></span></label> 
<input type='text' id='node-input-timeout' placeholder='30' style='max-width:80px'> sec. </div> <hr> <div 
class='form-row'> <label style='min-width:160px' for='node-input-justValue'><i class='fa fa-simplybuilt'></i> <span 
data-i18n='opcua-iiot-contrib.label.justValue'></span></label> <input type='checkbox' id='node-input-justValue' 
style='max-width:30px'> </div> <div class='form-row'> <label style='min-width:160px' for='node-input-singleResult'><i 
class='fa fa-simplybuilt'></i> <span data-i18n='opcua-iiot-contrib.label.singleResult'></span></label> <input 
type='checkbox' id='node-input-singleResult' style='max-width:30px'> </div> <hr> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showStatusActivities'><i class='fa fa-bolt'></i> <span 
data-i18n='opcua-iiot-contrib.label.showActivities'></span></label> <input type='checkbox' 
id='node-input-showStatusActivities' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showErrors'><i class='fa fa-exclamation-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input type='checkbox' id='node-input-showErrors' 
style='max-width:30px'> </div> </div> <div id='opcuaiiot-crawler-tab-filter' style='display:none'> <h4><span 
data-i18n='opcua-iiot-contrib.label.filters'></span></h4> <div class='form-row'> <label style='min-width:160px' 
for='node-input-activateUnsetFilter'><i class='fa fa-filter'></i> <span 
data-i18n='opcua-iiot-contrib.label.activateUnsetFilter'></span></label> <input type='checkbox' 
id='node-input-activateUnsetFilter' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-activateFilters'><i class='fa fa-check-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.activateFilters'></span></label> <input type='checkbox' 
id='node-input-activateFilters' style='max-width:30px'> </div> <div class='form-row'> <label style='min-width:160px' 
for='node-input-negateFilter'><i class='fa fa-minus-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.negateFilter'></span></label> <input type='checkbox' id='node-input-negateFilter' 
style='max-width:30px'> </div> <div class='form-row node-input-crawler-filter-container-row' style='margin-bottom:0'> 
<div id='node-input-crawler-filter-container-div' 
style='box-sizing:border-box;border-radius:5px;height:480px;padding:5px;border:1px solid #ccc;overflow-y:scroll'> <ol 
id='node-input-crawler-filter-container' style='list-style-type:none;margin:0'></ol> </div> </div> <div 
class='form-row'> <a href='#' class='editor-button editor-button-small' id='node-input-crawler-filter-add' 
style='margin-top:4px'><i class='fa fa-plus'></i> <span data-i18n='opcua-iiot-contrib.label.addButton'></span></a> 
</div> </div> </div> <!-- TODO: ReferenceTypeIds List to add or remove reference types tp browse for --> </script> 
 <script type='text/x-red' data-help-name='OPCUA-IIoT-Crawler'> <h2>OPC UA IIoT Crawler</h2> <p>
Use the Crawler to browse OPC UA address spaces. It normally starts with a root folder or object by using an OPC UA Node-Id like i=85 (root->Objects), but that is not a good practice. Set up folders without crawling the server object and its types in depth.
</p> <h3>Configuration</h3> <p>
The filter tab inside the configuration section is used to filter crawling by properties. You can set your own or use some of the listed properties.
</p><p> </p><h3>Examples</h3> <a href='https://github.com/biancode/node-red-contrib-iiot-opcua/blob/master/examples/' 
target='_blank'>GitHub Crawler example flow</a> <p>
You'll find the examples under Node-RED menu > Import > Examples > iiot opcua</p> <h3>Input</h3> <p>
The input has to receive an addressSpaceItems (Array of objects) to browse for. A datatype or name is not required here - it just requires the nodeId in the addressSpaceItems objects here.
</p> <p>Filter: </p><ul> <li>name => property name to search inside result per item </li><li>
value => regex string to match content </li></ul> <p></p> <h3>Output</h3> <p>
The output returns either a structured JSON object with the requested data or the error messages from node-opcua.</p> 
<strong>Name</strong> <p>Name in the flow of Node-RED.</p> <p>Set showErrors to get errors from node-opcua on browse.
</p> </script>
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Server] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Server', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      port: {value: '55388', required: true},
      endpoint: {value: ''},
      acceptExternalCommands: {value: true},
      maxAllowedSessionNumber: {value: ''},
      maxConnectionsPerEndpoint: {value: ''},
      maxAllowedSubscriptionNumber: {value: ''},
      alternateHostname: {value: ''},
      name: {value: ''},
      showStatusActivities: {value: false},
      showErrors: {value: false},
      asoDemo: {value: true},
      allowAnonymous: {value: true},
      individualCerts: {value: false},
      isAuditing: {value: false},
      serverDiscovery: {value: true},
      users: { value: [] },
      xmlsets: { value: [] },
      publicCertificateFile: {value: ''},
      privateCertificateFile: {value: ''},
      registerServerMethod: {value: 1},
      discoveryServerEndpointUrl: {value: ''},
      capabilitiesForMDNS: {value: ''},
      maxNodesPerRead: {value: 1000, validate:function(v) { return ((v === '') || (RED.validators.number(v) && (v > 0) && (v <= 100000))) }},
      maxNodesPerBrowse: {value: 2000, validate:function(v) { return ((v === '') || (RED.validators.number(v) && (v > 0) && (v <= 200000))) }},
      delayToClose: {value: 1000, validate:function(v) { return ((v === '') || (RED.validators.number(v) && (v >= 100) && (v <= 15000))) }}
    },
    inputs: 1,
    outputs: 1,
    align: 'right',
    icon: 'icon.png',
    label: function () {
      return this.name || 'Demo-Server'
    },
    labelStyle: function () {
      return this.name ? 'node_label_italic' : ''
    },
    oneditprepare: function () {
      let node = this
      node.xmlsetSelect = []
      let cacheItemCount = 0
      let cacheItemCountSet = 0

      let tabs = RED.tabs.create({
        id: "node-input-server-tabs",
        onchange: function (tab) {
          $("#node-input-server-tabs-content").children().hide()
          $("#" + tab.id).show()
        }
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-settings",
        label: this._("opcua-iiot-contrib.tabs-label.settings")
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-limits",
        label: this._("opcua-iiot-contrib.tabs-label.limits")
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-security",
        label: this._("opcua-iiot-contrib.tabs-label.security")
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-users",
        label: this._("opcua-iiot-contrib.tabs-label.users")
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-discovery",
        label: this._("opcua-iiot-contrib.tabs-label.discovery")
      })

      // User Management
      if(node.users && node.users.length > 0) {
        cacheItemCount = node.users.length
        node.users.forEach(function(element, index, array) {
          generateUserEntry(element, index);
        })
      }

      // XML-Set Management
      if(node.xmlsets && node.xmlsets.length > 0) {
        cacheItemCountSet = node.xmlsets.length
        node.xmlsets.forEach(function(element, index, array) {
          generateXMLSetEntry(element, index);
        })
      }

      function generateUserEntry(user, id) {
        let container = $('<li/>', {style:
            "background: #fefefe; margin:0; padding:8px 0px; border-bottom: 1px solid #ccc;"})
        let row = $('<div id="row' + id + '"/>').appendTo(container)

        $('<i style="color: #eee; cursor: move;" class="node-input-server-users-handle fa fa-bars"></i>').appendTo(row)

        let userField = $('<input/>', {
          id: "node-input-server-users-name" + id,
          class: 'opcuaUserName',
          type: "text",
          style: "margin-left:5px;width:160px;",
          placeholder: 'name'
        }).appendTo(row)

        let passwordField = $('<input/>', {
          id: "node-input-server-users-password" + id,
          class: 'opcuaUserPassword',
          type: "password",
          style: "margin: 0 auto;width:55%;min-width:60px;margin-left:5px",
          placeholder: 'password'
        }).appendTo(row)

        userField.val(user.name)
        passwordField.val(user.password)

        let finalspan = $('<span/>', {style: "float: right;margin-right: 10px;"}).appendTo(row)

        let removeUserButton = $('<a/>', {
          href: "#",
          id: 'node-button-user-remove' + id,
          class: "editor-button editor-button-small",
          style: "margin-top: 7px; margin-left: 5px;"
        }).appendTo(finalspan)

        $('<i/>', {class: "fa fa-remove"}).appendTo(removeUserButton)

        removeUserButton.click(function () {
          container.css({"background": "#fee"})
          container.fadeOut(300, function () {
            $(this).remove()
          });
        });

        $("#node-input-server-users-container").append(container)
      }

      function generateXMLSetEntry(xmlset, id) {
        let container = $('<li/>', {style:
            "background: #fefefe; margin:0; padding:8px 0px; border-bottom: 1px solid #ccc;"})
        let row = $('<div id="xmlsetRow' + id + '"/>').appendTo(container)

        $('<i style="color: #eee; cursor: move;" class="node-input-server-xmlsets-handle fa fa-bars"></i>').appendTo(row)

        let nameField = $('<input/>', {
          id: "node-input-server-xmlsets-name" + id,
          type: "text",
          class: 'xmlsetName',
          style: "margin-left:5px;width:75px;",
          placeholder: 'name'
        }).appendTo(row)

        let pathField = $('<input/>', {
          id: "node-input-server-xmlsets-path" + id,
          class: 'xmlsetPath',
          type: "text",
          style: "margin: 0 auto;width:68%;min-width:60px;margin-left:5px",
          placeholder: 'public/vendor/opc-foundation/xml/Opc.ISA95.NodeSet2.xml'
        }).appendTo(row)

        nameField.val(xmlset.name)
        pathField.val(xmlset.path)

        let finalspan = $('<span/>', {style: "float: right;margin-right: 10px;"}).appendTo(row)

        let lookupItemButton = $('<a/>', {
          href: '#',
          id: 'node-button-xmlsets-lookup' + id,
          class: 'editor-button editor-button-small',
          style: 'margin-top: 7px; margin-left: 5px;'
        }).appendTo(finalspan)

        lookupItemButton.click(function () {
          let xmlsetLookupButton = $('#node-button-xmlsets-lookup' + id)
          let xmlsetLookupField = $('#xmlsetRow' + id + ' #node-input-server-xmlsets-path' + id)

          xmlsetLookupButton.addClass('disabled')

          $.getJSON('/opcuaIIoT/xmlsets/public', function (data) {
            xmlsetLookupButton.removeClass('disabled')
            node.xmlsetSelect = []

            $.each(data, function (i, filename) {
              node.xmlsetSelect.push(filename)
            })

            xmlsetLookupField.autocomplete({
              source: node.xmlsetSelect,
              minLength: 0,
              close: function (event, ui) {
                xmlsetLookupField.autocomplete('destroy')
              }
            }).autocomplete('search', '')
          })
        })

        $('<i/>', {class: 'fa fa-search'}).appendTo(lookupItemButton)

        let removeXMLSetButton = $('<a/>', {
          href: "#",
          id: 'node-button-xmlset-remove' + id,
          class: "editor-button editor-button-small",
          style: "margin-top:7px;margin-left:5px;"
        }).appendTo(finalspan)

        $('<i/>', {class: "fa fa-remove"}).appendTo(removeXMLSetButton)

        removeXMLSetButton.click(function () {
          container.css({"background": "#fee"})
          container.fadeOut(300, function () {
            $(this).remove()
          });
        });

        $("#node-input-server-xmlsets-container").append(container)
      }

      $("#node-input-server-users-container").sortable({
        axis: "y",
        handle: ".node-input-server-users-handle",
        cursor: "move"
      });

      $("#node-input-server-xmlsets-container").sortable({
        axis: "y",
        handle: ".node-input-server-xmlsets-handle",
        cursor: "move"
      });

      $("#node-input-server-users-container .node-input-server-users-handle").disableSelection()

      $("#node-input-server-xmlsets-container .node-input-server-xmlsets-handle").disableSelection()

      $("#node-input-server-users-add").click(function () {
        if(!cacheItemCount || cacheItemCount < 0) {
          cacheItemCount = 0
        }
        generateUserEntry({ name: '', password: '' }, cacheItemCount++) // length is every time one more than index
        $("#node-input-server-users-container-div").scrollTop($("#node-input-server-users-container-div").get(0).scrollHeight)
      })

      $("#node-input-server-xmlsets-add").click(function () {
        if(!cacheItemCountSet || cacheItemCountSet < 0) {
          cacheItemCountSet = 0
        }
        generateXMLSetEntry({ name: '', path: '' }, cacheItemCountSet++) // length is every time one more than index
        $("#node-input-server-xmlsets-container-div").scrollTop($("#node-input-server-xmlsets-container-div").get(0).scrollHeight)
      })

      function switchDialogResize() {
        switchUserDialogResize()
        switchXMLSetDialogSetResize()
      }

      // dialog User handling
      function switchUserDialogResize() {
        let rows = $("#dialog-form>div:not(.node-input-server-users-container-row)")
        let height = $("#dialog-form").height()

        rows.each(function (index, row) {
          height -= row.outerHeight(true)
        })

        let editorRow = $("#dialog-form>div.node-input-server-users-container-row")
        height -= (parseInt(editorRow.css("marginTop")) + parseInt(editorRow.css("marginBottom")))
        $("#node-input-server-users-container-div").css("height", height + "px")
      }

      // dialog XML-Set handling
      function switchXMLSetDialogSetResize() {
        let rows = $("#dialogSet-form>div:not(.node-input-server-xmlsets-container-row)")
        let height = $("#dialogSet-form").height()

        rows.each(function (index, row) {
          height -= row.outerHeight(true)
        })

        let editorRow = $("#dialogSet-form>div.node-input-server-xmlsets-container-row")
        height -= (parseInt(editorRow.css("marginTop")) + parseInt(editorRow.css("marginBottom")))
        $("#node-input-server-xmlsets-container-div").css("height", height + "px")
      }

      $("#dialog").on("dialogresize", switchDialogResize)

      $("#dialog").on("dialogopen", function (ev) {
        let size = $("#dialog").dialog('option', 'sizeCache-switch')
        if (size) {
          $("#dialog").dialog('option', 'width', size.width)
          $("#dialog").dialog('option', 'height', size.height)
          switchDialogResize()
        } else {
          setTimeout(switchDialogResize, 10)
        }
      })

      $("#dialog").on("dialogclose", function (ev, ui) {
        $("#dialog").off("dialogresize", switchDialogResize)
      })

      // Certificate Management
      try {
        let certsCheckbox = $("#node-input-individualCerts");
        let configCertFields = $("#node-config-certFiles");

        if (node.individualCerts) {
          certsCheckbox.prop('checked', true);
          configCertFields.show();
        } else {
          certsCheckbox.prop('checked', false);
          configCertFields.hide();
        }

        certsCheckbox.change(function () {
          if ($(this).is(":checked")) {
            configCertFields.show();
          } else {
            configCertFields.hide();
            $('#node-config-input-publicCertificateFile').val('');
            $('#node-config-input-privateKeyFile').val('');
          }
        });

      } catch (err) {
        this.error(err);
      }
    },
    oneditsave: function () {
      let node = this

      let cacheUsers = $("#node-input-server-users-container").children()
      node.users = []
      cacheUsers.each(function () {
        node.users.push({
          name: $(this).find('.opcuaUserName').val(),
          password: $(this).find('.opcuaUserPassword').val(),
        })
      })

      let cacheXMLSets = $('#node-input-server-xmlsets-container').children()
      node.xmlsets = []
      cacheXMLSets.each(function () {
        node.xmlsets.push({
          name: $(this).find('.xmlsetName').val(),
          path: $(this).find('.xmlsetPath').val(),
        })
      })

      // console.log('well done editsave ...')
    }
  }) </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Server'>
 <div class='form-row'> <ul style='background:#fff;min-width:600px;margin-bottom:20px' id='node-input-server-tabs'></ul>
 </div> <div id='node-input-server-tabs-content' style='min-height:170px'> <div id='opcuaiiot-server-tab-settings' 
style='display:none'> <div class='form-row'> <label for='node-input-port'><i class='fa fa-fort-awesom'></i> <span 
data-i18n='opcua-iiot-contrib.label.port'></span></label> 
<!-- dynamic Ports from 49152 to 65535 (c000hex bis FFFFhex) --> <input type='text' id='node-input-port' 
placeholder='Ports 49152 bis 65535 (c000hex bis FFFFhex)'> </div> <div class='form-row'> <label 
for='node-input-endpoint'><i class='icon-tasks'></i> <span data-i18n='opcua-iiot-contrib.label.endpoint'></span></label>
 <input type='text' id='node-input-endpoint' placeholder='UA/NodeREDIIoTServer'> </div> <div class='form-row'> <label 
for='node-input-alternateHostname'><i class='fa fa-server'></i> <span 
data-i18n='opcua-iiot-contrib.label.alternateHostname'></span></label> <input type='text' 
id='node-input-alternateHostname' placeholder=''> </div> <hr> <div class='form-row'> <label 
for='node-input-delayToClose'><i class='icon-time'></i> <span data-i18n='opcua-iiot-contrib.label.delayToClose'></span>
</label> <input type='text' id='node-input-delayToClose' placeholder='1000' style='width:80px'> </div> <div 
class='form-row'> <label for='node-input-name'><i class='fa fa-tag'></i> <span data-i18n='node-red:common.label.name'>
</span></label> <input type='text' id='node-input-name' placeholder=''> </div> <hr> <div class='form-row'> <label 
style='min-width:160px' for='node-input-isAuditing'><i class='fa fa-th'></i> <span 
data-i18n='opcua-iiot-contrib.label.isAuditing'></span></label> <input type='checkbox' id='node-input-isAuditing' 
style='max-width:30px'> </div> <div class='form-row'> <label style='min-width:160px' for='node-input-asoDemo'><i 
class='fa fa-th'></i> <span data-i18n='opcua-iiot-contrib.label.asoDemo'></span></label> <input type='checkbox' 
id='node-input-asoDemo' style='max-width:30px'> </div> <hr> <div class='form-row'> <label style='min-width:160px' 
for='node-input-showStatusActivities'><i class='fa fa-bolt'></i> <span 
data-i18n='opcua-iiot-contrib.label.showActivities'></span></label> <input type='checkbox' 
id='node-input-showStatusActivities' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showErrors'><i class='fa fa-exclamation-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input type='checkbox' id='node-input-showErrors' 
style='max-width:30px'> </div> </div> <div id='opcuaiiot-server-tab-limits' style='display:none'> <div class='form-row'>
 <label for='node-input-maxAllowedSessionNumber'><i class='icon-list'></i> <span 
data-i18n='opcua-iiot-contrib.label.maxAllowedSessionNumber'></span></label> <input type='text' 
id='node-input-maxAllowedSessionNumber' placeholder='10' style='width:80px'> </div> <div class='form-row'> <label 
for='node-input-maxConnectionsPerEndpoint'><i class='icon-list'></i> <span 
data-i18n='opcua-iiot-contrib.label.maxConnectionsPerEndpoint'></span></label> <input type='text' 
id='node-input-maxConnectionsPerEndpoint' placeholder='10' style='width:80px'> </div> <div class='form-row'> <label 
for='node-input-maxAllowedSubscriptionNumber'><i class='icon-list'></i> <span 
data-i18n='opcua-iiot-contrib.label.maxAllowedSubscriptionNumber'></span></label> <input type='text' 
id='node-input-maxAllowedSubscriptionNumber' placeholder='50' style='width:80px'> </div> <div class='form-row'> <label 
for='node-input-maxNodesPerRead'><i class='icon-list'></i> <span data-i18n='opcua-iiot-contrib.label.maxNodesPerRead'>
</span></label> <input type='text' id='node-input-maxNodesPerRead' placeholder='1000' style='width:80px'> </div> <div 
class='form-row'> <label for='node-input-maxNodesPerBrowse'><i class='icon-list'></i> <span 
data-i18n='opcua-iiot-contrib.label.maxNodesPerBrowse'></span></label> <input type='text' 
id='node-input-maxNodesPerBrowse' placeholder='2000' style='width:80px'> </div> </div> <div 
id='opcuaiiot-server-tab-security' style='display:none'> <div class='form-row'> <!-- SecurityPolicy enum via REST --> 
<label for='node-input-securityPolicy' style='min-width:140px'><i class='fa fa-certificate'></i> <span 
data-i18n='opcua-iiot-contrib.label.securityPolicy'></span></label> <ul style='margin-left:80px'> <li>None </li><li>
Basic128 </li><li>Basic192 </li><li>Basic192Rsa15 </li><li>Basic256Rsa15 </li><li>Basic256Sha256 </li><li>
Aes128_Sha256_RsaOaep </li><li>Aes256_Sha256_RsaPss </li><li>PubSub_Aes128_CTR </li><li>PubSub_Aes256_CTR </li></ul> 
</div> <div class='form-row'> <!-- MessageSecurityMode enum via REST --> <label for='node-input-securityMode' 
style='min-width:140px'><i class='fa fa-key'></i> <span data-i18n='opcua-iiot-contrib.label.securityMode'></span>
</label> <ul style='margin-left:80px'> <li>None</li> <li>Sign</li> <li>Sign&Encrypt</li> </ul> </div> <div 
class='form-row'> <label style='min-width:140px'> <i class='fa fa-certificate'></i> <span 
data-i18n='opcua-iiot-contrib.label.certificateFiles'></span> </label> </div> <div class='form-row'> <label 
style='min-width:280px'> <i class='fa fa-file'></i> <span data-i18n='opcua-iiot-contrib.label.individualCerts'></span> 
<input type='checkbox' id='node-input-individualCerts' style='max-width:30px'> </label> </div> <div 
id='node-config-certFiles'> <hr> <div class='form-row'> <label for='node-input-publicCertificateFile'><i 
class='fa fa-file'></i> <span data-i18n='opcua-iiot-contrib.label.publicCertificateFile'></span></label> <input 
type='text' id='node-input-publicCertificateFile' placeholder='./certificates/server_selfsigned_cert_2048.pem' 
style='min-width:480px;width:100%'> </div> <div class='form-row'> <label for='node-input-privateCertificateFile'><i 
class='fa fa-file'></i> <span data-i18n='opcua-iiot-contrib.label.privateCertificateFile'></span></label> <input 
type='text' id='node-input-privateCertificateFile' placeholder='./certificates/PKI/own/private/private_key.pem' 
style='min-width:480px;width:100%'> </div> <hr> </div> <div class='form-row'> <label for='node-input-allowAnonymous' 
style='min-width:140px'><i class='icon-lock'></i> <span data-i18n='opcua-iiot-contrib.label.allowAnonymous'></span>
</label> <input type='checkbox' id='node-input-allowAnonymous' style='max-width:35px'> </div> </div> <div 
id='opcuaiiot-server-tab-users' style='display:none'> <h4><span data-i18n='opcua-iiot-contrib.label.users'></span></h4> 
<div class='form-row node-input-server-users-container-row' style='margin-bottom:0'> <div 
id='node-input-server-users-container-div' 
style='box-sizing:border-box;border-radius:5px;height:210px;padding:5px;border:1px solid #ccc;overflow-y:scroll'> <ol 
id='node-input-server-users-container' style='list-style-type:none;margin:0'></ol> </div> </div> <div class='form-row'> 
<a href='#' class='editor-button editor-button-small' id='node-input-server-users-add' style='margin-top:4px'><i 
class='fa fa-plus'></i> <span data-i18n='opcua-iiot-contrib.label.addButton'></span></a> </div> <h4><span 
data-i18n='opcua-iiot-contrib.label.xmlsets'></span></h4> <div class='form-row node-input-server-xmlsets-container-row' 
style='margin-bottom:0'> <div id='node-input-server-xmlsets-container-div' 
style='box-sizing:border-box;border-radius:5px;height:240px;padding:5px;border:1px solid #ccc;overflow-y:scroll'> <ol 
id='node-input-server-xmlsets-container' style='list-style-type:none;margin:0'></ol> </div> </div> <div 
class='form-row'> <a href='#' class='editor-button editor-button-small' id='node-input-server-xmlsets-add' 
style='margin-top:4px'><i class='fa fa-plus'></i> <span data-i18n='opcua-iiot-contrib.label.addButton'></span></a> 
</div> </div> <div id='opcuaiiot-server-tab-discovery' style='display:none'> <div class='form-row'> 
<!-- SecurityPolicy enum via REST --> <label for='node-input-registerServerMethod' style='min-width:160px'><i 
class='fa fa-discover'></i> <span data-i18n='opcua-iiot-contrib.label.registerServerMethod'></span></label> <select 
type='text' id='node-input-registerServerMethod'> <option value='1'>HIDDEN</option> <option value='2'>MDNS</option> 
<option value='3'>LDS</option> </select> </div> <div class='form-row'> <span style='min-width:160px'> <ul> <li>
HIDDEN: the server doesn't expose itself to the external world </li><li>
MDNS: the server publish itself to the mDNS Multicast network directly </li><li>
LDS: the server registers itself to the LDS or LDS-ME (Local Discovery Server) </li></ul> </span> </div> <div 
class='form-row'> <label for='node-input-serverDiscovery' style='min-width:160px'><i class='fa fa-cc-discover'></i> 
<span data-i18n='opcua-iiot-contrib.label.serverDiscovery'></span></label> <input type='checkbox' 
id='node-input-serverDiscovery' style='max-width:35px'> </div> <div class='form-row'> <label 
for='node-input-discoveryServerEndpointUrl' style='min-width:160px'><i class='fa fa-tag'></i> <span 
data-i18n='opcua-iiot-contrib.label.discoveryServerEndpointUrl'></span></label> <input type='text' 
id='node-input-discoveryServerEndpointUrl' placeholder='opc.tcp://localhost:4840'> </div> <div class='form-row'> <label 
for='node-input-capabilitiesForMDNS' style='min-width:160px'><i class='fa fa-tag'></i> <span 
data-i18n='opcua-iiot-contrib.label.capabilitiesForMDNS'></span></label> <input type='text' 
id='node-input-capabilitiesForMDNS' placeholder='NA,DA,...'> </div> </div> </div> </script> <script type='text/x-red' 
data-help-name='OPCUA-IIoT-Server'> <h2>OPC UA IIoT Server</h2> <p>
The Server node is an OPC UA server with a simple optional information model (ASO Demo). The address space is to expand with the ASO nodes and commands are to send by the Command nodes.
</p> <p>Default enpoint: opc.tcp://localhost:55388</p> <p>Named enpoint: opc.tcp://localhost:55388/UA/NodeREDIIoTServer
</p> <p>Default discovery: opc.tcp://localhost:4840/UADiscovery</p> <p>all discovery: opc.tcp://localhost:4840/</p> <h3>
Options</h3> <p>If you need more information about all options read the node-opcua API, please!</p> <p>
The 'Delay On Close' is to close the server node with delay to all other nodes.</p> <h3>Certificates</h3> <p>
The server provides simple NodeOPCUA demo certificates and private keys.</p> <p>
You could set up your own certificate and private key files. This is optional.</p> <h3>User</h3> <p>
The user list is to set up users to the server. It is stored with Node-RED credentials best practice.</p> <h3>
XML NodeSets</h3> <p>That is static for now to add ISA95, DI, and Auto-ID to a server via XML NodeSet.</p> <h3>Discovery
</h3> <p>That gives you access to the servers discovery node-opcua parameters.</p> <p>
Set showErrors to get errors from node-opcua on browse.</p> </script> 
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Flex-Server] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Flex-Server', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      port: {value: '55380', required: true},
      endpoint: {value: ''},
      acceptExternalCommands: {value: true},
      maxAllowedSessionNumber: {value: ''},
      maxConnectionsPerEndpoint: {value: ''},
      maxAllowedSubscriptionNumber: {value: ''},
      alternateHostname: {value: ''},
      name: {value: ''},
      showStatusActivities: {value: false},
      showErrors: {value: false},
      allowAnonymous: {value: true},
      individualCerts: {value: false},
      isAuditing: {value: false},
      serverDiscovery: {value: true},
      users: { value: [] },
      xmlsets: { value: [] },
      publicCertificateFile: {value: ''},
      privateCertificateFile: {value: ''},
      registerServerMethod: {value: 1},
      discoveryServerEndpointUrl: {value: ''},
      capabilitiesForMDNS: {value: ''},
      maxNodesPerRead: {value: 1000, validate:function(v) { return ((v === '') || (RED.validators.number(v) && (v > 0) && (v <= 100000))) }},
      maxNodesPerBrowse: {value: 2000, validate:function(v) { return ((v === '') || (RED.validators.number(v) && (v > 0) && (v <= 200000))) }},
      delayToClose: {value: 1000, validate:function(v) { return ((v === '') || (RED.validators.number(v) && (v >= 100) && (v <= 15000))) }},
      addressSpaceScript: { value: "function constructAlarmAddressSpace(server, addressSpace, eventObjects, done) {\n    // server = the created node-opcua server\n    // addressSpace = script placeholder\n    // eventObjects = to hold event variables in memory from this script\n    \n    // internal global sandbox objects are \n    // node = node of the flex server, \n    // coreServer = core iiot server object for debug and access to nodeOPCUA,\n    // and scriptObjects to hold variables and functions\n    const LocalizedText = coreServer.core.nodeOPCUA.LocalizedText\n    const namespace = addressSpace.getOwnNamespace()\n\n    coreServer.internalDebugLog('init dynamic address space')\n    node.warn('construct new address space for OPC UA')\n    \n    // from here - see the node-opcua docs how to build address sapces\n    let tanks = namespace.addObject({\n        browseName: 'Tanks',\n        description: 'The Object representing some tanks',\n        organizedBy: addressSpace.rootFolder.objects,\n        notifierOf: addressSpace.rootFolder.objects.server\n    })\n    \n    let oilTankLevel = namespace.addVariable({\n        browseName: 'OilTankLevel',\n        displayName: [\n          new LocalizedText({text: 'Oil Tank Level', locale: 'en-US'}),\n          new LocalizedText({text: 'Öl Tank Füllstand', locale: 'de-DE'})\n        ],\n        description: 'Fill level in percentage (0% to 100%) of the oil tank',\n        propertyOf: tanks,\n        dataType: 'Double',\n        eventSourceOf: tanks\n    })\n    \n    // ---------------------------------------------------------------------------------\n    // Let's create a exclusive Limit Alarm that automatically raise itself\n    // when the tank level is out of limit\n    // ---------------------------------------------------------------------------------\n    let exclusiveLimitAlarmType = addressSpace.findEventType('ExclusiveLimitAlarmType')\n    if (nonExclusiveLimitAlarmType === null) throw new Error(\"nonExclusiveLimitAlarmType Error Message\")(exclusiveLimitAlarmType !== null)\n    \n    let oilTankLevelCondition = namespace.instantiateExclusiveLimitAlarm(exclusiveLimitAlarmType, {\n        componentOf: tanks,\n        conditionSource: oilTankLevel,\n        browseName: 'OilTankLevelCondition',\n        displayName: [\n          new LocalizedText({text: 'Oil Tank Level Condition', locale: 'en-US'}),\n          new LocalizedText({text: 'Öl Tank Füllstand Bedingung', locale: 'de-DE'})\n        ],\n        description: 'ExclusiveLimitAlarmType Condition',\n        conditionName: 'OilLevelCondition',\n        optionals: [\n          'ConfirmedState', 'Confirm' // confirm state and confirm Method\n        ],\n        inputNode: oilTankLevel,   // the letiable that will be monitored for change\n        highHighLimit: 0.9,\n        highLimit: 0.8,\n        lowLimit: 0.2\n    })\n    \n    // --------------------------------------------------------------\n    // Let's create a second letiable with no Exclusive alarm\n    // --------------------------------------------------------------\n    let gasTankLevel = namespace.addVariable({\n        browseName: 'GasTankLevel',\n        displayName: [\n          new LocalizedText({text: 'Gas Tank Level', locale: 'en-US'}),\n          new LocalizedText({text: 'Gas Tank Füllstand', locale: 'de-DE'})\n        ],\n        description: 'Fill level in percentage (0% to 100%) of the gas tank',\n        propertyOf: tanks,\n        dataType: 'Double',\n        eventSourceOf: tanks\n    })\n    \n    let nonExclusiveLimitAlarmType = addressSpace.findEventType('NonExclusiveLimitAlarmType')\n    if (nonExclusiveLimitAlarmType === null) throw new Error(\"nonExclusiveLimitAlarmType Error Message\")(nonExclusiveLimitAlarmType !== null)\n    \n    let gasTankLevelCondition = namespace.instantiateNonExclusiveLimitAlarm(nonExclusiveLimitAlarmType, {\n        componentOf: tanks,\n        conditionSource: gasTankLevel,\n        browseName: 'GasTankLevelCondition',\n        displayName: [\n          new LocalizedText({text: 'Gas Tank Level Condition', locale: 'en-US'}),\n          new LocalizedText({text: 'Gas Tank Füllstand Bedingung', locale: 'de-DE'})\n        ],\n        description: 'NonExclusiveLimitAlarmType Condition',\n        conditionName: 'GasLevelCondition',\n        optionals: [\n          'ConfirmedState', 'Confirm' // confirm state and confirm Method\n        ],\n        inputNode: gasTankLevel,   // the letiable that will be monitored for change\n        highHighLimit: 0.9,\n        highLimit: 0.8,\n        lowLimit: 0.2\n    })\n    \n    // variable with value\n    if(scriptObjects.testReadWrite === undefined || scriptObjects.testReadWrite === null) {\n            scriptObjects.testReadWrite = 1000.0\n    }\n    \n    let myVariables = namespace.addObject({\n        browseName: 'MyVariables',\n        description: 'The Object representing some variables',\n        organizedBy: addressSpace.rootFolder.objects,\n        notifierOf: addressSpace.rootFolder.objects.server\n    })\n    \n    if(coreServer.core) {\n        namespace.addVariable({\n            componentOf: myVariables,\n            nodeId: 'ns=1;s=TestReadWrite',\n            browseName: 'TestReadWrite',\n            displayName: [\n                new LocalizedText({text: 'Test Read and Write', locale: 'en-US'}),\n                new LocalizedText({text: 'Test Lesen Schreiben', locale: 'de-DE'})\n            ],\n            dataType: 'Double',\n            value: {\n                get: function () {\n                    return new coreServer.core.nodeOPCUA.Variant({\n                        dataType: 'Double',\n                        value: scriptObjects.testReadWrite\n                    })\n                },\n                set: function (variant) {\n                    scriptObjects.testReadWrite = parseFloat(variant.value)\n                    return coreServer.core.nodeOPCUA.StatusCodes.Good\n                }\n            }\n            \n        })\n        \n        let memoryVariable = namespace.addVariable({\n            componentOf: myVariables,\n            nodeId: 'ns=1;s=free_memory',\n            browseName: 'FreeMemory',\n            displayName: [\n                new LocalizedText({text: 'Free Memory', locale: 'en-US'}),\n                new LocalizedText({text: 'ungenutzer RAM', locale: 'de-DE'})\n            ],\n            dataType: 'Double',\n            \n            value: {\n              get: function () {\n                return new coreServer.core.nodeOPCUA.Variant({\n                  dataType: 'Double',\n                  value: coreServer.core.availableMemory()\n                })\n              }\n            }\n        })\n        addressSpace.installHistoricalDataNode(memoryVariable)\n       \n    } else {\n        coreServer.internalDebugLog('coreServer.core needed for coreServer.core.nodeOPCUA')\n    }\n\n    // hold event objects in memory \n    eventObjects.oilTankLevel = oilTankLevel\n    eventObjects.oilTankLevelCondition = oilTankLevelCondition\n    \n    eventObjects.gasTankLevel = gasTankLevel\n    eventObjects.gasTankLevelCondition = gasTankLevelCondition\n    \n    done()\n}"
      }
    },
    inputs: 1,
    outputs: 1,
    align: 'right',
    icon: 'icon.png',
    label: function () {
      return this.name || 'Flex-Server'
    },
    labelStyle: function () {
      return this.name ? 'node_label_italic' : ''
    },
    oneditprepare: function () {
      let node = this
      node.xmlsetSelect = []
      let cacheItemCount = 0
      let cacheItemCountSet = 0

      let tabs = RED.tabs.create({
        id: "node-input-server-tabs",
        onchange: function (tab) {
          $("#node-input-server-tabs-content").children().hide()
          $("#" + tab.id).show()
        }
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-settings",
        label: this._("opcua-iiot-contrib.tabs-label.settings")
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-limits",
        label: this._("opcua-iiot-contrib.tabs-label.limits")
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-security",
        label: this._("opcua-iiot-contrib.tabs-label.security")
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-users",
        label: this._("opcua-iiot-contrib.tabs-label.users")
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-ass",
        label: this._("opcua-iiot-contrib.tabs-label.ass")
      })

      tabs.addTab({
        id: "opcuaiiot-server-tab-discovery",
        label: this._("opcua-iiot-contrib.tabs-label.discovery")
      })

      // User Management
      if(node.users && node.users.length > 0) {
          cacheItemCount = node.users.length
          node.users.forEach(function(element, index, array) {
            generateUserEntry(element, index);
          })
      }

      // XML-Set Management
      if(node.xmlsets && node.xmlsets.length > 0) {
          cacheItemCountSet = node.xmlsets.length
          node.xmlsets.forEach(function(element, index, array) {
            generateXMLSetEntry(element, index);
          })
      }

      function generateUserEntry(user, id) {
        let container = $('<li/>', {style:
          "background: #fefefe; margin:0; padding:8px 0px; border-bottom: 1px solid #ccc;"})
        let row = $('<div id="row' + id + '"/>').appendTo(container)

        $('<i style="color: #eee; cursor: move;" class="node-input-server-users-handle fa fa-bars"></i>').appendTo(row)

        let userField = $('<input/>', {
          id: "node-input-server-users-name" + id,
          class: 'opcuaUserName',
          type: "text",
          style: "margin-left:5px;width:160px;",
          placeholder: 'name'
        }).appendTo(row)

        let passwordField = $('<input/>', {
          id: "node-input-server-users-password" + id,
          class: 'opcuaUserPassword',
          type: "password",
          style: "margin: 0 auto;width:55%;min-width:60px;margin-left:5px",
          placeholder: 'password'
        }).appendTo(row)

        userField.val(user.name)
        passwordField.val(user.password)

        let finalspan = $('<span/>', {style: "float: right;margin-right: 10px;"}).appendTo(row)

        let removeUserButton = $('<a/>', {
          href: "#",
          id: 'node-button-user-remove' + id,
          class: "editor-button editor-button-small",
          style: "margin-top: 7px; margin-left: 5px;"
        }).appendTo(finalspan)

        $('<i/>', {class: "fa fa-remove"}).appendTo(removeUserButton)

        removeUserButton.click(function () {
          container.css({"background": "#fee"})
          container.fadeOut(300, function () {
            $(this).remove()
          });
        });

        $("#node-input-server-users-container").append(container)
      }

      function generateXMLSetEntry(xmlset, id) {
        let container = $('<li/>', {style:
            "background: #fefefe; margin:0; padding:8px 0px; border-bottom: 1px solid #ccc;"})
        let row = $('<div id="xmlsetRow' + id + '"/>').appendTo(container)

        $('<i style="color: #eee; cursor: move;" class="node-input-server-xmlsets-handle fa fa-bars"></i>').appendTo(row)

        let nameField = $('<input/>', {
          id: "node-input-server-xmlsets-name" + id,
          type: "text",
          class: 'xmlsetName',
          style: "margin-left:5px;width:75px;",
          placeholder: 'name'
        }).appendTo(row)

        let pathField = $('<input/>', {
          id: "node-input-server-xmlsets-path" + id,
          class: 'xmlsetPath',
          type: "text",
          style: "margin: 0 auto;width:68%;min-width:60px;margin-left:5px",
          placeholder: 'public/vendor/opc-foundation/xml/Opc.ISA95.NodeSet2.xml'
        }).appendTo(row)

        nameField.val(xmlset.name)
        pathField.val(xmlset.path)

        let finalspan = $('<span/>', {style: "float: right;margin-right: 10px;"}).appendTo(row)

        let lookupItemButton = $('<a/>', {
          href: '#',
          id: 'node-button-xmlsets-lookup' + id,
          class: 'editor-button editor-button-small',
          style: 'margin-top: 7px; margin-left: 5px;'
        }).appendTo(finalspan)

        lookupItemButton.click(function () {
          let xmlsetLookupButton = $('#node-button-xmlsets-lookup' + id)
          let xmlsetLookupField = $('#xmlsetRow' + id + ' #node-input-server-xmlsets-path' + id)

          xmlsetLookupButton.addClass('disabled')

          $.getJSON('/opcuaIIoT/xmlsets/public', function (data) {
            xmlsetLookupButton.removeClass('disabled')
            node.xmlsetSelect = []

            $.each(data, function (i, filename) {
              node.xmlsetSelect.push(filename)
            })

            xmlsetLookupField.autocomplete({
              source: node.xmlsetSelect,
              minLength: 0,
              close: function (event, ui) {
                xmlsetLookupField.autocomplete('destroy')
              }
            }).autocomplete('search', '')
          })
        })

        $('<i/>', {class: 'fa fa-search'}).appendTo(lookupItemButton)

        let removeXMLSetButton = $('<a/>', {
          href: "#",
          id: 'node-button-xmlset-remove' + id,
          class: "editor-button editor-button-small",
          style: "margin-top:7px;margin-left:5px;"
        }).appendTo(finalspan)

        $('<i/>', {class: "fa fa-remove"}).appendTo(removeXMLSetButton)

        removeXMLSetButton.click(function () {
          container.css({"background": "#fee"})
          container.fadeOut(300, function () {
            $(this).remove()
          });
        });

        $("#node-input-server-xmlsets-container").append(container)
      }

      $("#node-input-server-users-container").sortable({
        axis: "y",
        handle: ".node-input-server-users-handle",
        cursor: "move"
      });

      $("#node-input-server-xmlsets-container").sortable({
        axis: "y",
        handle: ".node-input-server-xmlsets-handle",
        cursor: "move"
      });

      $("#node-input-server-users-container .node-input-server-users-handle").disableSelection()

      $("#node-input-server-xmlsets-container .node-input-server-xmlsets-handle").disableSelection()

      $("#node-input-server-users-add").click(function () {
        if(!cacheItemCount || cacheItemCount < 0) {
          cacheItemCount = 0
        }
        generateUserEntry({ name: '', password: '' }, cacheItemCount++) // length is every time one more than index
        $("#node-input-server-users-container-div").scrollTop($("#node-input-server-users-container-div").get(0).scrollHeight)
      })

      $("#node-input-server-xmlsets-add").click(function () {
        if(!cacheItemCountSet || cacheItemCountSet < 0) {
          cacheItemCountSet = 0
        }
        generateXMLSetEntry({ name: '', path: '' }, cacheItemCountSet++) // length is every time one more than index
        $("#node-input-server-xmlsets-container-div").scrollTop($("#node-input-server-xmlsets-container-div").get(0).scrollHeight)
      })

      function switchDialogResize() {
        switchUserDialogResize()
        switchXMLSetDialogSetResize()
      }

      // dialog User handling
      function switchUserDialogResize() {
        let rows = $("#dialog-form>div:not(.node-input-server-users-container-row)")
        let height = $("#dialog-form").height()

        rows.each(function (index, row) {
          height -= row.outerHeight(true)
        })

        let editorRow = $("#dialog-form>div.node-input-server-users-container-row")
        height -= (parseInt(editorRow.css("marginTop")) + parseInt(editorRow.css("marginBottom")))
        $("#node-input-server-users-container-div").css("height", height + "px")
      }

      // dialog XML-Set handling
      function switchXMLSetDialogSetResize() {
        let rows = $("#dialogSet-form>div:not(.node-input-server-xmlsets-container-row)")
        let height = $("#dialogSet-form").height()

        rows.each(function (index, row) {
          height -= row.outerHeight(true)
        })

        let editorRow = $("#dialogSet-form>div.node-input-server-xmlsets-container-row")
        height -= (parseInt(editorRow.css("marginTop")) + parseInt(editorRow.css("marginBottom")))
        $("#node-input-server-xmlsets-container-div").css("height", height + "px")
      }

      $("#dialog").on("dialogresize", switchDialogResize)

      $("#dialog").on("dialogopen", function (ev) {
        let size = $("#dialog").dialog('option', 'sizeCache-switch')
        if (size) {
          $("#dialog").dialog('option', 'width', size.width)
          $("#dialog").dialog('option', 'height', size.height)
          switchDialogResize()
        } else {
          setTimeout(switchDialogResize, 10)
        }
      })

      $("#dialog").on("dialogclose", function (ev, ui) {
        $("#dialog").off("dialogresize", switchDialogResize)
      })

      // address space script
      node.editorAddressSpaceScript = RED.editor.createEditor({
        id: 'node-input-func-editor-addressSpaceScript',
        mode: 'ace/mode/javascript',
        value: $("#node-input-addressSpaceScript").val(),
        globals: {
          msg:true,
          context:true,
          RED: true,
          util: true,
          flow: true,
          global: true,
          console: true,
          Buffer: true,
          setTimeout: true,
          clearTimeout: true,
          setInterval: true,
          clearInterval: true,
          draggable: true
        }
      });

      $( function() {
        $( "#node-input-func-editor-addressSpaceScript" ).resizable();
      } );

      let element = document.getElementById('node-input-func-editor-addressSpaceScript');
      element.addEventListener("mouseup", resizeScript, false);

      function resizeScript () {
        node.editorAddressSpaceScript.resize()
      }

      // Certificate Management
      try {
        let certsCheckbox = $("#node-input-individualCerts");
        let configCertFields = $("#node-config-certFiles");

        if (node.individualCerts) {
          certsCheckbox.prop('checked', true);
          configCertFields.show();
        } else {
          certsCheckbox.prop('checked', false);
          configCertFields.hide();
        }

        certsCheckbox.change(function () {
          if ($(this).is(":checked")) {
            configCertFields.show();
          } else {
            configCertFields.hide();
            $('#node-config-input-publicCertificateFile').val('');
            $('#node-config-input-privateKeyFile').val('');
          }
        });

      } catch (err) {
        this.error(err);
      }
    },
    oneditsave: function () {
      let node = this

      let cacheUsers = $("#node-input-server-users-container").children()
      node.users = []
      cacheUsers.each(function () {
        node.users.push({
          name: $(this).find('.opcuaUserName').val(),
          password: $(this).find('.opcuaUserPassword').val(),
        })
      })

      let cacheXMLSets = $('#node-input-server-xmlsets-container').children()
      node.xmlsets = []
      cacheXMLSets.each(function () {
        node.xmlsets.push({
          name: $(this).find('.xmlsetName').val(),
          path: $(this).find('.xmlsetPath').val(),
        })
      })

      $("#node-input-addressSpaceScript").val(this.editorAddressSpaceScript.getValue());
      this.editorAddressSpaceScript.destroy();
      delete this.editorAddressSpaceScript;

      // console.log('well done editsave ...')
    }
  }) </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Flex-Server'>
 <div class='form-row'> <ul style='background:#fff;min-width:600px;margin-bottom:20px' id='node-input-server-tabs'></ul>
 </div> <div id='node-input-server-tabs-content' style='min-height:170px'> <div id='opcuaiiot-server-tab-settings' 
style='display:none'> <div class='form-row'> <label for='node-input-port'><i class='fa fa-fort-awesom'></i> <span 
data-i18n='opcua-iiot-contrib.label.port'></span></label> 
<!-- dynamic Ports from 49152 to 65535 (c000hex bis FFFFhex) --> <input type='text' id='node-input-port' 
placeholder='Ports 49152 bis 65535 (c000hex bis FFFFhex)'> </div> <div class='form-row'> <label 
for='node-input-endpoint'><i class='icon-tasks'></i> <span data-i18n='opcua-iiot-contrib.label.endpoint'></span></label>
 <input type='text' id='node-input-endpoint' placeholder='UA/NodeREDFlexIIoTServer'> </div> <div class='form-row'> 
<label for='node-input-alternateHostname'><i class='fa fa-server'></i> <span 
data-i18n='opcua-iiot-contrib.label.alternateHostname'></span></label> <input type='text' 
id='node-input-alternateHostname' placeholder=''> </div> <hr> <div class='form-row'> <label 
for='node-input-delayToClose'><i class='icon-time'></i> <span data-i18n='opcua-iiot-contrib.label.delayToClose'></span>
</label> <input type='text' id='node-input-delayToClose' placeholder='1000' style='width:80px'> </div> <div 
class='form-row'> <label for='node-input-name'><i class='fa fa-tag'></i> <span data-i18n='node-red:common.label.name'>
</span></label> <input type='text' id='node-input-name' placeholder=''> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-isAuditing'><i class='fa fa-th'></i> <span 
data-i18n='opcua-iiot-contrib.label.isAuditing'></span></label> <input type='checkbox' id='node-input-isAuditing' 
style='max-width:30px'> </div> <hr> <div class='form-row'> <label style='min-width:160px' 
for='node-input-showStatusActivities'><i class='fa fa-bolt'></i> <span 
data-i18n='opcua-iiot-contrib.label.showActivities'></span></label> <input type='checkbox' 
id='node-input-showStatusActivities' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showErrors'><i class='fa fa-exclamation-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input type='checkbox' id='node-input-showErrors' 
style='max-width:30px'> </div> </div> <div id='opcuaiiot-server-tab-limits' style='display:none'> <div class='form-row'>
 <label for='node-input-maxAllowedSessionNumber'><i class='icon-list'></i> <span 
data-i18n='opcua-iiot-contrib.label.maxAllowedSessionNumber'></span></label> <input type='text' 
id='node-input-maxAllowedSessionNumber' placeholder='10' style='width:80px'> </div> <div class='form-row'> <label 
for='node-input-maxConnectionsPerEndpoint'><i class='icon-list'></i> <span 
data-i18n='opcua-iiot-contrib.label.maxConnectionsPerEndpoint'></span></label> <input type='text' 
id='node-input-maxConnectionsPerEndpoint' placeholder='10' style='width:80px'> </div> <div class='form-row'> <label 
for='node-input-maxAllowedSubscriptionNumber'><i class='icon-list'></i> <span 
data-i18n='opcua-iiot-contrib.label.maxAllowedSubscriptionNumber'></span></label> <input type='text' 
id='node-input-maxAllowedSubscriptionNumber' placeholder='50' style='width:80px'> </div> <div class='form-row'> <label 
for='node-input-maxNodesPerRead'><i class='icon-list'></i> <span data-i18n='opcua-iiot-contrib.label.maxNodesPerRead'>
</span></label> <input type='text' id='node-input-maxNodesPerRead' placeholder='1000' style='width:80px'> </div> <div 
class='form-row'> <label for='node-input-maxNodesPerBrowse'><i class='icon-list'></i> <span 
data-i18n='opcua-iiot-contrib.label.maxNodesPerBrowse'></span></label> <input type='text' 
id='node-input-maxNodesPerBrowse' placeholder='2000' style='width:80px'> </div> </div> <div 
id='opcuaiiot-server-tab-security' style='display:none'> <div class='form-row'> <!-- SecurityPolicy enum via REST --> 
<label for='node-input-securityPolicy' style='min-width:140px'><i class='fa fa-certificate'></i> <span 
data-i18n='opcua-iiot-contrib.label.securityPolicy'></span></label> <ul style='margin-left:80px'> <li>None</li> <li>
Basic128Rsa15</li> <li>Basic256</li> <li>Basic256Sha256</li> </ul> </div> <div class='form-row'> 
<!-- MessageSecurityMode enum via REST --> <label for='node-input-securityMode' style='min-width:140px'><i 
class='fa fa-key'></i> <span data-i18n='opcua-iiot-contrib.label.securityMode'></span></label> <ul 
style='margin-left:80px'> <li>None</li> <li>Sign</li> <li>Sign&Encrypt</li> </ul> </div> <div class='form-row'> <label 
style='min-width:140px'> <i class='fa fa-certificate'></i> <span data-i18n='opcua-iiot-contrib.label.certificateFiles'>
</span> </label> </div> <div class='form-row'> <label style='min-width:280px'> <i class='fa fa-file'></i> <span 
data-i18n='opcua-iiot-contrib.label.individualCerts'></span> <input type='checkbox' id='node-input-individualCerts' 
style='max-width:30px'> </label> </div> <div id='node-config-certFiles'> <hr> <div class='form-row'> <label 
for='node-input-publicCertificateFile'><i class='fa fa-file'></i> <span 
data-i18n='opcua-iiot-contrib.label.publicCertificateFile'></span></label> <input type='text' 
id='node-input-publicCertificateFile' placeholder='./certificates/server_selfsigned_cert_2048.pem' 
style='min-width:480px;width:100%'> </div> <div class='form-row'> <label for='node-input-privateCertificateFile'><i 
class='fa fa-file'></i> <span data-i18n='opcua-iiot-contrib.label.privateCertificateFile'></span></label> <input 
type='text' id='node-input-privateCertificateFile' placeholder='./certificates/PKI/own/private/private_key.pem' 
style='min-width:480px;width:100%'> </div> <hr> </div> <div class='form-row'> <label for='node-input-allowAnonymous' 
style='min-width:140px'><i class='icon-lock'></i> <span data-i18n='opcua-iiot-contrib.label.allowAnonymous'></span>
</label> <input type='checkbox' id='node-input-allowAnonymous' style='max-width:35px'> </div> </div> <div 
id='opcuaiiot-server-tab-users' style='display:none'> <h4><span data-i18n='opcua-iiot-contrib.label.users'></span></h4> 
<div class='form-row node-input-server-users-container-row' style='margin-bottom:0'> <div 
id='node-input-server-users-container-div' 
style='box-sizing:border-box;border-radius:5px;height:210px;padding:5px;border:1px solid #ccc;overflow-y:scroll'> <ol 
id='node-input-server-users-container' style='list-style-type:none;margin:0'></ol> </div> </div> <div class='form-row'> 
<a href='#' class='editor-button editor-button-small' id='node-input-server-users-add' style='margin-top:4px'><i 
class='fa fa-plus'></i> <span data-i18n='opcua-iiot-contrib.label.addButton'></span></a> </div> <h4><span 
data-i18n='opcua-iiot-contrib.label.xmlsets'></span></h4> <div class='form-row node-input-server-xmlsets-container-row' 
style='margin-bottom:0'> <div id='node-input-server-xmlsets-container-div' 
style='box-sizing:border-box;border-radius:5px;height:240px;padding:5px;border:1px solid #ccc;overflow-y:scroll'> <ol 
id='node-input-server-xmlsets-container' style='list-style-type:none;margin:0'></ol> </div> </div> <div 
class='form-row'> <a href='#' class='editor-button editor-button-small' id='node-input-server-xmlsets-add' 
style='margin-top:4px'><i class='fa fa-plus'></i> <span data-i18n='opcua-iiot-contrib.label.addButton'></span></a> 
</div> </div> <div id='opcuaiiot-server-tab-ass' style='display:none'> <div class='form-row' style='margin-bottom:0'> 
<label for='node-input-addressSpaceScript' style='width:50%'><i class='fa fa-wrench'></i> <span 
data-i18n='opcua-iiot-contrib.label.function'></span></label> <input type='hidden' id='node-input-addressSpaceScript'> 
</div> <div class='form-row node-text-editor-row' id='div-script-editor'> <div style='height:450px;min-height:250px' 
class='node-text-editor' id='node-input-func-editor-addressSpaceScript'></div> </div> </div> <div 
id='opcuaiiot-server-tab-discovery' style='display:none'> <div class='form-row'> <!-- SecurityPolicy enum via REST --> 
<label for='node-input-registerServerMethod' style='min-width:160px'><i class='fa fa-discover'></i> <span 
data-i18n='opcua-iiot-contrib.label.registerServerMethod'></span></label> <select type='text' 
id='node-input-registerServerMethod'> <option value='1'>HIDDEN</option> <option value='2'>MDNS</option> <option 
value='3'>LDS</option> </select> </div> <div class='form-row'> <span style='min-width:160px'> <ul> <li>
HIDDEN: the server doesn't expose itself to the external world </li><li>
MDNS: the server publish itself to the mDNS Multicast network directly </li><li>
LDS: the server registers itself to the LDS or LDS-ME (Local Discovery Server) </li></ul> </span> </div> <div 
class='form-row'> <label for='node-input-serverDiscovery' style='min-width:160px'><i class='fa fa-cc-discover'></i> 
<span data-i18n='opcua-iiot-contrib.label.serverDiscovery'></span></label> <input type='checkbox' 
id='node-input-serverDiscovery' style='max-width:35px'> </div> <div class='form-row'> <label 
for='node-input-discoveryServerEndpointUrl' style='min-width:160px'><i class='icon-discover'></i> <span 
data-i18n='opcua-iiot-contrib.label.discoveryServerEndpointUrl'></span></label> <input type='text' 
id='node-input-discoveryServerEndpointUrl' placeholder='opc.tcp://localhost:4840'> </div> <div class='form-row'> <label 
for='node-input-capabilitiesForMDNS' style='min-width:160px'><i class='icon-discover'></i> <span 
data-i18n='opcua-iiot-contrib.label.capabilitiesForMDNS'></span></label> <input type='text' 
id='node-input-capabilitiesForMDNS' placeholder='NA,DA,...'> </div> </div> </div> </script> <script type='text/x-red' 
data-help-name='OPCUA-IIoT-Flex-Server'> <h2>OPC UA IIoT Flex Server</h2> <p>
The Flex Server node is an OPC UA server with a flexible address space to build your own information model. The address space is to expand with JS based on node-opcua API. The Flex Server did not work with ASO requests, but it works also with the Command node.
</p> <p>Default enpoint: opc.tcp://localhost:55380/</p> <p>
Named enpoint: opc.tcp://localhost:55380/UA/NodeREDFlexIIoTServer</p> <p>
Default discovery: opc.tcp://localhost:4840/UAFlexDiscovery</p> <p>all discovery: opc.tcp://localhost:4840/</p> <h3>
Options</h3> <p>If you need more information about all options read the node-opcua API, please!</p> <p>
The 'Delay On Close' is to close the server node with delay to all other nodes.</p> <h3>Certificates</h3> <p>
The server provides simple NodeOPCUA demo certificates and private keys.</p> <p>
You could set up your own certificate and private key files. This is optional.</p> <h3>User</h3> <p>
The user list is to set up users to the server. It is stored with Node-RED credentials best practice.</p> <h3>
XML NodeSets</h3> <p>That is static for now to add ISA95, DI, and Auto-ID to a server via XML NodeSet.</p> <h3>
AddressSpace</h3> <p>A function like programming editor to construct your own flexible address space in the server.</p> 
<h3>Discovery</h3> <p>That gives you access to the servers discovery node-opcua parameters.</p> <p>
Set showErrors to get errors from node-opcua on browse.</p> </script> 
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Server-ASO] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Server-ASO', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      nodeId: {value: "", required: true},
      browsename: {value: "", required: true},
      displayname: {value: ""},
      objecttype: {value: "", required: true},
      datatype: {value: ""},
      value: {value: null},
      referenceNodeId: {value: "", required: true},
      referencetype: {value: ""},
      name: {value: ""}
    },
    inputs: 1,
    outputs: 1,
    align: "left",
    icon: "icon.png",
    label: function () {
      return this.name || "S-ASO";
    },
    labelStyle: function () {
      return this.name ? "node_label_italic" : "";
    },
    oneditprepare: function () {
      let node = this
      node.lookupItems = []

      let objecttypeLookupButton = $("#node-lookup-objecttype")
      let objecttypeInputField = $("#node-input-objecttype")

      objecttypeLookupButton.on("click", function () {
        objecttypeLookupButton.addClass('disabled')
        $.getJSON('/opcuaIIoT/list/InstanceTypeIds', function (data) {
          objecttypeLookupButton.removeClass('disabled')
          node.lookupItems = []

          $.each(data, function (i, entry) {
            node.lookupItems.push({value: entry.nodeId, label: entry.label})
          })

          objecttypeInputField.autocomplete({
            source: node.lookupItems,
            minLength: 0,
            focus: function (event, ui) {
              objecttypeInputField.val(ui.item.label);
              return false;
            },
            select: function (event, ui) {
              objecttypeInputField.val(ui.item.label)
              return false;
            },
            close: function (event, ui) {
              objecttypeInputField.autocomplete("destroy")
            }
          }).autocomplete("search", "")
        })
      })

      let datatypeLookupButton = $("#node-lookup-datatype")
      let datatypeField = $("#node-input-datatype")

      datatypeLookupButton.on("click", function () {
        datatypeLookupButton.addClass('disabled')
        $.getJSON('/opcuaIIoT/list/DataTypeIds', function (data) {
          datatypeLookupButton.removeClass('disabled')
          node.lookupItems = []

          $.each(data, function (i, entry) {
            node.lookupItems.push({value: entry.nodeId, label: entry.label})
          })

          datatypeField.autocomplete({
            source: node.lookupItems,
            minLength: 0,
            focus: function (event, ui) {
              datatypeField.val(ui.item.label);
              return false;
            },
            select: function (event, ui) {
              datatypeField.val(ui.item.label)
              return false;
            },
            close: function (event, ui) {
              datatypeField.autocomplete("destroy")
            }
          }).autocomplete("search", "")
        })
      })

      let referencetypeLookupButton = $("#node-lookup-referencetype")
      let referencetypeField = $("#node-input-referencetype")

      referencetypeLookupButton.on("click", function () {
        referencetypeLookupButton.addClass('disabled')
        $.getJSON('/opcuaIIoT/list/ReferenceTypeIds', function (data) {
          referencetypeLookupButton.removeClass('disabled')
          node.lookupItems = []

          $.each(data, function (i, entry) {
            node.lookupItems.push({value: entry.nodeId, label: entry.label})
          })

          referencetypeField.autocomplete({
            source: node.lookupItems,
            minLength: 0,
            focus: function (event, ui) {
              referencetypeField.val(ui.item.label);
              return false;
            },
            select: function (event, ui) {
              referencetypeField.val(ui.item.label)
              return false;
            },
            close: function (event, ui) {
              referencetypeField.autocomplete("destroy")
            }
          }).autocomplete("search", "")
        })
      })

      let dataTypeRow = $("#node-input-datatype-row")
      let referenceTypeRow = $("#node-input-referencetype-row")

      objecttypeInputField.change(function () {
        if ($(this).val() !== '61') {
          node.datatype.required = true
          node.referencetype.required = true
          dataTypeRow.show()
          referenceTypeRow.show()
        } else {
          node.datatype.required = false
          node.referencetype.required = false
          dataTypeRow.hide()
          referenceTypeRow.hide()
        }
      })
    }
  }); </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Server-ASO'>
 <div class='form-row'> <label for='node-input-nodeId'><i class='icon-tasks'></i> <span 
data-i18n='opcua-iiot-contrib.label.nodeId'></span></label> <input type='text' id='node-input-nodeId' 
placeholder='ns=1;s=MySwitch or ns=1;i=1234'> </div> <div class='form-row'> <label for='node-input-browsename'><i 
class='icon-tag'></i> <span data-i18n='opcua-iiot-contrib.label.browsename'></span></label> <input type='text' 
id='node-input-browsename' placeholder=''> </div> <div class='form-row'> <label for='node-input-displayname'><i 
class='icon-tag'></i> <span data-i18n='opcua-iiot-contrib.label.displayname'></span></label> <input type='text' 
id='node-input-displayname' placeholder=''> </div> <div class='form-row'> <label for='node-input-objecttype'><i 
class='icon-search'></i> <span data-i18n='opcua-iiot-contrib.label.objecttype'></span></label> <input type='text' 
id='node-input-objecttype' style='width:40%' placeholder=''> <a id='node-lookup-objecttype' class='btn'><i 
id='node-lookup-topic-icon' class='fa fa-search'></i></a> </div> <div class='form-row'> <label 
for='node-input-datatype'><i class='icon-search'></i> <span data-i18n='opcua-iiot-contrib.label.datatype'></span>
</label> <input type='text' id='node-input-datatype' style='width:40%' placeholder=''> <a id='node-lookup-datatype' 
class='btn'><i id='node-lookup-topic-icon' class='fa fa-search'></i></a> </div> <div class='form-row'> <label 
for='node-input-value'><i class='icon-tag'></i> <span data-i18n='opcua-iiot-contrib.label.value'></span></label> <input 
type='text' id='node-input-value' placeholder=''> </div> <hr> <div class='form-row'> <label 
for='node-input-referenceNodeId'><i class='icon-tasks'></i> <span data-i18n='opcua-iiot-contrib.label.referenceNodeId'>
</span></label> <input type='text' id='node-input-referenceNodeId' placeholder='ns=1;s=MySwitch or ns=1;i=1234'> </div> 
<div class='form-row'> <label for='node-input-referencetype'><i class='icon-search'></i> <span 
data-i18n='opcua-iiot-contrib.label.referencetype'></span></label> <input type='text' id='node-input-referencetype' 
style='width:40%' placeholder=''> <a id='node-lookup-referencetype' class='btn'><i id='node-lookup-topic-icon' 
class='fa fa-search'></i></a> </div> <hr> <div class='form-row'> <label for='node-input-name'><i class='fa fa-tag'></i> 
<span data-i18n='node-red:common.label.name'></span></label> <input type='text' id='node-input-name' placeholder=''> 
</div> </script>  <script type='text/x-red' data-help-name='OPCUA-IIoT-Server-ASO'>
 <h2>OPC UA IIoT Address Space Object</h2> <p>
That nodes is to build event driven Address Space Objects (ASO) injects to the server.</p> </script>
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Server-Command] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Server-Command', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      commandtype: {value: "", required: true},
      nodeId: {value: ""},
      name: {value: ""}
    },
    inputs: 1,
    outputs: 1,
    align: "left",
    icon: "icon.png",
    label: function () {
      return this.name || "S-CMD";
    },
    labelStyle: function () {
      return this.name ? "node_label_italic" : "";
    },
    oneditprepare: function () {
      let node = this

      let commandTypeCheckbox = $("#node-input-commandtype")
      let nodeIdRow = $("#node-input-nodeId-row")

      commandTypeCheckbox.change(function () {
        if ($(this).val() !== 'restart') {
          nodeIdRow.show();
        } else {
          nodeIdRow.hide();
        }
      })
    }
  }); </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Server-Command'>
 <div class='form-row'> <label for='node-input-commandtype'><i class='icon-tasks'></i> <span 
data-i18n='opcua-iiot-contrib.label.commandtype'></span></label> <select type='text' id='node-input-commandtype'> 
<option value='restart'>Restart</option> <option value='deleteNode'>Delete ASO</option> </select> </div> <div 
class='form-row' id='node-input-nodeId-row'> <label for='node-input-nodeId'><i class='icon-tasks'></i> <span 
data-i18n='opcua-iiot-contrib.label.nodeId'></span></label> <input type='text' id='node-input-nodeId' 
placeholder='ns=1;s=MySwitch or ns=1;i=1234'> </div> <div class='form-row'> <label for='node-input-name'><i 
class='fa fa-tag'></i> <span data-i18n='node-red:common.label.name'></span></label> <input type='text' 
id='node-input-name' placeholder=''> </div> </script> <script type='text/x-red' 
data-help-name='OPCUA-IIoT-Server-Command'>
 <h2>OPC UA IIoT Server Commands</h2> <p>That nodes is to build event driven command injects to the server.</p> 
</script> 
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Result-Filter] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Result-Filter', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      nodeId: {value: "", required: true},
      datatype: {value: ""},
      fixedValue: {value: false},
      fixPoint: {value: 2},
      withPrecision: {value: false},
      precision: {value: 2},
      entry: {value: 1, validate: RED.validators.number()},
      justValue: {value: true},
      withValueCheck: {value: false},
      minvalue: {value: null},
      maxvalue: {value: null},
      defaultvalue: {value: null},
      topic: {value:""},
      name: {value: ""},
      showErrors: {value: false}
    },
    inputs: 1,
    outputs: 1,
    align: "left",
    icon: "icon.png",
    label: function () {
      return this.name || this.nodeId || "Result Filter";
    },
    labelStyle: function () {
      return this.name ? "node_label_italic" : "";
    },
    oneditprepare: function () {
      let node = this
      node.lookupItems = []

      let tabs = RED.tabs.create({
        id: "node-input-result-filter-tabs",
        onchange: function (tab) {
          $("#node-input-result-filter-tabs-content").children().hide()
          $("#" + tab.id).show()
        }
      })

      tabs.addTab({
        id: "opcuaiiot-result-filter-tab-settings",
        label: this._("opcua-iiot-contrib.tabs-label.settings")
      })

      tabs.addTab({
        id: "opcuaiiot-result-filter-tab-convert",
        label: this._("opcua-iiot-contrib.tabs-label.convert")
      })

      let datatypeLookupButton = $("#node-lookup-datatype")
      let datatypeField = $("#node-input-datatype")

      datatypeLookupButton.on("click", function () {
        datatypeLookupButton.addClass('disabled')
        $.getJSON('/opcuaIIoT/list/DataTypeIds', function (data) {
          datatypeLookupButton.removeClass('disabled')
          node.lookupItems = []

          $.each(data, function (i, entry) {
            node.lookupItems.push({value: entry.nodeId, label: entry.label})
          })

          datatypeField.autocomplete({
            source: node.lookupItems,
            minLength: 0,
            focus: function (event, ui) {
              datatypeField.val(ui.item.label);
              return false;
            },
            select: function (event, ui) {
              datatypeField.val(ui.item.label)
              return false;
            },
            close: function (event, ui) {
              datatypeField.autocomplete("destroy")
            }
          }).autocomplete("search", "")
        })
      })

      $('#node-input-withValueCheck').change(function () {
        if ($(this).is(":checked")) {
          $('#node-value-changes').show()

        } else {
          $('#node-value-changes').hide()
        }
      })
    }
  }); </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Result-Filter'>
 <div class='form-row'> <ul style='background:#fff;min-width:600px;margin-bottom:20px' 
id='node-input-result-filter-tabs'></ul> </div> <div id='node-input-result-filter-tabs-content' 
style='min-height:170px'> <div id='opcuaiiot-result-filter-tab-settings' style='display:none'> <div class='form-row'> 
<label for='node-input-nodeId'><i class='icon-tasks'></i> <span data-i18n='opcua-iiot-contrib.label.nodeId'></span>
</label> <input type='text' id='node-input-nodeId' placeholder='ns=1;s=MySwitch or ns=1;i=1234'> </div> <div 
class='form-row'> <label for='node-input-datatype'><i class='icon-search'></i> <span 
data-i18n='opcua-iiot-contrib.label.datatype'></span></label> <input type='text' id='node-input-datatype' 
style='width:40%' placeholder='i=2041'> <a id='node-lookup-datatype' class='btn'><i id='node-lookup-topic-icon' 
class='fa fa-search'></i></a> </div> <hr> <div class='form-row'> <label for='node-input-entry'><i class='icon-tag'></i> 
<span data-i18n='opcua-iiot-contrib.label.entry'></span></label> <input type='text' id='node-input-entry' 
placeholder='1'> </div> <hr> <div class='form-row'> <label style='min-width:160px' for='node-input-justValue'><i 
class='fa fa-simplybuilt'></i> <span data-i18n='opcua-iiot-contrib.label.justValue'></span></label> <input 
type='checkbox' id='node-input-justValue' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-withValueCheck'><i class='fa fa-optin-monster'></i> <span 
data-i18n='opcua-iiot-contrib.label.withValueCheck'></span></label> <input type='checkbox' 
id='node-input-withValueCheck' style='max-width:30px'> </div> <div class='form-row' id='node-value-changes'> <div 
class='form-row'> <label for='node-input-minvalue'><i class='icon-tag'></i> <span 
data-i18n='opcua-iiot-contrib.label.minvalue'></span></label> <input type='text' id='node-input-minvalue' 
placeholder='minimum'> </div> <div class='form-row'> <label for='node-input-maxvalue'><i class='icon-tag'></i> <span 
data-i18n='opcua-iiot-contrib.label.maxvalue'></span></label> <input type='text' id='node-input-maxvalue' 
placeholder='maximum'> </div> <div class='form-row'> <label for='node-input-defaultvalue'><i class='icon-tag'></i> <span
 data-i18n='opcua-iiot-contrib.label.defaultvalue'></span></label> <input type='text' id='node-input-defaultvalue' 
placeholder='out of range value'> </div> </div> <div class='form-row'> <label for='node-input-topic'><i 
class='icon-tag'></i> <span data-i18n='node-red:common.label.topic'></span></label> <input type='text' 
id='node-input-topic' placeholder=''> </div> <div class='form-row'> <label for='node-input-name'><i class='fa fa-tag'>
</i> <span data-i18n='node-red:common.label.name'></span></label> <input type='text' id='node-input-name' 
placeholder=''> </div> <hr> <div class='form-row'> <label style='min-width:160px' for='node-input-showErrors'><i 
class='fa fa-exclamation-circle'></i> <span data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input 
type='checkbox' id='node-input-showErrors' style='max-width:30px'> </div> </div> <div 
id='opcuaiiot-result-filter-tab-convert' style='display:none'> <div class='form-row'> <label style='min-width:160px' 
for='node-input-fixedValue'><i class='fa fa-eye-slash'></i> <span data-i18n='opcua-iiot-contrib.label.fixedValue'>
</span></label> <input type='checkbox' id='node-input-fixedValue' style='max-width:30px'> </div> <div class='form-row'> 
<label for='node-input-fixPoint'><i class='icon-tag'></i> <span data-i18n='opcua-iiot-contrib.label.fixPoint'></span>
</label> <input type='text' id='node-input-fixPoint' placeholder='2'> </div> <hr> <div class='form-row'> <label 
style='min-width:160px' for='node-input-withPrecision'><i class='fa fa-eye-slash'></i> <span 
data-i18n='opcua-iiot-contrib.label.withPrecision'></span></label> <input type='checkbox' id='node-input-withPrecision' 
style='max-width:30px'> </div> <div class='form-row'> <label for='node-input-precision'><i class='icon-tag'></i> <span 
data-i18n='opcua-iiot-contrib.label.precision'></span></label> <input type='text' id='node-input-precision' 
placeholder='2'> </div> </div> </div> </script>  <script type='text/x-red' data-help-name='OPCUA-IIoT-Result-Filter'>
 <h2>OPC UA IIoT Result Filter</h2> <p>
 The Result Filter node handles your Read and Listener output and provides the value at the first out and a complex object at the second out. 
</p> <h3>Input</h3> <p>The input works with message objects from Read or Listener node.</p> <p>
For the read results you have to set the array entry to the correct value of where the value is to find!</p> <h3>Output
</h3> <div> <ul> <li>payload (filtered and converted result) </li></ul> </div> <p>
With the to fixed you can setup for Number objects.</p> <p>With the precision you can setup for Number objects.</p> <p>
If there is nothing to convert (data type, precision), then Output 1 and 2 will equal.</p> <strong> <span 
data-i18n='opcua-iiot-contrib.label.justValue'></span> </strong> <p>
With that option, the node does not send an object on out two for less CPU load.</p> <strong>Name</strong> <p>
Name in the flow of Node-RED.</p> <p>Set showErrors to get errors from node-opcua on browse.</p> </script>
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Method-Caller] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Method-Caller', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      connector: {type: "OPCUA-IIoT-Connector", required: true},
      objectId: {value: ""},
      methodId: {value: ""},
      methodType: {value: "basic", required: true},
      value: {value: null},
      justValue: {value: true},
      name: {value: ""},
      showStatusActivities: {value: false},
      showErrors: {value: false},
      inputArguments: {value: []}
    },
    inputs: 1,
    outputs: 1,
    align: "left",
    icon: "icon.png",
    label: function () {
      return this.name || "Method Caller";
    },
    labelStyle: function () {
      return this.name ? "node_label_italic" : "";
    },
    oneditprepare: function () {
      let node = this

      let tabs = RED.tabs.create({
        id: "node-input-method-tabs",
        onchange: function (tab) {
          $("#node-input-method-tabs-content").children().hide()
          $("#" + tab.id).show()
        }
      })

      tabs.addTab({
        id: "opcuaiiot-method-tab-settings",
        label: this._("opcua-iiot-contrib.tabs-label.settings")
      })

      tabs.addTab({
        id: "opcuaiiot-method-tab-argument",
        label: this._("opcua-iiot-contrib.tabs-label.argument")
      })

      // Argument Management
      node.inputArguments.forEach(function (element, index, array) {
        generateArgumentEntry(element, index);
      })

      function generateArgumentEntry (argument, id) {
        let container = $('<li/>', {
          style:
            "background: #fefefe; margin:0; padding:8px 0px; border-bottom: 1px solid #ccc;"
        })
        let row = $('<div id="row' + id + '"/>').appendTo(container)

        $('<i style="color: #eee; cursor: move;" class="node-input-method-argument-handle fa fa-bars"></i>').appendTo(row)

        let nameField = $('<input/>', {
          id: "node-input-method-argument-name" + id,
          class: 'methodArgumentName',
          type: "text",
          style: "margin-left:5px;width:20%;",
          placeholder: 'name'
        }).appendTo(row)

        let datatypeField = $('<select/>', {
          id: "node-input-method-argument-dataType" + id,
          class: 'methodArgumentDatatype',
          type: "text",
          style: "margin-left:5px;width:18%;",
        }).appendTo(row);

        $.getJSON('/opcuaIIoT/plain/DataTypeIds', function (data) {
          $(data).each(function () {
            datatypeField.append($("<option>").attr('value', this).text(this));
          });

          datatypeField.val(argument.dataType)
        })

        let valueField = $('<input/>', {
          id: "node-input-method-argument-value" + id,
          class: 'methodArgumentValue',
          type: "text",
          style: "margin: 0 auto;width:43%;min-width:60px;margin-left:5px",
          placeholder: 'value'
        }).appendTo(row)

        nameField.val(argument.name)
        datatypeField.val(argument.dataType)
        valueField.val(argument.value)

        let finalspan = $('<span/>', {style: "float: right;margin-right: 10px;"}).appendTo(row)

        let removeArgumentButton = $('<a/>', {
          href: "#",
          class: "editor-button editor-button-small",
          style: "margin-top: 7px; margin-left: 5px;"
        }).appendTo(finalspan)

        $('<i/>', {class: "fa fa-remove"}).appendTo(removeArgumentButton)

        removeArgumentButton.click(function () {
          container.css({"background": "#fee"})
          container.fadeOut(300, function () {
            $(this).remove()
          });
        });

        $("#node-input-method-argument-container").append(container)
      }

      $("#node-input-method-argument-container").sortable({
        axis: "y",
        handle: ".node-input-method-argument-handle",
        cursor: "move"
      });

      $("#node-input-method-argument-container .node-input-method-argument-handle").disableSelection()
      let cacheItemCount = 0
      $("#node-input-method-argument-add").click(function () {
        cacheItemCount++
        generateArgumentEntry({name: '', dataType: '', value: ''}, cacheItemCount)
        // length is every time one more than index
        $("#node-input-method-argument-container-div").scrollTop($("#node-input-method-argument-container-div").get(0).scrollHeight)
      })

      // dialog handling
      function switchDialogResize () {
        let rows = $("#dialog-form>div:not(.node-input-method-argument-container-row)")
        let height = $("#dialog-form").height()

        rows.each(function (index, row) {
          height -= row.outerHeight(true)
        })

        let editorRow = $("#dialog-form>div.node-input-method-argument-container-row")
        height -= (parseInt(editorRow.css("marginTop")) + parseInt(editorRow.css("marginBottom")))
        $("#node-input-method-argument-container-div").css("height", height + "px")
      }

      $("#dialog").on("dialogresize", switchDialogResize)

      $("#dialog").on("dialogopen", function (ev) {
        let size = $("#dialog").dialog('option', 'sizeCache-switch')
        if (size) {
          $("#dialog").dialog('option', 'width', size.width)
          $("#dialog").dialog('option', 'height', size.height)
          switchDialogResize()
        } else {
          setTimeout(switchDialogResize, 10)
        }
      })

      $("#dialog").on("dialogclose", function (ev, ui) {
        $("#dialog").off("dialogresize", switchDialogResize)
      })
    },
    oneditsave: function () {
      let node = this

      let cacheArguments = $("#node-input-method-argument-container").children()
      node.inputArguments = []
      cacheArguments.each(function () {
        node.inputArguments.push({
          name: $(this).find(".methodArgumentName").val(),
          dataType: $(this).find(".methodArgumentDatatype").val(),
          value: $(this).find(".methodArgumentValue").val()
        })
      })

      // console.log('well done editsave ...')
    }

  }); </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Method-Caller'>
 <div class='form-row'> <ul style='background:#fff;min-width:600px;margin-bottom:20px' id='node-input-method-tabs'></ul>
 </div> <div id='node-input-method-tabs-content' style='min-height:170px'> <div id='opcuaiiot-method-tab-settings' 
style='display:none'> <div class='form-row' style='min-width:640px'> <label for='node-input-connector'><i 
class='icon-globe'></i> <span data-i18n='opcua-iiot-contrib.label.connector'></span></label> <input type='text' 
id='node-input-connector'> </div> <div class='form-row'> <label for='node-input-objectId'><i class='icon-tasks'></i> 
<span data-i18n='opcua-iiot-contrib.label.objectId'></span></label> <input type='text' id='node-input-objectId' 
placeholder='ns=0;s=Server or ns=0;i=2253'> </div> <div class='form-row'> <label for='node-input-methodId'><i 
class='icon-tasks'></i> <span data-i18n='opcua-iiot-contrib.label.methodId'></span></label> <input type='text' 
id='node-input-methodId' placeholder='ns=1;s=Bark or ns=1;i=VendorName-Bark'> </div> <div class='form-row'> <label 
for='node-input-methodType'><i class='icon-tasks'></i> <span data-i18n='opcua-iiot-contrib.label.methodType'></span>
</label> <select type='text' id='node-input-methodType'> <option value='basic'>Basic</option> <option value='complex'>
Complex</option> </select> </div> <div class='form-row'> <label for='node-input-value'><i class='icon-tag'></i> <span 
data-i18n='opcua-iiot-contrib.label.value'></span></label> <input type='text' id='node-input-value' placeholder=''> 
</div> <div class='form-row'> <label for='node-input-name'><i class='fa fa-tag'></i> <span 
data-i18n='node-red:common.label.name'></span></label> <input type='text' id='node-input-name' placeholder=''> </div> 
<hr> <div class='form-row'> <label style='min-width:160px' for='node-input-justValue'><i class='fa fa-simplybuilt'></i> 
<span data-i18n='opcua-iiot-contrib.label.justValue'></span></label> <input type='checkbox' id='node-input-justValue' 
style='max-width:30px'> </div> <hr> <div class='form-row'> <label style='min-width:160px' 
for='node-input-showStatusActivities'><i class='fa fa-bolt'></i> <span 
data-i18n='opcua-iiot-contrib.label.showActivities'></span></label> <input type='checkbox' 
id='node-input-showStatusActivities' style='max-width:30px'> </div> <div class='form-row'> <label 
style='min-width:160px' for='node-input-showErrors'><i class='fa fa-exclamation-circle'></i> <span 
data-i18n='opcua-iiot-contrib.label.showErrors'></span></label> <input type='checkbox' id='node-input-showErrors' 
style='max-width:30px'> </div> </div> <div id='opcuaiiot-method-tab-argument' style='display:none'> <div 
class='form-row node-input-method-argument-container-row' style='margin-bottom:0'> <div 
id='node-input-method-argument-container-div' 
style='box-sizing:border-box;border-radius:5px;height:340px;padding:5px;border:1px solid #ccc;overflow-y:scroll'> <ol 
id='node-input-method-argument-container' style='list-style-type:none;margin:0'></ol> </div> </div> <div 
class='form-row'> <a href='#' class='editor-button editor-button-small' id='node-input-method-argument-add' 
style='margin-top:4px'><i class='fa fa-plus'></i> <span data-i18n='opcua-iiot-contrib.label.addButton'></span></a> 
</div> </div> </div> </script>  <script type='text/x-red' data-help-name='OPCUA-IIoT-Method-Caller'>
 <h2>OPC UA IIoT Method Caller</h2> <p>The Node is to call a basic or complex method on the OPC UA server.</p> <h3>Input
</h3> <p>
If the settings of the node are filled, then a simple inject will work, otherwise the incoming has to receive a complex message with all parameters.
</p> <p>You need to add your XML definition of types and attributes to the server.</p> <div> <strong>
Simple event message payload could be a simple inject if the node parameters are filled or you have to send the parameters via msg object like: 
</strong> <pre>msg.payload.</pre> <ul> <li>objectId (Object-Id) </li><li>methodId (Method-Id) </li><li>
inputArguments (Array) <ul> <li>name (just to name the method parameter - has no effect to later use for now) </li><li>
dataType (all node-opcua DataTypes) </li><li>value (value or Variant as expected from node-opcua) </li></ul> </li><li>
methodType (basic, complex) </li></ul> </div> <p>
The settings in that node will override incoming data if the msg property is empty or undefined.</p> <div> <strong>
Complex event message:</strong> <ul> <li>objectId (Object-Id) </li><li>methodId (Method-Id) </li><li>
inputArguments (Array) <ul> <li>dataType </li><li>value </li></ul> </li><li>methodType </li><li>nodetype </li></ul> 
</div> <h3>Output</h3> <div> <strong>Event message:</strong> <ul> <li>payload (Array) <ul> <li>statusCode </li><li>
inputArgumentResults (Array) </li><li>inputArgumentDiagnosticInfos (Array) </li><li>outputArguments (Array) </li></ul> 
</li><li>definitionResults <ul> <li>methodId </li><li>methodDefinition </li></ul> </li><li>nodetype (method) </li><li>
methodType </li></ul> </div> <strong>Name</strong> <p>Name in the flow of Node-RED.</p> <p>
Set showErrors to get errors from node-opcua on browse.</p> </script>
<!-- --- [red-module:node-red-contrib-iiot-opcua/OPCUA-IIoT-Discovery] --- -->
<!--
 The BSD 3-Clause License

 Copyright 2022 - DATATRONiQ GmbH (https://datatroniq.com)
 Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)
 Copyright 2015,2016 - Mika Karaila, Valmet Automation Inc. (node-red-contrib-opcua)
 All rights reserved.
 node-red-contrib-iiot-opcua
--> <script type='text/javascript'> RED.nodes.registerType('OPCUA-IIoT-Discovery', {
    category: 'IIoT',
    color: '#ABCDEF',
    defaults: {
      name: {value: ""},
      discoveryPort: {value: 4840}
    },
    inputs: 1,
    outputs: 1,
    align: "left",
    icon: "icon.png",
    label: function () {
      return this.name || "Discovery";
    },
    labelStyle: function () {
      return this.name ? "node_label_italic" : "";
    }
  }); </script> <script type='text/x-red' data-template-name='OPCUA-IIoT-Discovery'>
 <div class='form-row'> <label for='node-input-name'><i class='fa fa-tag'></i> <span 
data-i18n='node-red:common.label.name'></span></label> <input type='text' id='node-input-name' placeholder=''> </div> 
<div class='form-row'> <label for='node-input-discoveryPort'><i class='icon-tag'></i> <span 
data-i18n='node-red:common.label.discoveryPort'></span></label> <input type='text' id='node-input-discoveryPort' 
placeholder='4840'> </div> </script>  <script type='text/x-red' data-help-name='OPCUA-IIoT-Discovery'>
 <h2>OPC UA IIoT Discovery</h2> <p>The OPC UA Discovery server provides the endpoints of all Node-RED OPC UA servers.
</p> <p>Try to access for example via UAExpert:</p> <p>opc.tcp://localhost:4840/</p> <p>opc.tcp://pcname.local:4840/</p>
 <p>Set showErrors to get errors from node-opcua on browse.</p> </script>
<!-- --- [red-module:node-red-contrib-msg-resend/msg-resend] --- -->
<!--
  Copyright 2017, Bart Butenaers
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<script type="text/javascript">
    RED.nodes.registerType('msg-resend',{
        category: 'function',
        color: '#a6bbcf',
        defaults: {
            interval: {value:5,required:true,validate:RED.validators.number()},
            intervalUnit: {value:"secs"},
            maximum: {value:5,validate:RED.validators.number()},
            bytopic: {value:false},
            clone: {value:false},
            firstDelayed: {value:false},
            addCounters: {value:false},
            waitForResend: {value:false},
            highRate: {value:false},
            outputCountField: {value:"", validate:function(v) { 
                // Only required when addCounters is selected
                return !$("#node-input-addCounters").prop("checked") || v; 
            }},
            outputMaxField: {value:"", validate:function(v) { 
                // Only required when addCounters is selected
                return !$("#node-input-addCounters").prop("checked") || v 
            }},
            name: {value:""}
        },
        inputs:1,
        outputs:1,
        icon: "resend.png",
        label: function() {
            return this.name||"msg-resend";
        },
        oneditprepare: function() {
            // Set a default units of 'seconds' for existing nodes that don't have that field yet.
            $('#node-input-intervalUnit').val(this.intervalUnit || "secs");

            // Show the outputCountField value in a typedinput element (dropdown with only 'msg')
            var value = $("#node-input-outputCountField").val() || '';
            $("#node-input-typed-outputCountField").typedInput({types:['msg']});
            $("#node-input-typed-outputCountField").typedInput('type','msg');
            $("#node-input-typed-outputCountField").typedInput('value',value);
            
            // Show the outputMaxField value in a typedinput element (dropdown with only 'msg')
            var value = $("#node-input-outputMaxField").val() || '';
            $("#node-input-typed-outputMaxField").typedInput({types:['msg']});
            $("#node-input-typed-outputMaxField").typedInput('type','msg');
            $("#node-input-typed-outputMaxField").typedInput('value',value);
                
            // Show the rows (concerning the counters detailed settings) only when the checkbox is selected
            if (this.addCounters === true) {
                $(".addCountersDetail-row").show();
            }
            else {
                $(".addCountersDetail-row").hide();
            }
            
            // When the addCounters checkbox is selected afterwards, the visibility of the rows (concerning the counters detailed settings)
            $("#node-input-addCounters").change(function() {
                if(this.checked) {
                    $(".addCountersDetail-row").show();
                }
                else {
                    $(".addCountersDetail-row").hide();
                }
            });                        
        },
        oneditsave: function() {
            // Copy the outputCountField value from the typedinput element to the outputCountField element
            var value = $("#node-input-typed-outputCountField").typedInput('value');
            $("#node-input-outputCountField").val(value);
            
            // Copy the outputMaxField value from the typedinput element to the outputMaxField element
            var value = $("#node-input-typed-outputMaxField").typedInput('value');
            $("#node-input-outputMaxField").val(value);
        }
    });
</script>

<script type="text/x-red" data-template-name="msg-resend">
    <div class="form-row">
        <label for="node-input-interval"><i class="fa fa-tasks"></i> Interval</label>
        <input type="number" id="node-input-interval" style="width:180px;" placeholder="Interval">
        <select id="node-input-intervalUnit" style="width:120px;">
            <option value="msecs">MilliSeconds</option>
            <option value="secs">Seconds</option>
            <option value="mins">Minutes</option>
            <option value="hours">Hours</option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-maximum"><i class="fa fa-hashtag"></i> Max. count</label>
        <input type="number" id="node-input-maximum" placeholder="Max. count">
    </div>
    <div class="form-row">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-bytopic" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-bytopic" style="width:70%;">Topic dependent</label>
    </div>
    <div class="form-row">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-clone" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-clone" style="width:70%;">Force cloning</label>
    </div>
    <div class="form-row">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-firstDelayed" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-firstDelayed" style="width:70%;">Send first message after interval</label>
    </div>
    <div class="form-row">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-highRate" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-highRate" style="width:70%;">Allow messages to arrive at high rates</label>
    </div>
    <div class="form-row">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-addCounters" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-addCounters" style="width:70%;">Add counters to output message</label>
    </div>
    <div class="form-row">
        <label>&nbsp;</label>
        <input type="checkbox" id="node-input-waitForResend" style="display: inline-block; width: auto; vertical-align: top;">
        <label for="node-input-waitForResend" style="width:70%;">Wait for explicit resend_messages=true message</label>
    </div>   
    <div class="form-row addCountersDetail-row">
        <label for="node-input-typed-outputCountField"><i class="fa fa-list"></i> Output count</label>
        <input id="node-input-typed-outputCountField" type="text" style="width: 70%">
        <input id="node-input-outputCountField" type="hidden">
    </div>
    <div class="form-row addCountersDetail-row">
        <label for="node-input-typed-outputMaxField"><i class="fa fa-list"></i> Output max</label>
        <input id="node-input-typed-outputMaxField" type="text" style="width: 70%">
        <input id="node-input-outputMaxField" type="hidden">
    </div>
    <br/>
    <div class="form-row">
        <label for="node-input-name"><i class="icon-tag"></i> Name</label>
        <input type="text" id="node-input-name" placeholder="Name">
    </div>
</script>



<script type="text/x-red" data-help-name="msg-resend">
    <p>A simple node to resend input messages.</p>
    <p>When a new input message arrives, it will be (re)sent to the output port at specified time intervals.  This process will repeat until the next input message arrives, or until the maximum number of resends has been reached.</p>
    <p>See the readme page on <a target="_blank" href="https://github.com/bartbutenaers/node-red-contrib-msg-resend">Github</a> for more information,</p>
    <p><strong>Interval:</strong><br/>
    This is the interval between two resends, with a specified time unit.
    For example: an interval of <code>5 seconds</code> means, that the last input message will be resend every 5 seconds.</p>
    <p><strong>Output max:</strong><br/>
    When an output message field name is specified, the maximum count will be included in that field.</p>
    <p><strong>Topic dependent:</strong><br/>
    When selected, a separte resending process will be started for every topic.  Messages with empty topic will be ignored.</p>
    <p><strong>Force cloning:</strong><br/>
    When selected, the <code>msg</code> will be cloned anyway, independent from message cloning by the Node-Red flow framework.</p>
    <p><strong>Send first message after interval:</strong><br/>
    When selected, the first <code>msg</code> will be send after the interval.  When deselected, the first message will be send immediately.</p>
    <p><strong>Allow messages to arrive at high rates:</strong><br/>
    When this option is enabled, all messages will be accepted (even the ones that arrive very fast after the previous message). However make sure that messages don't keep arriving at high rate for a long time period.</p>
    <p><strong>Add counters to output message:</strong><br/>
    When selected, the current message counter and the maximum count will be added to the output message (in the two specified message fields).</p>
    <p><strong>Wait for explicit resend_messages=true message:</strong><br/>
    When selected, will pass the messages (without resending them) at startup until a <code>msg.resend_messages=true</code> message arrives.</p>    
    <p><strong>Max. count:</strong><br/>
    This is the maximum number of times that the same input message will be resend. A value of <code>0</code> means infinite (i.e. no maximum).
    For example: a maximum of <code>10</code> means, that the last input message will be resend maximum 10 times.</p>
    <p><strong>Output count:</strong><br/>
    When an output message field name is specified, the current message count will be included in that field.</p>
    <p><strong>Abort current resend sequence:</strong><br/>
    To abort a resend sequence in progress, simply send another message containing <code>msg.resend_ignore</code> and set it to boolean <code>true</code><br/>
    This way the original resending is ended and no new resending process is started.</p>
    
</script>
<!-- --- [red-module:node-red-contrib-opcua/OpcUa-Item] --- -->
<!--

Copyright 2015 Valmet Automation Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<script type="text/javascript">
    RED.nodes.registerType('OpcUa-Item',{
        category: 'opcua',
        color:"#3FADB5",
        defaults: {
            item: {value: "", required: true},
            datatype: {value: "", required: true},
            value: {value: null},
            name: {value: ""}
        },
        inputs:1,
        outputs:1,
        align: "right",
        icon: "opcuanodeLogo.png",
        label: function() {
            return this.name || "OPC UA Item";
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        }
    });
</script>



<script type="text/x-red" data-template-name="OpcUa-Item">
    <div class="form-row">
        <label for="node-input-item"><i class="icon-tasks"></i> Item</label>
        <input type="text" id="node-input-item" placeholder="ns=2;s=MySwitch or ns=2;i=1234 or br=/objects/3:Simulation/3:Counter">
    </div>
    <div class="form-row">
        <label for="node-input-datatype"><i class="icon-tasks"></i> Type</label>
        <select type="text" id="node-input-datatype">
            <option value="Int8">Int8</option>
            <option value="Int16">Int16</option>
            <option value="Int32">Int32</option>
            <option value="Int64">Int64</option>
            <option value="UInt8">UInt8</option>
            <option value="UInt16">UInt16</option>
            <option value="UInt32">UInt32</option>
            <option value="UInt64">UInt64</option>
            <option value="Byte">Byte</option>
            <option value="SByte">SByte</option>
            <option value="Float">Float</option>
            <option value="Double">Double</option>
            <option value="Boolean">Boolean</option>
            <option value="String">String</option>
            <option value="LocalizedText">LocalizedText</option>
			<option value="DateTime">DateTime</option>
            <option value="Int8 Array">Int8 Array</option>
            <option value="Int16 Array">Int16 Array</option>
            <option value="Int32 Array">Int32 Array</option>
            <option value="UInt8 Array">UInt8 Array</option>
            <option value="UInt16 Array">UInt16 Array</option>
            <option value="UInt32 Array">UInt32 Array</option>
            <option value="Byte Array">Byte Array</option>
            <option value="SByte Array">SByte Array</option>
            <option value="String Array">String Array</option>
            <option value="Float Array">Float Array</option>
            <option value="Double Array">Double Array</option>
            <option value="Boolean Array">Boolean Array</option>
            <option value="Extension Object">ExtensionObject</option>
            <option value="Extension Object Array">ExtensionObject Array</option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-value"><i class="icon-tag"></i> Value</label>
        <input type="text" id="node-input-value" placeholder="">
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="icon-tag"></i> Name</label>
        <input type="text" id="node-input-name" placeholder="">
    </div>
</script>



<script type="text/x-red" data-help-name="OpcUa-Item">
    <p>Defines OPC UA item, type and value.</p>
    <p>Item contains valid OPC UA address like ns=2;i=4 OR ns=3;s=MyVariable</p>
    <p>There are not all Types possible for now, but you can select some.</p>
    <p>Value is needed only if item will be written to OPC UA server.</p>
    <p>If value isn't filled, OpcUa-Item sends input <strong>msg.payload</strong>.</p>
    <p>Array values are delimited by , and must be given in following syntax:</p>
    <p>5,4,3,2,1</p>
    <p><strong>NOTE:</strong> Item value can be used as initial value when msg.payload is empty.</p>
    <p>      Otherwise msg.payload is used to set value.</p>
</script>
<!-- --- [red-module:node-red-contrib-opcua/OpcUa-Client] --- -->
<!--

Copyright 2015 Valmet Automation Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<script type="text/javascript">
    RED.nodes.registerType('OpcUa-Client', {
        category: 'opcua',
        color: "#3FADB5",
        defaults: {
            endpoint: {value: "", required: true, type: "OpcUa-Endpoint"},
            action: {value: "read", required: true},
            deadbandtype: {value: "a"},
            deadbandvalue: {value: 1},
            time: {value: 10},
            timeUnit: {value: "s"},
            // These are fixed or can be read through endPoint
            certificate: {value: "n"}, 
            localfile: {value: ""},
            localkeyfile: {value: ""},
            securitymode: {value: "None"},
            securitypolicy: {value: "None"},
            useTransport: {value: false, required: false},
            maxChunkCount: {value: 1, required: false},
            maxMessageSize: {value: 8192, required: false}, // should be at least 8192
            receiveBufferSize: {value: 8192, required: false},
            sendBufferSize: {value: 8192, required: false},
            name: {value: ""}
        },
        inputs: 1,
        outputs: 2,
        align: "right",
        icon: "opcuanodeLogo.png",
        label: function () {
            return this.name || "OPC UA Client";
        },
        labelStyle: function () {
            return this.name ? "node_label_italic" : "";
        },
        oneditprepare: function () {

            var node = this;

            try {
                var inputAction = $('#node-input-action');
                var inputTime = $('#node-input-timerow');
                var inputDeadband = $('#node-input-deadband');
                change_time_input(); // first to fit config now
                inputAction.change(change_time_input);

            } catch (err) {
                node.error(err);
            }

            function change_time_input() {
                if (inputAction.val() == "subscribe" || inputAction.val() == "events" || inputAction.val() == "monitor") {
                    inputTime.show();
                }
                else {
                    inputTime.hide();
                }
                if (inputAction.val() == "monitor") {
                    inputDeadband.show();
                }
                else {
                    inputDeadband.hide();
                }

            }
        }
    });
</script>


<script type="text/x-red" data-template-name="OpcUa-Client">
    <div class="form-row">
        <label for="node-input-endpoint"><i class="icon-tasks"></i> Endpoint</label>
        <input type="text" id="node-input-endpoint" placeholder="opc.tcp://localhost:4334">
    </div>
     <div class="form-row">
        <label for="node-input-action"><i class="fa fa-tasks"></i> Action</label>
        <select type="text" id="node-input-action" style="width:72%;">
            <option selected value="read">READ</option>
            <option value="write">WRITE</option>
            <option value="browse">BROWSE</option>
            <option value="subscribe">SUBSCRIBE</option>
            <option value="unsubscribe">UNSUBSCRIBE</option>
            <option value="deletesubscription">DELETE SUBSCRIPTION</option>
            <option value="events">EVENTS</option>
            <option value="info">INFO</option>
            <option value="build">BUILD</option>
            <option value="monitor">MONITOR</option>
            <option value="readmultiple">READ MULTIPLE</option>
            <option value="writemultiple">WRITE MULTIPLE</option>
            <option value="register">REGISTER</option>
            <option value="unregister">UNREGISTER</option>
            <option value="acknowledge">ACKNOWLEDGE</option>
            <option value="history">HISTORY</option>
            <option value="readfile">READ FILE</option>
            <option value="writefile">WRITE FILE</option>
            <option value="connect">CONNECT</option>
            <option value="disconnect">DISCONNECT</option>
            <option value="reconnect">RE-CONNECT</option>
            <option value="method">METHOD</option>
        </select>
    </div>
    <div class="form-row" id="node-input-timerow">
        <label for="node-input-time"><i class="icon-time"></i> Interval</label>
        <input type="number" id="node-input-time" placeholder="number" style="max-width:120px">
        <select id="node-input-timeUnit" style="max-width:160px">
            <option value="ms">millisecond(s)</option>
            <option value="s">second(s)</option>
            <option value="m">minute(s)</option>
            <option value="h">hour(s)</option>
        </select>
    </div>
    <div class="form-row" id="node-input-deadband">
        <label for="node-input-deadbandlabel"><i class="icon-time"></i> Deadband Type</label>
        <input type="number" id="node-input-deadbandvalue" placeholder="number" style="max-width:120px">
        <select id="node-input-deadbandtype" style="max-width:160px">
            <option value="a">Absolute</option>
            <option value="p">Percent</option>
        </select>
    </div>
    <div class="form-row" id="node-input-servercertificate">
        <label for="node-input-location"><i class="icon-time"></i> Certificate</label>
        <select id="node-input-certificate" style="width:72%;">
            <option value="n">None, use generated self-signed certificate</option>
            <option value="l">Local certificate file, give path with filename (pem)</option>
        </select>
    </div>
	<div class="form-row">
        <label for="node-input-path"><i class="icon-tasks"></i> Local certificate file with absolute path</label>
        <input type="text" id="node-input-localfile" placeholder="Not used anymore! selfSigned.pem">
    </div>
	<div class="form-row">
        <label for="node-input-path"><i class="icon-tasks"></i> Local private key file with absolute path</label>
        <input type="text" id="node-input-localkeyfile" placeholder="Not used anymore! private_key.pem">
    </div>
    <div class="form-row">
        <label for="node-input-useTransport"><i class="icon-tasks"></i> Use transport settings</label>
        <input type="checkbox" id="node-input-useTransport" placeholder="">
    </div>
    <div class="form-row">
        <label for="node-input-maxChunkCount"><i class="icon-tasks"></i> Max ChunkCount</label>
        <input type="number" id="node-input-maxChunkCount" placeholder=1 style="width:20%;">
    </div>
    <div class="form-row">
        <label for="node-input-maxMessageSize"><i class="icon-tasks"></i> Max MessageSize</label>
        <input type="number" id="node-input-maxMessageSize" placeholder=8192 style="width:20%;">
    </div>
    <div class="form-row">
        <label for="node-input-receiveBufferSize"><i class="icon-tasks"></i> Receive BufferSize</label>
        <input type="number" id="node-input-receiveBufferSize" placeholder=8192 style="width:20%;">
    </div>
    <div class="form-row">
        <label for="node-input-sendBufferSize"><i class="icon-tasks"></i> Send BufferSize</label>
        <input type="number" id="node-input-sendBufferSize" placeholder=8192 style="width:20%;">
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="icon-tasks"></i> Name</label>
        <input type="text" id="node-input-name" placeholder="">
    </div>
</script>


<script type="text/x-red" data-help-name="OpcUa-Client">
    <p>Connect to an endpoint like opc.tcp://host:port/UA/EndpointName.</p>
    <p>Actions are:</p>
    <p>
        <ul>
            <li>Read</li>
            <li>Write</li>
            <li>Browse</li>
            <li>Subscribe</li>
            <li>Unsubscribe</li>
            <li>Deletesubscription</li>
            <li>Event</li>
            <li>Info</li>
            <li>Build</li>
            <li>Monitor</li>
            <li>Read Multiple</li>
            <li>Write Multiple</li>
            <li>Register</li>
            <li>Unregister</li>
            <li>Acknowledge</li>
            <li>History</li>
            <li>Read file</li>
            <li>Write file</li>
            <li>Connect</li>
            <li>Disconnect</li>
            <li>Reconnect</li>
            <li>Method</li>
         </ul>
    </p>
    <p>Server certificate options are:</p>
    <p>
        <ul>
            <li>None</li>
            <li>Local certificate file (.pem)</li>
            <li>Local private key file (.pem)</li>
         </ul>
    </p>
    <p>Certificate is not needed if security is None.</p>
    <p>Client will try to load server certificate from endpoint if server can provide it (copy server certificate under pki folder).</p>
    <p>Local file with relative path and certificate filename can be then used to use server certificate (.pem ending file).</p>
    <p>User can manually copy server certificate.</p>
    <p>Inject your OPC UA address (NodeId) by the <strong>Topic</strong> of an Inject node or with the OpcUa-Item cotrolled by an Inject node.</p>
    <p>To Read/Write inject the Topic for every operation.</p>
    <p>Use register to registerNodeIds, if server supports registeredNodes then it will perform better on normal read or readMultiple</p>
    <p>Use unregister to unregisterNodeIds, if server supports unregisteredNodes then it will release earlier registered nodeIds</p>
    <p>Acknowledge can be used to acknowledge event/condition, msg must contain topic (alarm nodeId), conditionId (nodeId of eventId) and comment</p>
    <p>The value to Write should be injected by an OpcUa-Item.</p>
    <p>Inject the Topic only once on Subscribe or Event for subscription and you got the changing value on every Interval.
        Every inject subscribes a new monitored Item.</p>
    <p>Interval is setting for Client <strong>requestedPublishingInterval</strong> (default: 100ms).</p>
    <p>Input <strong>msg.payload</strong> can bring an samplingInterval for monitored Items/Events in subscription (default: 100ms).</p>
    <p>Monitor will ask additional parameters like Absolute or Percent and deadband value</p>
    <p>Read multiple will first store all input msg nodeId values to array</p>
    <p> when input message is string readmultiple then actual read is done. NOTE: If payload == ALL then all values are in one msg.payload</p>
    <p> when input message is string clearitems then nodeId array is cleared</p>
    <p>Subscribe topic contains nodeId and datatype. NOTE: topic "multiple" and payload array of {nodeId: "ns=1;s=example", datatype: "Double}"<p>
    <p>  Look examples folder and flow file OPCUA-MULTI-SUB.json<p>
    <p>Info read attributes from the given nodeId</p>
    <p>Build will construct Extension Object message with topic, datatype and payload (value)</p>
    <p>Browse will lookup address space from the injected msg.topic (nodeId)</p>
    <p> if msg.collect === true then result will be collected into one msg. msg.payload will be array of items</p>
    <p> msg.payload.range = "2:4" and FloatArray or any Array datatype then indexes from 2 to 4 will be used to read or write depending on action</p>
    <p>History will read mdg.topic = nodeId and msg.aggregate = "raw", historical values or aggregate "min" or "max" or "ave" or "interpolative"</p>
    <p> Other needed parameters start time and end time:
    <p> msg.start if not given 1 hour from now will be used</p>
    <p> msg.end   if not given default value is now</p>
    <p>Read file will read msg.topic nodeId from the server File object, msg.payload will contain buffer</p>
    <p>Write file will write msg.topic nodeId to the server File object, msg.payload will contain buffer OR msg.fileName path to local file to be written to server </p>



    <p>The second Output is for status monitoring purposes: allowing management of endpoints, their errors and statuses</p>
    <p>Second Output shall look like this: '{error: {error} , endpoint: {opcuaEndpoint}, status: {currentStatus} }'</p>
</script>
<!-- --- [red-module:node-red-contrib-opcua/OpcUa-Browser] --- -->
<!--

Copyright 2015 Valmet Automation Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<script type="text/javascript">

    RED.nodes.registerType('OpcUa-Browser', {
        category: 'opcua',
        color: "#3FADB5",
        defaults: {
            endpoint: {value: "", required: true, type: "OpcUa-Endpoint"},
            item: {value: ""},
            datatype: {value: ""},
            topic: {value: ""},
            items: {value: []},
            name: {value: ""}
        },
        inputs: 1,
        outputs: 1,
        align: "right",
        icon: "opcuanodeLogo.png",
        label: function () {
            return this.item || "OPC UA Browser";
        },
        labelStyle: function () {
            return this.item ? "node_label_italic" : "";
        }
    });
</script>

<script type="text/x-red" data-template-name="OpcUa-Browser">
    <div class="form-row" style="min-width:640px">
        <label for="node-input-endpoint"><i class="icon-bookmark"></i> Endpoint</label>
        <input type="text" id="node-input-endpoint">
    </div>
    <div class="form-row">
        <label for="node-input-topic"><i class="icon-search"></i> Topic</label>
        <input type="text" id="node-input-topic" placeholder="ns=0;i=85">
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="icon-search"></i> Name</label>
        <input type="text" id="node-input-name" placeholder="OPC UA Browser">
    </div>
</script>




<script type="text/x-red" data-help-name="OpcUa-Browser">

    <p>Connect to an endpoint: opc.tcp://host:port/UA/EndpointName</p>

    <p><strong>Inject</strong> a Timestamp or fill <strong>topic</strong> of <strong>msg</strong> object to browse.</p>

    <p>Browsers <strong>Topic</strong> field is to define one browsable OPC UA Item address like ns=0;i=85</p>

    <p><strong>Payload</strong> contains just references of the give OPC UA address.</p>
</script>
<!-- --- [red-module:node-red-contrib-opcua/OpcUa-Server] --- -->
<!--

Copyright 2015 Valmet Automation Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<script type="text/javascript">
    RED.nodes.registerType('OpcUa-Server',{
        category: 'opcua',
        color:"#3FADB5",
        defaults: {
            port: {value: "53880", required: true},
            name: {value:""},
            endpoint: {value: ""},
            users: {value: "users.json"},
            nodesetDir: {value: ""},
            autoAcceptUnknownCertificate: {value: true},
            registerToDiscovery: {value: false},
            constructDefaultAddressSpace: {value: true},
            allowAnonymous: {value: true, required: true},
            endpointNone: {value: true},
            endpointSign: {value: true},
            endpointSignEncrypt: {value: true},
            endpointBasic128Rsa15: {value: true},
            endpointBasic256: {value: true},
            endpointBasic256Sha256: {value: true},
            maxNodesPerBrowse: {value: 0, required: false},
            maxNodesPerHistoryReadData: {value: 0, required: false},
            maxNodesPerHistoryReadEvents: {value: 0, required: false},
            maxNodesPerHistoryUpdateData: {value: 0, required: false},
            maxNodesPerRead: {value: 0, required: false},
            maxNodesPerWrite: {value: 0, required: false},
            maxNodesPerMethodCall: {value: 0, required: false},
            maxNodesPerRegisterNodes: {value: 0, required: false},
            maxNodesPerNodeManagement: {value: 0, required: false},
            maxMonitoredItemsPerCall: {value: 0, required: false},
            maxNodesPerHistoryUpdateEvents: {value: 0, required: false},
            maxNodesPerTranslateBrowsePathsToNodeIds: {value: 0, required: false},
            maxConnectionsPerEndpoint: {value: 20, required: false},
            maxMessageSize: {value: 4096, required: false},
            maxBufferSize: {value: 4096, required: false},
            maxSessions: {value: 20 , required: false}
        },
        inputs:1,
        outputs:1,
        align: "right",
        icon: "opcuanodeLogo.png",
        label: function() {
            return this.name || "OPC UA server";
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        }
    });
</script>



<script type="text/x-red" data-template-name="OpcUa-Server">
    <div class="form-row">
        <label for="node-input-port"><i class="icon-tasks"></i> Port</label>
        <!-- dynamic Ports from 49152 to 65535 (c000hex bis FFFFhex) -->
        <input type="text" id="node-input-port" placeholder="Ports 49152 bis 65535 (c000hex bis FFFFhex)">
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="icon-tasks"></i> Name</label>
        <input type="text" id="node-input-name" placeholder="">
    </div>
    <div class="form-row">
        <label for="node-input-endpoint"><i class="icon-tasks"></i> ResourcePath</label>
        <input type="text" id="node-input-endpoint" placeholder="UA/SimpleNodeRedServer">
    </div>
    <div class="form-row">
        <label for="node-input-users"><i class="icon-tasks"></i> Users file</label>
        <input type="text" id="node-input-users" placeholder="users.json">
    </div>
    <div class="form-row">
        <label for="node-input-nodesetDir"><i class="icon-tasks"></i> Custom nodeset directory</label>
        <input type="text" id="node-input-nodesetDir" placeholder="">
    </div>
    <div class="form-row">
        <label for="node-input-autoAcceptUnknownCertificate" style="width:72%;"><i class="icon-tasks"></i> Auto Accept Unknown Certificates</label>
        <input type="checkbox" id="node-input-autoAcceptUnknownCertificate" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-registerToDiscovery" style="width:72%;"><i class="icon-tasks"></i> Register to Local Discovery</label>
        <input type="checkbox" id="node-input-registerToDiscovery" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-constructDefaultAddressSpace" style="width:72%;"><i class="icon-tasks"></i> Build default AddressSpace</label>
        <input type="checkbox" id="node-input-constructDefaultAddressSpace" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-allowAnonymous" style="width:72%;"><i class="icon-tasks"></i> Allow anonymous user</label>
        <input type="checkbox" id="node-input-allowAnonymous" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-endpointNone" style="width:72%;"><i class="icon-tasks"></i> Security mode: None</label>
        <input type="checkbox" id="node-input-endpointNone" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-endpointSign" style="width:72%;"><i class="icon-tasks"></i> Security mode: Sign</label>
        <input type="checkbox" id="node-input-endpointSign" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-endpointSignEncrypt" style="width:72%;"><i class="icon-tasks"></i> Security mode: Sign & Encrypt</label>
        <input type="checkbox" id="node-input-endpointSignEncrypt" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-endpointBasic128Rsa15" style="width:72%;"><i class="icon-tasks"></i> Security policy: Basic128-Rsa15</label>
        <input type="checkbox" id="node-input-endpointBasic128Rsa15" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-endpointBasic256" style="width:72%;"><i class="icon-tasks"></i> Security policy: Basic256</label>
        <input type="checkbox" id="node-input-endpointBasic256" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-endpointBasic256Sha256" style="width:72%;"><i class="icon-tasks"></i> Security policy: Basic256-Sha256</label>
        <input type="checkbox" id="node-input-endpointBasic256Sha256" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-maxNodesPerBrowse" style="width:72%;"><i class="icon-tasks"></i> maxNodesPerBrowse</label>
        <input type="number" id="node-input-maxNodesPerBrowse" placeholder="number" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxNodesPerHistoryReadData" style="width:72%;"><i class="icon-tasks"></i> maxNodesPerHistoryReadData</label>
        <input type="number" id="node-input-maxNodesPerHistoryReadData" placeholder="number" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxNodesPerHistoryReadEvents" style="width:72%;"><i class="icon-tasks"></i> maxNodesPerHistoryReadEvents</label>
        <input type="number" id="node-input-maxNodesPerHistoryReadEvents" placeholder="number" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxNodesPerHistoryUpdateData" style="width:72%;"><i class="icon-tasks"></i> maxNodesPerHistoryUpdateData</label>
        <input type="number" id="node-input-maxNodesPerHistoryUpdateData" placeholder="number" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxNodesPerRead" style="width:72%;"><i class="icon-tasks"></i> maxNodesPerRead</label>
        <input type="number" id="node-input-maxNodesPerRead" placeholder="number" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxNodesPerWrite" style="width:72%;"><i class="icon-tasks"></i> maxNodesPerWrite</label>
        <input type="number" id="node-input-maxNodesPerWrite" placeholder="number" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxNodesPerMethodCall" style="width:72%;"><i class="icon-tasks"></i> maxNodesPerMethodCall</label>
        <input type="number" id="node-input-maxNodesPerMethodCall" placeholder="number" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxNodesPerRegisterNodes" style="width:72%;"><i class="icon-tasks"></i> maxNodesPerRegisterNodes</label>
        <input type="number" id="node-input-maxNodesPerRegisterNodes" placeholder="number" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxNodesPerNodeManagement" style="width:72%;"><i class="icon-tasks"></i> maxNodesPerNodeManagement</label>
        <input type="number" id="node-input-maxNodesPerNodeManagement" placeholder="number" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxMonitoredItemsPerCall" style="width:72%;"><i class="icon-tasks"></i> maxMonitoredItemsPerCall</label>
        <input type="number" id="node-input-maxMonitoredItemsPerCall" placeholder="number" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxNodesPerHistoryUpdateEvents" style="width:72%;"><i class="icon-tasks"></i> maxNodesPerHistoryUpdateEvents</label>
        <input type="number" id="node-input-maxNodesPerHistoryUpdateEvents" placeholder="number" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxNodesPerTranslateBrowsePathsToNodeIds" style="width:72%;"><i class="icon-tasks"></i> maxNodesPerTranslateBrowsePathsToNodeIds</label>
        <input type="number" id="node-input-maxNodesPerTranslateBrowsePathsToNodeIds" placeholder="number" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxConnectionsPerEndpoint" style="width:72%;"><i class="icon-tasks"></i> maxConnectionsPerEndpoint</label>
        <input type="number" id="node-input-maxConnectionsPerEndpoint" placeholder="number" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxMessageSize" style="width:72%;"><i class="icon-tasks"></i> maxMessageSize</label>
        <input type="number" id="node-input-maxMessageSize" placeholder="4096" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxBufferSize" style="width:72%;"><i class="icon-tasks"></i> maxBufferSize</label>
        <input type="number" id="node-input-maxBufferSize" placeholder="4096" style="max-width:100px">
    </div>
    <div class="form-row">
        <label for="node-input-maxSessions" style="width:72%;"><i class="icon-tasks"></i> maxSessions</label>
        <input type="number" id="node-input-maxSessions" style="max-width:100px">
    </div>
</script>


<script type="text/x-red" data-help-name="OpcUa-Server">
    <p>Creates OPC UA server with own variables, object structures and methods to endpoint: opc.tcp://localhost:PORT/ResourcePath/</p>
    <p>Parameters PORT and ResourcePath can be given for the server.</p>
    <p>File that contains username, password and role.</p>
    <p>Register to local Discover Server, if true => OPC UA Server will register itself to opc.tcp://localhost:4840</p>
    <p>ConstructDefaultAddressSpace, if false then Server AddressSpace will be empty (no VendorName and sub objects)<p>
    <p>Server active endpoints from security mode and policy:</p>
    <p>Security mode: None Sign SignAndEncrypt<p>
    <p>Security policy: Basic128-Rsa15 | Basic256 | Basic128-Sha256<p>
    <p>maxSessions: Maximum number of sessions allowed by the server, default 20. Changing might impact performance.<p>    
    <p>
        OPC UA server commands:
        <ul>
            <li><b>restartOPCUAServer</b></li>
            <li><b>addEquipment</b></li>
            <li><b>addPhysicalAsset</b></li>
            <li><b>setFolder</b>   msg.topic = "folderName"  // Example topic format ns=1;s=FolderName (note: uses this as parentFolder)</li>
            <li><b>addFolder</b>          msg.topic = "ns=1;s=NewFolder"  // Note parent folder is objects if not set by setFolder, newFolder is set to parentFolder</li>
            <li><b>addVariable</b>        msg.topic = "ns=1;s=VariableName;datatype=Double" // parent folder is set above</li>
            <li><b>installHistorian</b>   msg.topic = "ns=1;s=VariableName;datatype=Double</li>
            <li><b>installDiscreteAlarm</b> msg.topic = "ns=1;s=VariableName;datatype=Double" parentObject msg.alarmText for the alarm, msg.priority for alarm severity</li>
            <li><b>installLimitAlarm</b>  msg.topic = "ns=1;s=VariableName;datatype=Double" parentObject msg.hh=highhighLimit, msg.h=highLimit, msg.l=lowLimit, msg.ll=lowlowLimit</li>
            <li><b>addExtensionObject</b> msg.topic = "ns=1;s=VariableName;datatype=ExtensionObject;TypeId=ns=3;i=1001</li>
            <li><b>deleteNode</b>         msg.payload = "ns=1;s=VariableName"</li>
            <li><b>registerNamespace</b>  msg.topic = "www.acme.com" output msg.payload = ns=index </li>
            <li><b>getNamespaceIndex</b>  msg.topic = "www.acme.com" output msg.payload = ns=index </li>
            <li><b>getNamespaces</b>      output msg.payload = { nsuri1: 1, nsuri2: 2, ... }</li>
            <li><b>setUsers</b>           msg.topic = "" msg.users JSON structure of users (username, password role)</li>
            <li><b>addFile</b>            msg.topic = "ns=1;s=test.txt" // Note parent folder is objects if not set by setFolder/addFolder</li>
            <li><b>saveAddressSpace</b>   msg.filename ="./test.xml" // Saves current AddressSpace into the given filename. If msg.topic used, it should contain namespace index that will be saved. </li>
            <li><b>loadAddressSpace</b>   msg.filename ="./test.xml" // Load AddressSpace from the given filename.</li>
            <li><b>bindVariables</b>      Bind same node.send(msg) callbacks to get/set methods as addVariable</li>
            <li><b>bindMethod</b>         msg.topic = nodeId, msg.code can be given in function node that contains method function</li>
        </ul>

        Examples JSON Injects: <br />
        <pre>
        msg.payload = { "opcuaCommand": "addEquipment",  "nodeName": "Machine" }
        </pre>
        <pre>
        { "opcuaCommand": "restartOPCUAServer" }
        { "opcuaCommand": "addEquipment",  "nodeName": "Machine" }
        { "opcuaCommand": "addPhysicalAsset",  "nodeName": "PhysicalAsset" }
        { "opcuaCommand": "deleteNode",  "nodeId": "ns=4;s=PhysicalAsset2" }
        </pre>
        <pre>
            msg.payload = { "opcuaCommand": "addFile",  "fileName": "c:/temp/test.txt" }
        </pre>
    </p>
    <p>
        OPC UA message type to set variable Counter by JSON Inject
        <pre>
        { payload : { "messageType" : "Variable", "namespace" : "1", "variableName": "Counter",  "variableValue": msg.payload }};
        </pre>
    </p>
    <p>
        Server will send message as client will connect or disconnect.<br>
        Topic: Client-connected or Client-disconnected, payload: session name (depends on client implementation)
    </p>
    <p>
        Server operation limits can be set by node UI dialog.
    </p>
</script>
<!-- --- [red-module:node-red-contrib-opcua/OpcUa-Endpoint] --- -->
<!--

Copyright 2015 Valmet Automation Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<script type="text/javascript">
    RED.nodes.registerType('OpcUa-Endpoint', {
        category: 'config',
        defaults: {
            endpoint: {value: "", required: true},
            secpol: {value: "None"},
            secmode: {value: "None"},
            none: {value: true},
            login: {value: false},
            usercert: {value: false},
            usercertificate: {value: ""},
            userprivatekey: {value: ""},
        },
        credentials: {
            user: {type: "text"},
            password: {type: "password"}
        },
        label: function () {
            return this.endpoint || "OPC UA Endpoint";
        },
        oneditprepare: function () {
            var node = this;
            try {
                var noneCheckbox = $("#node-config-input-none");
                var loginCheckbox = $("#node-config-input-login");
                var usercertCheckbox = $("#node-config-input-usercert");
                var authRow = $(".node-input-useAuth-row");
                var certRow = $(".node-input-userCert-row");
                noneCheckbox.prop('checked', node.none);
                loginCheckbox.prop('checked', node.login);
                usercertCheckbox.prop('checked', node.usercert);

                if (node.none === true) {
                    noneCheckbox.prop('checked', true);
                    // authRow.show();
                    $('#node-input-user').val('');
                    $('#node-input-password').val('');
                } else {
                    noneCheckbox.prop('checked', false);
                    // loginCheckbox.prop('checked', false);
                    // usercertCheckbox.prop('checked', false);
                    // authRow.hide();
                    if (node.login === true) {
                        authRow.show();
                    }
                    else {
                        authRow.hide();
                    }
                    if (node.usercert === true) {
                        certRow.show();
                    }
                    else {
                        certRow.hide();
                    }
                }

                if (node.login === true) {
                    loginCheckbox.prop('checked', true);
                    authRow.show();
                } else {
                    loginCheckbox.prop('checked', false);
                    authRow.hide();
                }

                if (node.usercert === true) {
                    usercertCheckbox.prop('checked', true);
                    certRow.show();
                    $('#node-input-user').val('');
                    $('#node-input-password').val('');
                } else {
                    usercertCheckbox.prop('checked', false);
                    certRow.hide();
                }
                noneCheckbox.change(function () {
                    if ($(this).is(":checked")) {
                        console.log("Changed Anonymous: TRUE");
                        node.none = true;
                        noneCheckbox.prop('checked', true);
                        loginCheckbox.prop('checked', false);
                        usercertCheckbox.prop('checked', false);
                        $('#node-input-user').val('');
                        $('#node-input-password').val('');
                        authRow.hide();
                        certRow.hide();
                    } else {
                        console.log("Changed Anonymous: FALSE");
                        node.none = false;
                        // $('#node-input-user').val('');
                        // $('#node-input-password').val('');
                    }
                });

                loginCheckbox.change(function () {
                    if ($(this).is(":checked")) {
                        login = true;
                        usercertCheckbox.prop('checked', false);
                        noneCheckbox.prop('checked', false);
                        authRow.show();
                        certRow.hide();
                    } else {
                        login = false;
                        authRow.hide();
                        certRow.hide();
                        // DO NOT CLEAR
                        // $('#node-input-user').val('');
                        // $('#node-input-password').val('');
                    }
                });

                usercertCheckbox.change(function () {
                    if ($(this).is(":checked")) {
                        usercert = true;
                        loginCheckbox.prop('checked', false);
                        noneCheckbox.prop('checked', false);
                        certRow.show();
                        authRow.hide();
                    } else {
                        usercert = false;
                        certRow.hide();
                        authRow.hide();
                        $('#node-input-usercertificate').val('');
                        $('#node-input-userprivatekey').val('');
                    }
                });

            } catch (err) {
                console.error(err);
            }
            finally {
                // console.debug("finally"); // Nothing to do
            }
        }
    });
</script>

<script type="text/x-red" data-template-name="OpcUa-Endpoint">
    <div class="form-row">
        <label for="node-config-input-endpoint"><i class="icon-link"></i> Endpoint</label>
        <input type="text" id="node-config-input-endpoint">
    </div>
    <div class="form-row">
        <label for="node-config-input-secpol"><i class="icon-key"></i> SecurityPolicy</label>
        <select type="text" id="node-config-input-secpol">
            <option value="None">None</option>
            <option value="Basic128">Basic128</option>
            <option value="Basic192">Basic192</option>
            <option value="Basic192Rsa15">Basic192Rsa15</option>
            <option value="Basic256Rsa15">Basic256Rsa15</option>
            <option value="Basic256Sha256">Basic256Sha256</option>
            <option value="Aes128_Sha256">Aes128_Sha256</option>
            <option value="Aes128_Sha256_RsaOaep">Aes128_Sha256_RsaOaep</option>
            <option value="PubSub_Aes128_CTR">PubSub_Aes128_CTR</option>
            <option value="PubSub_Aes256_CTR">PubSub_Aes256_CTR</option>
            <option value="Basic128Rsa15">Basic128Rsa15</option>
            <option value="Basic256">Basic256</option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-config-input-secmode"><i class="icon-key"></i> SecurityMode</label>
        <select type="text" id="node-config-input-secmode">
            <option value="None">None</option>
            <option value="Sign">Sign</option>
            <option value="SignAndEncrypt">Sign&Encrypt</option>
        </select>
    </div>
    <div class="form-row">
        <lable><input type="checkbox" id="node-config-input-none" > Anonymous</lable>
    </div>
    <div class="form-row">
        <lable><input type="checkbox" id="node-config-input-login" > use credentials</lable>
    </div>
    <div class="form-row">
        <lable><input type="checkbox" id="node-config-input-usercert" > user certificate</lable>
    </div>

    <div class="form-row node-input-useAuth-row">
        <label for="node-config-input-user"><i class="icon-user"></i> User</label>
        <input type="text" id="node-config-input-user">
    </div>
    <div class="form-row node-input-useAuth-row">
        <label for="node-config-input-password"><i class="icon-password"></i> Password</label>
        <input type="password" id="node-config-input-password">
    </div>

    <div class="form-row node-input-userCert-row">
        <label for="node-config-input-usercertificate"><i class="icon-file"></i> Certificate file</label>
        <input type="text" id="node-config-input-usercertificate">
    </div>
    <div class="form-row node-input-userCert-row">
        <label for="node-config-input-userprivatekey"><i class="icon-file"></i> Private key file</label>
        <input type="text" id="node-config-input-userprivatekey">
    </div>

</script>

<!-- --- [red-module:node-red-contrib-opcua/OpcUa-Event] --- -->
<!--

Copyright 2016 Valmet Automation Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<script type="text/javascript">
    RED.nodes.registerType('OpcUa-Event',{
        category: 'opcua',
        color:"#3FADB5",
        defaults: {
            root: {value:"", required:true}, 	// ns=2;i=85 Server object to look through all objects under it
            activatecustomevent: {value: false, required:true},
            eventtype: {value:"", required:true}, 
            customeventtype: {value:""},
            name: {value:""}
        },
        inputs:1,
        outputs:1,
        align: "right",
        icon: "opcuanodeLogo.png",
        label: function() {
            return this.name || "OPC UA Event";
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        },
        oneditprepare: function () {

            var node = this;

            try {
                var inputActivateCustomEvent = $('#node-input-activatecustomevent');
                var inputCustomEventTypeRow = $('#node-input-customeventtyperow');
                var inputEventTypeRow = $('#node-input-eventtype-row');
                adapt_input(); // initialize
                inputActivateCustomEvent.change(adapt_input);

            } catch (err) {
                node.error(err);
            }

            function adapt_input() {
                if (inputActivateCustomEvent.is(':checked')) {                    
                    inputCustomEventTypeRow.show();
                    inputEventTypeRow.hide();
                }
                else {                    
                    inputCustomEventTypeRow.hide();
                    inputEventTypeRow.show();
                }
            }
        }
    });
</script>

<script type="text/x-red" data-template-name="OpcUa-Event">
    <div class="form-row">
        <label for="node-input-root"><i class="icon-tasks"></i> Source node</label>
        <input type="text" id="node-input-root" placeholder="i=2253">
    </div>
    <div class="form-row" id="node-input-activatecustomeventrow">
        <label for="node-input-activatecustomevent"><i class="icon-tasks"></i> Custom event</label>
        <input type="checkbox" id="node-input-activatecustomevent" style="width: auto">
    </div>
    <div class="form-row" id="node-input-customeventtyperow">
        <label for="node-input-customeventtype"><i class="icon-tasks"></i> Event Type</label>
        <input type="text" id="node-input-customeventtype" placeholder="ns=2;i=1234">
    </div>
    <div class="form-row" id="node-input-eventtype-row">
        <label for="node-input-datatype"><i class="icon-tag"></i> Event Type</label>
        <select type="text" id="node-input-eventtype" style="display: inline-block; vertical-align: middle; width:60%;">
            <option selected disabled value="" >Choose a Event Type</option>
            <option selected value="i=2041">BaseEvent (all)</option>
            <option value="i=2052">AuditEvent</option>
            <option value="i=2132">BaseModelChangeEvent</option>
            <option value="i=2782">ConditionType</option>
            <option value="i=3035">Event Queue Overflow</option>
            <option value="i=11436">Progress Event</option>
			<option value="i=2130">System Event</option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="icon-tag"></i> Name</label>
        <input type="text" id="node-input-name" placeholder="">
    </div>
</script>

<script type="text/x-red" data-help-name="OpcUa-Event">
    <p>Defines the OPC UA events that will be subscribed from the server.</p>
	<p>The Source node defines the node where events are subscribed for. 
       The root Server node id is used, if all events of the server shall be processed. 
       If available, other specific node ids can be used for a subset of events.
       Not using the root Server node might for example make sense in case of an aggregating server.</p>
    <p>The Event Type defines what kind of events are subscribed. Events of the given Event Type and all subtypes are returned.
       An event type can be selected in the dropdown field, or manually entered when marking the checkbox.
    </p>
</script>
<!-- --- [red-module:node-red-contrib-opcua/OpcUa-Method] --- -->
<!--

Copyright 2020 Valmet Automation Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<script type="text/javascript">
  RED.nodes.registerType('OpcUa-Method', {
    category: "opcua",
    color:"#3FADB5",
    defaults: {
      endpoint: {value: "", required: true, type: "OpcUa-Endpoint"},
      objectId: {value: ""},
      methodId: {value: ""},
      name: {value: ""},
      inputArguments: {value: []},
      outputArguments: {value: []},
      arg0name: {value: ""},
      arg0type: {value: ""},
      arg0typeid: {value: ""},
      arg0value: {value: ""},
      arg1name: {value: ""},
      arg1type: {value: ""},
      arg1typeid: {value: ""},
      arg1value: {value: ""},
      arg2name: {value: ""},
      arg2type: {value: ""},
      arg2typeid: {value: ""},
      arg2value: {value: ""},
      out0name: {value: ""},
      out0type: {value: ""},
      out0typeid: {value: ""},
      out0value: {value: ""}
    },
    inputs: 1,
    outputs: 1,
    align: "right",
    icon: "opcuanodeLogo.png",
    label: function () {
      return this.name || "OPC UA Method";
    },
    labelStyle: function () {
      return this.name ? "node_label_italic" : "";
    }
});
</script>

<script type="text/x-red" data-template-name="OpcUa-Method">
    <div class="form-row" style="min-width:640px">
        <label for="node-input-endpoint"><i class="icon-bookmark"></i> Endpoint</label>
        <input type="text" id="node-input-endpoint">
    </div>
    <div class="form-row">
        <label for="node-input-objectId"><i class="icon-tasks"></i>ObjectId</label>
        <input type="text" id="node-input-objectId" placeholder="ns=5;s=MyDevice">
    </div>
    <div class="form-row">
        <label for="node-input-methodId"><i class="icon-tasks"></i>MethodId</label>
        <input type="text" id="node-input-methodId" placeholder="ns=5;s=MyMethod">
    </div>
    <hr>
    <div class="form-row">
        <span>
        <label for="node-input-arg0name"><i class="icon-tasks"></i>Arg0 Name</label>
        <input type="text" id="node-input-arg0name" placeholder="Name" style="width:10%;">
        <label for="node-input-arg0type"><i class="icon-tasks"></i>Type</label>
        <select id="node-input-arg0type" style="max-width:150px">
            <option value="">-</option>
            <option value="String">String</option>
            <option value="Double">Double</option>
            <option value="Float">Float</option>
            <option value="Int32">Int32</option>
            <option value="Int16">Int16</option>
            <option value="SByte">Int8 (SByte)</option>
            <option value="UInt32">UInt32</option>
            <option value="UInt16">UInt16</option>
            <option value="Byte">UInt8 (Byte)</option>
            <option value="Boolean">Boolean</option>
            <option value="DateTime">DateTime</option>
            <option value="NodeId">NodeId</option>
            <option value="ExtensionObject">ExtensionObject</option>
        </select>
        <label for="node-input-arg0typeid"><i class="icon-tasks"></i>TypeId</label>
        <input type="text" id="node-input-arg0typeid" placeholder="" style="width:10%;">
        <label for="node-input-arg0value"><i class="icon-tasks"></i>Value</label>
        <input type="text" id="node-input-arg0value" placeholder="" style="width:25%;">
        </span>
    </div>
    <div class="form-row">
        <span>
        <label for="node-input-arg1name"><i class="icon-tasks"></i>Arg1 Name</label>
        <input type="text" id="node-input-arg1name" placeholder="Name" style="width:10%;">
        <label for="node-input-arg1type"><i class="icon-tasks"></i>Type</label>
        <select id="node-input-arg1type" style="max-width:150px">
            <option value="">-</option>
            <option value="String">String</option>
            <option value="Double">Double</option>
            <option value="Float">Float</option>
            <option value="Int32">Int32</option>
            <option value="Int16">Int16</option>
            <option value="SByte">Int8 (SByte)</option>
            <option value="UInt32">UInt32</option>
            <option value="UInt16">UInt16</option>
            <option value="Byte">UInt8 (Byte)</option>
            <option value="Boolean">Boolean</option>
            <option value="DateTime">DateTime</option>
            <option value="NodeId">NodeId</option>
            <option value="ExtensionObject">ExtensionObject</option>
        </select>
        <label for="node-input-arg1typeid"><i class="icon-tasks"></i>TypeId</label>
        <input type="text" id="node-input-arg1typeid" placeholder="" style="width:10%;">
        <label for="node-input-arg1value"><i class="icon-tasks"></i>Value</label>
        <input type="text" id="node-input-arg1value" placeholder="" style="width:25%;">
        </span>
    </div>
    <div class="form-row">
        <span>
        <label for="node-input-arg2name"><i class="icon-tasks"></i>Arg2 Name</label>
        <input type="text" id="node-input-arg2name" placeholder="Name" style="width:10%;">
        <label for="node-input-arg2type"><i class="icon-tasks"></i>Type</label>
        <select id="node-input-arg2type" style="max-width:150px">
            <option value="">-</option>
            <option value="String">String</option>
            <option value="Double">Double</option>
            <option value="Float">Float</option>
            <option value="Int32">Int32</option>
            <option value="Int16">Int16</option>
            <option value="SByte">Int8 (SByte)</option>
            <option value="UInt32">UInt32</option>
            <option value="UInt16">UInt16</option>
            <option value="Byte">UInt8 (Byte)</option>
            <option value="Boolean">Boolean</option>
            <option value="DateTime">DateTime</option>
            <option value="NodeId">NodeId</option>
            <option value="ExtensionObject">ExtensionObject</option>
        </select>
        <label for="node-input-arg2typeid"><i class="icon-tasks"></i>TypeId</label>
        <input type="text" id="node-input-arg2typeid" placeholder="" style="width:10%;">
        <label for="node-input-arg2value"><i class="icon-tasks"></i>Value</label>
        <input type="text" id="node-input-arg2value" placeholder="" style="width:25%;">
        </span>
    </div>
    <div class="form-row">
        <span>
        <label for="node-input-out0name"><i class="icon-tasks"></i>Out0 Name</label>
        <input type="text" id="node-input-out0name" placeholder="Name" style="width:10%;">
        <label for="node-input-out0type"><i class="icon-tasks"></i>Type</label>
        <select id="node-input-out0type" style="max-width:150px">
            <option value="">-</option>
            <option value="String">String</option>
            <option value="Double">Double</option>
            <option value="Float">Float</option>
            <option value="Int32">Int32</option>
            <option value="Int16">Int16</option>
            <option value="SByte">Int8 (SByte)</option>
            <option value="UInt32">UInt32</option>
            <option value="UInt16">UInt16</option>
            <option value="Byte">UInt8 (Byte)</option>
            <option value="Boolean">Boolean</option>
            <option value="DateTime">DateTime</option>
            <option value="NodeId">NodeId</option>
            <option value="ExtensionObject">ExtensionObject</option>
        </select>
        <label for="node-input-out0typeid"><i class="icon-tasks"></i>TypeId</label>
        <input type="text" id="node-input-out0typeid" placeholder="" style="width:10%;">
        <label for="node-input-out0value"><i class="icon-tasks"></i>Value</label>
        <input type="text" id="node-input-out0value" placeholder="" style="width:25%;">
        </span>
    </div>

    <hr>
    <div class="form-row">
        <label for="node-input-name"><i class="icon-tag"></i>Name</label>
        <input type="text" id="node-input-name" placeholder="">
    </div>
</script>

<script type="text/x-red" data-help-name="OpcUa-Method">
    <p>Connect to an endpoint: opc.tcp://host:port/UA/Simulation</p>

    <h2>OPC UA Method node</h2>

    <h3>Method parameters inside node</h3>

        <ul>
            <li>objectId (nodeId of object)
            <li>methodId (nodeId of method)
            <li>arguments in node limited to arg 0 to 2:
                <ul>
                    <li>name (parameter name, not used inside method call)
                    <li>dataType (basic DataTypes like Double, Float, Int32 etc.)
                    <li>value (value or Variant or JSON Object in case of ExtensionObject)
                </ul>
        </ul>
    </div>

    <h3>Input message will override node parameters.</h3>

    <div>
        <strong>input message:</strong>
        <ul>
            <li>objectId (nodeId of object), example "ns=5;s=MyDevice"
            <li>methodId (nodeId of method), example "ns=5;s=MyMethod"
            <li>inputArguments (Array) example [{dataType: "String", value: "sin"}, {dataType: "Double", value: 1.2}]
            <ul>
                <li>dataType
                <li>value
            </ul>
        </ul>
    </div>

    <h3>Output message (result):</h3>
    <div>
        <strong>Output message:</strong>
        <ul>
            <li>result statusCode
            <li>inputArgumentResults (Array)
            <li>inputArgumentDiagnosticInfos (Array)
            <li>outputArguments (Array)
            <li>result
            <li>payload (Variant value if one value)
        </ul>
    </div>
    
    <strong>Name</strong>
    <p>Name in the flow of Node-RED.</p>

</script>
<!-- --- [red-module:node-red-contrib-opcua/OpcUa-Rights] --- -->
<!--

Copyright 2022 Valmet Automation Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<script type="text/javascript">
  RED.nodes.registerType('OpcUa-Rights', {
    category: "opcua",
    color:"#3FADB5",
    defaults: {
        accessLevelCurrentRead: {value: true},
        accessLevelCurrentWrite: {value: true},
        accessLevelStatusWrite: {value: true},
        accessLevelHistoryRead: {value: true},
        accessLevelHistoryWrite: {value: true},
        accessLevelSemanticChange: {value: true},
        role: {value: "a"}, // User Role like Anonymous, Operator, Engineer,...
        // Permissions
        permissionBrowse: {value: true},
        permissionRead: {value: true},
        permissionWrite: {value: true},
        permissionWriteAttribute: {value: true},
        permissionReadRole: {value: true},
        permissionWriteRole: {value: true},
        permissionReadHistory: {value: true},
        permissionWriteHistory: {value: true},
        permissionInsertHistory: {value: true},
        permissionModifyHistory: {value: true},
        permissionDeleteHistory: {value: true},
        permissionReceiveEvents: {value: true},
        permissionCall: {value: true},
        permissionAddReference: {value: true},
        permissionRemoveReference: {value: true},
        permissionDeleteNode: {value: true},
        permissionAddNode: {value: true},
        name: {value: ""},
    },
    inputs: 1,
    outputs: 1,
    align: "right",
    icon: "opcuanodeLogo.png",
    label: function () {
      return this.name || "OPC UA Rights";
    },
    labelStyle: function () {
      return this.name ? "node_label_italic" : "";
    }
});
</script>

<script type="text/x-red" data-template-name="OpcUa-Rights">
    <div class="form-row">
        <label for="node-input-accessLevelCurrentRead" style="width:72%;"><i class="icon-tasks"></i> Access level: read</label>
        <input type="checkbox" id="node-input-accessLevelCurrentRead" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-accessLevelCurrentWrite" style="width:72%;"><i class="icon-tasks"></i> Access level: write</label>
        <input type="checkbox" id="node-input-accessLevelCurrentWrite" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-accessLevelStatusWrite" style="width:72%;"><i class="icon-tasks"></i> Access level: status write</label>
        <input type="checkbox" id="node-input-accessLevelStatusWrite" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-accessLevelHistoryRead" style="width:72%;"><i class="icon-tasks"></i> Access level: history read</label>
        <input type="checkbox" id="node-input-accessLevelHistoryRead" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-accessLevelHistoryWrite" style="width:72%;"><i class="icon-tasks"></i> Access level: history write</label>
        <input type="checkbox" id="node-input-accessLevelHistoryWrite" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-accessLevelSemanticChange" style="width:72%;"><i class="icon-tasks"></i> Access level: semantic change</label>
        <input type="checkbox" id="node-input-accessLevelSemanticChange" style="max-width:20px">
    </div>
    <hr>
    <div class="form-row">
        <label for="node-input-role"><i class="icon-time"></i> User role</label>
        <select type="text" id="node-input-role" style="max-width:160px">
            <option value="a">Anonymous</option>
            <option value="u">Authenticated user</option>
            <option value="b">Observer</option>
            <option value="e">Engineer</option>
            <option value="o">Operator</option>
            <option value="c">Configure admin</option>
            <option value="s">Security admin</option>
            <option value="v">Supervisor</option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-permissionBrowse" style="width:72%;"><i class="icon-tasks"></i> Permission: browse</label>
        <input type="checkbox" id="node-input-permissionBrowse" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionRead" style="width:72%;"><i class="icon-tasks"></i> Permission: read</label>
        <input type="checkbox" id="node-input-permissionRead" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionWrite" style="width:72%;"><i class="icon-tasks"></i> Permission: write</label>
        <input type="checkbox" id="node-input-permissionWrite" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionWriteAttribute" style="width:72%;"><i class="icon-tasks"></i> Permission: write attribute</label>
        <input type="checkbox" id="node-input-permissionWriteAttribute" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionReadRole" style="width:72%;"><i class="icon-tasks"></i> Permission: read role</label>
        <input type="checkbox" id="node-input-permissionReadRole" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionWriteRole" style="width:72%;"><i class="icon-tasks"></i> Permission: write role</label>
        <input type="checkbox" id="node-input-permissionWriteRole" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionReadHistory" style="width:72%;"><i class="icon-tasks"></i> Permission: read history</label>
        <input type="checkbox" id="node-input-permissionReadHistory" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionWriteHistory" style="width:72%;"><i class="icon-tasks"></i> Permission: write history</label>
        <input type="checkbox" id="node-input-permissionWriteHistory" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionInsertHistory" style="width:72%;"><i class="icon-tasks"></i> Permission: insert history</label>
        <input type="checkbox" id="node-input-permissionInsertHistory" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionModifyHistory" style="width:72%;"><i class="icon-tasks"></i> Permission: modify history</label>
        <input type="checkbox" id="node-input-permissionModifyHistory" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionDeleteHistory" style="width:72%;"><i class="icon-tasks"></i> Permission: delete history</label>
        <input type="checkbox" id="node-input-permissionDeleteHistory" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionReceiveEvents" style="width:72%;"><i class="icon-tasks"></i> Permission: receive events</label>
        <input type="checkbox" id="node-input-permissionReceiveEvents" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionCall" style="width:72%;"><i class="icon-tasks"></i> Permission: call methods</label>
        <input type="checkbox" id="node-input-permissionCall" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionAddReference" style="width:72%;"><i class="icon-tasks"></i> Permission: add reference</label>
        <input type="checkbox" id="node-input-permissionAddReference" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionRemoveReference" style="width:72%;"><i class="icon-tasks"></i> Permission: remove reference</label>
        <input type="checkbox" id="node-input-permissionRemoveReference" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionDeleteNode" style="width:72%;"><i class="icon-tasks"></i> Permission: delete node</label>
        <input type="checkbox" id="node-input-permissionDeleteNode" style="max-width:20px">
    </div>
    <div class="form-row">
        <label for="node-input-permissionAddNode" style="width:72%;"><i class="icon-tasks"></i> Permission: add node</label>
        <input type="checkbox" id="node-input-permissionAddNode" style="max-width:20px">
    </div>
    <hr>
    <div class="form-row">
        <label for="node-input-name"><i class="icon-tag"></i>Name</label>
        <input type="text" id="node-input-name" placeholder="">
    </div>
</script>

<script type="text/x-red" data-help-name="OpcUa-Rights">
    <p>Set object / variable access level, user access level and permissions</p>
    <h2>Access rights</h2>
    <h3>Access level parameters inside node</h3>
        <ul>
            <li>CurrentRead
            <li>CurrentWrite
            <li>StatusWrite
            <li>HistoryRead
            <li>HistoryWrite
            <li>SemanticChange
        </ul>
    <h2>User role, only well known roles available</h2>
    <ul>
        <li>Anonymous
        <li>Authenticated user; username & password
        <li>Observer
        <li>Engineer
        <li>Operator
        <li>Configure admin
        <li>Security admin
        <li>Supervisor
    </ul>
    <h3>Permissions</h3>
    <ul>
        <li>Browse
        <li>Read
        <li>Write
        <li>Write attribute
        <li>Read role
        <li>Write role
        <li>Read history
        <li>Write history
        <li>Insert history
        <li>Modify history
        <li>Delete history
        <li>Receive events
        <li>Call methods
        <li>Add reference
        <li>Remove reference
        <li>Delete node
        <li>Add node
    </ul>
    <strong>Name</strong>
    <p>Name in the flow of Node-RED.</p>
</script>
<!-- --- [red-module:node-red-contrib-opcua/OpcUa-Discovery] --- -->
<!--

Copyright 2023 Valmet Automation Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<script type="text/javascript">
    RED.nodes.registerType('OpcUa-Discovery',{
        category: 'opcua',
        color:"#3FADB5",
        defaults: {
            name: {value:""}
        },
        inputs:1,
        outputs:1,
        align: "right",
        icon: "opcuanodeLogo.png",
        label: function() {
            return this.name || "OPC UA Discovery";
        },
        labelStyle: function() {
            return this.name?"node_label_italic":"";
        }
    });
</script>

<script type="text/x-red" data-template-name="OpcUa-Discovery">
    <div class="form-row">
        <label for="node-input-name"><i class="icon-tag"></i> Name</label>
        <input type="text" id="node-input-name" placeholder="">
    </div>
</script>

<script type="text/x-red" data-help-name="OpcUa-Discovery">
    <p>OPC UA Discovery server for the OPC UA Servers to register themselves.</p>
	  <p>UAExpert and other OPC UA Clients can look available servers from the discovery server.</p>
    <p>NOTE: You can check port status on Windows with command: netstat -ano | findstr :4840</p>
    <p>      UaExpert can be listening port and then you will get error message: 'port is in use'</p>
</script>
<!-- --- [red-module:node-red-dashboard/ui_base] --- -->
<style>
    :root {
        --nr-db-dark-text: #444;
        --nr-db-light-text: #eee;
        --nr-db-disabled-text: #999;
        --nr-db-mid-grey: #7f7f7f;
    }
    .nr-db-sb {
        position: absolute;
        top: 1px;
        bottom: 2px;
        left: 1px;
        right: 1px;
        overflow-y: auto;
        padding: 10px;
    }
    .nr-db-sb .form-row label {
        display: block;
        width: auto;
    }
    .nr-db-sb .form-row input,
    .nr-db-sb .form-row select {
        width: calc(100% - 100px);
        margin-bottom:0;
    }
    .nr-db-sb .compact {
        margin-bottom: 8px !important;
    }
    .nr-db-sb .red-ui-editableList-container {
        padding: 0;
        min-height: 250px;
        height: auto;
    }
    .nr-db-sb-tab-list {
        min-height: 250px;
        height: auto;
    }
    .nr-db-sb-tab-list li {
        padding: 0;
    }
    .nr-db-sb-tab-list-item {
        border-radius: 4px;
        color: var(--red-ui-primary-text-color, var(--nr-db-dark-text));
    }
    .nr-db-sb-list-header {
        cursor: pointer;
        position:relative;
        color: var(--red-ui-header-text-color, var(--nr-db-dark-text));
        padding:3px;
        white-space: nowrap;
    }
    .nr-db-sb-list-header:hover {
        color: var(--red-ui-secondary-text-color-hover, var(--nr-db-dark-text));
    }
    .nr-db-sb-title-hidden {
        text-decoration: line-through;
    }
    .nr-db-sb-title-disabled {
        color: var(--red-ui-secondary-text-color-disabled, var(--nr-db-disabled-text));
    }
    .nr-db-sb-tab-list-header {
        background: var(--red-ui-primary-background, var(--nr-db-light-text));
        padding:5px;
    }
    .nr-db-sb-group-list-header:hover,
    .nr-db-sb-widget-list-header:hover {
        background: var(--red-ui-secondary-background-hover, var(--nr-db-light-text));
    }
    .nr-db-sb-list-chevron {
        width: 15px;
        text-align: center;
        margin: 3px 5px 3px 5px;
    }
    .nr-db-sb-tab-list-item .red-ui-editableList-container {
        border-radius: 0;
        border: none;
        height: auto !important;
        min-height: unset;
    }
    .nr-db-sb-list-handle {
        vertical-align: top;
        opacity: 0;
        cursor: move;
    }
    .nr-db-sb-list-header:hover>.nr-db-sb-list-handle,
    .nr-db-sb-list-header:hover>.nr-db-sb-list-header-button-group {
        opacity: 1;
    }
    .nr-db-sb-list-header-button-group {
        opacity: 0;
    }
    .nr-db-sb-list-handle  {
        color: var(--red-ui-tertiary-text-color, var(--nr-db-light-text));
        padding:5px;
    }
    .nr-db-sb-tab-list-header>.nr-db-sb-list-chevron  {
        margin-left: 0px;
        transition: transform 0.2s ease-in-out;
    }
    .nr-db-sb-group-list-header>.nr-db-sb-list-chevron {
        margin-left: 20px;
        transition: transform 0.2s ease-in-out;
    }
    .nr-db-sb-group-list {
        min-height: 10px;
    }
    .nr-db-sb-group-list li {
        border-bottom-color: var(--red-ui-secondary-border-color, var(--nr-db-light-text));
    }
    .nr-db-sb-group-list>li.ui-sortable-helper {
        border-top: 1px solid var(--red-ui-secondary-border-color, var(--nr-db-light-text));
    }
    .nr-db-sb-group-list>li:last-child {
        border-bottom: none;
    }
    .nr-db-sb-widget-list>li {
        border: none !important;
    }
    .nr-db-sb-group-list>li>.red-ui-editableList-item-handle {
        left: 10px;
    }
    .nr-db-sb-list-button-group {
        position: absolute;
        right: 3px;
        top: 0px;
        z-index: 2;
    }
    .nr-db-sb-list-header-button-group {
        position: absolute;
        right: 3px;
        top: 4px;
    }
    .nr-db-sb-list-header-button {
        margin-left: 5px;
    }
    .nr-db-sb li.ui-sortable-helper {
        opacity: 0.9;
    }
    .nr-db-sb-widget-icon {
        margin-left: 56px;
    }
    .nr-db-sb-icon {
        margin-right: 10px;
    }
    .nr-db-sb-link {
        display: inline-block;
        padding-left: 20px;
    }
    .nr-db-sb-link-name-container .fa-external-link {
      margin-right: 10px;
    }
    .nr-db-sb-link-url {
        font-size: 0.8em;
        color: var(--red-ui-secondary-text-color, var(--nr-db-mid-grey));
    }
    span.nr-db-color-pick-container {
        max-width: 50px;
        border-radius: 3px;
        margin-left: 15px;
    }
    input.nr-db-field-themeColor[type="color"] {
        width: 60px !important;
        padding: 0px;
        height: 20px;
        box-shadow: none;
        position: absolute;
        right: 36px;
        border-radius: 3px !important;
        border: solid 1px var(--red-ui-form-input-border-color, #ccc);
        -webkit-appearance: none;
        font-size: smaller;
        text-align: center;
    }
    input.nr-db-field-themeColor::-webkit-color-swatch {
        border: none;
    }
    .red-ui-tabs {
        margin-bottom: 15px;
    }
    .red-ui-tab.hidden {
        display: none;
    }
    #dashboard-tabs-list li a:hover {
        cursor: pointer;
    }
    #dash-link-button {
        background: none;
        border: none;
        margin-top: 3px;
        display: inline-block;
        margin: 3px 0px 0px 3px;
        height: 32px;
        line-height: 29px;
        max-width: 200px;
        overflow: hidden;
        white-space: nowrap;
        position: relative;
        padding: 0px 7px 0px 7px;
    }
    ul.red-ui-dashboard-theme-styles {
        list-style: none;
    }
    ul.red-ui-dashboard-theme-styles li {
        margin-bottom: 6px;
    }
    .nr-db-resetIcon {
        margin: 3px 6px 0px 6px;
        float: right;
        color: var(--red-ui-secondary-text-color, var(--nr-db-mid-grey));
        opacity: 0.8;
        display: block;
    }
    .nr-db-resetIcon:hover {
        cursor: pointer;
    }
    #nr-db-field-font {
        margin-left: 2em;
        width: calc(100% - 81px);
    }
    .nr-db-theme-label {
        font-weight: bold;
    }
    #custom-theme-library-container .btn-group {
        margin-bottom: 10px;
    }
</style>

<!-- Dashboard layout tool -->
<link rel="stylesheet" href="./ui_base/gs/gridstack.min.css">
<link rel="stylesheet" href="./ui_base/css/gridstack-extra.min.css">
<style>
.grid-stack {
    background-color: var(--red-ui-primary-background, #f8f8f8);
    border: solid 2px var(--red-ui-tertiary-border-color, #C0C0C0);
    margin: auto;
    min-height: 42px;
    display: table-cell;
    background-image: linear-gradient(var(--red-ui-tertiary-border-color, #C0C0C0) 1px, transparent 0),
                      linear-gradient(90deg, var(--red-ui-tertiary-border-color, #C0C0C0) 1px, transparent 0);
    background-size: 40px 43px;
}
.grid-stack>.grid-stack-item>.grid-stack-item-content {
    top: 3px;
    left: 5px;
    right: 5px;
    bottom: 3px;
}
.grid-stack-item-content {
    color: #2c3e50;
    text-align: center;
    background-color: #b0dfe3;
    border-radius: 2px;
    font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif;
    white-space: nowrap;
    font-size: 12px;
    opacity: 0.7;
}
.grid-stack-item {
    cursor: move;
}
.nr-dashboard-layout-container-fluid {
  width: 100%;
  padding-right: 0px;
  padding-left: 0px;
  margin-right: 0px;
  margin-left: 0px;
}
.nr-dashboard-layout-row {
  width: 100%;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-right: 0px;
  margin-left: 0px;
}
.nr-dashboard-layout-span12 {
  width: 98.4%;
  padding: 2px;
  margin-left: 2px;
}
.nr-dashboard-layout-span6 {
  width: 49.2%;
  padding: 2px;
  margin-left: 2px;
}
.nr-dashboard-layout-span4 {
  width: 32.7%;
  padding: 2px;
  margin-left: 2px;
}
.nr-dashboard-layout-span3 {
  width: 24.3%;
  padding: 2px;
  margin-left: 2px;
}
.nr-dashboard-layout-span2 {
  width: 16.0%;
  padding: 2px;
  margin-left: 2px;
}
.nr-dashboard-layout-resize-disable {
    cursor: pointer;
    float: right;
    position: relative;
    z-index: 90;
    margin-right: 4px;
}
.nr-dashboard-layout-resize-enable {
    cursor: pointer;
    float: right;
    position: relative;
    z-index: 90;
    margin-right: 1px;
}
.grid-stack>.ui-state-disabled {
    opacity: 1;
    background-image: none;
}
.grid-stack>.grid-stack-item>.ui-resizable-handle {
    z-index: 90;
    margin-right: -7px;
}
</style>


<script type="text/javascript">
(function($) {
    var editSaveEventHandler;
    var nodesAddEventHandler;
    var nodesRemoveEventHandler;
    var layoutUpdateEventHandler; // Dashboard layout tool
    var uip = 'ui';
    var attemptedVendorLoad = false;
    var ensureDashboardNode;

    var isTabLockSupported = ((typeof RED.workspaces.isLocked) === "function"); // check for new Node-RED version

    function notifyLocked() {
        RED.notify("Can't change tab with nodes in locked tab");
    }

    // check if specified tab is locked
    function isLockedTab(id) {
        if (!isTabLockSupported) {
            return false;
        }
        return (RED.workspaces.isLocked(id));
    }

    // check if some node in tab placed on locked tab
    function isLocked(id) {
        if (!isTabLockSupported) {
            return false;
        }
        const tab = getTabDataFromNodes(id);
        const groups = tab.groups;
        for (let i = 0; i < groups.length; i++) {
            const group = groups[i];
            const widgets = group.widgets;
            for (let j = 0; j < widgets.length; j++) {
                const widget = RED.nodes.node(widgets[j].id);
                if (RED.workspaces.isLocked(widget.z)) {
                    return true;
                }
            }
        }
        return false;
    }

    var loadTinyColor = function(path) {
        $.ajax({ url: path,
            success: function (data) {
                var jsScript = document.createElement("script");
                jsScript.type = "application/javascript";
                jsScript.src = path;
                document.body.appendChild(jsScript);
                //console.log('Tiny Color Loaded:',path);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                if (xhr.status === 404 && !attemptedVendorLoad) {
                    loadTinyColor('/'+uip+'/vendor/tinycolor2/dist/tinycolor-min.js');
                    attemptedVendorLoad = true;
                }
                //console.log('Tiny Color Failed to load:',path);
            }
        });
    }

    // convert to i18 text
    function c_(x) {
        return RED._("node-red-dashboard/ui_base:ui_base."+x);
    }

    // Try to load dist version first
    // then if fails, load non dist version
    loadTinyColor('ui_base/js/tinycolor-min.js');
    //loadTinyColor('ui_base/tinycolor2/dist/tinycolor-min.js');

    // Dashboard layout tool
    // Load gridstack library
    var loadGsLib = function(path, callback) {
        $.ajax({ url: path,
            success: function (data) {
                var jsScript = document.createElement("script");
                jsScript.type = "application/javascript";
                jsScript.src = path;
                document.body.appendChild(jsScript);
                if (callback) { callback(); }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                // TODO
            }
        });
    };

    loadGsLib('ui_base/gs/gridstack.min.js', function() {
        loadGsLib('ui_base/gs/gridstack.jQueryUI.min.js', null)
    });

    var tabDatas; // Layout editing tab data
    var oldSpacer; // Spacer not needed after editing
    var widthChange; // Group width change
    var widgetResize; // Change widget event
    var widgetDrag; // Drag wiget event

    var MAX_GROUP_WIDTH = 50; // The maximum width is 30

    /////////////////////////////////////////////////////////
    // Get widget under specified tab from node information
    /////////////////////////////////////////////////////////
    function getTabDataFromNodes(tabID) {
        var nodes = RED.nodes.createCompleteNodeSet(false);
        var tab = {};
        // Tab information
        for (var cnt = 0; cnt < nodes.length; cnt++) {
            if (nodes[cnt].type == "ui_tab" && nodes[cnt].id == tabID) {
                tab = {
                    id: nodes[cnt].id,
                    name: nodes[cnt].name,
                    type: nodes[cnt].type,
                    order: nodes[cnt].order,
                    groups: []
                };
                break;
            }
        }
        // Group information
        for (var cnt = 0; cnt < nodes.length; cnt++) {
            if (nodes[cnt].type == "ui_group" && nodes[cnt].tab == tabID) {
                var group = {
                    id: nodes[cnt].id,
                    name: nodes[cnt].name,
                    type: nodes[cnt].type,
                    order: nodes[cnt].order,
                    width: nodes[cnt].width,
                    widgets: []
                };
                tab.groups.push(group);
            }
        }
        // Widget information
        var groupsIdx = {};
        for  (var cnt = 0; cnt < tab.groups.length; cnt++) {
            groupsIdx[tab.groups[cnt].id] = tab.groups[cnt];
        }
        for (var cnt = 0; cnt < nodes.length; cnt++) {
            var group = groupsIdx[nodes[cnt].group];
            if (group != null && (/^ui_/.test(nodes[cnt].type) && nodes[cnt].type !== 'ui_link' && nodes[cnt].type !== 'ui_toast' && nodes[cnt].type !== 'ui_ui_control' && nodes[cnt].type !== 'ui_audio' && nodes[cnt].type !== 'ui_base' && nodes[cnt].type !== 'ui_group' && nodes[cnt].type !== 'ui_tab')) {
                var widget = {
                    id: nodes[cnt].id,
                    type: nodes[cnt].type,
                    order: nodes[cnt].order,
                    width: nodes[cnt].width,
                    height: nodes[cnt].height,
                    auto: nodes[cnt].width == 0 ? true : false
                };
                group.widgets.push(widget);

                if (!isLayoutToolSupported(nodes[cnt].type)) {
                    console.log("LayoutTool warning: Unsupported widget. Widget="+JSON.stringify(widget));
                }
            }
        }
        return tab;
    }

    //////////////////////////////////////////////////
    // Update node information in the edited widget
    ////////////////////////////////////////////////////
    function putTabDataToNodes() {
        // Delete old flow spacer node
        for (var cnt = 0; cnt < oldSpacer.length; cnt++) {
            RED.nodes.remove(oldSpacer[cnt]);
            RED.nodes.dirty(true);
            RED.view.redraw(true);
        }

        var t_groups = tabDatas.groups;
        for (var cnt1 = 0; cnt1 < t_groups.length; cnt1++) {
            var n_group = RED.nodes.node(t_groups[cnt1].id);
            n_group.width = t_groups[cnt1].width;
            var t_widgets = t_groups[cnt1].widgets;
            for (var cnt2 = 0; cnt2 < t_widgets.length; cnt2++) {
                var n_widget = RED.nodes.node(t_widgets[cnt2].id);
                if (n_widget != null) {
                    if (n_widget.group !== n_group.id) {
                        var oldGroupNode = RED.nodes.node(n_widget.group);
                        if (oldGroupNode) {
                            var index = oldGroupNode.users.indexOf(n_widget);
                            oldGroupNode.users.splice(index,1);
                        }
                        n_widget.group = n_group.id;
                        n_group.users.push(n_widget);
                    }
                    n_widget.order = t_widgets[cnt2].order;
                    if (t_widgets[cnt2].auto === true ) {
                        n_widget.width = 0;
                        n_widget.height = 0;
                    } else {
                        n_widget.width = t_widgets[cnt2].width;
                        n_widget.height = t_widgets[cnt2].height;
                    }

                    n_widget.changed = true;
                    n_widget.dirty = true;
                    RED.editor.validateNode(n_widget);
                    RED.events.emit("layout:update",n_widget);
                    RED.nodes.dirty(true);
                    RED.view.redraw(true);
                }
                else {
                    // Add a spacer node
                    if (t_widgets[cnt2].type === 'ui_spacer') {
                        var spaceNode = {
                            _def: RED.nodes.getType("ui_spacer"),
                            type: "ui_spacer",
                            hasUsers: false,
                            users: [],
                            id: RED.nodes.id(),
                            tab: tabDatas.id,
                            group: n_group.id,
                            order: t_widgets[cnt2].order,
                            name: "spacer",
                            width: t_widgets[cnt2].width,
                            height: t_widgets[cnt2].height,
                            z: RED.workspaces.active(),
                            label: function() { return this.name + " " + this.width + "x" + this.height; }
                        };
                        RED.nodes.add(spaceNode);
                        RED.editor.validateNode(spaceNode);
                        RED.nodes.dirty(true);
                        RED.view.redraw(true);
                    }
                }
            };
        }
        RED.sidebar.info.refresh();
    }

    ////////////////////////////////////////
    // Sort by order
    ////////////////////////////////////////
    function compareOrder(a, b) {
        var r = 0;
        if (a.order < b.order) { r = -1; }
        else if (a.order > b.order) { r = 1; }
        return r;
    }

    ////////////////////////////////////////
    // Sort by XY
    ////////////////////////////////////////
    function compareXY(a, b) {
        var r = 0;
        if (a.y < b.y) { r = -1; }
        else if (a.y > b.y) { r = 1; }
        else if (a.x < b.x) { r = -1; }
        else if (a.x > b.x) { r = 1; }
        return r;
    }

    ///////////////////////////////////////////////////////
    // Placeable location search (placed in the upper left)
    ///////////////////////////////////////////////////////
    function search_point(width, height, maxWidth, maxHeight, tbl) {
        for (var y=0; y < maxHeight; y++) {
            for (var x=0; x < maxWidth; x++) {
                if (check_matrix(x, y, width, height, maxWidth, tbl)) {
                    fill_matrix(x, y, width, height, maxWidth, tbl);
                    return  {x:x, y:y};
                }
            }
        }
        return false;
    }
    // Check placement position
    function check_matrix(px, py, width, height, maxWidth, tbl) {
        if (px+width > maxWidth) return false;
        for (var y=py; y < py+height; y++) {
            for (var x=px; x<px+width; x++) {
                if (tbl[maxWidth*y+x]) return false;
            }
        }
        return true;
    }
    // Mark the placement position
    function fill_matrix(px, py, width, height, maxWidth, tbl) {
        for (var y=py; y < py+height; y++) {
            for (var x=px; x < px+width; x++) {
                tbl[maxWidth*y+x] = 1;
            }
        }
    }

    ////////////////////////////////////////////////////
    // Apply edit result to tab information for editing
    ////////////////////////////////////////////////////
    function saveGridDatas() {
        var groups = tabDatas.groups;
        for (var cnt = 0; cnt < groups.length; cnt++) {
            // Get layout editing results
            var gridID = '#grid'+cnt;
            var serializedData = [];
            $(gridID+'.grid-stack > .grid-stack-item:visible').each( function (index) {
                el = $(this);
                var node = el.data('_gridstack_node');
                serializedData.push({
                    id: el[0].dataset.noderedid,
                    type: el[0].dataset.noderedtype,
                    group: groups[cnt].id,
                    width: Number(node.width),
                    height: Number(node.height),
                    x: node.x,
                    y: node.y,
                    auto: (el[0].dataset.noderedsizeauto == 'true') ? true : false
                });
            });

            var width = Number(groups[cnt].width);
            var height = 0;

            // Search group height
            for (var i=0; i < serializedData.length; i++) {
                var wd = serializedData[i];
                if (height < wd.y + wd.height) {
                    height = wd.y + wd.height;
                }
            }

            // Place widget on table
            var tbl = new Array(width * height);
            for (var i = 0; i< tbl.length; i++) {
                tbl[i]=0;
            }
            for (var i = 0; i < serializedData.length; i++) {
                var wd = serializedData[i];
                for (var y = wd.y; y < wd.y+wd.height; y++) {
                    for (var x = wd.x; x < wd.x+wd.width; x++) {
                        tbl[width*y+x]=1;
                    }
                }
            }

            // Add Spacer to Blank
            for (var y = 0; y < height; y++) {
                var spacerAdded = false;
                for (var x = 0; x < width; x++) {
                    if (tbl[width*y+x]===0) {
                        if (!spacerAdded) {
                            // Add 1x1 spacer
                            serializedData.push({
                                x: x,
                                y: y,
                                z: RED.workspaces.active(),
                                width: 1,
                                height: 1,
                                name: 'spacer',
                                type: 'ui_spacer'
                            });
                            spacerAdded = true;
                        } else {
                            // Extend the spacer width by 1
                            serializedData[serializedData.length-1].width += 1;
                        }
                    } else {
                        spacerAdded = false;
                    }
                }
            }

            // Sort Gridstack objects by x, y information
            serializedData.sort(compareXY);

            // Delete x and y elements as information for sorting, and give order
            var order = 0;
            for (i in serializedData) {
                order++;
                delete serializedData[i].x;
                delete serializedData[i].y;
                serializedData[i].order = order;
            }

            // Update widget information in group with edited data
            var group = groups[cnt];
            delete group.widgets;
            group.widgets = serializedData;
        }

        // Save process call
        putTabDataToNodes();
    };

    ////////////////////////////////////////////////////
    // Get default height for automatic settings
    ////////////////////////////////////////////////////
    function getDefaultHeight(nodeID, groupWidth) {
        var redNode = RED.nodes.node(nodeID);
        var height = 1;

        if (redNode.type === 'ui_gauge') {
            if (redNode.gtype === 'gage') {
                height = Math.round(groupWidth/2)+1;
            } else if (redNode.gtype === 'wave') {
                if (groupWidth < 3) {
                    height = 1;
                } else {
                    height = Math.round(groupWidth*0.75);
                }
            } else { // donut or compass
                if (groupWidth < 3) {
                    height = 1;
                } else if (groupWidth < 11) {
                    height = groupWidth - 1;
                } else {
                    height = Math.round(groupWidth*0.95);
                }
            }
        } else if (redNode.type === 'ui_chart') {
            height = Math.floor(groupWidth/2)+1;
        } else if (redNode.type === 'ui_form') {
            // var optNum = redNode.options.length; // Sub widget number
            // if (redNode.label) {
            //     height = optNum + 2; // Label and Button
            // } else {
            //     height = optNum + 1; // Button only
            // }
            height = redNode.rowCount
        } else if (redNode.type === 'ui_lineargauge') {
            if (redNode.unit && redNode.name) {
                height = 5;
            } else {
                height = 4;
            }
        } else if (redNode.type === 'ui_list') {
            height = 5;
        } else if (redNode.type === 'ui_vega') {
            height = 5;
        }
        return height;
    }

    /////////////////////////////
    // Grid width change
    ////////////////////////////
    var changeGroupWidth = function(id) {
        var widthID = '#change-width'+id;
        var gridID = '#grid'+id;
        $(widthID).spinner( {
            min: 1,
            max: MAX_GROUP_WIDTH,
            spin: function(event, ui) {
                // Search current maximum width
                var serializedData = [];
                $(gridID+'.grid-stack > .grid-stack-item:visible').each( function (index) {
                    el = $(this);
                    var node = el.data('_gridstack_node');
                    serializedData.push({
                        width: Number(node.width),
                        x: node.x,
                        auto: (el[0].dataset.noderedsizeauto == 'true') ? true : false
                    });
                });
                var maxWidth = 0;
                for (var i=0; i < serializedData.length; i++) {
                    var wd = serializedData[i];
                    if (wd.auto == false) {
                        if (maxWidth < wd.x + wd.width) {
                            maxWidth = wd.x + wd.width;
                        }
                    }
                }
                var width = ui.value;
                if (width < maxWidth) {
                    width = maxWidth;
                }

                var grid = $(gridID+'.grid-stack').data('gridstack');
                $(gridID+'.grid-stack').css("width", width * 40);
                $(gridID+'.grid-stack').css("background-size", 100/width+"% 43px");
                grid.setColumn(tabDatas.groups[id].width, true);
                grid.setColumn(width, true);
                tabDatas.groups[id].width = width;

                $(gridID+'.grid-stack > .grid-stack-item:visible').each( function(idx, el) {
                    el = $(el);
                    var node = el.data('_gridstack_node');
                    var auto = (el[0].dataset.noderedsizeauto == 'true') ? true : false;
                    var type = el[0].dataset.noderedtype;
                    grid.resizable(el, !auto);
                    if (auto === true) {
                        grid.resize(el, width, getDefaultHeight(node.id, width));
                    }
                });

                if (width !== ui.value) {
                    event.stopPropagation();
                    event.preventDefault();
                }
            }
        });
    };

    //////////////////////////////////
    // Move between groups of widgets
    //////////////////////////////////
    function handleMove(grid) {
        return function(ev, prevWidget, newWidget) {
            var elem = newWidget.el[0];
            if (elem.getAttribute("data-noderedsizeauto") === "true") {
                var id = elem.getAttribute("data-noderedid");
                var width = grid.grid.column;
                var height = getDefaultHeight(id, width);
                grid.move(elem, 0, newWidget.y);
                grid.resize(elem, width, height);

                var en = $(elem).find('.nr-dashboard-layout-resize-enable');
                en.off('click');
                en.on('click',layoutResizeEnable);
                en[0].setAttribute("title",c_("layout.auto"));
            }
            else {
                var ds = $(elem).find('.nr-dashboard-layout-resize-disable');
                ds.off('click');
                ds.on('click',layoutResizeDisable);
                ds[0].setAttribute("title",c_("layout.manual"));
            }
        };
    }

    //////////////////////////////////////////
    // Widget size change (start event)
    //////////////////////////////////////////
    var resizeGroupWidget = function(id) {
        var gridID = '#grid'+id;
        var grid = $(gridID+'.grid-stack').data('gridstack');
        $(gridID+'.grid-stack').on('resizestart', function(event, ui) {
            // Reset group width
            grid.setColumn(tabDatas.groups[id].width, true);
        });
    }

    //////////////////////////////////////////
    // Widget drag (start event)
    //////////////////////////////////////////
    var dragGroupWidget = function(id) {
        var gridID = '#grid'+id;
        var grid = $(gridID+'.grid-stack').data('gridstack');
        $(gridID+'.grid-stack').on('dragstart', function(event, ui) {
            // Reset group width
            grid.setColumn(tabDatas.groups[id].width, true);
        });
    }

    //////////////////////////////////////////
    // Layout resize Disable (Auto:false)
    //////////////////////////////////////////
    var layoutResizeDisable = function(e) {
        var target = $(e.target);
        var el = target.parents('.grid-stack-item:visible');
        var grid = target.parents('.grid-stack').data('gridstack');
        var node = el.data('_gridstack_node');
        var id = Number(target.parents('.grid-stack').attr('id').slice(4));
        var width = Number(tabDatas.groups[id].width);
        var nodeID = el[0].dataset.noderedid;
        var height = getDefaultHeight(nodeID, width);

        grid.move(el, 0, node.y);
        grid.resize(el, width, height);
        grid.resizable(el, false);
        el.find('.nr-dashboard-layout-resize-disable').off('click');
        el.attr({'data-noderedsizeauto':'true'});
        target.removeClass().addClass('fa fa-unlock nr-dashboard-layout-resize-enable');
        el.find('.nr-dashboard-layout-resize-enable')[0].setAttribute("title",c_("layout.auto"));
        el.find('.nr-dashboard-layout-resize-enable').on('click',layoutResizeEnable);
    }

    //////////////////////////////////////////
    // Layout resize Enable (Auto:true)
    //////////////////////////////////////////
    var layoutResizeEnable = function(e) {
        var target = $(e.target);
        var el = target.parents('.grid-stack-item:visible');
        var grid = target.parents('.grid-stack').data('gridstack');

        grid.resizable(el, true);
        el.find('.nr-dashboard-layout-resize-enable').off('click');
        el.attr({'data-noderedsizeauto':'false'});
        target.removeClass().addClass('fa fa-lock nr-dashboard-layout-resize-disable');
        el.find('.nr-dashboard-layout-resize-disable')[0].setAttribute("title",c_("layout.manual"));
        el.find('.nr-dashboard-layout-resize-disable').on('click',layoutResizeDisable);
    }

    //////////////////////////////////////////
    // Check dashboard layout tool supported
    //////////////////////////////////////////
    function isLayoutToolSupported(nodeType) {
        if (nodeType.indexOf("ui_") !== 0) {
            return false;
        }
        else {
            return true;
        }
    }

    RED.nodes.registerType('ui_base', {
            category: 'config',
            defaults: {
                name: {},
                theme: {},
                site: {}
            },
            hasUsers: false,
            paletteLabel: 'Dashboard',
            label: function() { return this.name || 'Node-RED Dashboard'; },
            labelStyle: function() { return this.name ? "node_label_italic" : ""; },
            onpaletteremove: function() {
                RED.sidebar.removeTab("dashboard");
                RED.events.off("editor:save",editSaveEventHandler);
                RED.events.off("nodes:add",nodesAddEventHandler);
                RED.events.off("nodes:remove",nodesRemoveEventHandler);
                RED.events.off("layout:update",layoutUpdateEventHandler); // Dashboard layout tool
            },
            onpaletteadd: function() {
                var globalDashboardNode = null;
                var editor;
                var baseStyles = ['base-color'];
                var configurableStyles = ['page-titlebar-backgroundColor', 'page-backgroundColor', 'page-sidebar-backgroundColor',
                'group-textColor', 'group-borderColor', 'group-backgroundColor',
                'widget-textColor', 'widget-backgroundColor','widget-borderColor'];
                var baseFontName = "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif";
                var aTheme = {primary:"indigo", accents:"blue", warn:"red", background:"grey", palette:"light"};
                // tiny colour implementation
                var colours = {
                    leastReadable: function(base, colours) {
                        var least = tinycolor.readability(base, colours[0]);
                        var leastColor = colours[0];
                        for (var i=1; i<colours.length; i++) {
                            var readability = tinycolor.readability(base, colours[i]);
                            if (readability < least) {
                                least = readability;
                                leastColor = colours[i];
                            }
                        }
                        return leastColor;
                    },
                    whiteGreyMostReadable: function (base) {
                        var rgb = tinycolor(base).toRgb();
                        var level = ((rgb.r*299) + (rgb.g*587) + (rgb.b*114))/1000;
                        var readable = (level >= 128) ? '#111111' : '#eeeeee';
                        return readable;
                    },
                    whiteBlackLeastReadable: function(base) {
                        return this.leastReadable(base, ["#000000", "#ffffff"]);
                    },
                    calculate_page_backgroundColor: function(base) {
                        var pageBackground = "#fafafa";
                        var theme = "light";
                        if (globalDashboardNode && globalDashboardNode.hasOwnProperty("theme") && globalDashboardNode.theme.hasOwnProperty("name")) {
                            theme = globalDashboardNode.theme.name.split('-')[1];
                        }
                        if (theme === "dark") {
                            pageBackground = "#111111";
                        }
                        else if (theme === "custom") {
                            var whiteOrBlack = this.whiteBlackLeastReadable(base);
                            if (whiteOrBlack === "#000000") { pageBackground = "#111111"; }
                        }
                        return pageBackground;
                    },
                    calculate_page_sidebar_backgroundColor: function(base) {
                        if (this.whiteBlackLeastReadable(base) === "#000000") { return "#333333"; }
                        else { return "#ffffff"; }
                    },
                    calculate_page_titlebar_backgroundColor: function(base) {
                        return base;
                    },
                    calculate_group_textColor: function(base) {
                        var groupTextColour = tinycolor(base).lighten(15).toHexString();
                        //if (this.whiteBlackLeastReadable(base) === "#ffffff") { groupTextColour = "#000000"; }
                        return groupTextColour;
                    },
                    calculate_group_backgroundColor: function(base) {
                        var groupBackground = "#ffffff";
                        var theme = "light";
                        if (globalDashboardNode && globalDashboardNode.hasOwnProperty("theme") && globalDashboardNode.theme.hasOwnProperty("name")) {
                            theme = globalDashboardNode.theme.name.split('-')[1];
                        }
                        if (theme === "dark") {
                            groupBackground = "#333333";
                        }
                        else if (theme === "custom") {
                            var whiteOrBlack = this.whiteBlackLeastReadable(base);
                            if (whiteOrBlack === "#000000") { groupBackground = "#333333"; }
                        }
                        return groupBackground;
                    },
                    calculate_group_borderColor: function(base) {
                        var groupBackground = this.calculate_group_backgroundColor(base);
                        return this.leastReadable(groupBackground, ["#ffffff", "#555555"]);
                    },
                    calculate_widget_textColor: function(base) {
                        //most readable against group background
                        var groupBackground = this.calculate_group_backgroundColor(base);
                        return tinycolor.mostReadable(groupBackground, ["#111111", "#eeeeee"]).toHexString();
                    },
                    calculate_widget_backgroundColor: function(base) {
                        //return tinycolor(base).darken(5).toHexString()
                        return tinycolor(base).toHexString();
                    },
                    calculate_widget_borderColor: function(base) {
                        var widgetBorder = "#ffffff";
                        var theme = "light";
                        if (globalDashboardNode && globalDashboardNode.hasOwnProperty("theme") && globalDashboardNode.theme.hasOwnProperty("name")) {
                            theme = globalDashboardNode.theme.name.split('-')[1];
                        }
                        if (theme === "dark") {
                            widgetBorder = "#333333";
                        }
                        else if (theme === "custom") {
                            var whiteOrBlack = this.whiteBlackLeastReadable(base);
                            if (whiteOrBlack === "#000000") { widgetBorder = "#333333"; }
                        }
                        return widgetBorder;
                    },
                    calculate_base_font: function(base) {
                        return baseFontName;
                    }
                }
                var sizes = {
                    sx: 48, // width of <1> grid square
                    sy: 48, // height of <1> grid square
                    gx: 6, // gap between groups
                    gy: 6, // gap between groups
                    cx: 6, // gap between components
                    cy: 6, // gap between components
                    px: 0, // padding of group's cards
                    py: 0  // padding of group's cards
                };

                ensureDashboardNode = function(createMissing) {
                    if (globalDashboardNode !== null) {
                        // Check if it has been deleted beneath us
                        var n = RED.nodes.node(globalDashboardNode.id);
                        if (n === null) { globalDashboardNode = null; }
                    }

                    // Find the old dashboard node
                    if (globalDashboardNode === null) {
                        var bases = [];
                        RED.nodes.eachConfig(function(n) {
                            if (n.type === 'ui_base') { bases.push(n); }
                        });

                        // make sure we only have one ui_base node
                        // at the moment this will just use our existing one - deleting any new base node and theme
                        // at some point we may want to make this an option to select one or the other.
                        while (bases.length > 1) {
                            var n = bases.pop();
                            console.log("Removing ui_base node "+n.id);
                            RED.nodes.remove(n.id);
                            RED.nodes.dirty(true);
                        }

                        if (bases.length === 1) { globalDashboardNode = bases[0]; }

                        // If there is no dashboard node, ensure we create it after
                        // initialising
                        var noDashboardNode = (globalDashboardNode === null);

                        // set up theme state
                        var themeState = {};
                        var baseColor = "#0094CE"
                        for (var i=0; i<baseStyles.length; i++) {
                            themeState[baseStyles[i]] = { default:baseColor, value:baseColor, edited:false };
                        }
                        for (var j = 0; j < configurableStyles.length; j++) {
                            var underscore = configurableStyles[j].split("-").join("_");
                            var colour = colours['calculate_'+underscore](baseColor);
                            themeState[configurableStyles[j]] = {value:colour, edited:false};
                        }
                        themeState["base-font"] = {value:baseFontName};

                        var missingFields = (!globalDashboardNode || !globalDashboardNode.theme || !globalDashboardNode.site || !globalDashboardNode.site.sizes );

                        if (missingFields && createMissing) {
                            var lightTheme = {
                                default: baseColor,
                                baseColor: baseColor,
                                baseFont: baseFontName,
                                edited: false
                            }
                            var darkTheme = {
                                default: "#097479",
                                baseColor: "#097479",
                                baseFont: baseFontName,
                                edited: false
                            }
                            var customTheme = {
                                name: 'Untitled Theme 1',
                                default: "#4B7930",
                                baseColor: "#4B7930",
                                baseFont: baseFontName
                            }
                            var oldThemeName;
                            if (globalDashboardNode && typeof(globalDashboardNode.theme === 'string')) { oldThemeName = globalDashboardNode.theme; }

                            var theme = {
                                name: oldThemeName || "theme-light",
                                lightTheme: lightTheme,
                                darkTheme: darkTheme,
                                customTheme: customTheme,
                                themeState: themeState,
                                angularTheme: aTheme
                            }

                            var site_name = c_("site.title");
                            var site_date_format = c_("site.date-format");
                            var site = { name:site_name, hideToolbar:"false", allowSwipe:"false", lockMenu:"false", allowTempTheme:"true", dateFormat:site_date_format, sizes:sizes };
                            if (globalDashboardNode !== null) {
                                if (typeof globalDashboardNode.site !== "undefined") {
                                    site = {
                                        name: globalDashboardNode.site.name || globalDashboardNode.name,
                                        hideToolbar: globalDashboardNode.site.hideToolbar,
                                        lockMenu: globalDashboardNode.site.lockMenu,
                                        allowSwipe: globalDashboardNode.site.allowSwipe,
                                        allowTempTheme: globalDashboardNode.site.allowTempTheme,
                                        dateFormat: globalDashboardNode.site.dateFormat,
                                        sizes: globalDashboardNode.site.sizes
                                    }
                                }
                                if (globalDashboardNode.theme.hasOwnProperty("angularTheme")) {
                                    aTheme = globalDashboardNode.theme.angularTheme;
                                }
                                else { globalDashboardNode.theme.angularTheme = aTheme; }
                            }

                            if (noDashboardNode) {
                                globalDashboardNode = {
                                    id: RED.nodes.id(),
                                    _def: RED.nodes.getType("ui_base"),
                                    type: "ui_base",
                                    site: site,
                                    theme: theme,
                                    users: []
                                }
                                RED.nodes.add(globalDashboardNode);
                                RED.editor.validateNode(globalDashboardNode);
                            }
                            else {
                                globalDashboardNode["_def"] = RED.nodes.getType("ui_base");
                                globalDashboardNode.site = site;
                                globalDashboardNode.theme = theme;
                                delete globalDashboardNode.name;
                            }
                            $("#nr-db-field-font").val(baseFontName);
                            RED.nodes.dirty(true);
                        }
                    }
                }

                var content = $("<div>").css({"position":"relative","height":"100%"});
                var mainContent = $("<div>",{class:"nr-db-sb"}).appendTo(content);
                var form = $('<form class="dialog-form">').appendTo(mainContent);

                // Dashboard Tabs markup
                var divTab = $('<div class="red-ui-tabs">').appendTo(form);
                var ulDashboardTabs = $('<ul id="dashboard-tabs-list"></ul>').appendTo(divTab);
                var layout_label = c_("label.layout");
                var site_label = c_("label.site");
                var theme_label = c_("label.theme");
                var angular_label = c_("label.angular");
                var liLayoutTab = $('<li class="red-ui-tab" style="width:70px;"><a class="red-ui-tab-label" title="Layout"><span>'+layout_label+'</span></a></li>').appendTo(ulDashboardTabs);
                var liSiteTab = $('<li class="red-ui-tab" style="width:70px;"><a class="red-ui-tab-label" title="Site" style="width:60px;"><span>'+site_label+'</span></a></li>').appendTo(ulDashboardTabs);
                var liThemeTab = $('<li class="red-ui-tab" style="width:70px;"><a class="red-ui-tab-label" title="Theme" style="width:80px;"><span>'+theme_label+'</span></a></li>').appendTo(ulDashboardTabs);
                var liAngularTab = $('<li class="red-ui-tab" style="width:70px;"><a class="red-ui-tab-label" title="Angular" style="width:80px;"><span>'+angular_label+'</span></a></li>').appendTo(ulDashboardTabs);

                // Link out to dashboard
                $.getJSON('uisettings',function(data) {
                    if (data.hasOwnProperty("path")) { uip = data.path; }
                    var lnk = document.location.host+RED.settings.httpNodeRoot+"/"+uip;
                    var re = new RegExp('\/{1,}','g');
                    lnk = lnk.replace(re,'/');
                    if (!RED.hasOwnProperty("actions")) {
                        RED.keyboard.add("*",/* d */ 68,{ctrl:true, shift:true},function() { window.open(document.location.protocol+"//"+lnk, "nr-dashboard") });
                    }
                    else {
                        RED.actions.add("dashboard:show-dashboard",function() { window.open(document.location.protocol+"//"+lnk, "nr-dashboard") });
                        RED.keyboard.add("*","ctrl-shift-d","dashboard:show-dashboard");
                    }
                    $('<span id="dash-link-button" class="editor-button" style="position:absolute; right:0px;"><i class="fa fa-external-link"></i></span>')
                    .click(function(evt) {
                        window.open(document.location.protocol+"//"+lnk);
                        evt.preventDefault();
                    })
                    .appendTo(ulDashboardTabs);
                });

                // Dashboard Tab containers
                var layoutTab = $('<div id="dashboard-layout" style="height:calc(100% - 48px)">').appendTo(form);
                var siteTab = $('<div id="dashboard-site" style="display:none;">').appendTo(form);
                var themeTab = $('<div id="dashboard-theme" style="display:none;">').appendTo(form);
                var angularTab = $('<div id="dashboard-angular" style="display:none;">').appendTo(form);

                ulDashboardTabs.children().first().addClass("active");

                // Tab logic
                var onTabClick = function() {
                    //Toggle tabs
                    ulDashboardTabs.children().removeClass("active");
                    ulDashboardTabs.children().css({"transition": "width 100ms"});
                    $(this).parent().addClass("active");

                    var selectedTab = $(this)[0].title;
                    if (selectedTab === 'Layout') {
                        themeTab.hide();
                        siteTab.hide();
                        angularTab.hide();
                        layoutTab.show();
                    }
                    else if (selectedTab === 'Angular') {
                        themeTab.hide();
                        siteTab.hide();
                        angularTab.show();
                        layoutTab.hide();
                    }
                    else if (selectedTab === 'Theme') {
                        layoutTab.hide();
                        siteTab.hide();
                        angularTab.hide();
                        themeTab.show();
                        if ($("#nr-db-field-theme option:selected").val() === 'theme-custom') { themeSettingsContainer.show(); }
                        else { themeSettingsContainer.hide(); }
                    }
                    else {
                        layoutTab.hide();
                        themeTab.hide();
                        angularTab.hide();
                        siteTab.show();
                    }
                }

                ulDashboardTabs.find("li.red-ui-tab a").on("click",onTabClick)

                // Site Tab
                var divTitle = $('<div>',{class:"form-row compact"}).appendTo(siteTab);
                $('<div>').html('<b>'+c_("label.title")+'</b>').appendTo(divTitle);
                $('<input type="text" id="nr-db-field-title">').val(site_name).css("width","100%")
                .on("change", function() {
                    if (!globalDashboardNode || globalDashboardNode.site.name !== $(this).val()) {
                        //ensureDashboardNode(true);
                        globalDashboardNode.site.name = $(this).val();
                    }
                    RED.nodes.dirty(true);
                })
                .appendTo(divTitle);

                var divHideToolbar = $('<div>',{class:"form-row compact"}).appendTo(siteTab);
                $('<div>').html('<b>'+c_("label.options")+'</b>').appendTo(divHideToolbar);
                $('<select id="nr-db-field-hideToolbar">')
                .css("width","100%")
                .append($('<option>', { value:"false", text:c_("title-bar.show"), selected:true }))
                .append($('<option>', { value:"true", text:c_("title-bar.hide") }))
                .val("false")
                .on("change", function() {
                    if (!globalDashboardNode || globalDashboardNode.site.hideToolbar !== $(this).val()) {
                        //ensureDashboardNode(true);
                        globalDashboardNode.site.hideToolbar = $(this).val();
                    }
                    RED.nodes.dirty(true);
                })
                .appendTo(divHideToolbar);

                var divLockMenu = $('<div>',{class:"form-row compact"}).appendTo(siteTab);
                $('<select id="nr-db-field-lockMenu">')
                .css("width","100%")
                .append($('<option>', { value:"false", text:c_("lock.clicked"), selected:true }))
                .append($('<option>', { value:"true", text:c_("lock.locked") }))
                .append($('<option>', { value:"icon", text:c_("lock.locked-icon") }))
                .val("false")
                .on("change", function() {
                    if (!globalDashboardNode || globalDashboardNode.site.lockMenu !== $(this).val()) {
                        //ensureDashboardNode(true);
                        globalDashboardNode.site.lockMenu = $(this).val();
                    }
                    RED.nodes.dirty(true);
                })
                .appendTo(divLockMenu);

                var divAllowSwipe = $('<div>',{class:"form-row compact"}).appendTo(siteTab);
                $('<select id="nr-db-field-allowSwipe">')
                .css("width","100%")
                .append($('<option>', { value:"false", text:c_("swipe.no-swipe"), selected:true }))
                .append($('<option>', { value:"true", text:c_("swipe.allow-swipe") }))
                .append($('<option>', { value:"mouse", text:c_("swipe.allow-swipe-mouse") }))
                .append($('<option>', { value:"menu", text:c_("swipe.show-menu") }))
                .val("false")
                .on("change", function() {
                    if (!globalDashboardNode || globalDashboardNode.site.allowSwipe !== $(this).val()) {
                        //ensureDashboardNode(true);
                        globalDashboardNode.site.allowSwipe = $(this).val();
                        RED.nodes.dirty(true);
                    }
                })
                .appendTo(divAllowSwipe);

                var divAllowTempTheme = $('<div>',{class:"form-row compact"}).appendTo(siteTab);
                $('<select id="nr-db-field-allowTempTheme">')
                .css("width","100%")
                .append($('<option>', { value:"true", text:c_("temp.allow-theme"), selected:true }))
                .append($('<option>', { value:"false", text:c_("temp.no-theme") }))
                .append($('<option>', { value:"none", text:c_("temp.none") }))
                .val("true")
                .on("change", function() {
                    if (!globalDashboardNode || globalDashboardNode.site.allowTempTheme !== $(this).val()) {
                        //ensureDashboardNode(true);
                        globalDashboardNode.site.allowTempTheme = $(this).val();
                    }
                    if ($('#nr-db-field-allowTempTheme').val() === "none") {
                        ulDashboardTabs.children().eq(2).addClass("hidden");
                        ulDashboardTabs.children().eq(3).removeClass("hidden");
                    }
                    else {
                        ulDashboardTabs.children().eq(2).removeClass("hidden");
                        ulDashboardTabs.children().eq(3).addClass("hidden");
                    }
                    RED.nodes.dirty(true);
                })
                .appendTo(divAllowTempTheme);

                var site_name = c_("site.title");
                var site_date_format = c_("site.date-format");
                var divDateFormat = $('<div>',{class:"form-row"}).appendTo(siteTab);
                $('<div>').html('<b>'+c_("label.date-format")+'</b>')
                .css("width","80%")
                .css("display","inline-block")
                .appendTo(divDateFormat);
                $('<div>').html("<a href='https://momentjs.com/docs/#/displaying/format/' target='_new'><i class='fa fa-info-circle' style='color:var(--red-ui-secondary-text-color, grey);'></i></a>")
                .css("display","inline-block")
                .css("margin-right","6px")
                .css("float","right")
                .appendTo(divDateFormat);
                $('<input type="text" id="nr-db-field-dateFormat">').val(site_date_format).css("width","100%")
                .on("change", function() {
                    if (!globalDashboardNode || globalDashboardNode.site.dateFormat !== $(this).val()) {
                        //ensureDashboardNode(true);
                        globalDashboardNode.site.dateFormat = $(this).val();
                    }
                    RED.nodes.dirty(true);
                })
                .appendTo(divDateFormat);

                var divSetSizes = $('<div>',{class:"form-row"}).appendTo(siteTab);
                $('<span style="width:45%; display:inline-block">').html('<b>'+c_("label.sizes")+'</b>').appendTo(divSetSizes);
                $('<span style="width:25%; display:inline-block; font-size:smaller">').text(c_("label.horizontal")).appendTo(divSetSizes);
                $('<span style="width:20%; display:inline-block; font-size:smaller">').text(c_("label.vertical")).appendTo(divSetSizes);
                $('<i id="sizes-reset" class="fa fa-undo nr-db-resetIcon"></i>')
                .css({opacity:1.0})
                .click(function(e) {
                    $("#nr-db-field-sx").val(sizes.sx); globalDashboardNode.site.sizes.sx = sizes.sx;
                    $("#nr-db-field-sy").val(sizes.sy); globalDashboardNode.site.sizes.sy = sizes.sy;
                    $("#nr-db-field-px").val(sizes.px); globalDashboardNode.site.sizes.px = sizes.px;
                    $("#nr-db-field-py").val(sizes.py); globalDashboardNode.site.sizes.py = sizes.py;
                    $("#nr-db-field-gx").val(sizes.gx); globalDashboardNode.site.sizes.gx = sizes.gx;
                    $("#nr-db-field-gy").val(sizes.gy); globalDashboardNode.site.sizes.gy = sizes.gy;
                    $("#nr-db-field-cx").val(sizes.cx); globalDashboardNode.site.sizes.cx = sizes.cx;
                    $("#nr-db-field-cy").val(sizes.cy); globalDashboardNode.site.sizes.cy = sizes.cy;
                    RED.nodes.dirty(true);
                })
                .appendTo(divSetSizes);

                $('<br/><span style="width:45%; display:inline-block">').text(c_("label.widget-size")).appendTo(divSetSizes);
                $('<input type="number" name="sx" min="24" id="nr-db-field-sx">').val(48).css("width","20%")
                .on("change", function() {
                    //ensureDashboardNode(true);
                    globalDashboardNode.site.sizes.sx=Number($(this).val()); RED.nodes.dirty(true); } )
                .appendTo(divSetSizes);
                $('<span style="width:5%; display:inline-block">').text(' ').appendTo(divSetSizes);
                $('<input type="number" name="sy" min="24" id="nr-db-field-sy">').val(48).css("width","20%")
                .on("change", function() {
                    //ensureDashboardNode(true);
                    globalDashboardNode.site.sizes.sy=Number($(this).val()); RED.nodes.dirty(true); } )
                .appendTo(divSetSizes);

                $('<br/><span style="width:45%; display:inline-block">').text(c_("label.widget-spacing")).appendTo(divSetSizes);
                $('<input type="number" name="cx" min="0" id="nr-db-field-cx">').val(6).css("width","20%")
                .on("change", function() {
                    //ensureDashboardNode(true);
                    globalDashboardNode.site.sizes.cx=Number($(this).val()); RED.nodes.dirty(true); } )
                .appendTo(divSetSizes);
                $('<span style="width:5%; display:inline-block">').text(' ').appendTo(divSetSizes);
                $('<input type="number" name="cy" min="0" id="nr-db-field-cy">').val(6).css("width","20%")
                .on("change", function() {
                    //ensureDashboardNode(true);
                    globalDashboardNode.site.sizes.cy=Number($(this).val()); RED.nodes.dirty(true); } )
                .appendTo(divSetSizes);

                $('<br/><span style="width:45%; display:inline-block">').text(c_("label.group-padding")).appendTo(divSetSizes);
                $('<input type="number" name="px" min="0" id="nr-db-field-px">').val(0).css("width","20%")
                .on("change", function() {
                    //ensureDashboardNode(true);
                    globalDashboardNode.site.sizes.px=Number($(this).val()); RED.nodes.dirty(true); } )
                .appendTo(divSetSizes);
                $('<span style="width:5%; display:inline-block">').text(' ').appendTo(divSetSizes);
                $('<input type="number" name="py" min="0" id="nr-db-field-py">').val(0).css("width","20%")
                .on("change", function() {
                    //ensureDashboardNode(true);
                    globalDashboardNode.site.sizes.py=Number($(this).val()); RED.nodes.dirty(true); } )
                .appendTo(divSetSizes);

                $('<br/><span style="width:45%; display:inline-block">').text(c_("label.group-spacing")).appendTo(divSetSizes);
                $('<input type="number" name="gx" min="0" id="nr-db-field-gx">').val(6).css("width","20%")
                .on("change", function() {
                    //ensureDashboardNode(true);
                    globalDashboardNode.site.sizes.gx=Number($(this).val()); RED.nodes.dirty(true); } )
                .appendTo(divSetSizes);
                $('<span style="width:5%; display:inline-block">').text(' ').appendTo(divSetSizes);
                $('<input type="number" name="gy" min="0" id="nr-db-field-gy">').val(6).css("width","20%")
                .on("change", function() {
                    //ensureDashboardNode(true);
                    globalDashboardNode.site.sizes.gy=Number($(this).val()); RED.nodes.dirty(true); } )
                .appendTo(divSetSizes);

                // Angular Theme Tab
                var changed = function() {
                    ensureDashboardNode(true);
                    globalDashboardNode.theme.angularTheme = aTheme;
                    RED.nodes.dirty(true);
                }

                var angColorList = ["red", "pink", "purple", "deep-purple", "indigo", "blue", "light-blue", "cyan", "teal", "green", "light-green", "lime", "yellow", "amber", "orange", "deep-orange", "brown", "grey", "blue-grey"];
                var angColors = "";
                angColorList.forEach(function(c) { angColors += '<option value="' + c + '">' + c + '</option>'; });

                var divPrimStyle = $('<div>',{class:"form-row"}).appendTo(angularTab);
                $('<span style="width:45%; display:inline-block">')
                    .html('<b>'+c_("style.primary")+'</b>')
                    .appendTo(divPrimStyle);
                $('<i id="ang-reset" class="fa fa-undo nr-db-resetIcon"></i>')
                    .css({opacity:1.0})
                    .click(function(e) {
                        $("#nr-db-field-angPrimary").val("indigo");
                        globalDashboardNode.theme.angularTheme.primary = "indigo";
                        RED.nodes.dirty(true);
                    })
                    .appendTo(divPrimStyle);
                $('<select id="nr-db-field-angPrimary">'+angColors+'</select>')
                    .css("width","100%")
                    .val(aTheme.primary)
                    .on("change", function() { aTheme.primary = $(this).val(); changed(); })
                    .appendTo(divPrimStyle);

                var divAccStyle = $('<div>',{class:"form-row"}).appendTo(angularTab);
                $('<span style="width:45%; display:inline-block">')
                    .html('<b>'+c_("style.accents")+'</b>')
                    .appendTo(divAccStyle);
                $('<i id="ang-reset" class="fa fa-undo nr-db-resetIcon"></i>')
                    .css({opacity:1.0})
                    .click(function(e) {
                        $("#nr-db-field-angAccents").val("blue");
                        globalDashboardNode.theme.angularTheme.accents = "blue";
                        RED.nodes.dirty(true);
                    })
                    .appendTo(divAccStyle);
                $('<select id="nr-db-field-angAccents">'+angColors+'</select>')
                    .css("width","100%")
                    .val(aTheme.accents)
                    .on("change", function() { aTheme.accents = $(this).val(); changed(); })
                    .appendTo(divAccStyle);

                var divWarnStyle = $('<div>',{class:"form-row"}).appendTo(angularTab);
                $('<span style="width:45%; display:inline-block">')
                    .html('<b>'+c_("style.warnings")+'</b>')
                    .appendTo(divWarnStyle);
                $('<i id="ang-reset" class="fa fa-undo nr-db-resetIcon"></i>')
                    .css({opacity:1.0})
                    .click(function(e) {
                        $("#nr-db-field-angWarn").val("red");
                        globalDashboardNode.theme.angularTheme.warn = "red";
                        RED.nodes.dirty(true);
                    })
                    .appendTo(divWarnStyle);
                $('<select id="nr-db-field-angWarn">'+angColors+'</select>')
                    .css("width","100%")
                    .val(aTheme.warn)
                    .on("change", function() { aTheme.warn = $(this).val(); changed(); })
                    .appendTo(divWarnStyle);

                var divBackStyle = $('<div>',{class:"form-row"}).appendTo(angularTab);
                $('<span style="width:45%; display:inline-block">')
                    .html('<b>'+c_("style.background")+'</b>')
                    .appendTo(divBackStyle);
                $('<i id="ang-reset" class="fa fa-undo nr-db-resetIcon"></i>')
                    .css({opacity:1.0})
                    .click(function(e) {
                        $("#nr-db-field-angBackground").val("grey");
                        globalDashboardNode.theme.angularTheme.background = "grey";
                        RED.nodes.dirty(true);
                    })
                    .appendTo(divBackStyle);
                $('<select id="nr-db-field-angBackground">'+angColors+'</select>')
                    .css("width","100%")
                    .val(aTheme.background)
                    .on("change", function() { aTheme.background = $(this).val(); changed(); })
                    .appendTo(divBackStyle);

                var divPalStyle = $('<div>',{class:"form-row"}).appendTo(angularTab);
                $('<span style="width:45%; display:inline-block">')
                    .html('<b>'+c_("style.palette")+'</b>')
                    .appendTo(divPalStyle);
                var lightdark = '<option value="light">' +c_("style.light")+ '</option>';
                lightdark += '<option value="dark">' +c_("style.dark")+ '</option>';
                $('<select id="nr-db-field-angLook">'+lightdark+'</select>')
                    .css("width","100%")
                    .val(aTheme.palette)
                    .on("change", function() { aTheme.palette = $(this).val(); changed(); })
                    .appendTo(divPalStyle);

                // Theme Tab
                // For all customisable styles, generate and apply the css
                var generateColours = function(base) {
                    var theme = globalDashboardNode.theme.name.split('-')[1];
                    if (!globalDashboardNode.theme.themeState.hasOwnProperty["base-font"]) {
                        if (globalDashboardNode.theme[theme+"Theme"].baseFont === "Helvetica Neue") {
                            globalDashboardNode.theme[theme+"Theme"].baseFont = baseFontName;
                        }
                        globalDashboardNode.theme.themeState["base-font"] = {value:globalDashboardNode.theme[theme+"Theme"].baseFont};
                        $("#nr-db-field-font").val(globalDashboardNode.theme[theme+"Theme"].baseFont);
                    }
                    for (var i=0; i<configurableStyles.length; i++) {
                        var styleID = configurableStyles[i];
                        var underscore = styleID.split("-").join("_");
                        if (!globalDashboardNode.theme.themeState.hasOwnProperty(styleID)) {
                            globalDashboardNode.theme.themeState[styleID] = {value:"#fff",edited:false};
                        }
                        if (!globalDashboardNode.theme.themeState[styleID].edited || globalDashboardNode.theme[theme+'Theme'].reset) {
                            var colour = colours['calculate_'+underscore](base);
                            globalDashboardNode.theme.themeState[styleID].value = colour;
                        }
                        setColourPickerColour(styleID, globalDashboardNode.theme.themeState[styleID].value, globalDashboardNode.theme.themeState[styleID].edited);
                    }
                    globalDashboardNode.theme[theme+'Theme'].reset = false;
                }

                var divThemeStyle = $('<div>',{class:"form-row"}).appendTo(themeTab);
                $('<label class="nr-db-theme-label">').text(c_("theme.style")).appendTo(divThemeStyle);
                var themeSelection = $('<select id="nr-db-field-theme">'+
                    '<option value="theme-light">'+c_("style.light")+'</option>'+
                    '<option value="theme-dark">'+c_("style.dark")+'</option>'+
                    '<option value="theme-custom">'+c_("style.custom")+'</option>'+
                    '</select>')
                .css("width","100%")
                .on("change", function() {
                    if (!globalDashboardNode || globalDashboardNode.theme.name !== $(this).val()) {
                        //ensureDashboardNode(true);
                        var theme = globalDashboardNode.theme.name.split('-')[1];
                        var baseColour = globalDashboardNode.theme[theme+'Theme'].baseColor;
                        var baseFont = globalDashboardNode.theme[theme+'Theme'].baseFont;
                        globalDashboardNode.theme.name = $(this).val();
                        theme = globalDashboardNode.theme.name.split('-')[1];
                        if (theme !== "custom") {
                            baseColour = globalDashboardNode.theme[theme+'Theme'].default;
                        }
                        else { baseColour = globalDashboardNode.theme[theme+'Theme'].baseColor; }
                        setColourPickerColour("base-color", baseColour);
                        globalDashboardNode.theme.themeState['base-color'].value = baseColour;
                        globalDashboardNode.theme.themeState['base-color'].default = baseColour;
                        globalDashboardNode.theme.themeState['base-font'] = {value:baseFont};
                        $("#nr-db-field-font").val(baseFont);
                        globalDashboardNode.theme[theme+'Theme'].reset = true;
                        //generate colours for all colour settings from base colour
                        generateColours(baseColour);
                        RED.nodes.dirty(true);
                    }
                    $('#base-color-reset').remove();
                    if ($(this).val() === 'theme-custom') {
                        $("#custom-theme-library-container").show(); //TODO undo this at some point
                        $("#custom-theme-settings").show();
                        //addResetButton('base-color', baseSettingsUl.children());
                    }
                    else {
                        $("#custom-theme-library-container").hide();
                        $("#custom-theme-settings").hide();
                        addLightAndDarkResetButton('base-color', baseSettingsUl.children().first());
                    }
                })
                .appendTo(divThemeStyle);

                var customThemeLibraryContainer = $('<div id="custom-theme-library-container">').appendTo(themeTab);
                $('<label class="nr-db-theme-label">').text(c_("theme.custom-profile")).appendTo(customThemeLibraryContainer);
                $('<input type="text" id="ui-sidebar-name" style="vertical-align:top;" placeholder="profile name (not blank)">')
                .val(c_("theme.custom-profile-name"))
                .on("change", function() {
                    if (!globalDashboardNode || globalDashboardNode.theme.customTheme.name !== $(this).val()) {
                        //ensureDashboardNode(true);
                        globalDashboardNode.theme.customTheme.name = $(this).val();
                        if (editor) {
                            editor.setValue(JSON.stringify({theme:globalDashboardNode.theme.themeState, site:globalDashboardNode.site}),1);
                            RED.nodes.dirty(true);
                        }
                    }
                })
                .keyup(function() {
                    if ($(this).val().length === 0) {
                        $("#custom-theme-library-container div").css("pointer-events","none");
                    }
                    else { $("#custom-theme-library-container div").css("pointer-events","inherit"); }
                })
                .appendTo(customThemeLibraryContainer);
                $('<input type="hidden" id="nr-db-field-format">').appendTo(customThemeLibraryContainer);
                $('<div style="display:none;" class="node-text-editor" id="nr-db-field-format-editor"></div>').appendTo(customThemeLibraryContainer);

                var baseThemeSettingsContainer = $('<div id="base-theme-settings">').appendTo(themeTab);

                var baseSettings = $('<div>',{class:"form-row"}).appendTo(baseThemeSettingsContainer);
                $('<label class="nr-db-theme-label">').text(c_("theme.base-settings")).appendTo(baseSettings);
                var baseSettingsUl = $('<ul id="base-settings-ul" class="red-ui-dashboard-theme-styles"></ul>').appendTo(baseSettings);

                var baseColourItem = $('<li class="red-ui-dashboard-theme-item"><span>'+c_("base.colour")+'</span></li>').appendTo(baseSettingsUl);
                var spanColorContainer = $('<span class="nr-db-color-pick-container"></span>').appendTo(baseColourItem);

                $('<input id="base-color" class="nr-db-field-themeColor" type="color" value="#ffffff"/>')
                .on("change", function() {
                    //ensureDashboardNode(true);
                    var value = $(this).val();
                    var lightThemeMatch = globalDashboardNode.theme.lightTheme.baseColor === value;
                    var darkThemeMatch = globalDashboardNode.theme.darkTheme.baseColor === value;
                    var customThemeMatch = globalDashboardNode.theme.customTheme.baseColor === value;
                    if (!globalDashboardNode || !lightThemeMatch || !darkThemeMatch || !customThemeMatch) {
                        var theme = globalDashboardNode.theme.name.split('-')[1];
                        globalDashboardNode.theme[theme+'Theme'].baseColor = value;
                        if (globalDashboardNode.theme.name === 'theme-light' || globalDashboardNode.theme.name === 'theme-dark') {
                            //for light and dark themes, reset the colours
                            globalDashboardNode.theme[theme+'Theme'].reset = true;
                        }
                        generateColours(value);
                        editor.setValue(JSON.stringify({theme:globalDashboardNode.theme.themeState, site:globalDashboardNode.site}),1);
                        colourPickerChangeHandler($(this).attr('id'), value);
                    }
                })
                .appendTo(spanColorContainer);

                var baseFontItem = $('<li class="red-ui-dashboard-theme-item"><span>'+c_("base.font")+'</span></li>').appendTo(baseSettingsUl);
                var fontSelector = $('<select id="nr-db-field-font">'+
                    '<option value="'+baseFontName+'" style="font-family:'+baseFontName+'">'+c_("font.system")+'</option>'+
                    '<option value="Arial,Arial,Helvetica,sans-serif" style="font-family:Arial,Arial,Helvetica,sans-serif">Arial</option>'+
                    '<option value="Arial Black,Arial Black,Gadget,sans-serif" style="font-family:Arial Black,Arial Black,Gadget,sans-serif">Arial Black</option>'+
                    '<option value="Arial Narrow,Nimbus Sans L,sans-serif" style="font-family:Arial Narrow,Nimbus Sans L,sans-serif">Arial Narrow</option>'+
                    '<option value="Century Gothic,CenturyGothic,AppleGothic,sans-serif" style="font-family:Century Gothic,CenturyGothic,AppleGothic,sans-serif">Century Gothic</option>'+
                    '<option value="Copperplate,Copperplate Gothic Light,fantasy" style="font-family:Copperplate,Copperplate Gothic Light,fantasy;">Copperplate</option>'+
                    '<option value="Courier,monospace" style="font-family:Courier,monospace;">Courier</option>'+
                    '<option value="Georgia,Georgia,serif" style="font-family:Georgia,Georgia,serif">Georgia</option>'+
                    '<option value="Gill Sans,Geneva,sans-serif" style="font-family:Gill Sans,Geneva,sans-serif;">Gill Sans</option>'+
                    //'<option value="Helvetica Neue,Helvetica,sans-serif" style="font-family:Helvetica Neue,Helvetica,sans-serif">Helvetica Neue</option>'+
                    '<option value="Impact,Impact,Charcoal,sans-serif" style="font-family:Impact,Impact,Charcoal,sans-serif">Impact</option>'+
                    '<option value="Lucida Sans Typewriter,Lucida Console,Monaco,monospace" style="font-family:Lucida Console,Monaco,monospace">Lucida Console</option>'+
                    '<option value="Lucida Sans Unicode,Lucida Grande,sans-serif" style="font-family:Lucida Sans Unicode,Lucida Grande,sans-serif">Lucida Sans</option>'+
                    '<option value="Palatino Linotype,Palatino,Book Antiqua,serif" style="font-family:Palatino Linotype,Palatino,Book Antiqua,serif">Palatino Linotype</option>'+
                    '<option value="Tahoma,Geneva,sans-serif" style="font-family:Tahoma,Geneva,sans-serif">Tahoma</optionstyle="font-family:>'+
                    '<option value="Times New Roman,Times,serif" style="font-family:Times New Roman,Times,serif">Times New Roman</option>'+
                    '<option value="Trebuchet MS,Helvetica,sans-serif" style="font-family:Trebuchet MS,Helvetica,sans-serif">Trebuchet MS</option>'+
                    '<option value="Verdana,Verdana,Geneva,sans-serif" style="font-family:Verdana,Verdana,Geneva,sans-serif">Verdana</option>'+
                    '</select>')
                    .on("change", function() {
                        //ensureDashboardNode(true);
                        var theme = globalDashboardNode.theme.name.split('-')[1];
                        globalDashboardNode.theme[theme+'Theme'].baseFont = $(this).val();
                        globalDashboardNode.theme.themeState['base-font'] = {value:$(this).val()};
                        RED.nodes.dirty(true);
                    })
                    .appendTo(baseFontItem);

                var themeSettingsContainer = $('<div id="custom-theme-settings">').appendTo(themeTab);

                // Markup
                // Page styles
                var divPageStyle = $('<div>',{class:"form-row"}).appendTo(themeSettingsContainer);
                $('<label class="nr-db-theme-label">').text(c_("theme.page-settings")).appendTo(divPageStyle);
                var pageStyles = $('<ul class="red-ui-dashboard-theme-styles"></ul>').appendTo(themeSettingsContainer);
                addCustomisableStyle('page-titlebar-backgroundColor', c_("theme.page.title"), pageStyles);
                addCustomisableStyle('page-backgroundColor', c_("theme.page.page"), pageStyles);
                addCustomisableStyle('page-sidebar-backgroundColor', c_("theme.page.side"), pageStyles);

                // Group styles
                var divGroupStyle = $('<div>',{class:"form-row"}).appendTo(themeSettingsContainer);
                $('<label class="nr-db-theme-label">').text(c_("theme.group-settings")).appendTo(divGroupStyle);
                var groupStyles = $('<ul class="red-ui-dashboard-theme-styles"></ul>').appendTo(themeSettingsContainer);
                addCustomisableStyle('group-textColor', c_("theme.group.text"), groupStyles);
                addCustomisableStyle('group-borderColor', c_("theme.group.border"), groupStyles);
                addCustomisableStyle('group-backgroundColor', c_("theme.group.background"), groupStyles);

                // Widget styles
                var divWidgetStyle = $('<div>',{class:"form-row"}).appendTo(themeSettingsContainer);
                $('<label class="nr-db-theme-label">').text(c_("theme.widget-settings")).appendTo(divWidgetStyle);
                var widgetStyles = $('<ul class="red-ui-dashboard-theme-styles"></ul>').appendTo(themeSettingsContainer);
                addCustomisableStyle('widget-textColor', c_("theme.widget.text"), widgetStyles);
                addCustomisableStyle('widget-backgroundColor', c_("theme.widget.colour"), widgetStyles);
                addCustomisableStyle('widget-borderColor', c_("theme.widget.background"), widgetStyles);

                function addCustomisableStyle(id, name, parentUl) {
                    var styleLi = $('<li class="red-ui-dashboard-theme-item"><span>'+name+'</span></li>').appendTo(parentUl);
                    var spanColorContainer = $('<span class="nr-db-color-pick-container"></span>').appendTo(styleLi);
                    $('<input id="'+id+'" class="nr-db-field-themeColor" type="color" value="#ffffff"/>')
                    .on("change", function() {
                        colourPickerChangeHandler($(this).attr('id'), $(this).val());
                    })
                    .appendTo(spanColorContainer);
                    addResetButton(id, styleLi);
                }

                function colourPickerChangeHandler(id, value) {
                    $("#"+id).css("background-color", value);
                    $("#"+id+"-reset").css({opacity:1});
                    globalDashboardNode.theme.themeState[id].edited = true;
                    globalDashboardNode.theme.themeState[id].value = value;
                    if (editor) {
                        editor.setValue(JSON.stringify({theme:globalDashboardNode.theme.themeState, site:globalDashboardNode.site}),1);
                    }
                    RED.nodes.dirty(true);
                }

                function addResetButton(id, parent) {
                    var resetToDefault = $('<i id="'+id+'-reset" class="fa fa-undo nr-db-resetIcon"></i>')
                    .css({opacity:0.2})
                    .click(function(e) { resetClick(e); })
                    .appendTo(parent);
                }

                function addLightAndDarkResetButton(id, parent) {
                    if ($("#" + id + "-reset").length === 0) {
                        var resetToDefault = $('<i id="'+id+'-reset" class="fa fa-undo nr-db-resetIcon"></i>')
                        .css({opacity:1})
                        .click(function(e) { lightAndDarkResetClick(e); })
                        .appendTo(parent);
                        globalDashboardNode.theme[globalDashboardNode.theme.name.split('-')[1] + 'Theme'].edited = true;
                    }
                }

                function lightAndDarkResetClick(e) {
                    var elementID = e.target.id.split('-reset')[0];
                    var key = globalDashboardNode.theme.name.split('-')[1] + 'Theme';
                    //sanity check - light and dark only allow base-color-reset
                    if (elementID === 'base-color') { // && globalDashboardNode.theme[key].edited) {
                        var defaultColor = globalDashboardNode.theme[key].default;
                        globalDashboardNode.theme[key].reset = true;
                        generateColours(defaultColor);
                        setColourPickerColour(elementID, defaultColor);
                        $("#"+elementID+"-reset").css({opacity:0.2});
                        globalDashboardNode.theme.themeState[elementID].value = defaultColor;
                        globalDashboardNode.theme[key].baseColor = defaultColor;
                        globalDashboardNode.theme[key].edited = false;
                        RED.nodes.dirty(true);
                    }
                }

                function resetClick(e) {
                    //take off -reset
                    var elementID = e.target.id.split('-reset')[0];
                    if (globalDashboardNode.theme.themeState[elementID].edited) {
                        var defaultColor = globalDashboardNode.theme.themeState['base-color'].value;
                        var colour;
                        //set colour
                        if (elementID === 'base-color') {
                            colour = defaultColor;
                            generateColours(colour);
                        }
                        else {
                            var underscore = elementID.split('-').join('_');
                            colour = colours['calculate_'+underscore](defaultColor);
                        }
                        setColourPickerColour(elementID, colour);
                        $("#"+elementID+"-reset").css({opacity:0.2});
                        globalDashboardNode.theme.themeState[elementID].edited = false;
                        globalDashboardNode.theme.themeState[elementID].value = colour;
                        RED.nodes.dirty(true);
                    }
                }

                function setColourPickerColour(id, val, ed) {
                    $("#"+id).val(val);
                    $("#"+id).css("background-color", val);
                    //call mostReadableGreyWhite to set text colour
                    var textColor = colours.whiteGreyMostReadable(val);
                    $("#"+id).css("color", textColor);
                    if (ed === true) { $("#"+id+"-reset").css({opacity:1}); }
                    else { $("#"+id+"-reset").css({opacity:0.2}); }
                }

                //Layout Tab
                var divTabs = $('<div>',{class:"form-row",style:"position:relative"}).appendTo(layoutTab);
                $('<label>').html('<b>'+c_("layout.tab-and-link")+'</b>').appendTo(divTabs);

                var buttonGroup = $('<div>',{class:"nr-db-sb-list-button-group"}).appendTo(divTabs);

                //Toggle expand buttons
                $('<a href="#" class="editor-button editor-button-small nr-db-sb-list-header-button"><i class="fa fa-angle-double-up"></i></a>')
                .click(function(evt) {
                    tabContainer.find(".nr-db-sb-group-list-container").slideUp().addClass('nr-db-sb-collapsed');
                    tabContainer.find(".nr-db-sb-tab-list-header>.nr-db-sb-list-chevron").css({"transform":"rotate(-90deg)"});
                    evt.preventDefault();
                })
                .appendTo(buttonGroup);
                $('<a href="#" class="editor-button editor-button-small nr-db-sb-list-header-button"><i class="fa fa-angle-double-down"></i></a>')
                .click(function(evt) {
                    tabContainer.find(".nr-db-sb-group-list-container").slideDown().removeClass('nr-db-sb-collapsed');
                    tabContainer.find(".nr-db-sb-tab-list-header>.nr-db-sb-list-chevron").css({"transform":""});
                    evt.preventDefault();
                })
                .appendTo(buttonGroup);

                //Add item button
                $('<a href="#" class="editor-button editor-button-small nr-db-sb-list-header-button"><i class="fa fa-plus"></i> '+c_("layout.tab")+'</a>')
                .click(function(evt) {
                    tabContainer.editableList('addItem',{type: 'ui_tab'});
                    evt.preventDefault();
                })
                .appendTo(buttonGroup);
                $('<a href="#" class="editor-button editor-button-small nr-db-sb-list-header-button"><i class="fa fa-plus"></i> '+c_("layout.link")+'</a>')
                .click(function(evt) {
                    tabContainer.editableList('addItem',{type: 'ui_link'});
                    evt.preventDefault();
                })
                .appendTo(buttonGroup);

                var tabLists = {};
                var groupLists = {};

                // toggle slide tab group content
                var titleToggle = function (id,content,chevron) {
                    return function(evt) {
                        if (content.is(":visible")) {
                            content.slideUp();
                            chevron.css({"transform":"rotate(-90deg)"});
                            content.addClass('nr-db-sb-collapsed');
                            listStates[id] = false;
                        }
                        else {
                            content.slideDown();
                            chevron.css({"transform":""});
                            content.removeClass('nr-db-sb-collapsed');
                            listStates[id] = true;
                        }
                    };
                }

                var addTabOrLinkItem = function(container,i,item) {
                    ensureDashboardNode(true);
                    // create node if needed
                    if (!item.node) {
                        var defaultItem = {
                            'ui_tab': {
                                _def: RED.nodes.getType('ui_tab'),
                                type: 'ui_tab',
                                users: [],
                                icon: 'dashboard',
                                name: 'Tab'
                            },
                            'ui_link': {
                                _def: RED.nodes.getType('ui_link'),
                                type: 'ui_link',
                                users: [],
                                icon: 'open_in_browser',
                                name: 'Link',
                                target: 'newtab'
                            }
                        }
                        item.node = defaultItem[item.type]
                        item.node.id = RED.nodes.id()
                        item.node.order = i+1
                        item.node.name += ' '+item.node.order
                        listElements[item.node.id] = container;
                        if (item.type === 'ui_tab') {
                            item.groups = [];
                        }
                        RED.nodes.add(item.node);
                        RED.editor.validateNode(item.node);
                        RED.history.push({
                            t:'add',
                            nodes:[item.node.id],
                            dirty:RED.nodes.dirty()
                        });
                        RED.nodes.dirty(true);
                    }
                    else if (item.type === undefined) {
                        item.type = item.node.type
                    }

                    listElements[item.node.id] = container;
                    if (RED.nodes.hasOwnProperty('updateConfigNodeUsers')) {
                        RED.nodes.updateConfigNodeUsers(item.node);
                    }

                    // title
                    var titleRow = $('<div>',{class:"nr-db-sb-list-header nr-db-sb-tab-list-header"}).appendTo(container);
                    switch (item.type) {
                        case 'ui_tab': {
                            container.addClass("nr-db-sb-tab-list-item");
                            $('<i class="nr-db-sb-list-handle nr-db-sb-tab-list-handle fa fa-bars"></i>').appendTo(titleRow);
                            var chevron = $('<i class="fa fa-angle-down nr-db-sb-list-chevron">',{style:"width:10px;"}).appendTo(titleRow);
                            var tabicon = "fa-object-group";
                            //var tabicon = item.node.disabled ? "fa-window-close-o" : item.node.hidden ? "fa-eye-slash" : "fa-object-group";
                            $('<i>',{class:"nr-db-sb-icon nr-db-sb-tab-icon fa "+tabicon}).appendTo(titleRow);
                            var tabhide = item.node.hidden ? " nr-db-sb-title-hidden" : "";
                            var tabable = item.node.disabled ? " nr-db-sb-title-disabled" : "";
                            $('<span>',{class:"nr-db-sb-title"+tabhide+tabable}).text(item.node.name||"").appendTo(titleRow);
                            break;
                        }
                        case 'ui_link': {
                            $('<i class="nr-db-sb-list-handle fa fa-bars"></i>').appendTo(titleRow);
                            var title = $('<div class="nr-db-sb-link">').appendTo(titleRow);
                            var nameContainer = $('<div class="nr-db-sb-link-name-container">').appendTo(title);
                            $('<i class="fa fa-external-link"></i>').appendTo(nameContainer);
                            $('<span class="nr-db-sb-link-name">').text(item.node.name||"untitled").appendTo(nameContainer);
                            $('<div class="nr-db-sb-link-url">').text(item.node.link||"http://").appendTo(title);
                            break;
                        }
                    }
                    // buttons
                    var buttonGroup = $('<div>',{class:"nr-db-sb-list-header-button-group",id: item.node.id}).appendTo(titleRow);
                    if (item.type === 'ui_tab') {
                        var addGroupButton = $('<a href="#" class="nr-db-sb-tab-add-group-button editor-button editor-button-small nr-db-sb-list-header-button" ><i class="fa fa-plus"></i> '+c_("layout.group")+'</a>').appendTo(buttonGroup);
                    }
                    var editButton = $('<a href="#" class="nr-db-sb-tab-edit-button editor-button  editor-button-small nr-db-sb-list-header-button"><i class="fa fa-pencil"></i> '+c_("layout.edit")+'</a>').appendTo(buttonGroup);
                    editButton.on('click',function(evt) {
                        if (isLocked(item.node.id)) {
                            evt.stopPropagation();
                            evt.preventDefault();
                            notifyLocked();
                            return;
                        }
                        RED.editor.editConfig("", item.type, item.node.id);
                        evt.stopPropagation();
                        evt.preventDefault();
                    });

                    // Dashboard layout tool
                    if (item.type === 'ui_tab') {
                        var layoutButton = $('<a href="#" class="nr-db-sb-tab-edit-layout-button editor-button editor-button-small nr-db-sb-list-header-button"><i class="fa fa-pencil"></i> '+c_("layout.layout")+'</a>').appendTo(buttonGroup);
                        layoutButton.on('click',function(evt) {
                            if (isLocked(item.node.id)) {
                                evt.stopPropagation();
                                evt.preventDefault();
                                notifyLocked();
                                return;
                            }
                            var editTabName = item.node.name ? item.node.name : item.node.id;
                            var trayOptions = {
                                title: c_("layout.layout-editor") + " : " + editTabName,
                                width: Infinity,
                                buttons: [
                                    {
                                        id: "node-dialog-cancel",
                                        text: RED._("common.label.cancel"),
                                        click: function() {
                                            // clean editor
                                            RED.tray.close();
                                        }
                                    },
                                    {
                                        id: "node-dialog-ok",
                                        text: RED._("common.label.done"),
                                        class: "primary",
                                        click: function() {
                                            // Save data after editing
                                            saveGridDatas();
                                            RED.tray.close();
                                        }
                                    }
                                ],
                                resize: function(dimensions) {},
                                open: function(tray) {
                                    // Get widget of specified tab from node information
                                    tabDatas = getTabDataFromNodes(item.node.id);
                                    // The width that can be handled by Layout is up to MAX_GROUP_WIDTH
                                    // Groups exceeding the maximum width are not supported.
                                    var tmpGroups = tabDatas.groups;
                                    tmpGroups.sort(compareOrder);
                                    var groups = [];
                                    for (var cnt = 0; cnt < tmpGroups.length; cnt++) {
                                        if (tmpGroups[cnt].width <= MAX_GROUP_WIDTH) {
                                            groups.push(tmpGroups[cnt]);
                                        }
                                    }
                                    tabDatas.groups = groups;

                                    var editor = $('<div></div>',{addClass: 'nr-dashboard-layout-container-fluid'});
                                    var row =  $('<div></div>',{addClass: 'nr-dashboard-layout-row'});
                                    var span_num = Math.floor(12 / groups.length); // bootstrap grid 12 splits
                                    span_num = span_num < 2 ? 2 : span_num; // max 6 groups per row
                                    for (var cnt = 0; cnt < groups.length; cnt++) {
                                        if (cnt !=0 && (cnt % 6) == 0) {
                                            editor.append(row);
                                            editor.append('<div><br></div>');
                                            row = $('<div></div>',{addClass: 'nr-dashboard-layout-row'});
                                        }
                                        var span = $('<div></div>',{addClass: 'nr-dashboard-layout-span' + span_num});
                                        var groupName = groups[cnt].name ? groups[cnt].name : groups[cnt].id;
                                        var title = $('<div></div>', {
                                            style: "margin-top:2px; margin-bottom:2px;"
                                        });
                                        var title_group = $('<div></div>', {
                                            title: groupName,
                                            style: "margin-left:4px; margin-right:8px; overflow:hidden;"
                                        }).appendTo(title);
                                        $("<b/>").text(groupName).appendTo(title_group);
                                        var title_width = $('<div></div>', {
                                            style: "text-align:right; margin-right:8px;"
                                        }).appendTo(title);
                                        $("<span/>", {
                                            style: "margin_right: 8px;"
                                        }).text(c_("layout.width")+': ').appendTo(title_width);
                                        var changeWidth = $('<input>', {
                                            id: 'change-width' + cnt,
                                            value: groups[cnt].width,
                                            style: 'width:30px;',
                                            readonly: true,
                                            'node-id': groups[cnt].id,
                                        });
                                        title_width.append(changeWidth);

                                        title.css('white-space','nowrap');
                                        title.css('overflow','hidden');
                                        var gridstack = $('<div></div>', {
                                            id: 'grid'+cnt,
                                            addClass: 'grid-stack'
                                        });
                                        span.append(title);
                                        span.append(gridstack);
                                        row.append(span);
                                    }
                                    if (groups.length != 0) {
                                        editor.append(row);
                                    }

                                    // Show layout editor in tray
                                    var trayBody = tray.find('.red-ui-tray-body, .editor-tray-body');
                                    trayBody.css('overflow','auto');
                                    trayBody.append(editor);

                                    /////////////////////////////////////////
                                    // Editor screen generation
                                    /////////////////////////////////////////
                                    oldSpacer = [];
                                    widthChange = [];
                                    widgetResize = [];
                                    widgetDrag = [];
                                    for (var cnt=0; cnt < groups.length; cnt++) {
                                        // Gridstack.js option
                                        var options = {
                                            acceptWidgets: true,
                                            alwaysShowResizeHandle: true,
                                            cellHeight: 42,
                                            disableOneColumnMode : true,
                                            float: true,
                                            verticalMargin: 1
                                        };
                                        var gridID='#grid' + cnt;
                                        // gridstack generation
                                        $(gridID).gridstack(options);

                                        // Clear the contents of Grid
                                        var grid = $(gridID+'.grid-stack').data('gridstack');
                                        grid.removeAll();
                                        $(gridID).on("dropped", handleMove(grid));

                                        // Set the width of the display area of gridstack
                                        var groupWidth = Number(groups[cnt].width);
                                        $(gridID+'.grid-stack').css("width", groupWidth * 40);
                                        $(gridID+'.grid-stack').css("background-size", 100/groupWidth+"% 43px");
                                        $(gridID+'.grid-stack').attr("node-id", groups[cnt].id);
                                        $(gridID+'.grid-stack').attr("grid-column", groups[cnt].width);
                                        grid.setColumn(groupWidth, true);

                                        // Determination of placement position of widget of Grid
                                        var widgets = groups[cnt].widgets;
                                        widgets.sort(compareOrder);

                                        var tbl = {};
                                        for (var cnt2 = 0; cnt2 < widgets.length; cnt2++) {
                                            // Set default value when there is auto width
                                            if (widgets[cnt2].auto == true) {
                                                widgets[cnt2].width = groupWidth;
                                            // Adjust to the group width
                                            } else if (widgets[cnt2].width > groupWidth) {
                                                widgets[cnt2].width = groupWidth;
                                            }
                                            // Auto support
                                            if (widgets[cnt2].auto === true || widgets[cnt2].type === 'ui_form') {
                                                widgets[cnt2].height = getDefaultHeight(widgets[cnt2].id, groupWidth);
                                            }
                                            // Calculate coordinates to be placed
                                            var point = search_point(Number(widgets[cnt2].width), Number(widgets[cnt2].height), groupWidth, 256, tbl);
                                            if (point) {
                                                widgets[cnt2].x = point.x;
                                                widgets[cnt2].y = point.y;
                                            }
                                        }

                                        var items = GridStackUI.Utils.sort(widgets);
                                        items.forEach(function (node) {
                                            var minHeight = null;
                                            var maxHeight = null;
                                            // ui_form is fixed to height 2
                                            if (node.type === 'ui_form') {
                                                minHeight = node.height;
                                                maxHeight = node.height;
                                            }
                                            if (node.type !== 'ui_spacer') {
                                                var dispNode = RED.nodes.node(node.id);
                                                var dispType = dispNode._def.paletteLabel;
                                                var dispLabel = dispNode._def.label;
                                                try {
                                                    dispLabel = (typeof dispLabel === "function" ? dispLabel.call(dispNode) : dispLabel)||"";
                                                }
                                                catch(err) {
                                                    console.log("Definition error: " + node.type + ".label",err);
                                                    dispLabel = dispType;
                                                }

                                                var item = $('<div></div>', {
                                                    'data-noderedtype': node.type,
                                                    'data-noderedid': node.id,
                                                    'data-nodereddisptype': dispType,
                                                    'data-nodereddisplabel': dispLabel,
                                                    'data-noderedsizeauto': node.auto
                                                });
                                                var itemContent = $('<div></div>', {
                                                    addClass: 'grid-stack-item-content',
                                                    title: dispLabel + ':' + dispType
                                                });

                                                if (node.auto === true) {
                                                    itemContent.append('<i class="fa fa-unlock nr-dashboard-layout-resize-enable" title="'+c_("layout.auto")+'"></i>');
                                                } else {
                                                    itemContent.append('<i class="fa fa-lock nr-dashboard-layout-resize-disable" title="'+c_("layout.manual")+'"></i>');
                                                }
                                                itemContent.append('<b>'+ dispLabel +'</b><br/>'+ dispType);
                                                item.append(itemContent);
                                                grid.addWidget(
                                                    item,
                                                    node.x, node.y, node.width, node.height, false, null, null,
                                                    minHeight, maxHeight, node.id);
                                            } else {
                                                // Record the spacer node ID to be deleted
                                                oldSpacer.push(node.id);
                                            }
                                        });

                                        $(gridID+'.grid-stack > .grid-stack-item:visible').each( function(idx, el) {
                                            el = $(el);
                                            var node = el.data('_gridstack_node');
                                            var auto = (el[0].dataset.noderedsizeauto == 'true') ? true : false;
                                            grid.resizable(el, !auto);
                                        });

                                        // Group width change
                                        widthChange.push(new changeGroupWidth(cnt));
                                        // Resize widget in group (start event)
                                        widgetResize.push(new resizeGroupWidget(cnt));
                                        // Dragging widgets in a group (start event)
                                        widgetDrag.push(new dragGroupWidget(cnt));
                                    }
                                    $('.grid-stack>.grid-stack-item>.grid-stack-item-content>.nr-dashboard-layout-resize-disable').on('click',layoutResizeDisable);
                                    $('.grid-stack>.grid-stack-item>.grid-stack-item-content>.nr-dashboard-layout-resize-enable').on('click',layoutResizeEnable);
                                },
                                close: function() {},
                                show: function() {}
                            };
                            RED.tray.show(trayOptions);
                            evt.stopPropagation();
                            evt.preventDefault();
                        });
                    }

                    if (item.type === 'ui_tab') {
                        var content = $('<div>',{class:"nr-db-sb-group-list-container"}).appendTo(container);

                        // ui_tab group chevron
                        if (listStates.hasOwnProperty(item.node.id) && !listStates[item.node.id]) {
                            content.hide();
                            chevron.css({"transform":"rotate(-90deg)"});
                            content.addClass('nr-db-sb-collapsed');
                            listStates[item.node.id] = false;
                        }
                        else {
                            listStates[item.node.id] = true;
                        }
                        titleRow.click(titleToggle(item.node.id,content,chevron));

                        // ui_tab group list
                        var ol = $('<ol>',{class:"nr-db-sb-group-list"}).appendTo(content).editableList({
                            sortable:".nr-db-sb-group-list-header",
                            addButton: false,
                            height: 'auto',
                            connectWith: ".nr-db-sb-group-list",
                            addItem: function(container,i,group) {
                                if (!group.node) {
                                    group.node = {
                                        id: RED.nodes.id(),
                                        _def: RED.nodes.getType("ui_group"),
                                        type: "ui_group",
                                        users: [],
                                        tab: item.node.id,
                                        order: i+1,
                                        name: "Group "+(i+1),
                                        width: 6,
                                        disp: true
                                    };
                                    listElements[group.node.id] = container;
                                    RED.nodes.add(group.node);
                                    RED.editor.validateNode(group.node);
                                    group.widgets = [];
                                    RED.history.push({
                                        t:'add',
                                        nodes:[group.node.id],
                                        dirty:RED.nodes.dirty()
                                    });
                                    RED.nodes.dirty(true);
                                    if (RED.nodes.hasOwnProperty('updateConfigNodeUsers')) {
                                        RED.nodes.updateConfigNodeUsers(group.node);
                                    }
                                }
                                else {
                                    if (group.node.order === undefined) {
                                        group.node.order = i+1;
                                    }
                                }
                                var groupNode = group.node;
                                elementParents[groupNode] = item.node.id;
                                var titleRow = $('<div>',{class:"nr-db-sb-list-header nr-db-sb-group-list-header"}).appendTo(container);
                                $('<i class="nr-db-sb-list-handle nr-db-sb-group-list-handle fa fa-bars"></i>').appendTo(titleRow);
                                var chevron = $('<i class="fa fa-angle-down nr-db-sb-list-chevron">',{style:"width:10px;"}).appendTo(titleRow);
                                $('<i class="nr-db-sb-icon nr-db-sb-group-icon fa fa-table"></i>').appendTo(titleRow);
                                var title = $('<span class="nr-db-sb-title">').text(groupNode.name||groupNode.id||"").appendTo(titleRow);
                                listElements[groupNode.id] = container;
                                var buttonGroup = $('<div>',{class:"nr-db-sb-list-header-button-group",id:groupNode.id}).appendTo(titleRow);
                                var spacerButton = $('<a href="#" class="editor-button editor-button-small nr-db-sb-list-header-button"><i class="fa fa-plus"></i> '+c_("layout.spacer")+'</a>').appendTo(buttonGroup);
                                spacerButton.on('click',function(evt) {
                                    if (isLocked(item.node.id)) {
                                        evt.stopPropagation();
                                        evt.preventDefault();
                                        notifyLocked();
                                        return;
                                    }
                                    var spaceNode = {
                                        _def: RED.nodes.getType("ui_spacer"),
                                        type: "ui_spacer",
                                        hasUsers: false,
                                        users: [],
                                        id: RED.nodes.id(),
                                        tab: item.node.name,
                                        group: group.node.id,
                                        order: i+1,
                                        name: "spacer",
                                        width: 1,
                                        height:1,
                                        z: RED.workspaces.active(),
                                        label: function() { return "spacer " + this.width + "x" + this.height; }
                                    };
                                    RED.nodes.add(spaceNode);
                                    RED.editor.validateNode(spaceNode);
                                    RED.history.push({
                                        t:'add',
                                        nodes:[spaceNode.id],
                                        dirty:RED.nodes.dirty()
                                    });
                                    RED.nodes.dirty(true);
                                    RED.view.redraw();
                                    evt.stopPropagation();
                                    evt.preventDefault();
                                });
                                var editButton = $('<a href="#" class="nr-db-sb-edit-group-button editor-button editor-button-small nr-db-sb-list-header-button"><i class="fa fa-pencil"></i> '+c_("layout.edit")+'</a>').appendTo(buttonGroup);
                                var content = $('<div>',{class:"nr-db-sb-widget-list-container"}).appendTo(container);
                                if (!listStates.hasOwnProperty(groupNode.id) || !listStates[groupNode.id]) {
                                    content.hide();
                                    chevron.css({"transform":"rotate(-90deg)"});
                                    content.addClass('nr-db-sb-collapsed');
                                    listStates[groupNode.id] = false;
                                }
                                else {
                                    listStates[groupNode.id] = true;
                                }

                                var ol = $('<ol>',{class:"nr-db-sb-widget-list"}).appendTo(content).editableList({
                                    sortable:".nr-db-sb-widget-list-header",
                                    addButton: false,
                                    height: 'auto',
                                    connectWith: ".nr-db-sb-widget-list",
                                    addItem: function(container,i,widgetNode) {
                                        elementParents[widgetNode.id] = groupNode.id;
                                        var titleRow = $('<div>',{class:"nr-db-sb-list-header nr-db-sb-widget-list-header"}).appendTo(container);
                                        $('<i class="nr-db-sb-list-handle nr-db-sb-widget-list-handle fa fa-bars"></i>').appendTo(titleRow);
                                        $('<i class="nr-db-sb-icon nr-db-sb-widget-icon fa fa-picture-o"></i>').click(function(e) { e.preventDefault(); RED.search.show(widgetNode.id); }).appendTo(titleRow);
                                        var l = widgetNode._def.label;
                                        try {
                                            l = (typeof l === "function" ? l.call(widgetNode) : l)||"";
                                        }
                                        catch(err) {
                                            console.log("Definition error: "+d.type+".label",err);
                                            l = d.type;
                                        }
                                        var title = $('<span class="nr-db-sb-title">').text(l).appendTo(titleRow);
                                        listElements[widgetNode.id] = container;
                                        var buttonGroup = $('<div>',{class:"nr-db-sb-list-header-button-group"}).appendTo(titleRow);
                                            var editButton = $('<a href="#" class="editor-button editor-button-small nr-db-sb-list-header-button"><i class="fa fa-pencil"></i> '+c_("layout.edit")+'</a>').appendTo(buttonGroup);
                                            container.on('mouseover',function() {
                                            widgetNode.highlighted = true;
                                            widgetNode.dirty = true;
                                            RED.view.redraw();
                                        });
                                        container.on('mouseout',function() {
                                            widgetNode.highlighted = false;
                                            widgetNode.dirty = true;
                                            RED.view.redraw();
                                        });
                                        editButton.on('click',function(evt) {
                                            if (isLockedTab(widgetNode.z)) {
                                                evt.stopPropagation();
                                                evt.preventDefault();
                                                notifyLocked();
                                                return;
                                            }
                                            RED.editor.edit(widgetNode);
                                            evt.stopPropagation();
                                            evt.preventDefault();
                                        });
                                    },
                                    sortItems: function(items) {
                                        if (isLocked(item.node.id)) {
                                            $(ol).editableList("cancel");
                                            notifyLocked();
                                            return;
                                        }
                                        var historyEvents = [];
                                        items.each(function(i,el) {
                                            var node = el.data('data');
                                            var hev = {
                                                t:'edit',
                                                node:node,
                                                changes:{
                                                    order:node.order,
                                                    group:node.group
                                                },
                                                dirty:node.dirty,
                                                changed:node.changed
                                            };
                                            historyEvents.push(hev);
                                            var changed = false;
                                            if (node.order !== i+1) {
                                                node.order = i+1;
                                                changed = true;
                                            }
                                            if (node.group !== group.node.id) {
                                                var oldGroupNode = RED.nodes.node(node.group);
                                                if (oldGroupNode) {
                                                    var index = oldGroupNode.users.indexOf(node);
                                                    oldGroupNode.users.splice(index,1);
                                                }
                                                node.group = group.node.id;
                                                group.node.users.push(node);
                                                changed = true;
                                            }
                                            if (changed) {
                                                node.dirty = true;
                                                node.changed = true;
                                            }
                                        })
                                        RED.history.push({
                                            t:'multi',
                                            events: historyEvents
                                        });
                                        RED.nodes.dirty(true);
                                        RED.view.redraw();
                                    }
                                });
                                ol.css("min-height","5px");
                                if (groupNode.id) {
                                    groupLists[groupNode.id] = ol;
                                }
                                titleRow.click(titleToggle(groupNode.id,content,chevron));
                                editButton.on('click',function(evt) {
                                    if (isLocked(item.node.id)) {
                                        evt.stopPropagation();
                                        evt.preventDefault();
                                        notifyLocked();
                                        return;
                                    }
                                    RED.editor.editConfig("", groupNode.type, groupNode.id);
                                    evt.stopPropagation();
                                    evt.preventDefault();
                                });
                                group.widgets.forEach(function(widget) {
                                    ol.editableList('addItem',widget);
                                })
                            },
                            sortItems: function(items) {
                                var historyEvents = [];
                                items.each(function(i,el) {
                                    var groupData = el.data('data');
                                    var node = groupData.node;
                                    var hev = {
                                        t:'edit',
                                        node:node,
                                        changes:{
                                            order:node.order,
                                            tab:node.tab
                                        },
                                        dirty:node.dirty,
                                        changed:node.changed
                                    };
                                    historyEvents.push(hev);
                                    var changed = false;
                                    if (node.order !== i+1) {
                                        node.order = i+1;
                                        changed = true;
                                    }
                                    if (changed) {
                                        node.dirty = true;
                                        node.changed = true;
                                    }
                                    if (node.tab !== item.node.id) {
                                        var oldTabNode = RED.nodes.node(node.tab);
                                        if (oldTabNode) {
                                            var index = oldTabNode.users.indexOf(node);
                                            oldTabNode.users.splice(index,1);
                                        }
                                        node.tab = item.node.id;
                                        item.node.users.push(node);
                                        changed = true;
                                    }
                                })
                                RED.history.push({
                                    t:'multi',
                                    events: historyEvents
                                });
                                RED.nodes.dirty(true);
                                RED.view.redraw();
                            }
                        })
                        tabLists[item.node.id] = ol;

                        addGroupButton.click(function(evt) {
                            if (isLocked(item.node.id)) {
                                evt.stopPropagation();
                                evt.preventDefault();
                                notifyLocked();
                                return;
                            }
                            ol.editableList('addItem',{});
                            evt.stopPropagation();
                            evt.preventDefault();
                        });
                        item.groups.forEach(function(group) {
                            ol.editableList('addItem',group);
                        });
                    }
                }

                var tabContainer = $('<ol>',{class:"nr-db-sb-tab-list"}).appendTo(divTabs).editableList({
                    sortable:".nr-db-sb-tab-list-header",
                    addButton: false,
                    addItem: addTabOrLinkItem,
                    sortItems: function(items) {
                        var historyEvents = [];
                        items.each(function(i,el) {
                            var itemData = el.data('data');
                            var node = itemData.node;
                            var hev = {
                                t:'edit',
                                node:node,
                                changes:{
                                    order:node.order
                                },
                                dirty:node.dirty,
                                changed:node.changed
                            }
                            historyEvents.push(hev);
                            var changed = false;
                            if (node.order !== i+1) {
                                node.order = i+1;
                                changed = true;
                            }
                            if (changed) {
                                node.dirty = true;
                                node.changed = true;
                            }
                        })
                        RED.history.push({
                            t:'multi',
                            events: historyEvents
                        });
                        RED.nodes.dirty(true);
                        RED.view.redraw();
                    }
                });

                var orphanedWidgets = $('<div>',{class:"form-row"}).appendTo(layoutTab);
                $('<span><i class="fa fa-info-circle"></i> There <span id="nr-db-missing-group-count"></span> not in a group. Click <a id="nr-db-add-missing-groups" href="#">here</a> to create the missing groups</span>').appendTo(orphanedWidgets);
                orphanedWidgets.find('a').click(function(event) {
                    var unknownGroups = {};
                    RED.nodes.eachNode(function(node) {
                        if (/^ui_/.test(node.type) && node.type !== 'ui_link' && node.type !== 'ui_toast' && node.type !== 'ui_ui_control') {
                            if (!RED.nodes.node(node.group)) {
                                var g = node.group || "_BLANK_";
                                unknownGroups[g] = unknownGroups[g] || [];
                                unknownGroups[g].push(node);
                            }
                        }
                    });
                    var tab = null;
                    var tabs = tabContainer.editableList('items');
                    tabs.first().each(function(i,el) {
                        var tabData = el.data('data');
                        tab = tabData.node;
                    });

                    var hev = [];
                    if (tab === null) {
                        tab = {
                            id: RED.nodes.id(),
                            _def: RED.nodes.getType("ui_tab"),
                            type: "ui_tab",
                            users: [],
                            order: 0,
                            name: "Tab",
                            icon: "dashboard"
                        };
                        RED.nodes.add(tab);
                        RED.editor.validateNode(tab);
                        hev.push(tab.id);
                    }
                    for (var groupId in unknownGroups) {
                        if (unknownGroups.hasOwnProperty(groupId)) {
                            var groupNode = {
                                id: RED.nodes.id(),
                                _def: RED.nodes.getType("ui_group"),
                                type: "ui_group",
                                users: [],
                                tab: tab.id,
                                order: i+1,
                                name: (groupId==="_BLANK_"?"Group":groupId),
                                width: 6,
                                disp: true
                            };
                            hev.push(groupNode.id);
                            RED.nodes.add(groupNode);
                            RED.editor.validateNode(groupNode);
                            if (RED.nodes.hasOwnProperty('updateConfigNodeUsers')) {
                                RED.nodes.updateConfigNodeUsers(groupNode);
                            }
                            var widgets = unknownGroups[groupId];
                            for (var i=0; i<widgets.length; i++) {
                                widgets[i].group = groupNode.id;
                                widgets[i].changed = true;
                                widgets[i].dirty = true;
                                if (RED.nodes.hasOwnProperty('updateConfigNodeUsers')) {
                                    RED.nodes.updateConfigNodeUsers(widgets[i]);
                                }
                                RED.editor.validateNode(widgets[i]);
                            }
                        }
                    }
                    RED.history.push({
                        t:'add',
                        nodes: hev,
                        dirty:RED.nodes.dirty()
                    });
                    RED.nodes.dirty(true);
                    refresh();
                    refreshOrphanedWidgets();
                    RED.view.redraw();
                    event.preventDefault();
                });

                var listElements = {};
                var dashboard = [];
                var listStates = {};
                var elementParents = {};
                var awaitingGroups = {};
                var awaitingTabs = {};

                function getCurrentList() {
                    var currentList = [];
                    var tabs = tabContainer.editableList('items');
                    var open = false;
                    tabs.each(function(i,el) {
                        var tabData = el.data('data');
                        var tab = [];
                        var groups = el.find('.nr-db-sb-group-list').editableList('items');
                        groups.each(function(j,el) {
                            var group = [];
                            var groupData = el.data('data');
                            var widgets = el.find('.nr-db-sb-widget-list').editableList('items');
                            widgets.each(function(k,el) {
                                var widgetData = el.data('data');
                                group.push(widgetData.id);
                            })
                            tab.push({id:groupData.node.id, widgets:group});
                        });
                        currentList.push({id:tabData.node.id,groups:tab});
                    });
                    return currentList;
                }

                function refreshOrphanedWidgets() {
                    var unknownGroups = {};
                    var count = 0;
                    RED.nodes.eachNode(function(node) {
                        if (/^ui_/.test(node.type) && node.type !== 'ui_link' && node.type !== 'ui_toast' && node.type !== 'ui_ui_control' && (node.type === 'ui_template' && node.templateScope !== 'global')) {
                            if (!RED.nodes.node(node.group)) {
                                var g = node.group || "_BLANK_";
                                unknownGroups[g] = unknownGroups[g] || [];
                                unknownGroups[g].push(node);
                                count++;
                            }
                        }
                    });

                    if (count > 0) {
                        orphanedWidgets.show();
                        $("#nr-db-missing-group-count").text((count===1?"is ":"are ")+count+" widget"+(count === 1?"":"s"))
                    }
                    else {
                        orphanedWidgets.hide();
                    }
                }

                function refresh() {
                    var currentList = getCurrentList();
                    dashboard = [];
                    var tabs = {};
                    var groups = {};
                    var elements = [];
                    var groupElements = {};
                    var tabGroups = {};
                    var groupId;
                    var group;
                    var tabId;
                    var tab;
                    var unknownGroups = 0;
                    // Find all the tabs and groups
                    RED.nodes.eachConfig(function(node) {
                        switch (node.type) {
                            case 'ui_tab':
                            case 'ui_link': {
                                tabs[node.id] = node;
                                //tabContainer.editableList('addItem',node);
                                break;
                            }
                            case 'ui_group': {
                                groups[node.id] = node;
                                break;
                            }
                            case 'ui_spacer': {
                                if (groups.hasOwnProperty(node.group)) {
                                    groupElements[node.group] = groupElements[node.group]||[];
                                    groupElements[node.group].push(node);
                                }
                                break;
                            }
                        }
                    });
                    for (groupId in groups) {
                        if (groups.hasOwnProperty(groupId)) {
                            group = groups[groupId];
                            if (tabs.hasOwnProperty(group.tab)) {
                                // This group belongs to a tab
                                tabGroups[group.tab] = tabGroups[group.tab]||[];
                                tabGroups[group.tab].push(group);
                            }
                            else {
                                unknownGroups++;
                            }
                        }
                    }
                    // Find all ui widgets - list them by their group id
                    RED.nodes.eachNode(function(node) {
                        if (/^ui_/.test(node.type)) {
                            if (groups.hasOwnProperty(node.group)) {
                                groupElements[node.group] = groupElements[node.group]||[];
                                groupElements[node.group].push(node);
                            }
                            else if ((node.type !== 'ui_toast')&&(node.type !== 'ui_ui_control')&&(node.type === 'ui_template' && node.templateScope !== 'global')) {
                                unknownGroups++;
                            }
                        }
                    });
                    if (unknownGroups > 0) {
                        $("#nr-db-missing-group-count").text((unknownGroups===1?"is ":"are ")+unknownGroups+" widget"+(unknownGroups === 1?"":"s"))
                        orphanedWidgets.show();
                    }
                    else {
                        orphanedWidgets.hide();
                    }
                    // Sort each group's array of widgets
                    for (groupId in groupElements) {
                        if (groupElements.hasOwnProperty(groupId)) {
                            group = groupElements[groupId];
                            groupElements[groupId] = group.map(function(v,i) { return {n:v,i:i} }).sort(function(A,B) {
                                if (A.n.order < B.n.order) { return A.n.order!==0?-1:1;}
                                if (A.n.order > B.n.order) { return B.n.order!==0?1:-1;}
                                return A.i - B.i;
                            }).map(function(v) { return v.n})
                        }
                    }
                    // Sort each tabs's array of groups
                    for (tabId in tabGroups) {
                        if (tabGroups.hasOwnProperty(tabId)) {
                            tab = tabGroups[tabId];
                            tabGroups[tabId] = tab.map(function(v,i) { return {n:v,i:i} }).sort(function(A,B) {
                                if (A.n.order < B.n.order) { return -1;}
                                if (A.n.order > B.n.order) { return 1;}
                                return A.i - B.i;
                            }).map(function(v) { return v.n})
                        }
                    }
                    var tabIds = Object.keys(tabs).map(function(v,i) { return {n:tabs[v],i:i} }).sort(function(A,B) {
                        if (A.n.order < B.n.order) { return -1;}
                        if (A.n.order > B.n.order) { return 1;}
                        return A.i - B.i;
                    }).map(function(v) { return v.n.id});
                    tabIds.forEach(function(tabId) {
                        var tab = {node:tabs[tabId],groups:[]};
                        if (tabGroups[tabId]) {
                            tabGroups[tabId].forEach(function(groupNode) {
                                var group = {node:groupNode,widgets:[]};
                                if (groupElements[groupNode.id]) {
                                    group.widgets = groupElements[groupNode.id];
                                }
                                tab.groups.push(group);
                            });
                        }
                        dashboard.push(tab);
                    });
                    var newList = dashboard.map(function(t) {
                        return {
                            id: t.node.id,
                            groups: t.groups.map(function(g) {
                                return {
                                    id: g.node.id,
                                    widgets: g.widgets.map(function(w) {
                                        return w.id;
                                    })
                                }
                            })
                        }
                    });
                    if (JSON.stringify(newList)!=JSON.stringify(currentList)) {
                        listElements = {};
                        groupLists = {};
                        tabLists = {};
                        tabs = {};
                        groups = {};
                        elementParents = {};
                        tabContainer.empty();
                        dashboard.forEach(function(tab) {
                            tabContainer.editableList('addItem',tab);
                        });
                    }
                    //ensureDashboardNode(true);
                    if (globalDashboardNode) {
                        $("#nr-db-field-title").val(globalDashboardNode.site.name);
                        $("#nr-db-field-allowSwipe").val(globalDashboardNode.site.allowSwipe || "false");
                        $("#nr-db-field-allowTempTheme").val(globalDashboardNode.site.allowTempTheme || "true");
                        $("#nr-db-field-hideToolbar").val(globalDashboardNode.site.hideToolbar || "false");
                        $("#nr-db-field-dateFormat").val(globalDashboardNode.site.dateFormat);

                        if (typeof globalDashboardNode.site.sizes !== "object") {
                            globalDashboardNode.site.sizes = sizes;
                        }
                        $("#nr-db-field-sx").val(globalDashboardNode.site.sizes.sx);
                        $("#nr-db-field-sy").val(globalDashboardNode.site.sizes.sy);
                        $("#nr-db-field-px").val(globalDashboardNode.site.sizes.px);
                        $("#nr-db-field-py").val(globalDashboardNode.site.sizes.py);
                        $("#nr-db-field-cx").val(globalDashboardNode.site.sizes.cx);
                        $("#nr-db-field-cy").val(globalDashboardNode.site.sizes.cy);
                        $("#nr-db-field-gx").val(globalDashboardNode.site.sizes.gx);
                        $("#nr-db-field-gy").val(globalDashboardNode.site.sizes.gy);

                        if (typeof globalDashboardNode.theme.angularTheme !== "object") {
                            globalDashboardNode.theme.angularTheme = aTheme;
                        }
                        $("#nr-db-field-angPrimary").val(globalDashboardNode.theme.angularTheme.primary || "indigo");
                        $("#nr-db-field-angAccents").val(globalDashboardNode.theme.angularTheme.accents || "blue");
                        $("#nr-db-field-angWarn").val(globalDashboardNode.theme.angularTheme.warn || "red");
                        $("#nr-db-field-angBackground").val(globalDashboardNode.theme.angularTheme.background || "grey");
                        $("#nr-db-field-angLook").val(globalDashboardNode.theme.angularTheme.palette || "light");

                        $("#nr-db-field-theme").val(globalDashboardNode.theme.name);
                        $("#ui-sidebar-name").val(globalDashboardNode.theme.customTheme.name);
                        if (globalDashboardNode.theme.name === 'theme-custom') {
                            $("#custom-theme-library-container").show();
                            $("#custom-theme-settings").show();
                        }
                        else {
                            $("#custom-theme-library-container").hide();
                            $("#custom-theme-settings").hide();
                        }
                        if ($('#nr-db-field-allowTempTheme').val() === "none") {
                            ulDashboardTabs.children().eq(2).addClass("hidden");
                            ulDashboardTabs.children().eq(3).removeClass("hidden");
                        }
                        else {
                            ulDashboardTabs.children().eq(2).removeClass("hidden");
                            ulDashboardTabs.children().eq(3).addClass("hidden");
                        }

                        //set colour start
                        if (typeof globalDashboardNode.theme.name !== "string") {
                            globalDashboardNode.theme.name = "theme-light";
                        }
                        var currentTheme = globalDashboardNode.theme.name.split("-")[1];
                        var startingValue = globalDashboardNode.theme[currentTheme+"Theme"].baseColor;
                        setColourPickerColour("base-color", startingValue);
                        $("#nr-db-field-font").val(globalDashboardNode.theme[currentTheme+"Theme"].baseFont);
                        generateColours(startingValue);
                        if (globalDashboardNode.theme.name === 'theme-light' || globalDashboardNode.theme.name === 'theme-dark') {
                            addLightAndDarkResetButton('base-color', $('#base-settings-ul').children().first());
                        }

                        if (editor === undefined) {
                            editor = RED.editor.createEditor({
                                id: 'nr-db-field-format-editor',
                                mode: 'ace/mode/javascript',
                                value: JSON.stringify({theme:globalDashboardNode.theme.themeState, site:globalDashboardNode.site})
                            });

                            RED.library.create({
                                url:"themes", // where to get the data from
                                type:"theme", // the type of object the library is for
                                editor: editor, // the field name the main text body goes to
                                mode:"ace/mode/javascript",
                                fields:['name'],
                                elementPrefix:"ui-sidebar-"
                            });
                        }

                        editor.on('input', function() {
                            // Check for any changes on the editor object
                            // i.e. has the theme been customised compared
                            // to what is stored
                            var editorObject = JSON.parse(editor.getValue());

                            //Update theme object if necessary
                            if (JSON.stringify(editorObject.theme) !== JSON.stringify(globalDashboardNode.theme.themeState)) {
                                globalDashboardNode.theme.themeState = editorObject.theme;
                                if ($("#ui-sidebar-name").val() !== globalDashboardNode.theme.customTheme.name) {
                                    globalDashboardNode.theme.customTheme.name = $("#ui-sidebar-name").val();
                                    globalDashboardNode.theme.customTheme.baseColor = globalDashboardNode.theme.themeState["base-color"].value;
                                    setColourPickerColour("base-color", globalDashboardNode.theme.customTheme.baseColor);
                                    generateColours(globalDashboardNode.theme.themeState["base-color"].value);
                                    RED.nodes.dirty(true);
                                }
                            }
                            if (JSON.stringify(aTheme) !== JSON.stringify(globalDashboardNode.theme.angularTheme)) {
                                globalDashboardNode.theme.angularTheme = aTheme;
                            }

                            //Update site object if necessary
                            if (JSON.stringify(editorObject.site) !== JSON.stringify(globalDashboardNode.site)) {
                                globalDashboardNode.site = editorObject.site;
                                $("#nr-db-field-title").val(globalDashboardNode.site.name);
                                $("#nr-db-field-hideToolbar").val(globalDashboardNode.site.hideToolbar);
                                $("#nr-db-field-allowSwipe").val(globalDashboardNode.site.allowSwipe);
                                $("#nr-db-field-allowTempTheme").val(globalDashboardNode.site.allowTempTheme);
                                $("#nr-db-field-dateFormat").val(globalDashboardNode.site.dateFormat);
                                $("#nr-db-field-sx").val(globalDashboardNode.site.sizes.sx);
                                $("#nr-db-field-sy").val(globalDashboardNode.site.sizes.sy);
                                $("#nr-db-field-px").val(globalDashboardNode.site.sizes.px);
                                $("#nr-db-field-py").val(globalDashboardNode.site.sizes.py);
                                $("#nr-db-field-gx").val(globalDashboardNode.site.sizes.gx);
                                $("#nr-db-field-gy").val(globalDashboardNode.site.sizes.gy);
                                $("#nr-db-field-cx").val(globalDashboardNode.site.sizes.cx);
                                $("#nr-db-field-cy").val(globalDashboardNode.site.sizes.cy);
                                RED.nodes.dirty(true);
                            }
                        });
                    }
                    awaitingGroups = {};
                    awaitingTabs = {};
                }

                RED.sidebar.addTab({
                    id: "dashboard",
                    label: c_("label.dashboard"),
                    name: "Dashboard",
                    content: content,
                    closeable: true,
                    pinned: true,
                    iconClass: "fa fa-bar-chart",
                    disableOnEdit: true,
                    onchange: function() { refresh(); }
                });

                editSaveEventHandler = function(node) {
                    if (/^ui_/.test(node.type)) {
                        if (node.type === "ui_tab" || node.type === "ui_group") {
                            if (listElements[node.id]) {
                                // Existing element
                                listElements[node.id].children(".nr-db-sb-list-header").find(".nr-db-sb-title").text(node.name||node.id);
                                if (node.type === "ui_group") {
                                    refresh();
                                }
                                else {
                                    if (node.hidden === true) { listElements[node.id].children(".nr-db-sb-list-header").find(".nr-db-sb-title").addClass('nr-db-sb-title-hidden'); }
                                    else { listElements[node.id].children(".nr-db-sb-list-header").find(".nr-db-sb-title").removeClass('nr-db-sb-title-hidden'); }
                                    if (node.disabled === true) { listElements[node.id].children(".nr-db-sb-list-header").find(".nr-db-sb-title").addClass('nr-db-sb-title-disabled'); }
                                    else { listElements[node.id].children(".nr-db-sb-list-header").find(".nr-db-sb-title").removeClass('nr-db-sb-title-disabled'); }
                                }
                            }
                            else if (node.type === "ui_tab") {
                                // Adding a tab
                                tabContainer.editableList('addItem',{node:node,groups:[]})
                            }
                            else {
                                // Adding a group
                                if (tabLists[node.tab]) {
                                    tabLists[node.tab].editableList('addItem',{node:node,widgets:[]})
                                }
                            }
                        }
                        else if (node.type === "ui_link") {
                            if (listElements[node.id]) {
                                var container = listElements[node.id];
                                container.find(".nr-db-sb-link-name").text(node.name||"untitled");
                                container.find(".nr-db-sb-link-url").text(node.link);
                            }
                        }
                        else {
                            refreshOrphanedWidgets();
                            if (listElements[node.id]) {
                                if (node.group != elementParents[node.id]) {
                                    // Moved to a different group
                                    if (groupLists[elementParents[node.id]]) {
                                        groupLists[elementParents[node.id]].editableList('removeItem',listElements[node.id].data('data'))
                                    }
                                    if (groupLists[node.group]) {
                                        groupLists[node.group].editableList('removeItem',node)
                                        groupLists[node.group].editableList('addItem',node);
                                    }
                                }
                                else {
                                    var l = node._def.label;
                                    try {
                                        l = (typeof l === "function" ? l.call(node) : l)||"";
                                    }
                                    catch(err) {
                                        console.log("Definition error: "+d.type+".label",err);
                                        l = d.type;
                                    }
                                    listElements[node.id].children(".nr-db-sb-list-header").find(".nr-db-sb-title").text(l);
                                }
                            }
                            else {
                                if (groupLists[node.group]) {
                                    if (node.order === 0) { node.order = groupLists[node.group].editableList('length'); }
                                    groupLists[node.group].editableList('addItem',node);
                                }
                            }
                        }
                    }
                };
                RED.events.on("editor:save",editSaveEventHandler);

                // Dashboard layout tool
                layoutUpdateEventHandler = function(node) {
                    if (/^ui_/.test(node.type) && node.type !== 'ui_link' && node.type !== 'ui_toast' && node.type !== 'ui_ui_control' && node.type !== 'ui_audio' && node.type !== 'ui_base' && node.type !== 'ui_group' && node.type !== 'ui_tab') {
                        if (listElements[node.id]) {
                            if (node.group != elementParents[node.id]) {
                                // Moved to a different group
                                if (groupLists[elementParents[node.id]]) {
                                    groupLists[elementParents[node.id]].editableList('removeItem',listElements[node.id].data('data'))
                                }
                                if (groupLists[node.group]) {
                                    groupLists[node.group].editableList('removeItem',node)
                                    groupLists[node.group].editableList('addItem',node);
                                    groupLists[node.group].editableList('sort',function(a,b) {return a.order-b.order;});
                                }
                            }
                            else {
                                groupLists[node.group].editableList('sort',function(a,b) {return a.order-b.order;});
                            }
                        }
                    }
                };
                RED.events.on("layout:update",layoutUpdateEventHandler);

                var pendingAdd = [];
                var pendingAddTimer = null;

                function handlePendingAdds() {
                    var hasTabs = false;
                    var hasGroups = false;
                    pendingAdd.sort(function(A,B) {
                        hasTabs = hasTabs || A.type === "ui_tab" || B.type === "ui_tab";
                        hasGroups = hasGroups || A.type === "ui_group" || B.type === "ui_group";
                        if (A.type === B.type) {
                            return 0;
                        }
                        if (A.type === "ui_tab") {
                            return -1;
                        }
                        else if (B.type === "ui_tab") {
                            return 1;
                        }
                        else if (A.type === "ui_group") {
                            return -1;
                        }
                        else if (B.type === "ui_group") {
                            return 1;
                        }
                        return 0
                    });
                    var updateList = {};
                    for (var i=0; i<pendingAdd.length; i++) {
                        var node = pendingAdd[i];
                        if (listElements[node.id]) {
                            continue;
                        }
                        if (node.type === "ui_tab") {
                            tabContainer.editableList('addItem',{node:node,groups:[]});
                        }
                        else {
                            if (hasTabs) {
                                // We've added some tabs, need to give jquery time to add the lists
                                pendingAdd = pendingAdd.slice(i);
                                pendingAddTimer = setTimeout(handlePendingAdds,50);
                                return;
                            }
                            if (node.type === "ui_group") {
                                if (tabLists[node.tab]) {
                                    tabLists[node.tab].editableList('addItem',{node:node,widgets:[]});
                                }
                            }
                            else {
                                if (hasGroups) {
                                    // We've added some tabs, need to give jquery time to add the lists
                                    pendingAdd = pendingAdd.slice(i);
                                    pendingAddTimer = setTimeout(handlePendingAdds,50);
                                    return;
                                }
                                if (groupLists[node.group]) {
                                    groupLists[node.group].editableList('addItem',node)
                                    if (node.order >= 0) {
                                        updateList[node.group] = true;
                                    }
                                }
                                else {
                                    refreshOrphanedWidgets();
                                }
                            }
                        }
                    }
                    Object.keys(updateList).forEach(function (group) {
                        var list = groupLists[group];
                        if (list) {
                            list.editableList("sort", function(a,b) {return a.order-b.order;});
                        }
                    });
                    pendingAdd = [];
                }

                nodesAddEventHandler = function(node) {
                    if (/^ui_/.test(node.type) && !listElements[node.id]) {
                        pendingAdd.push(node);
                        clearTimeout(pendingAddTimer);
                        pendingAddTimer = setTimeout(handlePendingAdds,100);
                    }
                };
                RED.events.on("nodes:add", nodesAddEventHandler);

                nodesRemoveEventHandler = function(node) {
                    if (/^ui_/.test(node.type)) {
                        if (node.type === "ui_tab" || node.type === "ui_link") {
                            if (listElements[node.id]) {
                                tabContainer.editableList('removeItem',listElements[node.id].data('data'));
                                delete tabLists[node.id];
                            }
                        }
                        else if (node.type === "ui_group") {
                            if (tabLists[node.tab] && listElements[node.id]) {
                                tabLists[node.tab].editableList('removeItem',listElements[node.id].data('data'));
                            }
                            delete groupLists[node.id];
                        }
                        else {
                            if (groupLists[node.group]) {
                                groupLists[node.group].editableList('removeItem',node)
                            }
                        }
                        refreshOrphanedWidgets();
                        delete listElements[node.id];
                    }
                };
                RED.events.on("nodes:remove", nodesRemoveEventHandler);
            }
        });

    $.widget("nodereddashboard.elementSizerByNum", {
        _create: function() {
            var that = this;
            var has_height = this.options.has_height;
            var pos = this.options.pos;
            var c_width = has_height ? '15%' : '6%';
            var container = $('<div>').css({
                position: 'absolute',
                background: 'var(--red-ui-secondary-background, white)',
                padding: '10px 10px 10px 10px',
                border: '1px solid var(--red-ui-primary-border-color, grey)',
                zIndex: '20',
                borderRadius: "4px",
                display:"none",
                width: c_width
            }).appendTo(document.body);
            var box0 = $("<div>").css({
                fontSize: '13px',
                color: 'var(--red-ui-tertiary-text-color, #aaa)',
                float: 'left',
                paddingTop: '1px'
            }).appendTo(container);

            var width = $(this.options.width).val();
            var height = has_height ? $(this.options.height).val() : undefined;
            var max_w = '';
            var groupNode = this.options.groupNode;
            if(groupNode) {
                max_w = 'max="'+groupNode.width+'"';
            }
            width = (width > 0) ? width : 1;
            height = (height > 0) ? height : 1;
            var in0 = $('<input type="number" min="1" '+max_w+'>')
                .css("width", has_height ? "40%" : "100%")
                .val(width)
                .appendTo(box0);
            if(has_height) {
                var pad = $('<span>')
                    .text(" x ")
                    .appendTo(box0);
                var in1 = $('<input type="number" min="1">')
                    .css("width", "40%")
                    .val(height)
                    .appendTo(box0);
            }
            var closeTimer;
            var closeFunc = function() {
                var w = in0.val();
                var h = has_height ? in1.val() : undefined;
                var label = that.options.label;
                label.text(w+(has_height ? (' x '+h) : ''));
                $(that.options.width).val(w).change();
                if(has_height) {
                    $(that.options.height).val(h).change();
                }
                that.destroy();
            };
            container.keypress(function(e) {
                if(e.which === 13) { // pressed ENTER
                    container.fadeOut(100, closeFunc);
                }
            });
            container.on('mouseleave', function(e) {
                closeTimer = setTimeout(function() {
                    container.fadeOut(200, closeFunc);
                }, 100);
            });
            container.on('mouseenter', function(e) {
                clearTimeout(closeTimer);
            });
            container.css({
                top: (pos.top -10)+"px",
                left: (pos.left +10)+"px"
            });
            container.fadeIn(200);
        }
    });

    $.widget( "nodereddashboard.elementSizer", {
        _create: function() {
            var that = this;
            var gridWidth = 6;
            var width = parseInt($(this.options.width).val()||0);
            var height = parseInt(this.options.hasOwnProperty('height')?$(this.options.height).val():"1")||0;
            var hasAuto = (!this.options.hasOwnProperty('auto') || this.options.auto);

            this.element.css({
                minWidth: this.element.height()+4
            });
            var auto_text = c_("auto");
            var sizeLabel = (width === 0 && height === 0)?auto_text:width+(this.options.hasOwnProperty('height')?" x "+height:"");
            this.element.text(sizeLabel).on('mousedown',function(evt) {
                evt.stopPropagation();
                evt.preventDefault();

                var width = parseInt($(that.options.width).val()||0);
                var height = parseInt(that.options.hasOwnProperty('height')?$(that.options.height).val():"1")||0;
                var maxWidth = 0;
                var maxHeight;
                var fixedWidth = false;
                var fixedHeight = false;
                var group = $(that.options.group).val();
                if (group) {
                    var groupNode = RED.nodes.node(group);
                    if (groupNode) {
                        gridWidth = Math.max(6,groupNode.width,+width);
                        maxWidth = groupNode.width || gridWidth;
                        fixedWidth = true;
                    }
                    maxHeight = Math.max(6,+height+1);
                }
                else {
                    gridWidth = Math.max(12,+width);
                    maxWidth = gridWidth;
                    maxHeight = 1;
                    fixedHeight = true;
                }

                var pos = $(this).offset();
                var container = $('<div>').css({
                    position: 'absolute',
                    background: 'var(--red-ui-secondary-background, white)',
                    padding: '5px 10px 10px 10px',
                    border: '1px solid var(--red-ui-primary-border-color, grey)',
                    zIndex: '20',
                    borderRadius: "4px",
                    display:"none"
                }).appendTo(document.body);

                var closeTimer;
                container.on('mouseleave',function(evt) {
                    closeTimer = setTimeout(function() {
                        container.fadeOut(200, function() { $(this).remove(); });
                    },100)
                });
                container.on('mouseenter',function() {
                    clearTimeout(closeTimer);
                })

                var label = $("<div>").css({
                    fontSize: '13px',
                    color: 'var(--red-ui-tertiary-text-color, #aaa)',
                    float: 'left',
                    paddingTop: '1px'
                }).appendTo(container).text((width === 0 && height === 0)?auto_text:(width+(that.options.hasOwnProperty('height')?" x "+height:"")));
                label.hover(function() {
                    $(this).css('text-decoration', 'underline');
                }, function() {
                    $(this).css('text-decoration', 'none');
                });

                label.click(function(e) {
                    var group = $(that.options.group).val();
                    var groupNode = null;
                    if(group) {
                        groupNode = RED.nodes.node(group);
                        if(groupNode === null) {
                            return;
                        }
                    }
                    $(that).elementSizerByNum({
                        width: that.options.width,
                        height: that.options.height,
                        groupNode: groupNode,
                        pos: pos,
                        label: that.element,
                        has_height: that.options.hasOwnProperty('height')
                    });
                    closeTimer = setTimeout(function() {
                        container.fadeOut(200, function() {
                            $(this).remove();
                        });
                    },100)
                });

                var buttonRow = $('<div>',{style:"text-align:right; height:25px;"}).appendTo(container);

                if (hasAuto) {
                    var button = $('<a>',{href:"#",class:"editor-button editor-button-small",style:"margin-bottom:5px"})
                    .text(auto_text)
                    .appendTo(buttonRow)
                    .on('mouseup',function(evt) {
                        that.element.text(auto_text)
                        $(that.options.width).val(0).change();
                        $(that.options.height).val(0).change();
                        evt.preventDefault();
                        container.fadeOut(200, function() { $(this).remove(); });
                    });
                }

                var cellBorder = "1px dashed var(--red-ui-secondary-border-color, lightGray)";
                var cellBorderExisting = "1px solid gray";
                var cellBorderHighlight = "1px dashed var(--red-ui-primary-border-color, black)";
                var rows = [];
                function addRow(i) {
                    var row = $('<div>').css({padding:0,margin:0,height:"25px","box-sizing":"border-box"}).appendTo(container);
                    rows.push(row);
                    cells.push([])
                    for (var j=0; j<gridWidth; j++) {
                        addCell(i,j);
                    }
                }
                function addCell(i,j) {
                    var row = rows[i];
                    var cell = $('<div>').css({
                        display:"inline-block",
                        width: "25px",
                        height: "25px",
                        borderRight: (j===(width-1)&&i<height)?cellBorderExisting:cellBorder,
                        borderBottom: (i===(height-1)&&j<width)?cellBorderExisting:cellBorder,
                        boxSizing: "border-box",
                        cursor:"pointer",
                        background: (j<maxWidth)?"var(--red-ui-secondary-background, #fff)" : "var(--red-ui-node-background-placeholder, #eee)"
                    }).appendTo(row);
                    cells[i].push(cell);
                    if (j===0) {
                        cell.css({borderLeft:((i<=height-1)?cellBorderExisting:cellBorder)});
                    }
                    if (i===0) {
                        cell.css({borderTop:((j<=width-1)?cellBorderExisting:cellBorder)});
                    }
                    if (j<maxWidth) {
                        cell.data("w",j);
                        cell.data("h",i);
                        cell.on("mouseup",function() {
                            that.element.text(($(this).data("w")+1)+(that.options.hasOwnProperty('height')?" x "+($(this).data("h")+1):""))
                            $(that.options.width).val($(this).data("w")+1).change();
                            $(that.options.height).val($(this).data("h")+1).change();
                            container.fadeOut(200, function() { $(this).remove(); });
                        });
                        cell.on("mouseover",function() {
                            var w = $(this).data("w");
                            var h = $(this).data("h");
                            label.text((w+1)+(that.options.hasOwnProperty('height')?" x "+(h+1):""));
                            for (var y = 0; y<maxHeight; y++) {
                                for (var x = 0; x<maxWidth; x++) {
                                    cells[y][x].css({
                                        background: (y<=h && x<=w)?'var(--red-ui-secondary-background-selected, #ddd)' : 'var(--red-ui-secondary-background, #fff)',
                                        borderLeft: (x===0&&y<=h)?cellBorderHighlight:(x===0)?((y<=height-1)?cellBorderExisting:cellBorder):'',
                                        borderTop: (y===0&&x<=w)?cellBorderHighlight:(y===0)?((x<=width-1)?cellBorderExisting:cellBorder):'',
                                        borderRight: (x===w&&y<=h)?cellBorderHighlight:((x===width-1&&y<=height-1)?cellBorderExisting:cellBorder),
                                        borderBottom: (y===h&&x<=w)?cellBorderHighlight:((y===height-1&&x<=width-1)?cellBorderExisting:cellBorder)
                                    })
                                }
                            }
                            if (!fixedHeight && h === maxHeight-1) {
                                addRow(maxHeight++)
                            }
                            if (!fixedWidth && w === maxWidth-1) {
                                maxWidth++;
                                gridWidth++;
                                for (var r=0; r<maxHeight; r++) {
                                    addCell(r,maxWidth-1);
                                }
                            }
                        })
                    }
                }
                var cells = [];
                for (var i=0; i<maxHeight; i++) {
                    addRow(i);
                }
                container.css({
                    top:(pos.top)+"px",
                    left:(pos.left)+"px"
                });
                container.fadeIn(200);
            })
        }
    });
})(jQuery);
</script>

<script type="text/html" data-template-name="ui_base">
    <div class='form-row'>
        This <i>ui_base</i> node is the main node that all<br/>other dashboard widget nodes communicate to.<br/>
        <br/>One instance is required to support the dashboard.<br/>
        <br/>If you have no dashboard you can delete this node.<br/>
        It will be re-created automatically if required.<br/>
    </div>
</script>
<script type="text/html" data-help-name="ui_base">
</script>

<!-- --- [red-module:node-red-dashboard/ui_button] --- -->
<script type="text/javascript">
    RED.nodes.registerType('ui_button',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb(176, 223, 227)',
        defaults: {
            name: {value: ''},
            group: {type: 'ui_group', required: true},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var width = v||0;
                    var currentGroup = $('#node-input-group').val()||this.group;
                    var groupNode = RED.nodes.node(currentGroup);
                    var valid = !groupNode || +width <= +groupNode.width;
                    $("#node-input-size").toggleClass("input-error",!valid);
                    return valid;
                }
            },
            height: {value: 0},
            passthru: {value: false},
            label: {value: 'button'},
            tooltip: {value: ''},
            color: {value: ''},
            bgcolor: {value: ''},
            className: {value: ''},
            icon: {value: ''},
            payload: {value: '',validate: (RED.validators.hasOwnProperty('typedInput')?RED.validators.typedInput('payloadType'):function(v) { return true})},
            payloadType: { value: 'str'},
            topic:  {value: 'topic', validate: (RED.validators.hasOwnProperty('typedInput')?RED.validators.typedInput('topicType'):function(v) { return true})},
            topicType: {value: 'msg'}
        },
        inputs:1,
        outputs:1,
        outputLabels: function() { if (this.payloadType === "str") {
            return this.payload;
        } else {return this.payloadType; } },
        icon: "ui_button.png",
        paletteLabel: 'button',
        label: function() { return this.name || (~this.label.indexOf("{{") ? null : this.label) || 'button'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });
            $('#node-input-payload').typedInput({
                default: 'str',
                typeField: $("#node-input-payloadType"),
                types: ['str','num','bool','json','bin','date','flow','global']
            });
            $('#node-input-topic').typedInput({
                default: 'str',
                typeField: $("#node-input-topicType"),
                types: ['str','msg','flow','global']
            });
        }
    });
</script>

<script type="text/html" data-template-name="ui_button">
	<div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> <span data-i18n="ui_button.label.group"></label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row">
        <label><i class="fa fa-object-group"></i> <span data-i18n="ui_button.label.size"></label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-icon"><i class="fa fa-picture-o"></i> <span data-i18n="ui_button.label.icon"></label>
        <input type="text" id="node-input-icon" data-i18n="[placeholder]ui_button.label.optionalIcon">
    </div>
    <div class="form-row">
        <label for="node-input-label"><i class="fa fa-i-cursor"></i> <span data-i18n="ui_button.label.label"></label>
        <input type="text" id="node-input-label" data-i18n="[placeholder]ui_button.label.optionalLabel">
    </div>
    <div class="form-row">
        <label for="node-input-tooltip"><i class="fa fa-info-circle"></i> <span data-i18n="ui_button.label.tooltip"></label>
        <input type="text" id="node-input-tooltip" data-i18n="[placeholder]ui_button.label.optionalTooltip">
    </div>
    <div class="form-row">
        <label for="node-input-color"><i class="fa fa-tint"></i> <span data-i18n="ui_button.label.color"></label>
        <input type="text" id="node-input-color" data-i18n="[placeholder]ui_button.label.optionalColor">
    </div>
    <div class="form-row">
        <label for="node-input-bgcolor"><i class="fa fa-tint"></i>  <span data-i18n="ui_button.label.background"></label>
        <input type="text" id="node-input-bgcolor" data-i18n="[placeholder]ui_button.label.optionalBackgroundColor">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-payload"><i class="fa fa-envelope-o"></i> <span data-i18n="ui_button.label.whenClicked"></label>
    </div>
    <div class="form-row">
        <label for="node-input-payload" style="padding-left: 25px; margin-right: -25px"><span data-i18n="ui_button.label.payload"></label>
        <input type="text" id="node-input-payload" style="width:70%">
        <input type="hidden" id="node-input-payloadType">
    </div>
    <div class="form-row">
        <label for="node-input-topic" style="padding-left: 25px; margin-right: -25px"><span data-i18n="ui_button.label.topic"></label>
        <input type="text" id="node-input-topic">
        <input type="hidden" id="node-input-topicType">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-passthru"><i class="fa fa-arrow-right"></i> <span data-i18n="ui_button.label.emulateClick"></label>
        <input type="checkbox" id="node-input-passthru" style="display:inline-block; width:auto; vertical-align:top;">
    </div>
    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  <span data-i18n="ui_button.label.className"></label>
        <input type="text" id="node-input-className" data-i18n="[placeholder]ui_button.label.classNamePlaceholder"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="node-red:common.label.name"></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]node-red:common.label.name">
    </div>
</script>
<script type="text/html" data-help-name="ui_button">
    <p>Adds a button to the user interface.</p>
    <p>Clicking the button generates a message with <code>msg.payload</code> set to the <b>Payload</b> field.
    If no payload is specified, the node id is used.</p>
	<p>The <b>Size</b> defaults to  3 by 1.</p>
    <p>The <b>Icon</b> can be defined, as either a <a href="https://klarsys.github.io/angular-material-icons/" target="_blank">Material Design icon</a>
    <i>(e.g. 'check', 'close')</i> or a <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank">Font Awesome icon</a>
    <i>(e.g. 'fa-fire')</i>, or a <a href="https://github.com/Paul-Reed/weather-icons-lite/blob/master/css_mappings.md">Weather icon</a>.
    You can use the full set of google material icons if you add 'mi-' to the icon name. e.g. 'mi-videogame_asset'.</p>
    <p>The colours of the text and background may be set. They can also be set by a message property by setting
    the field to the name of the property, for example <code>{{background}}</code>.
    You don't need to prepend the <i>msg.</i> part of the property name.</p>
    <p>The label and icon can also be set by a message property by setting
    the field to the name of the property, for example <code>{{topic}}</code> or <code>{{myicon}}</code>.</p>
    <p>If set to pass through mode a message arriving on the input will act like pressing the button.
    The output payload will be as defined in the node configuration.</p>
    <p>The incoming <b>topic</b> field can be used to set the <code>msg.topic</code> property that is output.</p>
    <p>Setting <code>msg.enabled</code> to <code>false</code> will disable the button.</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_dropdown] --- -->
<script type="text/javascript">
    RED.nodes.registerType('ui_dropdown',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb(176, 223, 227)',
        defaults: {
            name: {value: ''},
            label: {value: ''},
            tooltip: {value: ''},
            place: {value: 'Select option'},
            group: {type: 'ui_group', required:true},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var width = v||0;
                    var currentGroup = $('#node-input-group').val()||this.group;
                    var groupNode = RED.nodes.node(currentGroup);
                    var valid = !groupNode || +width <= +groupNode.width;
                    $("#node-input-size").toggleClass("input-error",!valid);
                    return valid;
                }
            },
            height: {value: 0},
            passthru: {value: true},
            multiple: {value: false},
            options: {value:[{value: '', label : ''}],
                validate:function(v) {
                    var unique = new Set(v.map(function(o) {return o.value;}));
                    return v.length == unique.size;
                }},
            payload: {value: ''},
            topic: {value: 'topic', validate: (RED.validators.hasOwnProperty('typedInput')?RED.validators.typedInput('topicType'):function(v) { return true})},
            topicType: {value: 'msg'},
            className: {value: ''}
        },
        inputs:1,
        outputs:1,
        icon: "ui_dropdown.png",
        paletteLabel: 'dropdown',
        label: function() { return this.name || (~this.label.indexOf("{{") ? null : this.label) || 'dropdown'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            if (this.multiple === undefined) {
                $("#node-input-multiple").prop('checked', false);;
            }
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });
            var un = new Set(this.options.map(function(o) {return o.value}));
            if (this.options.length == un.size) { $("#valWarning").hide(); }
            else { $("#valWarning").show(); }

            function generateOption(i, option) {
                var container = $('<li/>',{style:"background: var(--red-ui-secondary-background, #fff); margin:0; padding:8px 0px 0px; border-bottom: 1px solid var(--red-ui-form-input-border-color, #ccc);"});
                var row = $('<div/>').appendTo(container);
                var row2 = $('<div/>',{style:"padding-top:5px; padding-left:175px;"}).appendTo(container);
                var row3 = $('<div/>',{style:"padding-top:5px; padding-left:120px;"}).appendTo(container);

                $('<i style="color: var(--red-ui-form-text-color, #eee); cursor:move; margin-left:3px;" class="node-input-option-handle fa fa-bars"></i>').appendTo(row);

                var valueField = $('<input/>',{class:"node-input-option-value",type:"text",style:"margin-left:7px; width:calc(50% - 32px);", placeholder: 'Value',value:option.value}).appendTo(row).typedInput({default:option.type||'str',types:['str','num','bool']});
                var labelField = $('<input/>',{class:"node-input-option-label",type:"text",style:"margin-left:7px; width:calc(50% - 32px);", placeholder: 'Label', value:option.label}).appendTo(row);

                var finalspan = $('<span/>',{style:"float:right; margin-right:8px;"}).appendTo(row);
                var deleteButton = $('<a/>',{href:"#",class:"editor-button editor-button-small", style:"margin-top:7px; margin-left:5px;"}).appendTo(finalspan);
                $('<i/>',{class:"fa fa-remove"}).appendTo(deleteButton);

                deleteButton.click(function() {
                    container.css({"background":"var(--red-ui-secondary-background-inactive, #fee)"});
                    container.fadeOut(300, function() {
                        $(this).remove();
                    });
                });

                $("#node-input-option-container").append(container);
            }

            $("#node-input-add-option").click(function() {
                generateOption($("#node-input-option-container").children().length+1, {});
                $("#node-input-option-container-div").scrollTop($("#node-input-option-container-div").get(0).scrollHeight);
            });

            for (var i=0; i<this.options.length; i++) {
                var option = this.options[i];
                generateOption(i+1,option);
            }

            $( "#node-input-option-container" ).sortable({
                axis: "y",
                handle:".node-input-option-handle",
                cursor: "move"
            });

            $('#node-input-topic').typedInput({
                default: 'str',
                typeField: $("#node-input-topicType"),
                types: ['str','msg','flow','global']
            });
        },
        oneditsave: function() {
            var options = $("#node-input-option-container").children();
            var node = this;
            node.options = [];
            options.each(function(i) {
                var option = $(this);
                var o = {
                    label: option.find(".node-input-option-label").val(),
                    value: option.find(".node-input-option-value").typedInput('value'),
                    type: option.find(".node-input-option-value").typedInput('type')
                };
                if (option.find(".node-input-option-value").typedInput('type') === "num") {
                    o.value = Number(o.value);
                }
                if (option.find(".node-input-option-value").typedInput('type') === "bool") {
                    o.value = (o.value == "true");
                }
                node.options.push(o);
            });
        },
        oneditresize: function() {
        }
    });
</script>

<script type="text/html" data-template-name="ui_dropdown">
    <div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> Group</label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row">
        <label><i class="fa fa-object-group"></i> Size</label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-label"><i class="fa fa-tag"></i> Label</label>
        <input type="text" id="node-input-label" placeholder="optional label">
    </div>
    <div class="form-row">
        <label for="node-input-tooltip"><i class="fa fa-info-circle"></i> Tooltip</label>
        <input type="text" id="node-input-tooltip" placeholder="optional tooltip">
    </div>
    <div class="form-row">
        <label for="node-input-place"><i class="fa fa-tag"></i> Placeholder</label>
        <input type="text" id="node-input-place" placeholder="optional placeholder">
    </div>
    <div class="form-row node-input-option-container-row" style="margin-bottom: 0px;width: 100%">
        <label for="node-input-width" style="vertical-align:top"><i class="fa fa-list-alt"></i> Options</label>
        <div id="node-input-option-container-div" style="box-sizing:border-box; border-radius:5px; height:257px; padding:5px; border:1px solid var(--red-ui-form-input-border-color, #ccc); overflow-y:scroll; display:inline-block; width:calc(70% + 15px);">
            <span id="valWarning" style="color: var(--red-ui-text-color-error, #910000)"><b>All Values must be unique.</b></span>
            <ol id="node-input-option-container" style="list-style-type:none; margin:0;"></ol>
        </div>
    </div>
    <div class="form-row">
        <a href="#" class="editor-button editor-button-small" id="node-input-add-option" style="margin-top:4px; margin-left:103px;"><i class="fa fa-plus"></i> <span>option</span></a>
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-multiple"><i class="fa fa-th-list"></i> Allow multiple selections from list: </label>
        <input type="checkbox" checked id="node-input-multiple" style="display:inline-block; width:auto; vertical-align:top;">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-passthru"><i class="fa fa-arrow-right"></i> If <code>msg</code> arrives on input, pass through to output: </label>
        <input type="checkbox" checked id="node-input-passthru" style="display:inline-block; width:auto; vertical-align:top;">
    </div>
    <div class="form-row">
        <label for="node-input-topic"><i class="fa fa-tasks"></i> Topic</label>
        <input type="text" id="node-input-topic" placeholder="optional msg.topic">
        <input type="hidden" id="node-input-topicType">
    </div>
    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  Class</label>
        <input type="text" id="node-input-className" placeholder="Optional CSS class name(s) for widget"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
        <input type="text" id="node-input-name">
    </div>
</script>
<script type="text/html" data-help-name="ui_dropdown">
    <p>Adds a dropdown select box to the user interface.</p>
    <p>Multiple value / label pairs can be added as required. If the label is not specified the
    value will be used for both.</p>
    <p>The configured value of the selected item will be returned as <code>msg.payload</code>.</p>
    <p>Setting <code>msg.payload</code> to one of the item values will preset the choice in the dropdown.
    If using the multi-select option then the payload should be an array of values.</p>
    <p>Optionally the <b>Topic</b> field can be used to set the <code>msg.topic</code> property.</p>
    <p>The Options may be configured by inputting <code>msg.options</code> containing an array.
    If just text then the value will be the same as the label, otherwise you can specify both by
    using an object of <code>"label":"value"</code> pairs :</p>
    <code>[ "Choice 1", "Choice 2", {"Choice 3":"3"} ]</code>
    <p></p>
    <p>If the "Allow multiple selections" output option is enabled - the result will be returned as an array instead of a string.</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_switch] --- -->
<script type="text/javascript">
    RED.nodes.registerType('ui_switch',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb(176, 223, 227)',
        defaults: {
            name: {value: ''},
            label: {value: 'switch'},
            tooltip: {value: ''},
            group: {type: 'ui_group', required: true},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var width = v||0;
                    var currentGroup = $('#node-input-group').val()||this.group;
                    var groupNode = RED.nodes.node(currentGroup);
                    var valid = !groupNode || +width <= +groupNode.width;
                    $("#node-input-size").toggleClass("input-error",!valid);
                    return valid;
                }
            },
            height: {value: 0},
            passthru: {value: true},
            decouple: {value: "false"},
            topic: {value: 'topic', validate: (RED.validators.hasOwnProperty('typedInput')?RED.validators.typedInput('topicType'):function(v) { return true})},
            topicType: {value: 'msg'},
            style: {value: ''},
            onvalue: {value: true, required:true, validate: (RED.validators.hasOwnProperty('typedInput')?RED.validators.typedInput('onvalueType'):function(v) { return true})},
            onvalueType: {value: 'bool'},
            onicon: {value: '' },
            oncolor: {value: ''},
            offvalue: {value: false, required:true, validate: (RED.validators.hasOwnProperty('typedInput')?RED.validators.typedInput('offvalueType'):function(v) { return true})},
            offvalueType: {value: 'bool'},
            officon: {value: ''},
            offcolor: {value: ''},
            animate: {value: false},
            className: {value: ''}
        },
        inputs:1,
        outputs:1,
        icon: "ui_switch.png",
        paletteLabel: 'switch',
        label: function() { return this.name || (~this.label.indexOf("{{") ? null : this.label) || 'switch'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });
            $('#node-input-custom-icons').on("change", function() {
                if ($('#node-input-custom-icons').val() === "default") {
                    $(".form-row-custom-icons").hide();
                }
                else {
                    $(".form-row-custom-icons").show();
                }
            });

            if (this.onicon !== "" || this.oncolor !== "" || this.officon !=="" || this.offcolor !== "") {
                $('#node-input-custom-icons').val('custom');
            }
            else {
                $(".form-row-custom-icons").hide();
                $('#node-input-custom-icons').change();
            }

            $('#node-input-onvalue').typedInput({
                default: 'str',
                typeField: $("#node-input-onvalueType"),
                types: ['str','num','bool','json','bin','date','flow','global']
            });

            $('#node-input-offvalue').typedInput({
                default: 'str',
                typeField: $("#node-input-offvalueType"),
                types: ['str','num','bool','json','bin','date','flow','global']
            });

            $('#node-input-topic').typedInput({
                default: 'str',
                typeField: $("#node-input-topicType"),
                types: ['str','msg','flow','global']
            });

            $('#node-input-passthru').on("change", function() {
                if (this.checked) {
                    $('.form-row-decouple').hide();
                    $('#node-input-decouple').val("false");
                }
                else {
                    $('.form-row-decouple').show();
                }
            });
        },
        oneditsave: function() {
            if ($('#node-input-custom-icons').val() === 'default') {
                $('#node-input-onicon').val('');
                $('#node-input-officon').val('');
                $('#node-input-oncolor').val('');
                $('#node-input-offcolor').val('');
            }
        }
    });
</script>

<script type="text/html" data-template-name="ui_switch">
	<div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> Group</label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row">
        <label><i class="fa fa-object-group"></i> Size</label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-label"><i class="fa fa-i-cursor"></i> Label</label>
        <input type="text" id="node-input-label">
    </div>
    <div class="form-row">
        <label for="node-input-tooltip"><i class="fa fa-info-circle"></i> Tooltip</label>
        <input type="text" id="node-input-tooltip" placeholder="optional tooltip">
    </div>
    <div class="form-row">
        <label for="node-input-custom-icons"><i class="fa fa-picture-o"></i> Icon</label>
        <select id="node-input-custom-icons" style="width:35%">
            <option value="default">Default</option>
            <option value="custom">Custom</option>
        </select>
        <span style="width:auto; padding-left:20px" class="form-row-custom-icons" for="node-input-animate"> Animate
        <input type="checkbox" checked id="node-input-animate" style="display:inline-block; width:auto; vertical-align:baseline;"></span>
    </div>
    <div class="form-row form-row-custom-icons">
        <label for="node-input-onicon" style="text-align:right;"><i class="fa fa-toggle-on"></i> On Icon</label>
        <input type="text" id="node-input-onicon" style="width:120px">
        <label for="node-input-oncolor" style="width:50px; text-align:right;">Colour</label>
        <input type="text" id="node-input-oncolor" style="width:120px">
    </div>
    <div class="form-row form-row-custom-icons">
        <label for="node-input-officon" style="text-align:right;"><i class="fa fa-toggle-off"></i> Off Icon</label>
        <input type="text" id="node-input-officon" style="width:120px">
        <label for="node-input-offcolor" style="width:50px; text-align:right;">Colour</label>
        <input type="text" id="node-input-offcolor" style="width:120px">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-passthru"><i class="fa fa-arrow-right"></i> Pass through <code>msg</code> if payload matches valid state: </label>
        <input type="checkbox" checked id="node-input-passthru" style="display:inline-block; width:auto; vertical-align:top;">
    </div>
    <div class="form-row form-row-decouple">
        <label for="node-input-decouple"><i class="fa fa-toggle-on"></i> Indicator</label>
        <select id="node-input-decouple" style="display: inline-block; vertical-align: middle; width:70%;">
            <option value="false">Switch icon shows state of the output</option>
            <option value="true">Switch icon shows state of the input</option>
        </select>
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-onvalue"><i class="fa fa-envelope-o"></i> When clicked, send:</label>
    </div>
    <div class="form-row">
        <label for="node-input-onvalue" style="padding-left:25px; margin-right:-25px">On Payload</label>
        <input type="text" id="node-input-onvalue" style="width:70%">
        <input type="hidden" id="node-input-onvalueType">
    </div>
    <div class="form-row">
        <label for="node-input-offvalue" style="padding-left:25px; margin-right:-25px">Off Payload</label>
        <input type="text" id="node-input-offvalue" style="width:70%">
        <input type="hidden" id="node-input-offvalueType">
    </div>
    <div class="form-row">
        <label for="node-input-topic" style="padding-left:25px; margin-right:-25px">Topic</label>
        <input type="text" id="node-input-topic">
        <input type="hidden" id="node-input-topicType">
    </div>
    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  Class</label>
        <input type="text" id="node-input-className" placeholder="Optional CSS class name(s) for widget"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
        <input type="text" id="node-input-name">
    </div>
</script>
<script type="text/html" data-help-name="ui_switch">
    <p>Adds a switch to the user interface.</p>
	<p>Each change in the state of the switch will generate
    a <code>msg.payload</code> with the specified <b>On</b> and <b>Off</b> values.</p>
    <p>The <b>On/Off Color</b> and <b>On/Off Icon</b> are optional fields. If they are all present, the default
    toggle switch will be replaced with the relevant icons and their respective colors.</p>
    <p>The <b>On/Off Icon</b> field can be either a <a href="https://klarsys.github.io/angular-material-icons/" target="_blank">Material Design icon</a>
    <i>(e.g. 'check', 'close')</i> or a <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank">Font Awesome icon</a>
    <i>(e.g. 'fa-fire')</i>, or a <a href="https://github.com/Paul-Reed/weather-icons-lite/blob/master/css_mappings.md">Weather icon</a>.
    You can use the full set of google material icons if you add 'mi-' to the icon name. e.g. 'mi-videogame_asset'.</p>
    <p>In pass through mode the switch state can be updated by an incoming <code>msg.payload</code> with the specified values,
    that must also match the specified type (number, string, etc). When not in passthrough mode then the icon can either
    track the state of the output - or the input msg.payload, in order to provide a closed loop feedback.</p>
    <p>The label can also be set by a message property by setting
    the field to the name of the property, for example <code>{{msg.topic}}</code>.</p>
    <p>If a <b>Topic</b> is specified, it will be added to the output as <code>msg.topic</code>.</p>
    <p>Setting <code>msg.enabled</code> to <code>false</code> will disable the switch widget.</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_slider] --- -->
<script type="text/javascript">
    RED.nodes.registerType('ui_slider',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb(176, 223, 227)',
        defaults: {
            name: {value: ''},
            label: {value: 'slider'},
            tooltip: {value: ''},
            group: {type: 'ui_group', required: true},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var width = v||0;
                    var currentGroup = $('#node-input-group').val()||this.group;
                    var groupNode = RED.nodes.node(currentGroup);
                    var valid = !groupNode || +width <= +groupNode.width;
                    $("#node-input-size").toggleClass("input-error",!valid);
                    return valid;
                }
            },
            height: {value: 0},
            passthru: {value: true},
            outs: {value: 'all'},
            topic: {value: 'topic', validate: (RED.validators.hasOwnProperty('typedInput')?RED.validators.typedInput('topicType'):function(v) { return true})},
            topicType: {value: 'msg'},
            min: {value: 0, required:true, validate:RED.validators.number()},
            max: {value: 10, required:true, validate:RED.validators.number()},
            step: {value: 1},
            className: {value: ''}
        },
        inputs:1,
        outputs:1,
        outputLabels: function() { return this.min+" - "+this.max; },
        icon: "ui_slider.png",
        paletteLabel: 'slider',
        label: function() { return this.name || (~this.label.indexOf("{{") ? null : this.label) || 'slider'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });
            $('#node-input-topic').typedInput({
                default: 'str',
                typeField: $("#node-input-topicType"),
                types: ['str','msg','flow','global']
            });
            if (!$("#node-input-outs").val()) { $("#node-input-outs").val("all") }
        }
    });
</script>

<script type="text/html" data-template-name="ui_slider">
	<div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> Group</label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row">
        <label><i class="fa fa-object-group"></i> Size</label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-label"><i class="fa fa-i-cursor"></i> Label</label>
        <input type="text" id="node-input-label">
    </div>
    <div class="form-row">
        <label for="node-input-tooltip"><i class="fa fa-info-circle"></i> Tooltip</label>
        <input type="text" id="node-input-tooltip" placeholder="optional tooltip">
    </div>
    <div class="form-row">
        <label for="node-input-min"><i class="fa fa-arrows-h"></i> Range</label>
        <span for="node-input-min">min</span>
        <input type="text" id="node-input-min" style="width:60px">
        <span for="not-input-max" style="margin-left:22px;">max</span>
        <input type="text" id="node-input-max" style="width:60px">
        <span for="not-input-step" style="margin-left:22px;">step</span>
        <input type="text" id="node-input-step" style="width:60px">
    </div>
    <div class="form-row">
        <label for="node-input-outs"><i class="fa fa-sign-out"></i> Output</label>
        <select id="node-input-outs" style="width:204px">
            <option value="all">continuously while sliding</option>
            <option value="end">only on release</option>
        </select>
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-passthru"><i class="fa fa-arrow-right"></i> If <code>msg</code> arrives on input, pass through to output: </label>
        <input type="checkbox" checked id="node-input-passthru" style="display:inline-block; width:auto; vertical-align:top;">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-payload"><i class="fa fa-envelope-o"></i> When changed, send:</label>
    </div>
    <div class="form-row">
        <label style="padding-left:25px; margin-right:-25px">Payload</label>
        <label style="width:auto">Current value</label>
    </div>
    <div class="form-row">
        <label for="node-input-topic" style="padding-left:25px; margin-right:-25px">Topic</label>
        <input type="text" id="node-input-topic">
    </div>
    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  Class</label>
        <input type="text" id="node-input-className" placeholder="Optional CSS class name(s) for widget"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
        <input type="text" id="node-input-name">
        <input type="hidden" id="node-input-topicType">
    </div>
</script>
<script type="text/html" data-help-name="ui_slider">
    <p>Adds a slider widget to the user interface.</p>
	<p>The user can change its value between the limits (<b>min</b> and <b>max</b>). Each value change
    will generate a message with the value set as <b>payload</b>.</p>
    <p>A vertical slider can be created by setting the size so that the height is greater than the width.</p>
    <p>The slider can be reversed by setting the min value larger than the max value. e.g. min 100, max 0.</p>
    <p>If a <b>Topic</b> is specified, it will be added as <code>msg.topic</code>.</p>
    <p>An input <code>msg.payload</code> will be converted to a number, and used to preset a value.
    The <b>min</b> value will be used if conversion fails,
    and it will update the user interface. If the value changes, it will also be passed to the output.</p>
    <p>The label can also be set by a message property by setting
    the field to the name of the property, for example <code>{{msg.topic}}</code>.</p>
    <p>Setting <code>msg.enabled</code> to <code>false</code> will disable the slider output.</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_numeric] --- -->
<script type="text/javascript">
    RED.nodes.registerType('ui_numeric',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb(176, 223, 227)',
        defaults: {
            name: {value: ''},
            label: {value: 'numeric'},
            tooltip: {value: ''},
            group: {type: 'ui_group', required: true},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var width = v||0;
                    var currentGroup = $('#node-input-group').val()||this.group;
                    var groupNode = RED.nodes.node(currentGroup);
                    var valid = !groupNode || +width <= +groupNode.width;
                    $("#node-input-size").toggleClass("input-error",!valid);
                    return valid;
                }
            },
            height: {value: 0},
            wrap: {value: false},
            passthru: {value: true},
            topic: {value: 'topic', validate: (RED.validators.hasOwnProperty('typedInput')?RED.validators.typedInput('topicType'):function(v) { return true})},
            topicType: {value: 'msg'},
            format: {value: '{{value}}'},
            min: {value: 0, required: true, validate: RED.validators.number()},
            max: {value: 10, required: true, validate: RED.validators.number()},
            step: {value: 1},
            className: {value: ''}
        },
        inputs:1,
        outputs:1,
        outputLabels: function() { return this.min+" - "+this.max; },
        icon: "ui_numeric.png",
        paletteLabel: 'numeric',
        label: function() { return this.name || (~this.label.indexOf("{{") ? null : this.label) || 'numeric'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });
            $('#node-input-topic').typedInput({
                default: 'str',
                typeField: $("#node-input-topicType"),
                types: ['str','msg','flow','global']
            });
        }
    });
</script>

<script type="text/html" data-template-name="ui_numeric">
	<div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> Group</label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row">
        <label><i class="fa fa-object-group"></i> Size</label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-label"><i class="fa fa-i-cursor"></i> Label</label>
        <input type="text" id="node-input-label">
    </div>
    <div class="form-row">
        <label for="node-input-tooltip"><i class="fa fa-info-circle"></i> Tooltip</label>
        <input type="text" id="node-input-tooltip" placeholder="optional tooltip">
    </div>
    <div class="form-row">
        <label for="node-input-format"><i class="fa fa-i-cursor"></i> Value Format</label>
        <input type="text" id="node-input-format" placeholder="{{value}}">
    </div>
    <div class="form-row">
        <label for="node-input-min"><i class="fa fa-arrows-h"></i> Range</label>
        <span for="node-input-min">min</span>
        <input type="text" id="node-input-min" style="width:60px">
        <span for="not-input-max" style="margin-left:22px;">max</span>
        <input type="text" id="node-input-max" style="width:60px">
        <span for="not-input-step" style="margin-left:22px;">step</span>
        <input type="text" id="node-input-step" style="width:60px">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-wrap"><i class="fa fa-refresh"></i> Wrap value from max to min and min to max.</label>
        <input type="checkbox" id="node-input-wrap" style="display:inline-block; width:auto; vertical-align:top;">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-passthru"><i class="fa fa-arrow-right"></i> If <code>msg</code> arrives on input, pass through to output: </label>
        <input type="checkbox" checked id="node-input-passthru" style="display:inline-block; width:auto; vertical-align:top;">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-payload"><i class="fa fa-envelope-o"></i> When changed, send:</label>
    </div>
    <div class="form-row">
        <label style="padding-left:25px; margin-right:-25px">Payload</label>
        <label style="width:auto">Current value</label>
    </div>
    <div class="form-row">
        <label for="node-input-topic" style="padding-left:25px; margin-right:-25px">Topic</label>
        <input type="text" id="node-input-topic">
        <input type="hidden" id="node-input-topicType">
    </div>
    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  Class</label>
        <input type="text" id="node-input-className" placeholder="Optional CSS class name(s) for widget"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
        <input type="text" id="node-input-name">
    </div>
</script>
<script type="text/html" data-help-name="ui_numeric">
    <p>Adds a numeric input widget to the user interface.</p>
	<p>The user can set the value between
    the limits (<b>min</b> and <b>max</b>). Each value change will generate a <code>msg.payload</code>.</p>
    <p>If <b>Topic</b> is specified, it will be added as <code>msg.topic</code>.<p>
    <p>Any input <code>msg.payload</code> will be converted to a number, the <b>min</b> value will be used if conversion fails,
    and it will update the user interface. If the value changes, it will also be passed to the output.</p>
    <p>The <b>Value Format</b> field can be used to change the displayed format. For example, a <b>Value Format</b>
    of <code>{{value}} %</code>
    with a value of <b>23</b> will show <b>23 %</b> on the user interface. The <b>Value Format</b> field can contain
    HTML or Angular filters to format the output (eg: <code>&amp;deg;</code> will show the degree symbol).</p>
    <p>Setting the Value Format field to <code>{{msg.payload}}</code> will make the input field editable so you can type in a number.</p>
    <p>The label can also be set by a message property by setting
    the field to the name of the property, for example <code>{{msg.topic}}</code>.</p>
    <p>Setting <code>msg.enabled</code> to <code>false</code> will disable the widget output.</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_text_input] --- -->
<script type="text/javascript">
    RED.nodes.registerType('ui_text_input',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb(176, 223, 227)',
        defaults: {
            name: {value: ''},
            label: {value: ''},
            tooltip: {value: ''},
            group: {type: 'ui_group', required: true},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var width = v||0;
                    var currentGroup = $('#node-input-group').val()||this.group;
                    var groupNode = RED.nodes.node(currentGroup);
                    var valid = !groupNode || +width <= +groupNode.width;
                    $("#node-input-size").toggleClass("input-error",!valid);
                    return valid;
                }
            },
            height: {value: 0},
            passthru: {value: true},
            mode: {value: 'text', required: true},
            delay: {value: 300, validate: RED.validators.number()},
            topic: {value: 'topic', validate: (RED.validators.hasOwnProperty('typedInput')?RED.validators.typedInput('topicType'):function(v) { return true})},
            sendOnBlur: {value: true},
	        className: {value: ''},
            topicType: {value: 'msg'}
        },
        inputs:1,
        outputs:1,
        outputLabels: function() { return this.mode; },
        icon: "ui_text.png",
        paletteLabel: 'text input',
        label: function() { return this.name || (~this.label.indexOf("{{") ? null : this.label) || this.mode+' input'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });
            $('#node-input-topic').typedInput({
                default: 'str',
                typeField: $("#node-input-topicType"),
                types: ['str','msg','flow','global']
            });
        }
    });
</script>

<script type="text/html" data-template-name="ui_text_input">
	<div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> Group</label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row">
        <label><i class="fa fa-object-group"></i> Size</label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-label"><i class="fa fa-i-cursor"></i> Label</label>
        <input type="text" id="node-input-label">
    </div>
    <div class="form-row">
        <label for="node-input-tooltip"><i class="fa fa-info-circle"></i> Tooltip</label>
        <input type="text" id="node-input-tooltip" placeholder="optional tooltip">
    </div>
    <div class="form-row">
        <label for="node-input-mode"><i class="fa fa-keyboard-o"></i> Mode</label>
        <select style="width:128px" id="node-input-mode">
            <option value="text">text input</option>
            <option value="email">email address</option>
            <option value="password">password</option>
            <option value="number">number</option>
            <option value="tel">telephone input</option>
            <option value="color">color picker</option>
            <option value="time">time picker</option>
            <option value="datetime-local">datetime picker</option>
            <option value="week">week picker</option>
            <option value="month">month picker</option>
            <!-- <option value="date">date picker</option> -->
        </select>
        <label for="node-input-delay" style="text-align:right; width:100px"><i class="fa fa-clock-o"></i> Delay (ms)</label>
        <input type="text" style="width:58px" id="node-input-delay">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-passthru"><i class="fa fa-arrow-right"></i> If <code>msg</code> arrives on input, pass through to output: </label>
        <input type="checkbox" checked id="node-input-passthru" style="display:inline-block; width:auto; vertical-align:top;">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-sendOnBlur">Send value on focus leave: </label>
        <input type="checkbox" checked id="node-input-sendOnBlur" style="display:inline-block; width:auto; vertical-align:top;">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-payload"><i class="fa fa-envelope-o"></i> When changed, send:</label>
    </div>
    <div class="form-row">
        <label style="padding-left: 25px; margin-right: -25px">Payload</label>
        <label style="width:auto">Current value</label>
    </div>
    <div class="form-row">
        <label for="node-input-topic" style="padding-left: 25px; margin-right: -25px">Topic</label>
        <input type="text" id="node-input-topic">
        <input type="hidden" id="node-input-topicType">
    </div>
    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  Class</label>
        <input type="text" id="node-input-className" placeholder="Optional CSS class name(s) for widget"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
        <input type="text" id="node-input-name">
    </div>
    <div class="form-tips">Setting <b>Delay</b> to 0 waits for Enter or Tab key, to send input.</span></div>
</script>
<script type="text/html" data-help-name="ui_text_input">
  <p>Adds a text input field to the user interface. Mode can be regular text, email or color picker.</p>
  <p>Any input is sent as <code>msg.payload</code>. If set to ‘pass through mode’ an arriving <code>msg.payload</code>
      will be used if it is different from the existing text in the input field. This allows you to preset
      the text of the input field.</p>
  <p>The <b>Delay</b> <i>(default : 300ms)</i> sets the amount of time in milliseconds before the output is sent.
  Setting to <code>0</code> waits for "Enter" or "Tab" key to send. Enter will send payload but remain in focus.
  Tab will send payload and move to next field. Clicking elsewhere will also send the payload.</p>
  <p>The email mode will color in red if it is not a valid address and will return undefined.</p>
  <p>The time input type returns a number of milliseconds from midnight.</p>
  <p>Not all browsers support the <i>week</i> and <i>month</i> input types, and may return <i>undefined</i>.
  Please test your target browser(s) before use.</p>
  <p>If a <b>Topic</b> is specified, it will be added as <code>msg.topic</code>.</p>
  <p>Setting <code>msg.enabled</code> to <code>false</code> will disable the input.</p>
  <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_date_picker] --- -->
<script type="text/javascript">
    RED.nodes.registerType('ui_date_picker',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb(176, 223, 227)',
        defaults: {
            name: {value: ''},
            label: {value: 'date'},
            group: {type: 'ui_group', required: true},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var width = v||0;
                    var currentGroup = $('#node-input-group').val()||this.group;
                    var groupNode = RED.nodes.node(currentGroup);
                    var valid = !groupNode || +width <= +groupNode.width;
                    $("#node-input-size").toggleClass("input-error",!valid);
                    return valid;
                }
            },
            height: {value: 0},
            passthru: {value: true},
            topic: {value: 'topic', validate: (RED.validators.hasOwnProperty('typedInput')?RED.validators.typedInput('topicType'):function(v) { return true})},
            topicType: {value: 'msg'},
            className: {value: ''}
        },
        inputs:1,
        outputs:1,
        outputLabels: ["epoch mS"],
        icon: "ui_date_picker.png",
        paletteLabel: 'date picker',
        label: function() { return this.name || (~this.label.indexOf("{{") ? null : this.label) || 'date picker'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });
            $('#node-input-topic').typedInput({
                default: 'str',
                typeField: $("#node-input-topicType"),
                types: ['str','msg','flow','global']
            });
        }
    });
</script>

<script type="text/html" data-template-name="ui_date_picker">
	<div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> Group</label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row">
        <label><i class="fa fa-object-group"></i> Size</label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-label"><i class="fa fa-i-cursor"></i> Label</label>
        <input type="text" id="node-input-label">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-passthru"><i class="fa fa-arrow-right"></i> If <code>msg</code> arrives on input, pass through to output: </label>
        <input type="checkbox" checked id="node-input-passthru" style="display:inline-block; width:auto; vertical-align:top;">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-payload"><i class="fa fa-envelope-o"></i> When changed, send:</label>
    </div>
    <div class="form-row">
        <label style="padding-left:25px; margin-right:-25px">Payload</label>
        <label style="width:auto">Current value</label>
    </div>
    <div class="form-row">
        <label for="node-input-topic" style="padding-left:25px; margin-right:-25px">Topic</label>
        <input type="text" id="node-input-topic">
        <input type="hidden" id="node-input-topicType">
    </div>
    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  Class</label>
        <input type="text" id="node-input-className" placeholder="Optional CSS class name(s) for widget"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
        <input type="text" id="node-input-name">
    </div>
</script>
<script type="text/html" data-help-name="ui_date_picker">
    <p>Adds a date picker widget to the user interface.</p>
    <p>The date display can be formatted in the Dashboard - Site tab using <a href="https://momentjs.com/docs/#/displaying/">
    moment.js</a> formatting. For example <code>MM/DD/YYYY</code>, <code>Do MMM YYYY</code> or <code>YYYY-MM-DD</code>.</p>
    <p>Setting <code>msg.enabled</code> to <code>false</code> will disable the input.</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_colour_picker] --- -->
<script type="text/javascript">
    RED.nodes.registerType('ui_colour_picker',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb(176, 223, 227)',
        defaults: {
            name: {value: ''},
            label: {value: ''},
            group: {type: 'ui_group', required: true},
            format: {value: 'hex'},
            outformat: {value: 'string'},
            showSwatch: {value: true},
            showPicker: {value: false},
            showValue: {value: false},
            showHue: {value: false},
            showAlpha: {value: false},
            showLightness: {value: true},
            square: {value: "false"},
            dynOutput: {value: "false"},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var width = v||0;
                    var currentGroup = $('#node-input-group').val()||this.group;
                    var groupNode = RED.nodes.node(currentGroup);
                    var valid = !groupNode || +width <= +groupNode.width;
                    $("#node-input-size").toggleClass("input-error",!valid);
                    return valid;
                }
            },
            height: {value: 0},
            passthru: {value: true},
            topic: {value: 'topic', validate: (RED.validators.hasOwnProperty('typedInput')?RED.validators.typedInput('topicType'):function(v) { return true})},
            topicType: {value: 'msg'},
            className: {value: ''}
        },
        inputs:1,
        outputs:1,
        outputLabels: function() { return this.format; },
        icon: "ui_colour_picker.png",
        paletteLabel: 'colour picker',
        label: function() { return this.name || (~this.label.indexOf("{{") ? null : this.label) || 'colour picker'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            if (this.square === undefined) {
                this.square = "false";
                $("#node-input-square").val("false");
            }
            $("#node-input-square").on("change", function() {
                if ($("#node-input-square").val() === "false") {
                    $("#node-input-showLightness").prop('checked', true);
                    $("#node-input-showHue").prop('checked', false);
                }
                else {
                    $("#node-input-showLightness").prop('checked', false);
                    $("#node-input-showHue").prop('checked', true);
                }
            });
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });
            $("#node-input-format").on("change", function() {
                if ($(this).val() === "hex") {
                    $("#node-alpha-control").hide();
                }
                else {
                    $("#node-alpha-control").show();
                }
            });
            $('#node-input-topic').typedInput({
                default: 'str',
                typeField: $("#node-input-topicType"),
                types: ['str','msg','flow','global']
            });
        },
        oneditsave: function() {
            if (!$("#node-input-showPicker").is(':checked') && !$("#node-input-showValue").is(':checked')) {
                $("#node-input-showSwatch").prop('checked', true);
                this.showSwatch = true;
            }
        }
    });
</script>

<script type="text/html" data-template-name="ui_colour_picker">
    <div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> Group</label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row">
        <label><i class="fa fa-object-group"></i> Size</label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-label"><i class="fa fa-i-cursor"></i> Label</label>
        <input type="text" id="node-input-label">
    </div>
    <div class="form-row">
        <label for="node-input-format"><i class="fa fa-keyboard-o"></i> Format</label>
        <select id="node-input-format" style="width:156px;">
            <option value="hex">hex</option>
            <option value="hex8">hex8</option>
            <option value="hsl">hsl</option>
            <option value="hsv">hsv</option>
            <option value="rgb">rgb</option>
        </select>
        <select id="node-input-square" style="width:130px; margin-left:30px">
            <option value="false">round</option>
            <option value="true">square</option>
        </select>
    </div>
    <div class="form-row">
        <label>&nbsp;</label> Show hue slider : <input type="checkbox" id="node-input-showHue" style="display:inline-block; width:auto; vertical-align:baseline;">
        <br/>
        <label>&nbsp;</label> Show lightness slider : <input type="checkbox" id="node-input-showLightness" style="display:inline-block; width:auto; vertical-align:baseline;">
        <br/>
        <span id="node-alpha-control"><label>&nbsp;</label> Show transparency slider : <input type="checkbox" id="node-input-showAlpha" style="display:inline-block; width:auto; vertical-align:baseline;"></span>
    </div>
    <div class="form-row">
        If width is 4 or greater:<br/>
        <label>&nbsp;</label>
        Always show swatch : <input type="checkbox" checked id="node-input-showSwatch" style="display:inline-block; width:auto; vertical-align:top;">
        <br/>
        <label>&nbsp;</label>
        Always show picker : <input type="checkbox" checked id="node-input-showPicker" style="display:inline-block; width:auto; vertical-align:top;">
        <br/>
        <label>&nbsp;</label>
        Always show value field : <input type="checkbox" checked id="node-input-showValue" style="display:inline-block; width:auto; vertical-align:top;">
    </div>
    <div class="form-row">
        <label style="width:auto" for="node-input-passthru"><i class="fa fa-arrow-right"></i> If <code>msg</code> arrives on input, pass through to output: </label>
        <input type="checkbox" checked id="node-input-passthru" style="display:inline-block; width:auto; vertical-align:top;">
    </div>
    <div class="form-row">
        <label for="node-input-dynOutput"><i class="fa fa-envelope-o"></i> Send</label>
        <select id="node-input-dynOutput" style="width:60%">
            <option value="false">one value when released/closed</option>
            <option value="true">multiple values during editing</option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-outformat" style="padding-left: 25px; margin-right: -25px">Payload</label>
        <select id="node-input-outformat" style="width:60%">
            <option value="string">current value as a string</option>
            <option value="object">current value as an object</option>
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-topic" style="padding-left: 25px; margin-right: -25px">Topic</label>
        <input type="text" id="node-input-topic" placeholder="optional topic">
        <input type="hidden" id="node-input-topicType">
    </div>
    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  Class</label>
        <input type="text" id="node-input-className" placeholder="Optional CSS class name(s) for widget"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
        <input type="text" id="node-input-name">
    </div>
</script>
<script type="text/html" data-help-name="ui_colour_picker">
    <p>Adds a colour picker to the dashboard.</p>
    <p>If the group width is 4 or greater then the picker can be set to be visible at all times.</p>
    <p><b>Format</b> can be rgb, hex, hex8, hsv, or hsl. Transparency is supported for all except hex.</p>
    <p>If a <b>Topic</b> is specified, it will be added as <code>msg.topic</code>.</p>
    <p>Setting <code>msg.enabled</code> to <code>false</code> will disable the input.</p>
    <p>If set to ‘pass through mode’ a message arriving on the input will be evaluated for any colour format available
        as Format. If the conversion fails #000000 will be used.</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_form] --- -->
<script type="text/javascript">
    RED.nodes.registerType('ui_form',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb(176, 223, 227)',
        defaults: {
            name: {value: ''},
            label: {value: ''},
            group: {type: 'ui_group', required: true},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var width = v||0;
                    var currentGroup = $('#node-input-group').val()||this.group;
                    var groupNode = RED.nodes.node(currentGroup);
                    var valid = !groupNode || +width <= +groupNode.width;
                    $("#node-input-size").toggleClass("input-error",!valid);
                    return valid;
                }
            },
            height: {value: 0},
            options: {value:[{value:'', label :'', type:'', required:true}], validate:function(value) {
                    if (value.length ) {
                        for (var i = 0; i < value.length; i++) {
                            if (!value[i].value) {
                                return false;
                            }
                        }
                    }
                    else {
                        return false;
                    }
                    return true;
                }, required:true},
            formValue:{value:{}},
            payload: {value: ''},
            submit: {value: "submit"},
            cancel: {value: "cancel"},
            topic: {value: 'topic', validate: (RED.validators.hasOwnProperty('typedInput')?RED.validators.typedInput('topicType'):function(v) { return true})},
            topicType: {value: 'msg'},
            splitLayout: {value:''},
            className: {value: ''}
        },
        inputs:1,
        outputs:1,
        icon: "ui_form.png",
        paletteLabel: 'form',
        label: function() { return this.name || this.label || 'form'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            if ($("#node-input-submit").val() === null) { $("#node-input-submit").val("submit"); }
            if ($("#node-input-cancel").val() === null) { $("#node-input-cancel").val("cancel"); }
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });

            this.resizeRule = function(option,newWidth) {
                //option.find(".node-input-option-type").width(newWidth);
                //  option.find(".node-input-option-label").width(newWidth);
                //  option.find(".node-input-option-value").width(newWidth);
            }

            function generateOption(i, option) {
                var container = $('<li/>',{style:"margin:0; padding:8px 0px 0px; border-bottom:1px solid var(--red-ui-form-input-border-color, #ccc);"});
                var row = $('<div/>').appendTo(container);
                var row2 = $('<div/>',{style:"padding-top:5px; padding-left:175px;"}).appendTo(container);
                var row3 = $('<div/>',{style:"padding-top:5px; padding-left:120px;"}).appendTo(container);

                $('<i style="cursor:move; margin-left:3px;" class="node-input-option-handle fa fa-bars"></i>').appendTo(row);

                var labelField = $('<input/>',{class:"node-input-option-label", type:"text", style:"margin-left:7px; width:20%;", placeholder: RED._("node-red-dashboard/ui_form:ui_form.label.egName"), value:option.label}).appendTo(row);//.typedInput({default:'str',types:['str', 'num']});
                var valueClass ="node-input-option-value"
                if (!option.value) { valueClass ="node-input-option-value input-error"; }
                var valueField = $('<input/>',{class:valueClass, type:"text", style:"margin-left:7px; width:20%;", placeholder: RED._("node-red-dashboard/ui_form:ui_form.label.egName2"), value:option.value}).appendTo(row);//.typedInput({default:'str',types:['str','num','bool']});
                valueField.keyup(function() {
                    if ($(this).val() && $(this).hasClass('input-error')) {
                        $(this).removeClass('input-error')
                    }
                    else {
                        if (!$(this).val()) {
                            $(this).addClass('input-error')
                        }
                    }

                });
                // var typeField = $('<input/>',{class:"node-input-option-type",type:"text",style:"margin-left: 7px; width: 135px;", placeholder: 'Type', value:option.type}).appendTo(row).typedInput({default:'str',types:['str', 'num']});
                var typeField = $('<select/>',{class:"node-input-option-type",type:"text",style:"margin-left:7px; width:16%"}).appendTo(row);//.typedInput({default:'str',types:['str', 'num']});

                var arr = [
                  {val : "text", text: RED._("node-red-dashboard/ui_form:ui_form.label.text")},
                  {val : "multiline", text: RED._("node-red-dashboard/ui_form:ui_form.label.multiline")},
                  {val : "number", text: RED._("node-red-dashboard/ui_form:ui_form.label.number")},
                  {val : "email", text: RED._("node-red-dashboard/ui_form:ui_form.label.email")},
                  {val : "password", text: RED._("node-red-dashboard/ui_form:ui_form.label.password")},
                  {val : "checkbox", text: RED._("node-red-dashboard/ui_form:ui_form.label.checkbox")},
                  {val : "switch", text: RED._("node-red-dashboard/ui_form:ui_form.label.switch")},
                  {val : "date", text: RED._("node-red-dashboard/ui_form:ui_form.label.date")},
                  {val : "time", text: RED._("node-red-dashboard/ui_form:ui_form.label.time")}
                ];

                //var sel = $('<select>').appendTo('body');
                $(arr).each(function() {
                    var isSelected= false;
                    if (option.type == this.val) {
                        isSelected = true;
                    }
                    typeField.append($("<option>").attr('value',this.val).text(this.text).prop('selected',isSelected));
                });

                //var labelForRequried = $('<span/>',{style:"margin: 10px;"}).text('Required').appendTo(row);
                var requiredContainer= $('<div/>',{style:"display:inline-block; height:34px; width:13%; vertical-align: middle"}).appendTo(row);
                var requiredInnerContainer= $('<div/>',{style:"left:35%; position:relative; width:30px"}).appendTo(requiredContainer);
                var reqRow=$("<label />",{class:"switch",style:"top:10px; width:30px;"}).appendTo(requiredInnerContainer);
                //var required = $('<input/>',{class:"node-input-option-required",style:"margin: 5px;width:19%",type:"checkbox", checked:option.required}).appendTo(row);//labelForRequried);//.typedInput({default:'str',types:['str', 'num']});
                var required = $('<input/>',{class:"node-input-option-required", type:"checkbox", checked:option.required, style:"vertical-align:top;"}).appendTo(reqRow);//labelForRequried);//.typedInput({default:'str',types:['str', 'num']});
                var reqDiv=$("<div />",{class:"slider round"}).appendTo(reqRow);
                var vis = option.rows ? 'visible' : 'hidden';
                var rowsField = $('<input/>',{class:"node-input-option-rows", type:"number", style:"width:10%;", placeholder:'Rows', value:option.rows }).css('visibility',vis).appendTo(row);

                var finalspan = $('<div/>',{style:"display:inline-block; width:5%;"}).appendTo(row);
                var deleteButton = $('<a/>',{href:"#",class:"editor-button", style:"font-size:1.3em; left:45%; position:relative;"}).appendTo(finalspan);
                $('<i/>',{class:"fa fa-trash-o"}).appendTo(deleteButton);

                typeField.change(function(e){
                    if (e.target.value != 'multiline') {
                        rowsField.val(undefined)
                        option.rows = null;
                        rowsField.css('visibility','hidden')
                    } else {
                        rowsField.css('visibility','visible')
                        if (!rowsField[0].value) rowsField[0].value = 3;
                    }

                })

                deleteButton.click(function() {
                    container.find(".node-input-option-value").removeAttr('required')
                    container.css({"background":"var(--red-ui-secondary-background-inactive, #fee)"});
                    container.fadeOut(300, function() {
                        $(this).remove();
                    });
                });

                $("#node-input-option-container").append(container);
            }

            $("#node-input-add-option").click(function() {
                generateOption($("#node-input-option-container").children().length+1, {});
                $("#node-input-option-container-div").scrollTop($("#node-input-option-container-div").get(0).scrollHeight);
            });

            for (var i=0; i<this.options.length; i++) {
                var option = this.options[i];
                generateOption(i+1,option);
            }

            $('#node-input-topic').typedInput({
                default: 'str',
                typeField: $("#node-input-topicType"),
                types: ['str','msg','flow','global']
            });

            $( "#node-input-option-container" ).sortable({
                axis: "y",
                handle:".node-input-option-handle",
                cursor: "move"
            });
        },
        oneditsave: function() {
            var options = $("#node-input-option-container").children();
            var node = this;
            node.options = [];
            node.formValue = {};
            options.each(function(i) {
                var option = $(this);
                var o = {
                    label: option.find(".node-input-option-label").val(),//typedInput('value'),
                    value: option.find(".node-input-option-value").val(),//typedInput('value'),
                    type: option.find(".node-input-option-type").val(),//typedInput('value')
                    required: option.find(".node-input-option-required").is(':checked'),
                    rows: parseInt(option.find(".node-input-option-rows").val())
                };
                // o.value= o.value||o.label||(o.type+"_"+i);
                node.formValue[o.value]= o.type == "checkbox" || o.type == "switch" ? false : "";
                node.options.push(o);
            });
        },
        oneditresize: function() {
            var options = $("#node-input-option-container").children();
            var newWidth = ($("#node-input-option-container").width() - 175)/2;
            var node = this;
            options.each(function(i) {
                node.resizeRule($(this),newWidth);
            });
        }
    });
</script>
<script type="text/html" data-template-name="ui_form">

<style>
.switch {
    position: relative;
    display: inline-block;
    width: 30px;
    height: 18px;
}

.switch input {display:none;}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--red-ui-tertiary-border-color, #ccc);
    -webkit-transition: .4s;
    transition: .4s;
}

.slider:before {
    position: absolute;
    content: "";
    height: 15px;
    width: 15px;
    left: 2px;
    bottom: 2px;
    background-color: var(--red-ui-secondary-background, white);
    -webkit-transition: .4s;
    transition: .4s;
}

input:checked + .slider {
    background-color: #910000;
}

input:focus + .slider {
    box-shadow: 0 0 1px #2196F3;
}

input:checked + .slider:before {
    -webkit-transform: translateX(11px);
    -ms-transform: translateX(11px);
    transform: translateX(11px);
}

/* Rounded sliders */
.slider.round {
    border-radius: 34px;
}

.slider.round:before {
    border-radius: 50%;
}
</style>

    <div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> <span data-i18n="ui_form.label.group"></label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row">
        <label><i class="fa fa-object-group"></i> <span data-i18n="ui_form.label.size"></label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-label"><i class="fa fa-tag"></i> <span data-i18n="ui_form.label.label"></label>
        <input type="text" id="node-input-label" data-i18n="[placeholder]ui_form.label.optionalLabel">
    </div>
    <div class="form-row node-input-option-container-row" style="margin-bottom:0px; width:100%; min-width:520px">
        <label style="vertical-align:top;"><i class="fa fa-list-alt"></i> <span data-i18n="ui_form.label.formElements"></label>
        <div style="display:inline-block; width:78%; border:1px solid var(--red-ui-form-input-border-color, #ccc); border-radius:5px; box-sizing:border-box;">
          <div class="red-ui-tray-header" style="width:100%; display: inline-block; padding-top:10px; padding-bottom:10px; border-top:0px solid; border-radius:5px 5px 0 0; border-bottom:1px solid var(--red-ui-form-input-border-color, #ccc);">
              <div style="width:94%; display:inline-block; margin-left:27px">
                <div style="width:20%; text-align:center; float:left;" data-i18n="ui_form.label.label"></span></div>
                <div style="width:20%; text-align:center; float:left; margin-left:9px" data-i18n="node-red:common.label.name"></div>
                <div style="margin-left:7px; width:16%; text-align:center; float:left; margin-left:9px" data-i18n="ui_form.label.type"></div>
                <div style="width:16%; text-align:center; float:left;" data-i18n="ui_form.label.required"></div>
                <div style="width:10%; text-align:center; float:left;" data-i18n="ui_form.label.rows"></div>
                <div style="width:12%; text-align:center; float:left;" data-i18n="ui_form.label.remove"></div>
              </div>
          </div>
          <div id="node-input-option-container-div" style=" height: 257px; padding: 5px; overflow-y:scroll;">
            <ol id="node-input-option-container" style=" list-style-type:none; margin: 0;"></ol>
          </div>
        </div>
    </div>
    <div class="form-row">
        <a href="#" class="editor-button editor-button-small" id="node-input-add-option" style="margin-top: 4px; margin-left: 103px;"><i class="fa fa-plus"></i> <span data-i18n="ui_form.label.element"></span></a>
    </div>
    <div class="form-row">
        <label for="node-input-submit"><i class="fa fa-square"></i> <span data-i18n="ui_form.label.buttons"></label>
        <i class="fa fa-thumbs-o-up"></i> <input type="text" id="node-input-submit" data-i18n="[placeholder]ui_form.label.submitButtonText" style="width:35%;">
        <span style="margin-left:16px"><i class="fa fa-thumbs-o-down"></i></span>
        <input type="text" id="node-input-cancel" data-i18n="[placeholder]ui_form.label.cancelButtonText" style="width:35%;">
    </div>
    <div class="form-row">
        <label for="node-input-splitLayout"></label>
        <input type="checkbox" id="node-input-splitLayout" style="display:inline-block; width:auto; vertical-align:top;">
        <span data-i18n="ui_form.label.splitLayout">
    </div>
    <div class="form-row">
        <label for="node-input-topic"><i class="fa fa-tasks"></i> <span data-i18n="ui_form.label.topic"></label>
        <input type="text" id="node-input-topic" data-i18n="[placeholder]ui_form.label.optionalMsgTopic">
        <input type="hidden" id="node-input-topicType">
    </div>
    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  <span data-i18n="ui_form.label.className"></label>
        <input type="text" id="node-input-className" data-i18n="[placeholder]ui_form.label.classNamePlaceholder"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="node-red:common.label.name"></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]node-red:common.label.name">
    </div>
</script>
<script type="text/html" data-help-name="ui_form">
    <p>Adds a form to user interface.</p>
    <p>Helps to collect multiple value from the user on submit button click as an object in <code>msg.payload</code> </p>
    <p>Multiple input elements can be added using add elements button</p>
    <p>Each element contains following components:</p>
    <ul>
        <li> <b>Label</b> : Value that will be the label of the element in the user interface</li>
        <li> <b>Name</b> : Represents the key (variable name) in the <code>msg.payload</code> in which the value of the corresponding element present</li>
        <li> <b>Type</b> : Drop down option to select the type of input element</li>
        <li> <b>Required</b> : On switching on the user has to supply the value before submitting</li>
        <li> <b>Rows</b> : number of UI rows for multiline text input</li>
        <li> <b>Delete</b> : To remove the current element from the form</li>
    </ul>
    <p>Optionally the <b>Topic</b> field can be used to set the <code>msg.topic</code> property.</p>
    <p>The Cancel button can be hidden by setting it's value to be blank "".</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_text] --- -->
<script type="text/javascript">
    const fonts = [
        {
            value: "Arial,Arial,Helvetica,sans-serif",
            name: "Arial" 
        },
        {
            value: "Arial Black,Arial Black,Gadget,sans-serif",
            name: "Arial Black" 
        },
        {
            value: "Arial Narrow,Nimbus Sans L,sans-serif",
            name: "Arial Narrow" 
        },
        {
            value: "Century Gothic,CenturyGothic,AppleGothic,sans-serif",
            name: "Century Gothic" 
        },
        {
            value: "Copperplate,Copperplate Gothic Light,fantasy",
            name: "Copperplate" 
        },
        {
            value: "Courier,monospace",
            name: "Courier" 
        },
        {
            value: "Georgia,Georgia,serif",
            name: "Georgia" 
        },
        {
            value: "Gill Sans,Geneva,sans-serif",
            name: "Gill Sans" 
        },
        {
            value: "Impact,Impact,Charcoal,sans-serif",
            name: "Impact" 
        },
        {
            value: "Lucida Sans Typewriter,Lucida Console,Monaco,monospace", 
            name: "Lucida Console" 
        },
        {
            value: "Lucida Sans Unicode,Lucida Grande,sans-serif",
            name: "Lucida Sans" 
        },
        {
            value: "Palatino Linotype,Palatino,Book Antiqua,serif", 
            name: "Palatino Linotype" 
        },
        {
            value: "Tahoma,Geneva,sans-serif",
            name: "Tahoma" 
        },
        {
            value: "Times New Roman,Times,serif",
            name: "Times New Roman" 
        },
        {
            value: "Trebuchet MS,Helvetica,sans-serif",
            name: "Trebuchet MS" 
        },
        {
            value: "Verdana,Verdana,Geneva,sans-serif",
            name: "Verdana" 
        },
    ];


    RED.nodes.registerType('ui_text',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb(119, 198, 204)',
        defaults: {
            group: {type: 'ui_group', required:true},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var width = v||0;
                    var currentGroup = $('#node-input-group').val()||this.group;
                    var groupNode = RED.nodes.node(currentGroup);
                    var valid = !groupNode || +width <= +groupNode.width;
                    $("#node-input-size").toggleClass("input-error",!valid);
                    return valid;
                }
            },
            height: {value: 0},
            name: {value: ''},
            label: {value: 'text'},
            format: {value: '{{msg.payload}}'},
            layout: {value:'row-spread'},
            className: {value: ''},

            style: { value: false },
            font: { value: "" },
            fontSize: { value: 16 },
            color: { value: "#000" },
        },
        inputs:1,
        outputs:0,
        align: "right",
        icon: "ui_text.png",
        paletteLabel: 'text',
        label: function() { return this.name || (~this.label.indexOf("{{") ? null : this.label) || 'text'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });

            $(".nr-db-text-layout-"+(this.layout||'row-spread')).addClass('selected');

            [ ".nr-db-text-layout-row-left",".nr-db-text-layout-row-center",".nr-db-text-layout-row-right",
              ".nr-db-text-layout-row-spread",".nr-db-text-layout-col-center"].forEach(function(id) {
                    $(id).click(function(e) {
                        $(".nr-db-text-layout").removeClass('selected');
                        $(this).addClass('selected');
                        $('#node-input-layout').val(id.substring(".nr-db-text-layout-".length));
                        e.preventDefault();
                    })
              });

            const select = $("#node-select-font");
            fonts.forEach((font) => {
                var name = font.name;
                var val = font.value;
                $("<option/>", {
                    value: val,
                }).text(name).appendTo(select);
            });
            $(select).change(() => {
                const val = $("#node-select-font").val();
                $("#node-input-font").val(val);
                $("#node-test-text").css({
                    "font-family": val,
                }); 
            });
            $(select).val(this.font);
            $(select).change();

            $("#node-input-fontSize").spinner({
                min: 1,
                max: 100,
                spin: () => {
                    const val = $("#node-input-fontSize").val();
                    $("#node-test-text").css({
                        "font-size": val +"px",
                    }); 
                }
            });
            if (this.fontSize) {
                $("#node-test-text").css({
                    "font-size": this.fontSize +"px",
                }); 
            }

            $("#node-input-color").change(() => {
                const val = $("#node-input-color").val();
                $("#node-test-text").css({
                    "color": val,
                }); 
            });
            if (this.color) {
                $("#node-test-text").css({
                    "color": this.color
                }); 
            }

            $("#node-input-style").change(() => {
                const val = $("#node-input-style").prop("checked");
                if (val) {
                    $("#node-styles").show();
                }
                else {
                    $("#node-styles").hide();
                }
            });
            $("#node-input-style").change();

        }
    });
</script>

<script type="text/html" data-template-name="ui_text">
    <div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> Group</label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row">
        <label><i class="fa fa-object-group"></i> Size</label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-label"><i class="fa fa-i-cursor"></i> Label</label>
        <input type="text" id="node-input-label">
    </div>
    <div class="form-row">
        <label for="node-input-format"><i class="fa fa-i-cursor"></i> Value format</label>
        <input type="text" id="node-input-format" placeholder="{{msg.payload}}">
    </div>
    <div class="form-row">
        <label style="vertical-align: top"><i class="fa fa-th-large"></i> Layout</label>
        <div style="display:inline-block">
        <input type="hidden" id="node-input-layout"><input type="hidden" id="node-input-layoutAlign">
        <div>
            <a href="#" class="nr-db-text-layout nr-db-text-layout-row nr-db-text-layout-row-left">
                <span class="nr-db-text-layout-label">label</span>
                <span class="nr-db-text-layout-value">value</span>
                <div class="nr-db-text-layout-checkbox"></div>
            </a>
            <a href="#" class="nr-db-text-layout nr-db-text-layout-row nr-db-text-layout-row-center">
                <span class="nr-db-text-layout-label">label</span>
                <span class="nr-db-text-layout-value">value</span>
                <div class="nr-db-text-layout-checkbox"></div>
            </a>
            <a href="#" class="nr-db-text-layout nr-db-text-layout-row nr-db-text-layout-row-right">
                <span class="nr-db-text-layout-label">label</span>
                <span class="nr-db-text-layout-value">value</span>
                <div class="nr-db-text-layout-checkbox"></div>
            </a>
        </div>
        <div>
            <a href="#" class="nr-db-text-layout nr-db-text-layout-row nr-db-text-layout-row-spread">
                <span class="nr-db-text-layout-label">label</span>
                <span class="nr-db-text-layout-value">value</span>
                <div class="nr-db-text-layout-checkbox"></div>
            </a>
            <a href="#" class="nr-db-text-layout nr-db-text-layout-col nr-db-text-layout-col-center">
                <span class="nr-db-text-layout-label">label</span>
                <span class="nr-db-text-layout-value">value</span>
                <div class="nr-db-text-layout-checkbox"></div>
            </a>
        </div>
        </div>
    </div>

    <div class="form-row">
        <label><i class="fa fa-cog"></i> Style</label>
        <input type="checkbox" id="node-input-style" style="display: inline-block; width: auto; vertical-align: top;"/>
        <label for="node-input-style" style="width: 70%;"> Apply Style</label>
    </div>

    <div id="node-styles">
        <div class="form-row">
            <label for="node-input-font"><i class="fa fa-font"></i>  Font</label>
            <select id="node-select-font">
            </select>
            <input type="hidden" id="node-input-font"/>
        </div>
        <div class="form-row">
            <label for="node-input-fontSize"><i class="fa fa-text-height"></i>  Text Size</label>
            <input id="node-input-fontSize" value="16" style="width: 50px;"/>
        </div>
        <div class="form-row">
            <label for="node-input-color"><i class="fa fa-tint"></i>  Text Color</label>
            <input type="color" id="node-input-color" style="width: 50px;"/>
        </div>
        <div class="form-row">
            <label>&nbsp;</label>
            <input id="node-test-text" value="Enter Sample Here"/ style="width: 280px;">
        </div>
    </div>

    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  Class</label>
        <input type="text" id="node-input-className" placeholder="Optional CSS class name(s) for widget"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
        <input type="text" id="node-input-name">
    </div>


</script>
<style>
    .nr-db-text-layout {
        position:relative;
        display: inline-block;
        width: 90px;
        height: 60px;
        border-radius:3px;
        border:1px solid var(--red-ui-form-input-border-color, #bbb);
        cursor:pointer;
        color: #666;
        margin-right: 10px;
        margin-bottom: 10px;
    }
    .nr-db-text-layout.selected, .nr-db-text-layout:hover {
        border-color: var(--red-ui-form-input-border-selected-color, #333);
        color: var(--red-ui-secondary-text-color-selected, #333);
    }
    .nr-db-text-layout span {
        position: absolute;
    }
    .nr-db-text-layout-value {
        font-weight: bold;
    }
    .nr-db-text-layout-row span { top: 20px; }
    .nr-db-text-layout-row-left .nr-db-text-layout-label { left: 2px; }
    .nr-db-text-layout-row-left .nr-db-text-layout-value { left: 34px; }
    .nr-db-text-layout-row-spread .nr-db-text-layout-label { left: 2px; }
    .nr-db-text-layout-row-spread .nr-db-text-layout-value { right: 2px; }
    .nr-db-text-layout-row-center .nr-db-text-layout-label { left: 11px; }
    .nr-db-text-layout-row-center .nr-db-text-layout-value { right: 11px; }
    .nr-db-text-layout-row-right .nr-db-text-layout-label { right: 40px; }
    .nr-db-text-layout-row-right .nr-db-text-layout-value { right: 2px; }

    .nr-db-text-layout-col span { width: 90px;  text-align: center; left: 0px;}
    .nr-db-text-layout-col-center .nr-db-text-layout-label { top: 12px; }
    .nr-db-text-layout-col-center .nr-db-text-layout-value { top: 26px; }
    .nr-db-text-layout-checkbox {
        display: none;
        width: 10px;
        height: 10px;
        border-radius: 10px;
        border: 1px solid var(--red-ui-primary-border-color, #bbb);
        position: absolute;
        right: -5px;
        top: -5px;
        background: var(--red-ui-secondary-background, #fff);
    }
    .nr-db-text-layout.selected .nr-db-text-layout-checkbox {
        display:inline-block;
        box-shadow: inset 0px 0px 0px 2px #fff;
        background: #333;
        border-color: #333;
    }

</style>
<script type="text/html" data-help-name="ui_text">
    <p>Will display a non-editable text field on the user interface.</p>
    <p>Each received <code>msg.payload</code> will update the text based on the provided <b>Value Format</b>.</p>
    <p>The <b>Value Format</b> field can be used to change the displayed format and can contain valid HTML and
    <a href="https://scotch.io/tutorials/all-about-the-built-in-angularjs-filters" target="_blank">Angular filters</a>.</p>
    <p>For example: <code>{{value | uppercase}} &amp;deg;</code> will uppercase the payload text and add the degree symbol.</p>
    <p>The label can also be set by a message property by setting
    the field to the name of the property, for example <code>{{msg.topic}}</code>.</p>
    <p>The following icon fonts are also available: <a href="https://klarsys.github.io/angular-material-icons/" target="_blank">Material Design icon</a>
        <i>(e.g. 'check', 'close')</i> or a <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank">Font Awesome icon</a>
        <i>(e.g. 'fa-fire')</i>, or a <a href="https://github.com/Paul-Reed/weather-icons-lite/blob/master/css_mappings.md">Weather icon</a>.
        You can use the full set of google material icons if you add 'mi-' to the icon name. e.g. 'mi-videogame_asset'.</p>
    <p>The widget also has a class of <code>nr-dashboard-widget-{the_widget_label_with_underscores}</code> which can be used for additional 
        styling if required. You may need to use the <i>!important</i> flag to override the theme.</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_gauge] --- -->
<style>
    input.gauge-color {
        width: 100px;
        text-align: center;
    }
    input.gauge-color::-webkit-color-swatch {
        border: none;
    }
</style>
<script type="text/javascript">
    RED.nodes.registerType('ui_gauge',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb(119, 198, 204)',
        defaults: {
            name: {value: ''},
            group: {type: 'ui_group', required: true},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var width = v || 0;
                    var currentGroup = $('#node-input-group').val() || this.group;
                    var groupNode = RED.nodes.node(currentGroup);
                    var valid = !groupNode || +width <= +groupNode.width;
                    $("#node-input-size").toggleClass("input-error",!valid);
                    return valid;
                }
            },
            height: {value: 0},
            gtype: {value: 'gage'},
            title: {value: 'gauge'},
            label: {value: 'units'},
            format: {value: '{{value}}'},
            min: {value: 0, required: true, validate: RED.validators.number()},
            max: {value: 10, required: true, validate: RED.validators.number()},
            colors: {value: ["#00B500","#E6E600","#CA3838"]},
            seg1: {value: ""},
            seg2: {value: ""},
            diff: {value: false},
            className: {value: ''}
        },
        inputs:1,
        outputs:0,
        inputLabels: function() { return this.min+" - "+this.max; },
        align: "right",
        icon: "ui_gauge.png",
        paletteLabel: 'gauge',
        label: function() { return this.name || (~this.title.indexOf("{{") ? null : this.title) || ((this.gtype === "gage") ? "gauge" : this.gtype) || 'gauge'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            var setColour = function(id, value) {
                $(id).val(value);
                $(id).css("background-color", value);
                var rgb = tinycolor(value).toRgb();
                var level = ((rgb.r*299) + (rgb.g*587) + (rgb.b*114))/1000;
                var textColor = (level >= 128) ? '#111111' : '#eeeeee';
                $(id).css("color", textColor);
            }
            $(".gauge-color").on("change", function() {
                setColour("#"+$(this).attr("id"), $(this).val());
            });

            var defaultColors = ['#00B500', '#E6E600', '#CA3838'];

            if (this.colors) {
                for (var i=0; i<this.colors.length; i++) {
                    var value = this.colors[i] || defaultColors[i];
                    setColour("#node-input-color"+(i+1), value);
                }
            }
            else {
                for (var j=0; j<defaultColors.length; j++) {
                    setColour("#node-input-color"+(j+1), defaultColors[j]);
                }
            }
            if (this.gtype === undefined) {
                this.gtype = "gage";
                $("#node-input-gtype").val("gage");
            }
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });
            $("#node-input-gtype").on("change", function() {
                if (($(this).val() === "compass") || ($(this).val() === "wave")) {
                    $("#ui-gauge-colours").hide();
                    $("#ui-gauge-segments").hide();
                }
                else {
                    $("#ui-gauge-colours").show();
                    $("#ui-gauge-segments").show();
                }
                if ($(this).val() === "gage") {
                    $("#ui-gauge-diff").show();
                }
                else { $("#ui-gauge-diff").hide(); }
            });
            $("#node-input-min").on("change", function() {
                $("#seg-min").text($(this).val());
            });
            $("#node-input-max").on("change", function() {
                $("#seg-max").text($(this).val());
            });
        },
        oneditsave: function() {
            this.colors = [$("#node-input-color1").val(),$("#node-input-color2").val(),$("#node-input-color3").val()];
        }
    });
</script>

<script type="text/html" data-template-name="ui_gauge">
    <div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> Group</label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row">
        <label><i class="fa fa-object-group"></i> Size</label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-gtype"><i class="fa fa-list"></i> Type</label>
        <select id="node-input-gtype" style="width:150px">
            <option value="gage">Gauge</option>
            <option value="donut">Donut</option>
            <option value="compass">Compass</option>
            <option value="wave">Level</option>
        </select>
    </div>
    <div id="ui-gauge-labels">
        <div class="form-row">
            <label for="node-input-title"><i class="fa fa-i-cursor"></i> Label</label>
            <input type="text" id="node-input-title">
        </div>
        <div class="form-row" id="ui-gauge-format">
            <label for="node-input-format"><i class="fa fa-i-cursor"></i> Value format</label>
            <input type="text" id="node-input-format" placeholder="{{value}}">
        </div>
        <div class="form-row" id="ui-gauge-units">
            <label for="node-input-label"><i class="fa fa-i-cursor"></i> Units</label>
            <input type="text" id="node-input-label" placeholder="optional sub-label">
        </div>
    </div>
    <div class="form-row">
        <label for="node-input-min">Range</label>
        <span for="node-input-min">min</span>
        <input type="text" id="node-input-min" style="width:80px">
        <span for="node-input-max" style="margin-left:20px;">max</span>
        <input type="text" id="node-input-max" style="width:80px">
    </div>
    <div class="form-row" id="ui-gauge-colours">
        <label for="node-input-color1">Colour gradient</label>
        <input type="color" id="node-input-color1" class="gauge-color" style="width:100px;"/>
        <input type="color" id="node-input-color2" class="gauge-color" style="width:100px;"/>
        <input type="color" id="node-input-color3" class="gauge-color" style="width:100px;"/>
    </div>
    <div class="form-row" id="ui-gauge-segments">
        <label>Sectors</label>
        <span id="seg-min" style="display:inline-block; width:40px;">0</span>...
        <input type="text" id="node-input-seg1" style="text-align:center; width:87px;" placeholder="optional"> ...
        <input type="text" id="node-input-seg2" style="text-align:center; width:87px;" placeholder="optional"> ...
        <span id="seg-max" style="display:inline-block; width:40px; text-align:right">10</span>
    </div>
    <div class="form-row" id="ui-gauge-diff">
        <label></label> Fill gauge from centre.
        <input type="checkbox" id="node-input-diff" style="display:inline-block; width:auto; vertical-align:top;">
    </div>
    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  Class</label>
        <input type="text" id="node-input-className" placeholder="Optional CSS class name(s) for widget"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
        <input type="text" id="node-input-name">
    </div>
</script>
<script type="text/html" data-help-name="ui_gauge">
    <p>Adds a gauge type widget to the user interface.</p>
    <p>The <code>msg.payload</code> is searched for a numeric <i>value</i> and is formatted in accordance with
    the defined <b>Value Format</b>, which can then be formatted using
    <a href="https://docs.angularjs.org/api/ng/filter" target="_blank">Angular filters</a>.</p>
    <p>For example : <code>{{value | number:1}}%</code> will round the value to one decimal place and append a % sign.</p>
    <p>The colours of each of 3 sectors can be specified and the gauge will blend between them.
    The colours should be specified in hex (#rrggbb) format.</p>
    <p>If you specify numbers for the sectors then the colours changes per sector.
    If not specified the colours are blended across the total range.</p>
    <p>The gauge has several modes. Regular gauge, donut, compass and wave.</p>
    <p>The label can also be set by a message property by setting
    the field to the name of the property, for example <code>{{msg.topic}}</code>.</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_chart] --- -->
<style>
    input.series-color {
        width: 100px;
        text-align: center;
    }
    input.series-color::-webkit-color-swatch {
        border: none;
    }
</style>
<script type="text/javascript">
    RED.nodes.registerType('ui_chart',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb(119, 198, 204)',
        defaults: {
            name: {value: ''},
            group: {type: 'ui_group', required: true},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var width = v||0;
                    var currentGroup = $('#node-input-group').val()||this.group;
                    var groupNode = RED.nodes.node(currentGroup);
                    var valid = !groupNode || +width <= +groupNode.width;
                    $("#node-input-size").toggleClass("input-error",!valid);
                    return valid;
                }},
            height: {value: 0},
            label: {value: 'chart'},
            chartType: {value: 'line'},
            legend: {value: 'false'},
            xformat: {value: 'HH:mm:ss'},
            interpolate: {value: 'linear', required:true},
            nodata: {value: ''},
            dot: {value: false},
            ymin: {value: '', validate:function(value) { return value === '' || RED.validators.number(); }},
            ymax: {value: '', validate:function(value) { return value === '' || RED.validators.number(); }},
            removeOlder: {value: 1, validate:RED.validators.number(), required:true},
            removeOlderPoints: {value: '', validate:function(value) { return value === '' || RED.validators.number(); }},
            removeOlderUnit: {value: '3600', required:true},
            cutout: {value: 0},
            useOneColor: {value: false},
            useUTC: {value: false},
            colors: {value: ['#1F77B4', '#AEC7E8', '#FF7F0E', '#2CA02C', '#98DF8A', '#D62728', '#FF9896', '#9467BD', '#C5B0D5']},
            outputs: {value: 1},
            useDifferentColor: {value: false},
            className: {value: ''}
        },
        inputs:1,
        outputs:1,
        inputLabels: function() { return this.chartType; },
        outputLabels: ["chart state"],
        align: "right",
        icon: "ui_chart.png",
        paletteLabel: 'chart',
        label: function() { return this.name || (~this.label.indexOf("{{") ? null : this.label) || 'chart'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            var oldouts = this.outputs;
            if (RED.nodes.filterLinks({source:{id:this.id},sourcePort:1}).length > 0) { this.outputs = 2; }
            else { this.outputs = 1; }
            if (this.outputs !== oldouts) { this.changed = true; }
            if (!$("#node-input-chartType").val()) {
                $("#node-input-chartType").val("line");
            }
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });
            $("#node-input-chartType").on("change", function() {
                $("#legend-show").hide();
                $("#show-useDifferentColor").hide();
                if ($(this).val() === "horizontalBar") {
                    $("#y-label-show").hide();
                    $("#x-label-show").show();
                }
                else {
                    $("#y-label-show").show();
                    $("#x-label-show").hide();
                }
                if ($(this).val() === "line") {
                    $("#x-axis-show").show();
                    $("#x-axis-label-show").show();
                    $("#interpolate-show").show();
                    $("#legend-show").show();
                    $("#y-axis-show").show();
                    $("#hole-size-show").hide();
                    $("#show-dot-field").show();
                    $("#show-useOneColor").hide();
                }
                else {
                    $("#x-axis-show").hide();
                    $("#x-axis-label-show").hide();
                    $("#interpolate-show").hide();
                    $("#show-dot-field").hide();
                    if (($(this).val() === "bar")||($(this).val() === "horizontalBar")) {
                        $("#show-useOneColor").show();
                        $("#legend-show").show();
                    }
                    else {
                        $("#show-useOneColor").hide();
                    }
                    if ($(this).val() === "pie") {
                        $("#y-axis-show").hide();
                        $("#legend-show").show();
                        $("#hole-size-show").show();
                    }
                    else if ($(this).val() === "polar-area") {
                        $("#y-axis-show").show();
                        $("#legend-show").show();
                        $("#hole-size-show").hide();
                        $("#show-useDifferentColor").show();
                    }
                    else if ($(this).val() === "radar") {
                        $("#y-axis-show").show();
                        $("#legend-show").show();
                        $("#hole-size-show").hide();
                    }
                    else {
                        $("#y-axis-show").show();
                        $("#hole-size-show").hide();
                    }
                }

            });
            var setColour = function(id, value) {
                $(id).val(value);
                $(id).css("background-color", value);
                var rgb = tinycolor(value).toRgb();
                var level = ((rgb.r*299) + (rgb.g*587) + (rgb.b*114))/1000;
                var textColor = (level >= 128) ? '#111111' : '#eeeeee';
                $(id).css("color", textColor);
            }
            $(".series-color").on("change", function() {
                setColour("#"+$(this).attr("id"), $(this).val());
            });
            var oval = $("#node-input-xformat").val();
            if (!oval) { $("#node-input-xformat").val("HH:mm:ss"); }
            var odef = 'custom';
            if (oval === "HH:mm:ss") { odef = oval; }
            if (oval === "HH:mm") { odef = oval; }
            if (oval === "Y-M-D") { odef = oval; }
            if (oval === "D/M") { odef = oval; }
            if (oval === "dd HH:mm") { odef = oval; }
            if (oval === "auto") { odef = oval; }
            var ohms = {value: "HH:mm:ss", label: RED._("node-red-dashboard/ui_chart:ui_chart.label.HHmmss"), hasValue: false};
            var ohm = {value: "HH:mm", label: RED._("node-red-dashboard/ui_chart:ui_chart.label.HHmm"), hasValue: false};
            var oymd = {value: "Y-M-D", label: RED._("node-red-dashboard/ui_chart:ui_chart.label.yearMonthDate"), hasValue: false};
            var odm = {value: "D/M", label: RED._("node-red-dashboard/ui_chart:ui_chart.label.dateMonth"), hasValue: false};
            var oahm = {value: "dd HH:mm", label: RED._("node-red-dashboard/ui_chart:ui_chart.label.dayHHmm"), hasValue: false};
            var ocus = {value: "custom", label: RED._("node-red-dashboard/ui_chart:ui_chart.label.custom"), icon: "red/images/typedInput/az.png"};
            var oaut = {value: "auto", label: RED._("node-red-dashboard/ui_chart:ui_chart.label.automatic"), hasValue: false};
            $("#node-input-xformat").typedInput({
                default: odef,
                types:[ ohms, ohm, oahm, odm, oymd, ocus, oaut ]
            });
            var defaultColors = ['#1F77B4', '#AEC7E8', '#FF7F0E', '#2CA02C', '#98DF8A', '#D62728', '#FF9896', '#9467BD', '#C5B0D5'];

            if (this.colors) {
                for (var i=0; i<this.colors.length; i++) {
                    var value = this.colors[i] || defaultColors[i];
                    setColour("#node-input-color"+(i+1), value);
                }
            }
            else {
                for (var c=0; c<defaultColors.length; c++) {
                    setColour("#node-input-color"+(c+1), defaultColors[c]);
                }
            }

        },
        oneditsave: function() {
            if ($("#node-input-xformat").typedInput('type') !== 'custom') {
                $("#node-input-xformat").val($("#node-input-xformat").typedInput('type'));
            }
            this.colors = [$("#node-input-color1").val(),$("#node-input-color2").val(),$("#node-input-color3").val(),
            $("#node-input-color4").val(),$("#node-input-color5").val(),$("#node-input-color6").val(),
            $("#node-input-color7").val(),$("#node-input-color8").val(),$("#node-input-color9").val()];
        }
    });
</script>

<script type="text/html" data-template-name="ui_chart">
    <div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> <span data-i18n="ui_chart.label.group"></label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row">
        <label><i class="fa fa-object-group"></i> <span data-i18n="ui_chart.label.size"></label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-label"><i class="fa fa-i-cursor"></i> <span data-i18n="ui_chart.label.label"></label>
        <input type="text" id="node-input-label" data-i18n="[placeholder]ui_chart.label.optionalChartTitle">
    </div>
    <div class="form-row">
        <label for="node-input-removeOlder"><i class="fa fa-line-chart"></i> <span data-i18n="ui_chart.label.type"></label>
        <select id="node-input-chartType" style="width:159px; font-family:'FontAwesome','Helvetica Neue', Helvetica, Arial, sans-serif">
            <option value="line" data-i18n="[html]ui_chart.label.lineChart"></option>
            <option value="bar" data-i18n="[html]ui_chart.label.barChart"></option>
            <option value="horizontalBar" data-i18n="[html]ui_chart.label.barChartH"></option>
            <option value="pie" data-i18n="[html]ui_chart.label.pieChart"></option>
            <option value="polar-area" data-i18n="[html]ui_chart.label.polarAreaChart"></option>
            <option value="radar" data-i18n="[html]ui_chart.label.radarChart"></option>
        </select>
        <div id="show-dot-field" style="display:inline-block;">
            <input type="checkbox" id="node-input-dot" style="display:inline-block; width:auto; vertical-align:baseline; margin-left:40px; margin-right:5px;"><span data-i18n="ui_chart.label.enlargePoints">
        </div>
    </div>
    <div class="form-row" id="x-axis-show">
        <label for="node-input-removeOlder" data-i18n="ui_chart.label.xAxis"></label>
        <label for="node-input-removeOlder" style="width:auto" data-i18n="ui_chart.label.last"></label>
        <input type="text" id="node-input-removeOlder" style="width:50px;">
        <select id="node-input-removeOlderUnit" style="width:80px;">
            <option value="1" data-i18n="ui_chart.label.seconds"></option>
            <option value="60" data-i18n="ui_chart.label.minutes"></option>
            <option value="3600" data-i18n="ui_chart.label.hours"></option>
            <option value="86400" data-i18n="ui_chart.label.days"></option>
            <option value="604800" data-i18n="ui_chart.label.weeks"></option>
        </select>
        <label for="node-input-removeOlderPoints" style="width:auto; margin-left:10px; margin-right:10px;" data-i18n="ui_chart.label.or"></label>
        <input type="text" id="node-input-removeOlderPoints" style="width:60px;" placeholder="1000">
        <span style="margin-left:5px;" data-i18n="ui_chart.label.points"></span>
    </div>
    <div class="form-row" id="x-axis-label-show">
        <label for="node-input-xformat" data-i18n="ui_chart.label.xAxisLabel"></label>
        <input type="text" id="node-input-xformat" style="width:250px;">
        <input type="checkbox" id="node-input-useUTC" style="display:inline-block; width:auto; vertical-align:baseline; margin-left:8px; margin-right:4px;"> <span data-i18n="ui_chart.label.asUTC"></span>
    </div>
    <div class="form-row" id="y-axis-show">
        <label id="y-label-show" for="node-input-ymin" data-i18n="ui_chart.label.yAxis"></label>
        <label id="x-label-show" for="node-input-ymin" data-i18n="ui_chart.label.xAxis"></label>
        <label for="node-input-ymin" style="width:auto" data-i18n="ui_chart.label.min"></label>
        <input type="text" id="node-input-ymin" style="width:92px">
        <label for="node-input-ymax" style="width:auto; margin-left:20px;" data-i18n="ui_chart.label.max"></label>
        <input type="text" id="node-input-ymax" style="width:92px">
    </div>
    <div class="form-row" id="legend-show">
        <label for="node-input-legend" data-i18n="ui_chart.label.legend"></label>
        <select id="node-input-legend" style="width:120px;">
            <option value="false" data-i18n="ui_chart.label.none"></option>
            <option value="true" data-i18n="ui_chart.label.show"></option>
        </select>
        <span id="interpolate-show">&nbsp;&nbsp;&nbsp;&nbsp;<span data-i18n="ui_chart.label.interpolate"></span>
            <select id="node-input-interpolate" style="width:120px;">
                <option value="linear" data-i18n="ui_chart.label.linear"></option>
                <option value="step" data-i18n="ui_chart.label.step"></option>
                <option value="bezier" data-i18n="ui_chart.label.bezier"></option>
                <option value="cubic" data-i18n="ui_chart.label.cubic"></option>
                <option value="monotone" data-i18n="ui_chart.label.cubicMono"></option>
            </select>
        </span>
        <span id="hole-size-show">&nbsp;&nbsp;&nbsp;&nbsp;<span data-i18n="ui_chart.label.cutout"></span>
            <input type="text" id="node-input-cutout" style="width:35px"> %
        </span>
    </div>
    <div id="show-useOneColor" style="display:none; height:24px;">
        <input type="checkbox" id="node-input-useOneColor" style="display:inline-block; width:auto; vertical-align:baseline; margin-left:105px; margin-right:5px;"><span data-i18n="ui_chart.label.useFirstColourForAllBars"></span>
    </div>
    <div class="form-row" id="ui-chart-colours">
        <label for="node-input-color1" data-i18n="ui_chart.label.seriesColours"></label>
        <input type="color" id="node-input-color1" class="series-color" style="width:100px;"/>
        <input type="color" id="node-input-color2" class="series-color" style="width:100px;"/>
        <input type="color" id="node-input-color3" class="series-color" style="width:100px;"/>
        <div style="margin-top:5px; margin-left:104px;">
            <input type="color" id="node-input-color4" class="series-color" style="width:100px;"/>
            <input type="color" id="node-input-color5" class="series-color" style="width:100px;"/>
            <input type="color" id="node-input-color6" class="series-color" style="width:100px;"/>
        </div>
        <div style="margin-top:5px; margin-left:104px;">
            <input type="color" id="node-input-color7" class="series-color" style="width:100px;"/>
            <input type="color" id="node-input-color8" class="series-color" style="width:100px;"/>
            <input type="color" id="node-input-color9" class="series-color" style="width:100px;"/>
        </div>
    </div>
    <div id="show-useDifferentColor" class="form-row">
         <label></label>
         <input type="checkbox" id="node-input-useDifferentColor" style="display:inline-block; width:auto; vertical-align:top;">
             <span data-i18n="ui_chart.label.useDifferentColor"></span>
         </input>
    </div>
    <div class="form-row">
        <label for="node-input-nodata" data-i18n="ui_chart.label.blankLabel"></label>
        <input type="text" id="node-input-nodata" data-i18n="[placeholder]ui_chart.label.displayThisTextBeforeValidDataArrives">
    </div>
    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  <span data-i18n="ui_chart.label.className"></span></label>
        <input type="text" id="node-input-className" data-i18n="[placeholder]ui_chart.label.classNamePlaceholder"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="node-red:common.label.name"></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]node-red:common.label.name">
    </div>
</script>
<script type="text/html" data-help-name="ui_chart">
    <p>Plots the input values on a chart. This can either be a time based line chart, a bar chart (vertical or horizontal),
    or a pie chart.</p>
    <p>Each input <code>msg.payload</code> value will be converted to a number. If the
    conversion fails, the message is ignored.</p>
    <p>Minimum and Maximum <b>Y</b> axis values are optional. The graph will auto-scale to any values received.</p>
    <p>Multiple series can be shown on the same chart by using a different <code>msg.topic</code>
    value on each input message. Multiple bars of the same series can be shown by using the <code>msg.label</code> property.</p>
    <p>The <b>X</b> axis defines a time window or a maximum number of points to display. Older data will be automatically removed from the graph.
    The axis labels can be formatted using a <a href="https://momentjs.com/docs/#/displaying/format/" target="_blank">
    Moment.js time formatted</a> string.</p>
    <p>Inputting a <code>msg.payload</code> containing a blank array <code>[]</code> will clear the chart.</p>
    <p>See <b><a href="https://github.com/node-red/node-red-dashboard/blob/master/Charts.md" target="_new">this information</a></b>
    for how to pre-format data to be passed in as a complete chart.</p>
    <p>The <b>Blank label</b> field can be used to display some text before any valid data is received.</p>
    <p>The label can also be set by a message property by setting
    the field to the name of the property, for example <code>{{msg.topic}}</code>.</p>
    <p>The node output contains an array of the chart state that can be persisted if needed. This can be passed
    into the chart node to re-display the persisted data.</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_audio] --- -->
<!DOCTYPE html>

<script type="text/javascript">
(function() {
    var myvoice = 0;
    var voices;
    RED.nodes.registerType('ui_audio',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        paletteLabel: 'audio out',
        color: 'rgb(119, 198, 204)',
        defaults: {
            name: {value:""},
            group: {type: 'ui_group', required: true},
            voice: {value:""},
            always: {value:""}
        },
        inputs:1,
        outputs:0,
        icon: "feed.png",
        align: "right",
        label: function() { return this.name||"audio out"; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        onpaletteadd: function() {
            if ('speechSynthesis' in window) { voices = window.speechSynthesis.getVoices(); }
        },
        oneditprepare: function() {
            if ('speechSynthesis' in window) {
                voices = window.speechSynthesis.getVoices();
                for (i = 0; i < voices.length ; i++) {
                    //console.log(i,voices[i].name,voices[i].lang,voices[i].voiceURI,voices[i].default);
                    var option = document.createElement('option');
                    option.textContent = i + " : " + voices[i].name + ' (' + voices[i].lang + ')';
                    if (voices[i].default) { option.textContent += ' -- DEFAULT'; }
                    option.setAttribute('value', voices[i].voiceURI);
                    document.getElementById("node-input-voice").appendChild(option);
                }
                $('#node-input-voice').val(this.voice || 0);
            }
            else {
                $('#voice-input-row').hide();
            }

            $("#node-input-voice").on("change", function() {
                myvoice = this.voice = $("#node-input-voice").val();
            });
        }
    });
})();
</script>

<script type="text/html" data-template-name="ui_audio">
    <div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> Group</label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row" id="voice-input-row">
        <label for="node-input-voice"><i class="fa fa-language"></i> TTS Voice</label>
        <select id="node-input-voice" style="width:70%"></select>
    </div>
    <div class="form-row">
        <label for="node-input-always"></label>
        <input type="checkbox" checked id="node-input-always" style="display:inline-block; width:auto; vertical-align:top;">
        Play audio when window not in focus.
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
        <input type="text" id="node-input-name" placeholder="Name">
    </div>
</script>
<script type="text/html" data-help-name="ui_audio">
    <p>Plays audio or text to speech (TTS) in the dashboard.</p>
    <p>To work the dashboard web page must be open.</p>
    <p>Expects <code>msg.payload</code> to contain a buffer of a <b>wav</b> or <b>mp3</b> file.</p>
    <p>If your browser has native support for Text-to-Speech then a <code>msg.payload</code>
    can also be a <b>string</b> to be read aloud.</p>
    <p>Optionally setting <code>msg.level</code> from 0 to 100 will change the volume from 0 to 100%. Default is 100%.
    In audio mode you can go up to 300, but you may get distortion.</p>
    <p>When a <code>msg.reset</code> is available with value <code>true</code>, then playback of the current audio fragment will be stopped.</p>
    <p>The <b>node status</b> reflects the current playback status:
    <ul>
        <li><b>started:</b> the audio fragment playback has been started.</li>
        <li><b>reset:</b> the audio fragment playback has been reset (i.e. stopped before completed).</li>
    </ul>
    As soon as the audio fragment playback is completed, the node status will be cleared automatically.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_toast] --- -->
<script type="text/javascript">
    RED.nodes.registerType('ui_toast', {
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb(119, 198, 204)',
        defaults: {
            position: {value: 'top right'},
            displayTime: {value: '3'},
            highlight: {value: ''},
            sendall: {value: true},
            outputs: {value: 0},
            ok: {value: 'OK', required: true},
            cancel: {value: ''},
            raw: {value: false},
            className: {value: ''},
            topic: {value: ''},
            name: {value: ''}
        },
        inputs:1,
        outputs:0,
        align: "right",
        icon: "ui_toast.png",
        paletteLabel: 'notification',
        label: function() { return this.name || (this.position==="prompt" ? "show dialog" : (this.position==="dialog" ? "show dialog" : "show notification")); },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            $("#node-input-position").on("change", function() {
                if ($("#node-input-position option:selected").val() === 'dialog') {
                    $("#node-toast-displaytime").hide();
                    $("#node-toast-highlightcolor").hide();
                    $("#node-toast-sendall").hide();
                    $("#node-dialog-displayok").show();
                    $("#node-dialog-displaycancel").show();
                    $("#node-dialog-topic").show();
                }
                else if ($("#node-input-position option:selected").val() === 'prompt') {
                    $("#node-toast-displaytime").hide();
                    $("#node-toast-highlightcolor").hide();
                    $("#node-toast-sendall").hide();
                    $("#node-dialog-displayok").show();
                    $("#node-dialog-displaycancel").show();
                    $("#node-dialog-topic").show();
                    if (typeof $("#node-input-cancel").val() !== "string" || $("#node-input-cancel").val() === "" ) {
                        $("#node-input-cancel").val("Cancel");
                    }
                }
                else {
                    $("#node-toast-displaytime").show();
                    $("#node-toast-highlightcolor").show();
                    $("#node-toast-sendall").show();
                    $("#node-dialog-displayok").hide();
                    $("#node-dialog-displaycancel").hide();
                    $("#node-dialog-topic").show();
                }
            });
        },
        oneditsave: function() {
            if ($("#node-input-position option:selected").val() === 'dialog') { this.outputs = 1; }
            else if ($("#node-input-position option:selected").val() === 'prompt') { this.outputs = 1; }
            else { this.outputs = 0; }
        }
    });
</script>

<script type="text/html" data-template-name="ui_toast">
    <div class="form-row">
        <label for="node-input-position"><i class="fa fa-th-large"></i> Layout</label>
        <select type="text" id="node-input-position" style="display:inline-block; width:70%; vertical-align:baseline;">
            <option value="top right">Top Right</option>
            <option value="bottom right">Bottom Right</option>
            <option value="top left">Top Left</option>
            <option value="bottom left">Bottom Left</option>
            <option value="dialog">OK / Cancel Dialog</option>
            <option value="prompt">OK / Cancel Dialog with Input</option>
        </select>
    </div>
    <div class="form-row" id="node-toast-displaytime">
        <label for="node-input-displayTime"><i class="fa fa-clock-o"></i> Timeout (S)</label>
        <input type="text" id="node-input-displayTime" placeholder="[msg.timeout]">
    </div>
    <div class="form-row" id="node-toast-highlightcolor">
        <label for="node-input-highlight"><i class="fa fa-square-o"></i> Border</label>
        <input type="text" id="node-input-highlight" placeholder="(optional) border highlight colour">
    </div>
    <div class="form-row" id="node-toast-sendtoall">
        <label style="width:auto" for="node-input-sendall"><i class="fa fa-arrow-right"></i> Send to all browser sessions. </label>
        <input type="checkbox" checked id="node-input-sendall" style="display:inline-block; width:auto; vertical-align:baseline;">
    </div>
    <div class="form-row" id="node-dialog-displayok">
        <label for="node-input-ok"><i class="fa fa-check"></i> Default action label</label>
        <input type="text" id="node-input-ok" placeholder="label for OK button">
    </div>
    <div class="form-row" id="node-dialog-displaycancel">
        <label for="node-input-cancel"><i class="fa fa-times"></i> Secondary action label</label>
        <input type="text" id="node-input-cancel" placeholder="(optional label for Cancel button)">
    </div>
    <div class="form-row" id="node-toast-raw">
        <label style="width:auto" for="node-input-raw"><i class="fa fa-exclamation-triangle"></i> Accept raw HTML/JavaScript input in msg.payload to format popup.</label>
        <input type="checkbox" id="node-input-raw" style="display:inline-block; width:auto; vertical-align:baseline;">
    </div>
    <div class="form-row" id="node-dialog-className">
        <label for="node-input-className"><i class="fa fa-code"></i> Class</label>
        <input type="text" id="node-input-className" placeholder="[msg.className]">
    </div>
    <div class="form-row" id="node-dialog-topic">
        <label for="node-input-topic"><i class="fa fa-tasks"></i> Topic</label>
        <input type="text" id="node-input-topic" placeholder="[msg.topic]">
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> Name</label>
        <input type="text" id="node-input-name" placeholder="Name">
    </div>
    <div class="form-tips"><b>Note</b>: checking <i>Accept raw HTML/JavaScript</i> can allow injection of code.
    Ensure the input comes from trusted sources.</span></div>
</script>
<script type="text/html" data-help-name="ui_toast">
    <p>Shows <code>msg.payload</code> as a popup notification or OK / Cancel dialog
    message on the user interface.</p>
    <p>If a <code>msg.topic</code> is available it will be used as the title.</p>
    <p>If you do not set an optional border highlight colour, then it can be set dynamically by <code>msg.highlight</code>.</p>
    <p>You may also configure the position and duration of the toast notifications. If you leave the timeout blank
    it can be set by <code>msg.timeout</code>. This does not apply to OK/Cancel dialogs.
    <p>The dialog returns a <code>msg.payload</code> string of whatever you configure
    the button label(s) to be. The second (cancel) button is optional, as is the return
    value of <code>msg.topic</code>.</p>
    <p>If you select 'OK, Cancel and Input' mode then <code>msg.payload</code> will contain
    any text input by the user, rather than the OK button text.</p>
    <p>The OK and Cancel button labels can be replaced by using <code>msg.ok</code> and <code>msg.cancel</code></p>
    <p>Sending a blank payload will remove any active dialog without sending any data.</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent element. This way you can style the card and the elements inside it with custom CSS.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_ui_control] --- -->
<script type="text/javascript">
(function () {
    // convert to i18 text
    function c_(x) {
        return RED._("node-red-dashboard/ui_ui_control:ui_ui_control."+x);
    }

    RED.nodes.registerType('ui_ui_control', {
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb( 63, 173, 181)',
        defaults: {
            name: {value:""},
            events: {value:"all"}
        },
        inputs:1,
        outputs:1,
        align: "right",
        icon: "ui_link.png",
        paletteLabel: 'ui control',
        label: function() { return this.name || "ui control"; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        outputLabels: function() { return this.events; },
        oneditprepare: function() {
            var node = this;
            var sel = $("#node-input-events");
            for (var name of ["all", "change", "connect"]) {
                var text = c_("events."+name);
                $("<option/>").val(name).text(text).appendTo(sel);
            }
            $(sel).val(node.events);
        },
    });
})();
</script>

<script type="text/html" data-template-name="ui_ui_control">
    <div class="form-row">
        <label for="node-input-events"><i class="fa fa-sign-out"></i> <span data-i18n="ui_ui_control.label.output"></span></label>
        <select id="node-input-events" style="width:70%;">
        </select>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="ui_ui_control.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]ui_ui_control.placeholder.name">
    </div>
</script>
<script type="text/html" data-help-name="ui_ui_control">
    <p>Allows dynamic control of the Dashboard.</p>
    <p>The default function is to change the currently displayed tab. <code>msg.payload</code>
    should either be an object of the form <code>{"tab":"my_tab_name"}</code>, or just be the <b>tab name</b>
    or <b>numeric index</b> (from 0) of the tab or link to be displayed.</p>
    <p>Sending a blank tab name "" will refresh the current page.
    You can also send "+1" for next tab and "-1" for previous tab.</p>
    <p>Dashboard pages (i.e. "tabs") can be controlled by sending a <code>msg.payload</code> object with the format
    <pre>{"tabs": {"hide": "tab_name_to_hide", "disable": ["secret_tab", "unused_stuff"]}}</pre>.
    There are 2 toggle states available: <b>show</b>/<b>hide</b> and <b>enable</b>/<b>disable</b></p>
    <p>Visibility of individual groups of widgets can controlled by a payload like
    <pre>{"group": {"hide": ["tab_name_group_name_with_underscores"], "show": ["reveal_another_group"], "focus": true}}</pre>
    where <b>focus</b> is optional and will cause the screen to scroll to show that group if required. 
    You can also use properties `open` and `close` to set the state of a group that can be controlled by the user. The group
    names are the IDs of the groups and are typically formed from the <i>tab name</i> plus <i>group name</i> joined with
    underscores replacing all spaces.</p>
    <p>When any browser client connects or loses connection, changes tab, or expands or collapses a group this node will emit a <code>msg</code> containing:</p>
    <ul>
    <li><code>payload</code> - <i>connect</i>, <i>lost</i>, <i>change</i>, or <i>group</i>.
    <li><code>socketid</code> - the ID of the socket (this will change every time the browser reloads the page).
    <li><code>socketip</code> - the ip address from where the connection originated.
    <li><code>tab</code> - the number of the tab. (only for 'change' event).
    <li><code>name</code> - the name of the tab. (only for 'change' event).
    <li><code>group</code> - the name of the group. (only for 'group' event).
    <li><code>open</code> - the state of the group. (only for 'group' event).
    </ul>
    <p>Optional - report only connect events - useful to use to trigger a resend of data to a new client without needing to filter out other events.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_template] --- -->
<script type="text/javascript">
    // convert to i18 text
    function c_(x) {
        return RED._("node-red-dashboard/ui_template:ui_template."+x);
    }

    RED.nodes.registerType('ui_template',{
        category: RED._("node-red-dashboard/ui_base:ui_base.label.category"),
        color: 'rgb( 63, 173, 181)',
        defaults: {
            group: {type: 'ui_group', required:false},
            name: {value: ''},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var valid = true
                    if (this.templateScope !== 'global') {
                        var width = v||0;
                        var currentGroup = $('#node-input-group').val()||this.group;
                        var groupNode = RED.nodes.node(currentGroup);
                        valid = !groupNode || +width <= +groupNode.width;
                        $("#node-input-size").toggleClass("input-error",!valid);
                    }
                    return valid;
                }},
            height: {value: 0},
            format: {value: '<div ng-bind-html="msg.payload"></div>'},
            storeOutMessages: {value: true},
            fwdInMessages: {value: true},
            resendOnRefresh: {value: true},
            templateScope: {value: 'local'},
            className: {value: ''}
        },
        inputs:1,
        outputs:1,
        icon: "ui_template.png",
        paletteLabel: 'template',
        label: function() { return this.name || 'template'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            if (RED.editor.hasOwnProperty("editText") && typeof RED.editor.editText === "function") {
                $("#node-template-expand-editor").show();
            }
            else {
                $("#node-template-expand-editor").hide();
            }
            var that = this;
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });

            if (typeof this.storeOutMessages === 'undefined') {
                this.storeOutMessages = true;
                $('#node-input-storeOutMessages').prop('checked', true);
            }

            if (typeof this.fwdInMessages === 'undefined') {
                this.fwdInMessages = true;
                $('#node-input-fwdInMessages').prop('checked', true);
            }

            if (typeof this.templateScope === 'undefined') {
                this.templateScope = 'local';
                $('#node-input-templateScope').val(this.templateScope);
            }

            $('#node-input-templateScope').on('change', function() {
                if ($('#node-input-templateScope').val() === 'global') {
                    $('#template-row-group, #template-row-size, #template-pass-store, #template-row-class').hide();
                    that._def.defaults.group.required = false;
                }
                else {
                    $('#template-row-group, #template-row-size, #template-pass-store, #template-row-class').show();
                    that._def.defaults.group.required = true;
                }

                var rows = $("#dialog-form>div:not(.node-text-editor-row)");
                var height = $("#dialog-form").height();
                for (var i=0; i<rows.size(); i++) {
                    height = height - $(rows[i]).outerHeight(true);
                }
                if ($('#node-input-templateScope').val() === "global") { height += 240; }
                var editorRow = $("#dialog-form>div.node-text-editor-row");
                height -= (parseInt(editorRow.css("marginTop")) + parseInt(editorRow.css("marginBottom")));
                $(".node-text-editor").css("height",height+"px");
                if (this.editor) { this.editor.resize(); }
            })

            this.editor = RED.editor.createEditor({
                id: 'node-input-format-editor',
                mode: 'ace/mode/html',
                value: $("#node-input-format").val()
            });

            RED.library.create({
                url:"uitemplates", // where to get the data from
                type:"ui_template", // the type of object the library is for
                editor:this.editor, // the field name the main text body goes to
                mode:"ace/mode/html",
                fields:['name']
            });

            this.editor.focus();

            RED.popover.tooltip($("#node-template-expand-editor"),c_("label.expand"));

            $("#node-template-expand-editor").on("click", function(e) {
                e.preventDefault();
                var value = that.editor.getValue();
                RED.editor.editText({
                    mode: 'html',
                    value: value,
                    width: "Infinity",
                    cursor: that.editor.getCursorPosition(),
                    complete: function(v,cursor) {
                        that.editor.setValue(v, -1);
                        that.editor.gotoLine(cursor.row+1,cursor.column,false);
                        setTimeout(function() { that.editor.focus(); },300);
                    }
                })
            })
        },
        oneditsave: function() {
            var annot = this.editor.getSession().getAnnotations();
            this.noerr = 0;
            $("#node-input-noerr").val(0);
            for (var k=0; k < annot.length; k++) {
                if (annot[k].type === "error") {
                    $("#node-input-noerr").val(annot.length);
                    this.noerr = annot.length;
                }
            }
            $("#node-input-format").val(this.editor.getValue());
            this.editor.destroy();
            delete this.editor;
        },
        oneditcancel: function() {
            this.editor.destroy();
            delete this.editor;
        },
        oneditresize: function(size) {
            var rows = $("#dialog-form>div:not(.node-text-editor-row)");
            var height = $("#dialog-form").height();
            for (var i=0; i<rows.size(); i++) {
                height = height - $(rows[i]).outerHeight(true);
            }
            if ($('#node-input-templateScope').val() === "global") { height += 232; }
            var editorRow = $("#dialog-form>div.node-text-editor-row");
            height -= (parseInt(editorRow.css("marginTop")) + parseInt(editorRow.css("marginBottom")));
            $(".node-text-editor").css("height",height+"px");
            this.editor.resize();
        }
    });
</script>

<script type="text/html" data-template-name="ui_template">
    <div class="form-row">
        <label for="node-input-format"><span data-i18n="ui_template.label.type"></span></label>
        <select style="width:76%" id="node-input-templateScope">
            <option value="local" data-i18n="ui_template.label.local"></option>
            <option value="global" data-i18n="ui_template.label.global"></option>
        </select>
    </div>
	<div class="form-row" id="template-row-group">
        <label for="node-input-group"><i class="fa fa-table"></i> <span data-i18n="ui_template.label.group"></span></label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row" id="template-row-size">
        <label><i class="fa fa-object-group"></i> <span data-i18n="ui_template.label.size"></span></label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row" id="template-row-class">
        <label for="node-input-className"><i class="fa fa-code"></i>  <span data-i18n="ui_template.label.className"></label>
        <input type="text" id="node-input-className" data-i18n="[placeholder]ui_template.label.classNamePlaceholder"/>
    </div>
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="node-red:common.label.name"></span></label>
        <div style="display:inline-block; width:calc(100% - 105px)">
            <input type="text" id="node-input-name" data-i18n="[placeholder]node-red:common.label.name">
        </div>
    </div>
    <div class="form-row" style="margin-bottom:0px;">
        <label for="node-input-format"><i class="fa fa-copy"></i> <span data-i18n="ui_template.label.template"></span></label>
        <input type="hidden" id="node-input-format">
        <button id="node-template-expand-editor" class="red-ui-button red-ui-button-small" style="float:right"><i class="fa fa-expand"></i></button>
    </div>
    <div class="form-row node-text-editor-row">
        <div style="height:250px; min-height:100px" class="node-text-editor" id="node-input-format-editor" ></div>
    </div>
    <div id="template-pass-store">
        <div class="form-row" style="margin-bottom:0px;">
            <input type="checkbox" id="node-input-fwdInMessages" style="display:inline-block; margin-left:8px; width:auto; vertical-align:top;">
            <label for="node-input-fwdInMessages" style="width:70%;"> <span data-i18n="ui_template.label.pass-through"></span></label>
        </div>
        <div class="form-row" style="margin-bottom:0px;">
            <input type="checkbox" id="node-input-storeOutMessages" style="display:inline-block; margin-left:8px; width:auto; vertical-align:top;">
            <label for="node-input-storeOutMessages" style="width:70%;"> <span data-i18n="ui_template.label.store-state"></span></label>
        </div>
        <div class="form-row" style="margin-bottom:0px;">
            <input type="checkbox" id="node-input-resendOnRefresh" style="display:inline-block; margin-left:8px; width:auto; vertical-align:top;">
            <label for="node-input-resendOnRefresh" style="width:70%;"> <span data-i18n="ui_template.label.resend"></span></label>
        </div>
    </div>
</script>
<script type="text/html" data-help-name="ui_template">
    <p>The template widget can contain any valid html and Angular/Angular-Material directives.</p>
    <p>This node can be used to create a dynamic user interface element that changes its appearance
    based on the input message and can send back messages to Node-RED.</p>
    <p><b>For example:</b><br>
    <pre style="font-size:smaller;">&lt;div layout=&quot;row&quot; layout-align=&quot;space-between&quot;&gt;
  &lt;p&gt;The number is&lt;/p&gt;
  &lt;font color=&quot;{{((msg.payload || 0) % 2 === 0) ? 'green' : 'red'}}&quot;&gt;
    {{(msg.payload || 0) % 2 === 0 ? 'even' : 'odd'}}
  &lt;/font&gt;
&lt;/div&gt;</pre>
    Will display if the number received as <code>msg.payload</code> is even or odd. It will also
    change the color of the text to green if the number is even or red if odd.<br/>
    The next example shows how to set a unique id for your template, pick up the default theme colour,
    and watch for any incoming message.</p>
    <pre style="font-size:smaller;">
&lt;div id="{{'my_'+$id}}" style="{{'color:'+theme.base_color}}"&gt;Some text&lt;/div&gt;
&lt;script&gt;
(function(scope) {
  scope.$watch('msg', function(msg) {
    if (msg) {
      // Do something when msg arrives
      $("#my_"+scope.$id).html(msg.payload);
    }
  });
})(scope);
&lt;/script&gt;</pre>
    <p>Templates made in this way can be copied and remain independent of each other.</p>
    <p><b>Sending a message:</b><br>
    <pre style="font-size:smaller;">
&lt;script&gt;
var value = "hello world";
// or overwrite value in your callback function ...
this.scope.action = function() { return value; }
&lt;/script&gt;
&lt;md-button ng-click=&quot;send({payload:action()})&quot;&gt;
    Click me to send a hello world
&lt;/md-button&gt;</pre>
    Will display a button that when clicked will send a message with the payload <code>'Hello world'</code>.</p>
    <p><b>Using <code>msg.template</code>:</b><br>
    You can also define the template content via <code>msg.template</code>, so you can use external files for example.<br>
    Template will be reloaded on input if it has changed.<br>
    Code written in the Template field will be ignored when <code>msg.template</code> is present.</p>
    <p>The following icon fonts are available: <a href="https://klarsys.github.io/angular-material-icons/" target="_blank">Material Design icon</a>
    <i>(e.g. 'check', 'close')</i> or a <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank">Font Awesome icon</a>
    <i>(e.g. 'fa-fire')</i>, or a <a href="https://github.com/Paul-Reed/weather-icons-lite/blob/master/css_mappings.md">Weather icon</a>.
    You can use the full set of Google material icons if you add 'mi-' to the icon name. e.g. 'mi-videogame_asset'.</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_link] --- -->
<script type="text/javascript">
    RED.nodes.registerType('ui_link',{
        category: 'config',
        color: 'rgb( 63, 173, 181)',
        defaults: {
            name: {value: 'Google'},
            link: {value: 'https://www.google.com'},
            icon: {value: 'open_in_browser'},
            target: {value: 'newtab', validate :function() { return true; }},
            order: {value: 0},
            className: {value: ''}
        },
        inputs:0,
        outputs:0,
        hasUsers: false,
        align: "right",
        icon: "ui_link.png",
        paletteLabel: 'link',
        label: function() { return this.name || 'link'; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            document.getElementById('node-config-input-target-opentab').checked = (this.target === 'newtab');
            document.getElementById('node-config-input-target-openiframe').checked = (this.target === 'iframe');
            document.getElementById('node-config-input-target-openthis').checked = (this.target === 'thistab');
        },
        oneditsave : function () {
            var t = 'iframe';
            if (document.getElementById('node-config-input-target-opentab').checked) { t = 'newtab'; }
            if (document.getElementById('node-config-input-target-openthis').checked) { t = 'thistab'; }
            this.target = t;
        },
        onadd: function() {
            //console.log("PING");
        }
    });
</script>

<script type="text/html" data-template-name="ui_link">
    <div class="form-row">
        <label for="node-config-input-name"><i class="fa fa-tag"></i> <span data-i18n="ui_link.label.name"></span></label>
        <input type="text" id="node-config-input-name">
    </div>
    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  <span data-i18n="ui_link.label.className"></label>
        <input type="text" id="node-input-className" data-i18n="[placeholder]ui_link.label.classNamePlaceholder"/>
    </div>
    <div class="form-row">
        <label for="node-config-input-link"><i class="fa fa-link"></i> <span data-i18n="ui_link.label.link"></span></label>
        <input type="text" id="node-config-input-link">
    </div>
    <div class="form-row">
        <label for="node-config-input-icon"><i class="fa fa-image"></i> <span data-i18n="ui_link.label.icon"></span></label>
        <input type="text" id="node-config-input-icon">
    </div>
    <div class="form-row">
        <label><i class="fa fa-link"></i> <span data-i18n="ui_link.label.open-in"></span></label>
        <input type="radio" id="node-config-input-target-opentab" name="open-link-method" style="width:20px; margin-top:0px; margin-bottom:5px" checked>
        <label for="node-config-input-target-opentab" data-i18n="ui_link.label.new-tab"></label><br/>
        <input type="radio" id="node-config-input-target-openthis" name="open-link-method" style="width:20px; margin-left:104px; margin-top:0px; margin-bottom:5px">
        <label for="node-config-input-target-openthis" data-i18n="ui_link.label.this-tab"></label><br/>
        <input type="radio" id="node-config-input-target-openiframe" name="open-link-method" style="width:20px; margin-left:104px; margin-top:0px; margin-bottom:5px">
        <label for="node-config-input-target-openiframe" data-i18n="ui_link.label.iframe"></label>
    </div>
    <div class="form-tips" data-i18n="[html]ui_link.tip"></div>
</script>
<script type="text/html" data-help-name="ui_link">
    <p>The <b>Icon</b> can be defined, as either a <a href="https://klarsys.github.io/angular-material-icons/" target="_blank">Material Design icon</a>
    <i>(e.g. 'check', 'close')</i> or a <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank">Font Awesome icon</a>
    <i>(e.g. 'fa-fire')</i>, or a <a href="https://github.com/Paul-Reed/weather-icons-lite/blob/master/css_mappings.md">Weather icon</a>.
    You can use the full set of google material icons if you add 'mi-' to the icon name. e.g. 'mi-videogame_asset'.</p>
    <p>The <b>Open in</b> field controls whether the link opens in a <i>New Tab</i>, or if the link is opened within an <i>iframe</i> on the same page. Some sites, including Google, do not allow the rendering of their page inside an iframe. If you select the <i>iframe</i> option and the site does not show, this is simply because that site forbids the use of it inside an iframe.</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_tab] --- -->
<script type="text/javascript">
    // convert to i18 text
    function c_ui_tab(x) {
        return RED._("node-red-dashboard/ui_tab:ui_tab."+x);
    }

    RED.nodes.registerType('ui_tab',{
        category: 'config',
        defaults: {
            name: {value: c_ui_tab("label.home")},
            icon: {value: 'dashboard'},
            order: {value: 0},
            disabled: {value: false},
            hidden: {value: false}
        },
        paletteLabel: 'dashboard tab',
        label: function() { return this.name || c_ui_tab("label.tab"); },
        sort: function(A,B) {
            return A.order - B.order;
        },
        oneditprepare: function() {
            $("#node-config-input-disabled-btn").on("click", function(e) {
                var i = $(this).find("i");
                var active = i.hasClass("fa-toggle-on");
                var newCls = "fa fa-toggle-" + (active ? "off" : "on");
                i.attr("class", newCls);
                $("#node-config-input-disabled").prop('checked',active);

                var newTxt = c_ui_tab(active ? "label.disabled" : "label.enabled");
                $("#node-config-input-disabled-label").text(newTxt);

                var info = $("#node-config-input-disabled-info");
                var done = active ? info.show() : info.hide();
            });
            if (this.disabled) {
                $("#node-config-input-disabled-btn").click();
            }
            else {
                $("#node-config-input-disabled-label").text(c_ui_tab("label.enabled"));
            }

            $("#node-config-input-hidden-btn").on("click", function(e) {
                var i = $(this).find("i");
                var active = i.hasClass("fa-toggle-on");
                var newCls = "fa fa-toggle-" + (active ? "off" : "on");
                i.attr("class", newCls);
                $("#node-config-input-hidden").prop('checked',active);

                var newTxt = c_ui_tab(active ? "label.hidden" : "label.visible");
                $("#node-config-input-hidden-label").text(newTxt);

                var info = $("#node-config-input-hidden-info");
                var done = active ? info.show() : info.hide();
            });
            if (this.hidden) {
                $("#node-config-input-hidden-btn").click();
            }
            else {
                $("#node-config-input-hidden-label").text(c_ui_tab("label.visible"));
            }
        },
        oneditsave: function() {
            this.disabled = $("#node-config-input-disabled").prop("checked");
            this.hidden = $("#node-config-input-hidden").prop("checked");
        }
    });
</script>

<script type="text/html" data-template-name="ui_tab">
    <div class="form-row">
        <label for="node-config-input-name"><i class="fa fa-tag"></i> <span data-i18n="ui_tab.label.name"></span></label>
        <input type="text" id="node-config-input-name">
    </div>
    <div class="form-row">
        <label for="node-config-input-icon"><i class="fa fa-file-image-o"></i> <span data-i18n="ui_tab.label.icon"></span></label>
        <input type="text" id="node-config-input-icon">
    </div>
    <div class="form-row">
        <label for="node-config-input-disabled-btn"><i class="fa fa-ban"></i> <span data-i18n="ui_tab.label.state"></span></label>
        <button id="node-config-input-disabled-btn" class="editor-button" style="width:100px; margin-right:6px;"><i class="fa fa-toggle-on"></i> <span id="node-config-input-disabled-label"></span></button>
        <input type="checkbox" id="node-config-input-disabled" style="display:none;"/>
        <span id="node-config-input-disabled-info" data-i18n="[html]ui_tab.info.disabled" style="display:none;"></span>
    </div>
    <div class="form-row">
        <label for="node-config-input-hidden-btn"><i class="fa fa-eye-slash"></i> <span data-i18n="ui_tab.label.navmenu"></span></label>
        <button id="node-config-input-hidden-btn" class="editor-button" style="width:100px; margin-right:6px;"><i class="fa fa-toggle-on"></i> <span id="node-config-input-hidden-label"></span></button>
        <input type="checkbox" id="node-config-input-hidden" style="display:none;"/>
        <span id="node-config-input-hidden-info" data-i18n="[html]ui_tab.info.hidden" style="display:none;"></span>
    </div>
    <div class="form-tips" data-i18n="[html]ui_tab.tip"></div>
</script>
<script type="text/html" data-help-name="ui_tab">
    <p>Tab configuration for Dashboard</p>
    <p><b>Disabled</b> pages are not included in the Dashboard app, and are therefore not functional.
       The tab name still appears in the Navigation Menu (unless it is also hidden).
    </p>
    <p><b>Hidden</b> pages are not listed in the Left-hand Navigation Menu.
       However, they are still active in the Dashboard, and can be shown by using a `ui_control` msg.
    </p>
    <p>The <b>Icon</b> field can be either a <a href="https://klarsys.github.io/angular-material-icons/" target="_blank">Material Design icon</a>
    <i>(e.g. 'check', 'close')</i> or a <a href="https://fontawesome.com/v4.7.0/icons/" target="_blank">Font Awesome icon</a>
    <i>(e.g. 'fa-fire')</i>, or a <a href="https://github.com/Paul-Reed/weather-icons-lite/blob/master/css_mappings.md">Weather icon</a>.
    You can use the full set of google material icons if you add 'mi-' to the icon name. e.g. 'mi-videogame_asset'.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_group] --- -->
<script type="text/javascript">
    // convert to i18 text
    function c_ui_group(x) {
        return RED._("node-red-dashboard/ui_group:ui_group."+x);
    }

    RED.nodes.registerType('ui_group',{
        category: 'config',
        defaults: {
            name: {value: c_ui_group("label.default")},
            tab: {type:"ui_tab", required: true },
            order: {value: 0},
            disp: {value: true},
            width: {value: 6},
            collapse: {value: false},
            disabled: {value: false},
            hidden: {value: false},
            className: {value: ''},
        },
        sort: function(A,B) {
            if (A.tab !== B.tab) {
                var tabA = RED.nodes.node(A.tab);
                var tabB = RED.nodes.node(B.tab);
                if (!tabA && tabB) {
                    return -1;
                }
                else if (tabA && !tabB) {
                    return 1;
                }
                else {
                    return tabA.order - tabB.order;
                }
            }
            return A.order - B.order;
        },
        paletteLabel: 'dashboard group',
        label: function() {
            var tabNode = RED.nodes.node(this.tab);
            if (tabNode) {
                return "["+(tabNode.name||c_ui_group("label.tab"))+"] " + (this.name || c_ui_group("label.group"));
            }
            return "["+c_ui_group("label.unassigned")+"] " + (this.name || c_ui_group("label.group"));
        },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            $("#node-input-size").elementSizer({
                width: "#node-config-input-width",
                auto: false
            });
            $("#node-config-input-disp").on("change", function() {
                if ($("#node-config-input-disp").is(":checked")) {
                    $("#group-collapse-flag").show();
                }
                else {
                    $("#group-collapse-flag").hide();
                    $("#node-config-input-collapse").prop("checked",false);
                }
            });
        }
    });
</script>

<script type="text/html" data-template-name="ui_group">
    <div class="form-row">
        <label for="node-config-input-name"><i class="fa fa-tag"></i> <span data-i18n="ui_group.label.name"></span></label>
        <input type="text" id="node-config-input-name">
    </div>
    <div class="form-row">
        <label for="node-config-input-tab"><i class="fa fa-table"></i> <span data-i18n="ui_group.label.tab"></span></label>
        <input type="text" id="node-config-input-tab">
    </div>
    <div class="form-row">
        <label for="node-config-input-className"><i class="fa fa-code"></i>  <span data-i18n="ui_group.label.className"></label>
        <input type="text" id="node-config-input-className" data-i18n="[placeholder]ui_group.label.classNamePlaceholder"/>
    </div>
    <div class="form-row">
        <label for="node-config-input-width"><i class="fa fa-arrows-h"></i> <span data-i18n="ui_group.label.width"></span></label>
        <input type="hidden" id="node-config-input-width">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <input style="margin:8px 0 10px 102px; width:20px;" type="checkbox" checked id="node-config-input-disp"> <label style="width:auto" for="node-config-input-disp"><span data-i18n="ui_group.display-name"></span></label>
    </div>
    <div class="form-row" id="group-collapse-flag">
        <input style="margin:8px 0 10px 102px; width:20px;" type="checkbox" id="node-config-input-collapse"> <label style="width:auto" for="node-config-input-collapse"><span data-i18n="ui_group.collapse-name"></span></label>
    </div>
</script>
<script type="text/html" data-help-name="ui_group">
    <p>Group</p>
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-dashboard/ui_spacer] --- -->
<script type="text/javascript">
    RED.nodes.registerType('ui_spacer', {
        category: 'config',
        color: '#D4F0F8',
        defaults: {
            name: {value: "spacer"},
            group: {type: 'ui_group', required:true},
            order: {value: 0},
            width: {value: 0, validate: function(v) {
                    var width = v||0;
                    var currentGroup = $('#node-input-group').val()||this.group;
                    var groupNode = RED.nodes.node(currentGroup);
                    var valid = !groupNode || +width <= +groupNode.width;
                    $("#node-input-size").toggleClass("input-error",!valid);
                    return valid;
                }
            },
            height: {value: 0},
            className: {value: ''}
        },
        z: RED.workspaces.active(),
        inputs:0,
        outputs:0,
        hasUsers: false,
        icon: "ui_spacer.png",
        paletteLabel: 'spacer',
        label: function() { return this.name + " " + this.width + "x" + this.height; },
        labelStyle: function() { return this.name?"node_label_italic":""; },
        oneditprepare: function() {
            $("#node-input-size").elementSizer({
                width: "#node-input-width",
                height: "#node-input-height",
                group: "#node-input-group"
            });
        },
        oneditsave: function() {
            this.width = $("#node-input-width").val();
            this.height = $("#node-input-height").val();
        }
    });
</script>

<script type="text/html" data-template-name="ui_spacer">
    <div class="form-row">
        <label for="node-input-group"><i class="fa fa-table"></i> Group</label>
        <input type="text" id="node-input-group">
    </div>
    <div class="form-row">
        <label><i class="fa fa-object-group"></i> Size</label>
        <input type="hidden" id="node-input-width">
        <input type="hidden" id="node-input-height">
        <button class="editor-button" id="node-input-size"></button>
    </div>
    <div class="form-row">
        <label for="node-input-className"><i class="fa fa-code"></i>  Class</label>
        <input type="text" id="node-input-className" placeholder="Optional CSS class name(s) for widget"/>
    </div>
</script>
<script type="text/html" data-help-name="ui_spacer">
    <p>If a <b>Class</b> is specified, it will be added to the parent card. This way you can style the card and the elements inside it with custom CSS. The Class can be set at runtime by setting a <code>msg.className</code> string property.</p>
</script>

<!-- --- [red-module:node-red-node-data-generator/data-generator] --- -->

<script type="text/html" data-template-name="data-generator">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="node-red:common.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]node-red:common.label.name">
    </div>
    <div class="form-row">
        <label for="node-input-field"><i class="fa fa-edit"></i> <span data-i18n="node-red:template.label.property"></span></label>
        <input type="text" id="node-input-field" placeholder="payload" style="width:275px;">
        <input type="hidden" id="node-input-fieldType">
    </div>
    <div class="form-row" style="position: relative; margin-bottom: 0px;">
        <label for="node-input-template"><i class="fa fa-file-code-o"></i> <span data-i18n="node-red:template.label.template"></span></label>
        <input type="hidden" id="node-input-template" autofocus="autofocus">
    </div>
    <div class="form-row node-text-editor-row">
        <div style="height:250px;" class="node-text-editor" id="node-input-template-editor"></div>
    </div>
    <div class="form-row">
        <label for="node-input-syntax"><i class="fa fa-code"></i> <span data-i18n="datagen.label.syntax"></span></label>
        <select id="node-input-syntax" style="width:180px;">
            <option value="text" data-i18n="datagen.label.text"></option>
            <option value="json" data-i18n="datagen.label.json"></option>
        </select>
    </div>
</script>

<script type="text/javascript">
    RED.nodes.registerType('data-generator',{
        color:"rgb(243, 181, 103)",
        category: 'function',
        defaults: {
            name: {value:""},
            field: {value:"payload"},
            fieldType: {value:"msg"},
            syntax: {value:"text"},
            template: {value:"{\n    \"name\": \"{{firstName}} {{lastName}}\",\n    \"work\": \"{{company}}\",\n    \"email\": \"{{email}}\",\n    \"address\": \"{{int 1 100}} {{street}}\",\n    \"country\": \"{{country}}\"\n}"}
        },
        inputs:1,
        outputs:1,
        icon: "template.png",
        paletteLabel: function() {
            return this._("datagen.datagen");
        },
        label: function() {
            return this.name || "data generator";
        },
        outputLabels: function() { return this.syntax === "json" ? "object" : "string"; },
        oneditprepare: function() {
            var that = this;
            if (!this.fieldType) {
                this.fieldType = 'msg';
            }
            $("#node-input-field").typedInput({
                default: 'msg',
                types: ['msg','flow','global'],
                typeField: $("#node-input-fieldType")
            });

            this.editor = RED.editor.createEditor({
                id: 'node-input-template-editor',
                mode: 'ace/mode/handlebars',
                value: $("#node-input-template").val()
            });
            RED.library.create({
                url:"functions", // where to get the data from
                type:"function", // the type of object the library is for
                editor:that.editor, // the field name the main text body goes to
                fields:['name','outputs']
            });
            this.editor.focus();
        },
        oneditsave: function() {
            $("#node-input-template").val(this.editor.getValue());
            this.editor.destroy();
            delete this.editor;
        },
        oneditcancel: function() {
            this.editor.destroy();
            delete this.editor;
        },
        oneditresize: function(size) {
            var rows = $("#dialog-form>div:not(.node-text-editor-row)");
            var height = $("#dialog-form").height();
            for (var i=0; i<rows.size(); i++) {
                height -= $(rows[i]).outerHeight(true);
            }
            var editorRow = $("#dialog-form>div.node-text-editor-row");
            height -= (parseInt(editorRow.css("marginTop"))+parseInt(editorRow.css("marginBottom")));
            $("#dialog-form .node-text-editor").css("height",height+"px");
            this.editor.resize();
        }
    });
</script>

<script type="text/html" data-help-name="data-generator">
    <p>Creates dummy data strings based on a handlebars-style template.</p>
    <p>Uses the <i><a href="https://github.com/webroo/dummy-json/blob/master/README.md" target="_new">dummy-json</a></i>
    module, which can create rich sets of dummy data for testing or other uses.</p>
    <p>Will build a string or a parsed JSON object, creating values based on the helper names below:
    <pre style="word-break:normal">title, firstName, lastName, company, domain, tld, email, street, city, country, countryCode, zipcode, postcode, lat, long, phone, color, hexColor, guid, ipv4, ipv6, lorem [nn], date, time, lowercase, uppercase, int, float, boolean</pre>
    <p>Multiple values can be generated by use of the <i>repeat</i> syntax.</p>
    <p>In addition any properties passed in on <code>msg</code> can also be used - for example <code>{{payload}}</code>.</p>
    <p>Finally <code>msg.seed</code> can be used to preset the pseudo-random seed to ensure repeatability across calls.</p>
</script>
